//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

//Функции:
//DriverInit, DriverDeinit, DriverConnect, DriverDisconnect, CertificatesList, CheckCertificate, SetCertificate, SignMessage, VerifySignature, EncryptData, DecryptData, CreateHash, GetCertificatePrint

Function DriverInit(спНастройки)
  Try
    аВрем:=CreateOLE("CAdESCOM.Store");
    аВрем:=CreateOLE("CAdESCOM.CPSigner");
    аВрем:=CreateOLE("CAdESCOM.CPLicense");
    Стр:=аВрем.ValidTo;
    аДата:=Date(TearStr(Стр," "));
    If _And(not IsEmpty(аДата),аДата<=BegOfDay(Date())) Then
      Exit "Лицензия на КриптоПро закончилась! Обновите лицензию!";
    EndIf;
  Except
    Exit PopError()+_NEWLINE+"(1) Драйвер CADESCOM не установлен или в нерабочем состоянии!";
  EndTry;
EndFunction

Function DriverDeinit(спНастройки)
EndFunction

Function DriverConnect(спНастройки)
  спНастройки["ТекСертификат"]:=0;
EndFunction

Function DriverDisconnect(спНастройки)
  спНастройки["ТекСертификат"]:=0;
EndFunction

//Отдает в спНастройки["Сертификаты"] таблицу: "ИмяСертификата,Идентификатор,ДатаНачала,ДатаОкончания,Рабочий"
//Также может отдать пустое значение, если произошла ошибка
Function CertificatesList(спНастройки)
  Try
    спНастройки["Сертификаты"]:=GetNothing();
    Таб:=Tab.Create("ИмяСертификата,Идентификатор,ДатаНачала,ДатаОкончания,Рабочий");
    аХранилище:=CreateOLE("CAdESCOM.Store");  
    //https://docs.microsoft.com/en-us/windows/win32/seccrypto/store-open
    //2 -- Личное хранилище
    аХранилище.Open(2,"My",0);
    For i:=1 To аХранилище.Certificates.Count() Do
      аСерт:=аХранилище.Certificates.Item(i);
      Таб.AddLine("ИмяСертификата,Идентификатор,ДатаНачала,ДатаОкончания,Рабочий",Trim(аСерт.SubjectName),Trim(аСерт.Thumbprint),Date(аСерт.ValidFromDate),Date(аСерт.ValidToDate),аСерт.IsValid.Result);
    EndDo;
    спНастройки["Сертификаты"]:=Таб;
  Except
    Exit "Ошибка выполнения команды: "+PopError();
  EndTry;
EndFunction

//спНастройки["Идентификатор"] -- идентификатор сертификата для подготовки, если пустой, проверить уже найденный ранее сертификат
//спНастройки["Найден"] -- 0 или 1, также заполняются поля "ИмяСертификата","ДатаНачала","ДатаОкончания","Рабочий"
Function CheckCertificate(спНастройки)
  Try
    Идентификатор:=спНастройки["Идентификатор"];
    спНастройки["Найден"]:=0;
    If not IsEmpty(Идентификатор) Then
      аХранилище:=CreateOLE("CAdESCOM.Store");  
      аХранилище.Open(2,"My",0);
      аСертификат:=0;
      For i:=1 To аХранилище.Certificates.Count() Do
        аСерт:=аХранилище.Certificates.Item(i);
        If аСерт.Thumbprint=Идентификатор Then
          аСертификат:=аСерт;
          Break;
        EndIf;
      EndDo;
    Else
      аСертификат:=спНастройки["ТекСертификат"];
    EndIf;
    If IsEmpty(аСертификат) Then
      Exit;//Не найден
    EndIf;
    
    спНастройки["Найден"]:=1;
    спНастройки["ИмяСертификата"]:=Trim(аСерт.SubjectName);
    спНастройки["ДатаНачала"]:=Date(аСерт.ValidFromDate);
    спНастройки["ДатаОкончания"]:=Date(аСерт.ValidToDate);
    спНастройки["Рабочий"]:=аСерт.IsValid.Result;
  Except
    Exit "Ошибка выполнения команды: "+PopError();
  EndTry;
EndFunction

//спНастройки["Идентификатор"] -- идентификатор сертификата
Function SetCertificate(спНастройки)
  Try
    спНастройки["ТекСертификат"]:=0;
    Идентификатор:=спНастройки["Идентификатор"];
    аХранилище:=CreateOLE("CAdESCOM.Store");  
    аХранилище.Open(2,"My",0);
    For i:=1 To аХранилище.Certificates.Count() Do
      аСерт:=аХранилище.Certificates.Item(i);
      If аСерт.Thumbprint=Идентификатор Then
        спНастройки["ТекСертификат"]:=аСерт;
        Exit;
      EndIf;
    EndDo;
    Exit "Заданный сертификат не найден!";
  Except
    Exit "Ошибка выполнения команды: "+PopError();
  EndTry;
EndFunction;


//спНастройки["Сообщение"] -- бинарное сообщение в виде строки base64 -- возвращает подписанное сообщение также в base64, либо просто подпись без сообщения, если последняя открепленная
//спНастройки["ОткрепленнаяПодпись"] -- по умолчанию 0
//спНастройки["ТекСертификат"] -- сертификат (должен быть выбран)
//спНастройки["ПарольСертификата"] -- по умолчанию нет
//спНастройки["ПодписатьХешСообщения"] -- 0 -- подписывает само сообщение, 1 -- создает подпись хэша сообщения
//спНастройки["АлгоритмХешСообщения"] -- Алгоритм (см. CreateHash), заполняется, если "ПодписатьХешСообщения"=1
Function SignMessage(спНастройки)
  Try
    If IsEmpty(спНастройки["ТекСертификат"]) Then
      Exit "Сертификат для подписи не выбран или не найден!";
    EndIf;
    
    аСертификат:=спНастройки["ТекСертификат"];
    аКрипто:=CreateOLE("CAdESCOM.CPSigner");  
    //Иногда это функция, иногда это свойство
    Try
      аКрипто.Certificate(аСертификат);
    Except
      аКрипто.Certificate:=аСертификат;
    EndTry;
    If not IsEmpty(спНастройки["ПарольСертификата"]) Then
      Try
        аКрипто.KeyPin:=спНастройки["ПарольСертификата"];
      Except
      EndTry;  
    EndIf;
    аКриптоАтрибут:=CreateOLE("CAdESCOM.CPAttribute");
    аКриптоАтрибут.Name:=0;//Дата и время подписания
    аКриптоАтрибут.Value:=Date();
  
    аКрипто.AuthenticatedAttributes2.Add(аКриптоАтрибут);
    аКриптоДанные:=CreateOLE("CAdESCOM.CadesSignedData");
    аКриптоДанные.ContentEncoding:=1;//Текст в BASE64
    
    //Типы подписей:
    //CADESCOM_CADES_DEFAULT = 0 (CADESCOM_CADES_X_LONG_TYPE_1)
    //CADESCOM_CADES_BES = 1
    //CADESCOM_CADES_T = 5
    //CADESCOM_CADES_X_LONG_TYPE_1 = $5D
    //CADESCOM_PKCS7_TYPE = $FFFF
    ТипПодписи:=1;
    
    //EncodingType: Кодировка возвращаемой подписи (0 - BASE64)
    ТипКодировки:=0;
    
    If спНастройки["ПодписатьХешСообщения"]=1 Then
      //Создаем Хеш-объект
      СпАлгоритмы:=List.Create(0,3,4,5,6,100,110,101,111,102,112);
      aNum:=Number(спНастройки["АлгоритмХешСообщения"])+1;
      If (aNum<1)or(aNum>СпАлгоритмы.Size()) Then
        Raise "Неподдерживаемый алгоритм хеш "+(aNum-1);
      EndIf;
      аХеш:=CreateOLE("CAdESCOM.HashedData");
      аХеш.Algorithm:=СпАлгоритмы[aNum];
      аХеш.DataEncoding:=1;//CADESCOM_BASE64_TO_BINARY;
      аХеш.Hash(спНастройки["Сообщение"]);
      Результат:=аКриптоДанные.SignHash(аХеш,аКрипто,ТипПодписи,ТипКодировки);
    Else
      аКриптоДанные.Content:=спНастройки["Сообщение"];
      флОткрепленная:=Number(спНастройки["ОткрепленнаяПодпись"])<>0;
      Результат:=аКриптоДанные.SignCades(аКрипто,ТипПодписи,флОткрепленная,ТипКодировки);
    EndIf;
    //Убираем пробелы и переносы строк
    спНастройки["Сообщение"]:=Replace(Replace(Результат,_NEWLINE,"")," ","");
  Except
    Exit "Ошибка выполнения команды: "+PopError();
  EndTry;
EndFunction

//спНастройки["Сообщение"] -- бинарное сообщение в виде строки base64
//спНастройки["Результат"] -- 0 -- подпись некорректная, 1 -- подпись корректная
//спНастройки["ОткрепленнаяПодпись"] -- по умолчанию 0
//спНастройки["Подпись"] -- для открепленных подписей, необходима сама открепленная подпись (не содержащая сообщение)
//спНастройки["ПроверитьХешСообщения"] -- 0 -- проверяет само сообщение, 1 -- проверяет хэш сообщения, спНастройки["Подпись"] необходимо заполнить
//спНастройки["АлгоритмХешСообщения"] -- Алгоритм (см. CreateHash)
Function VerifySignature(спНастройки)
  Try
    спНастройки["Результат"]:=0;
    флОткрепленная:=Number(спНастройки["ОткрепленнаяПодпись"])<>0;
    аКриптоДанные:=CreateOLE("CAdESCOM.CadesSignedData");
    Try
      //Типы подписей:
      //CADESCOM_CADES_DEFAULT = 0 (CADESCOM_CADES_X_LONG_TYPE_1)
      //CADESCOM_CADES_BES = 1
      //CADESCOM_CADES_T = 5
      //CADESCOM_CADES_X_LONG_TYPE_1 = $5D
      //CADESCOM_PKCS7_TYPE = $FFFF
      ТипПодписи:=1;
    
      If спНастройки["ПодписатьХешСообщения"]=1 Then
        //Создаем Хеш-объект
        СпАлгоритмы:=List.Create(0,3,4,5,6,100,110,101,111,102,112);
        aNum:=Number(спНастройки["АлгоритмХешСообщения"])+1;
        If (aNum<1)or(aNum>СпАлгоритмы.Size()) Then
          Raise "Неподдерживаемый алгоритм хеш "+(aNum-1);
        EndIf;
        аХеш:=CreateOLE("CAdESCOM.HashedData");
        аХеш.Algorithm:=СпАлгоритмы[aNum];
        аХеш.DataEncoding:=1;//CADESCOM_BASE64_TO_BINARY;
        аХеш.Hash(спНастройки["Сообщение"]);
        аКриптоДанные.VerifyHash(аХеш,спНастройки["Сообщение"],ТипПодписи);
      ElseIf флОткрепленная Then
        аКриптоДанные.ContentEncoding:=1;//Текст в BASE64
        аКриптоДанные.Content:=спНастройки["Сообщение"];
        аКриптоДанные.VerifyCades(спНастройки["Подпись"],ТипПодписи,1);
      Else
        аКриптоДанные.VerifyCades(спНастройки["Сообщение"],ТипПодписи,0);
      EndIf;
      спНастройки["Результат"]:=1;
    Except
    EndTry;
  Except
    Exit "Ошибка выполнения команды: "+PopError();
  EndTry;
EndFunction

//спНастройки["Сообщение"] -- бинарное сообщение в виде строки base64 -- возвращает закодированное сообщение также в base64
//спНастройки["ТекСертификат"] -- сертификат (должен быть выбран)
Function EncryptData(спНастройки)
  Try
    If IsEmpty(спНастройки["ТекСертификат"]) Then
      Exit "Сертификат для кодирования не выбран или не найден!";
    EndIf;
    
    аСертификат:=спНастройки["ТекСертификат"];
    аКрипто:=CreateOLE("CAdESCOM.CPEnvelopedData");  
    аКрипто.ContentEncoding:=1;//CADESCOM_BASE64_TO_BINARY;
    аКрипто.Content:=спНастройки["Сообщение"];
    //Cades работает только с алгоритмом ГОСТ 28147-89
    //аКрипто.Algorithm:=...
    аКрипто.Recipients.Add(аСертификат);
    //If not IsEmpty(спНастройки["ПарольСертификата"]) Then
    //  //спНастройки["ПарольСертификата"];
    //EndIf;
    
    Результат:=аКрипто.Encrypt();
    //Убираем пробелы и переносы строк
    спНастройки["Сообщение"]:=Replace(Replace(Результат,_NEWLINE,"")," ","");
  Except
    Exit "Ошибка выполнения команды: "+PopError();
  EndTry;
EndFunction

//спНастройки["Сообщение"] -- бинарное сообщение в виде строки base64 -- возвращает раскодированное сообщение также в base64
//Сертификат не требуется, КриптоПро самостоятельно подбирает сертификат для расшифровки из доступных установленных
Function DecryptData(спНастройки)
  Try
    аКрипто:=CreateOLE("CAdESCOM.CPEnvelopedData");  
    аКрипто.ContentEncoding:=1;//CADESCOM_BASE64_TO_BINARY;
    аКрипто.Decrypt(спНастройки["Сообщение"]);
    спНастройки["Сообщение"]:=аКрипто.Content;
  Except
    Exit "Ошибка выполнения команды: "+PopError();
  EndTry;
EndFunction

//спНастройки["Сообщение"] -- бинарное сообщение в виде строки base64 -- возвращает хэш сообщения
//спНастройки["Алгоритм"] -- SHA1 - 0
//                           MD5 - 1
//                           SHA256 - 2
//                           SHA384 - 3
//                           SHA512 - 4
//                           GOST_3411 - 5
//                           GOST_3411_HMAC - 6
//                           GOST_3411_2012_256 - 7 (для подписи обычно используется этот алгоритм)
//                           GOST_3411_2012_256_HMAC - 8
//                           GOST_3411_2012_512 - 9
//                           GOST_3411_2012_512_HMAC - 10
Function CreateHash(спНастройки)
  Try
    аКрипто:=CreateOLE("CAdESCOM.HashedData");
    //CADESCOM_HASH_ALGORITHM_CP_GOST_3411 (Алгоритм ГОСТ Р 34.11-94) 100
    //CADESCOM_HASH_ALGORITHM_CP_GOST_3411_HMAC (Алгоритм ГОСТ Р 34.11-94 HMAC) 110
    //CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256 (Алгоритм ГОСТ Р 34.11-2012) 101 (для подписи обычно используется этот алгоритм)
    //CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256_HMAC (Алгоритм ГОСТ Р 34.11-2012 HMAC) 111
    //CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512 (Алгоритм ГОСТ Р 34.11-2012) 102
    //CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512_HMAC (Алгоритм ГОСТ Р 34.11-2012 HMAC) 112
    //CADESCOM_HASH_ALGORITHM_SHA1 0
    //CADESCOM_HASH_ALGORITHM_MD5 3
    //CADESCOM_HASH_ALGORITHM_SHA_256 4
    //CADESCOM_HASH_ALGORITHM_SHA_384 5
    //CADESCOM_HASH_ALGORITHM_SHA_512 6
    СпАлгоритмы:=List.Create(0,3,4,5,6,100,110,101,111,102,112);
    aNum:=Number(спНастройки["Алгоритм"])+1;
    If (aNum<1)or(aNum>СпАлгоритмы.Size()) Then
      Raise "Неподдерживаемый алгоритм "+(aNum-1);
    EndIf;
    аКрипто.Algorithm:=СпАлгоритмы[aNum];
    аКрипто.DataEncoding:=1;//CADESCOM_BASE64_TO_BINARY;
    аКрипто.Hash(спНастройки["Сообщение"]);
    Стр:=Uppercase(аКрипто.Value);//Возвращается в HEX, а не base64
    Стр2:="";
    i:=0;
    While i<Length(Стр) Do
      AppendStringToBufferedString(Стр2,Chr(BaseToDec(Mid(Стр,i+1,2),16),1));
      i:=i+2;
    EndDo;
    спНастройки["Сообщение"]:=EncodeString(Стр2,"base64");
  Except
    Exit "Ошибка выполнения команды: "+PopError();
  EndTry;
EndFunction

//спНастройки["ТекСертификат"] -- сертификат (должен быть выбран)
//спНастройки["Отпечаток"] -- отпечаток сертификата MD5 в верхнем регистре
Function GetCertificatePrint(спНастройки)
  Try
    If IsEmpty(спНастройки["ТекСертификат"]) Then
      Exit "Сертификат для подписи не выбран или не найден!";
    EndIf;
    
    аСертификат:=спНастройки["ТекСертификат"];
    спНастройки["Отпечаток"]:=Uppercase(аСертификат.Thumbprint);
  Except
    Exit "Ошибка выполнения команды: "+PopError();
  EndTry;
EndFunction