//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

//Функции:
//DriverInit, DriverDeinit, DriverConnect, DriverDisconnect, CertificatesList, CheckCertificate, SetCertificate, SignMessage

Function DriverInit(спНастройки)
  Try
    аВрем:=CreateOLE("CAdESCOM.Store");
    аВрем:=CreateOLE("CAdESCOM.CPSigner");
    аВрем:=CreateOLE("CAdESCOM.CPLicense");
    Стр:=аВрем.ValidTo;
    аДата:=Date(TearStr(Стр," "));
    If _And(not IsEmpty(аДата),аДата<=BegOfDay(Date())) Then
      Exit "Лицензия на КриптоПро закончилась! Обновите лицензию!";
    EndIf;
  Except
    Exit PopError()+_NEWLINE+"(1) Драйвер CADESCOM не установлен или в нерабочем состоянии!";
  EndTry;
EndFunction

Function DriverDeinit(спНастройки)
EndFunction

Function DriverConnect(спНастройки)
  спНастройки["ТекСертификат"]:=0;
EndFunction

Function DriverDisconnect(спНастройки)
  спНастройки["ТекСертификат"]:=0;
EndFunction

//Отдает в спНастройки["Сертификаты"] таблицу: "ИмяСертификата,Идентификатор,ДатаНачала,ДатаОкончания,Рабочий"
//Также может отдать пустое значение, если произошла ошибка
Function CertificatesList(спНастройки)
  Try
    спНастройки["Сертификаты"]:=GetNothing();
    Таб:=Tab.Create("ИмяСертификата,Идентификатор,ДатаНачала,ДатаОкончания,Рабочий");
    аХранилище:=CreateOLE("CAdESCOM.Store");  
    //https://docs.microsoft.com/en-us/windows/win32/seccrypto/store-open
    //2 -- Личное хранилище
    аХранилище.Open(2,"My",0);
    For i:=1 To аХранилище.Certificates.Count() Do
      аСерт:=аХранилище.Certificates.Item(i);
      Таб.AddLine("ИмяСертификата,Идентификатор,ДатаНачала,ДатаОкончания,Рабочий",Trim(аСерт.SubjectName),Trim(аСерт.Thumbprint),Date(аСерт.ValidFromDate),Date(аСерт.ValidToDate),аСерт.IsValid.Result);
    EndDo;
    спНастройки["Сертификаты"]:=Таб;
  Except
    Exit "Ошибка выполнения команды: "+PopError();
  EndTry;
EndFunction

//спНастройки["Идентификатор"] -- идентификатор сертификата для подготовки, если пустой, проверить уже найденный ранее сертификат
//спНастройки["Найден"] -- 0 или 1, также заполняются поля "ИмяСертификата","ДатаНачала","ДатаОкончания","Рабочий"
Function CheckCertificate(спНастройки)
  Try
    Идентификатор:=спНастройки["Идентификатор"];
    спНастройки["Найден"]:=0;
    If not IsEmpty(Идентификатор) Then
      аХранилище:=CreateOLE("CAdESCOM.Store");  
      аХранилище.Open(2,"My",0);
      аСертификат:=0;
      For i:=1 To аХранилище.Certificates.Count() Do
        аСерт:=аХранилище.Certificates.Item(i);
        If аСерт.Thumbprint=Идентификатор Then
          аСертификат:=аСерт;
          Break;
        EndIf;
      EndDo;
    Else
      аСертификат:=спНастройки["ТекСертификат"];
    EndIf;
    If IsEmpty(аСертификат) Then
      Exit;//Не найден
    EndIf;
    
    спНастройки["Найден"]:=1;
    спНастройки["ИмяСертификата"]:=Trim(аСерт.SubjectName);
    спНастройки["ДатаНачала"]:=Date(аСерт.ValidFromDate);
    спНастройки["ДатаОкончания"]:=Date(аСерт.ValidToDate);
    спНастройки["Рабочий"]:=аСерт.IsValid.Result;
  Except
    Exit "Ошибка выполнения команды: "+PopError();
  EndTry;
EndFunction

//спНастройки["Идентификатор"] -- идентификатор сертификата
Function SetCertificate(спНастройки)
  Try
    спНастройки["ТекСертификат"]:=0;
    Идентификатор:=спНастройки["Идентификатор"];
    аХранилище:=CreateOLE("CAdESCOM.Store");  
    аХранилище.Open(2,"My",0);
    For i:=1 To аХранилище.Certificates.Count() Do
      аСерт:=аХранилище.Certificates.Item(i);
      If аСерт.Thumbprint=Идентификатор Then
        спНастройки["ТекСертификат"]:=аСерт;
        Exit;
      EndIf;
    EndDo;
    Exit "Заданный сертификат не найден!";
  Except
    Exit "Ошибка выполнения команды: "+PopError();
  EndTry;
EndFunction;

//спНастройки["Сообщение"] -- бинарное сообщение в виде строки base64 -- возвращает подписанное сообщение также в base64
//спНастройки["ОткрепленнаяПодпись"] -- по умолчанию 0
//спНастройки["ПарольСертификата"] -- по умолчанию нет
Function SignMessage(спНастройки)
  Try
    If IsEmpty(спНастройки["ТекСертификат"]) Then
      Exit "Сертификат для не выбран или не найден!";
    EndIf;
    
    аСертификат:=спНастройки["ТекСертификат"];
    аКрипто:=CreateOLE("CAdESCOM.CPSigner");  
    //Иногда это функция, иногда это свойство
    Try
      аКрипто.Certificate(аСертификат);
    Except
      аКрипто.Certificate:=аСертификат;
    EndTry;
    If not IsEmpty(спНастройки["ПарольСертификата"]) Then
      Try
        аКрипто.KeyPin:=спНастройки["ПарольСертификата"];
      Except
      EndTry;  
    EndIf;
    аКриптоАтрибут:=CreateOLE("CAdESCOM.CPAttribute");
    аКриптоАтрибут.Name:=0;//Дата и время подписания
    аКриптоАтрибут.Value:=Date();
  
    аКрипто.AuthenticatedAttributes2.Add(аКриптоАтрибут);
    аКриптоДанные:=CreateOLE("CAdESCOM.CadesSignedData");
    аКриптоДанные.ContentEncoding:=1;//Текст в BASE64
    аКриптоДанные.Content:=спНастройки["Сообщение"];
    флОткрепленная:=Number(спНастройки["ОткрепленнаяПодпись"])<>0;
    
    //CadesType: Тип усовершенствованной подписи (1)
    //bDetached: Вид подписи: отделенная (true) или совмещенная (false). По умолчанию совмещенная.
    //EncodingType: Кодировка возвращаемой подписи (0 - BASE64)
    Результат:=аКриптоДанные.SignCades(аКрипто,1,флОткрепленная,0);
    //Убираем пробелы и переносы строк
    спНастройки["Сообщение"]:=Replace(Replace(Результат,_NEWLINE,"")," ","");
  Except
    Exit "Ошибка выполнения команды: "+PopError();
  EndTry;
EndFunction
