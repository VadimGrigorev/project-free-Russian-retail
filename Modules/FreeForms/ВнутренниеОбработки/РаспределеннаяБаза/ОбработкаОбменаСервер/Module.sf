//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var ConnObj Export;
Var КлИБ Export;
Var Этап Export;//0 -- начало обмена, принимается доп. информация
                //1 -- этап принятия документов (передача клиента самостоятельно с подтверждением сервера)
                //2 -- этап отправки запроса справочников (запрос сервера)
                //3 -- этап принятия справочников (ответ на запрос сервера)
                //4 -- этап принятие справочников (передача клиента самостоятельно с подтверждением сервера)
Var спДопПараметры Export;
Var СпНЭГр Export;
Var грБз Export;
Var СпДатыРеквизитовБаз Export;

//Используемые специальные символы:
//              #  -- разделяет виды от дат и номеров в документах, указывает на периодичность
//              @  -- разделяет виды от кодов в реквизитах справочников
//              14 -- разделяет значения в периодических реквизитах
//              17 -- разделяет строчные части, перекодирует знаки @
//              18 -- указывает на начало строчных частей
//              20 -- перекодирует знаки # в значениях реквизитов

Function Дата2(аДата)
  Exit FormatDate(аДата,"dd.mm.yy");
EndFunction

Function СоздатьСинхронизацию(ЭлНС,ЭлСпр)
  бЭл:=Ref.рбСопоставленныеЭлементы;
  If not бЭл.Find("Индекс",Trim(ЭлНС.Индекс)) Then
    вЭл:=глНайтиКонтейнерСопоставления(Trim(ЭлНС.ПрефиксУдаленнойБазы),Trim(ЭлНС.ВидСправочника),0,0,"рбСопоставленныеЭлементы");
    бЭл.New();
    бЭл.Folder(вЭл);
    бЭл.ПрефиксУдаленнойБазы:=Trim(ЭлНС.ПрефиксУдаленнойБазы);
    бЭл.Name:=Trim(ЭлНС.Name);
    бЭл.КодУдаленнойБазы:=Trim(ЭлНС.КодУдаленнойБазы);
    бЭл.ВидСправочника:=Trim(ЭлНС.ВидСправочника);
    бЭл.Индекс:=Trim(ЭлНС.Индекс);
    бЭл.Элемент:=ЭлСпр;
    If not глЗаписать(бЭл) Then
      Exit 0;
    EndIf;
  EndIf;
  Exit 1;
EndFunction                


Function ПроверитьНаСуществованиеСинхронизации(Эл,УдКод)
  вЭл:=Ref.рбСопоставленныеЭлементы;
  вЭл.Select("Элемент,ПрефиксУдаленнойБазы",Эл,КлИБ);
  While вЭл.Next() Do
    If Trim(вЭл.КодУдаленнойБазы)<>Trim(УдКод) Then
      Exit 0;
    EndIf;
  EndDo;
  Exit 1;
EndFunction

//0 или 1
Function ПринятьФайл(ByRef Имя,Тип)
  Кат:=AddBackSlash(GetTempDirectory());
  If (File.DoesFileExist(Кат+Имя+".txt"))Or(File.DoesFileExist(Кат+Имя+"_SRV.7z")) Then
    File.DeleteFile(Кат+Имя+".txt");
    File.DeleteFile(Кат+Имя+"_SRV.7z");
    If (File.DoesFileExist(Кат+Имя+".txt"))Or(File.DoesFileExist(Кат+Имя+"_SRV.7z")) Then
      Exit 0;
    EndIf;
  EndIf;
  Имя2:=ConnObj.ReceiveFile(Имя+"_SRV.7z",Кат);
  If Имя2="" Then
    Exit 0;
  EndIf;
  Размер:=File.GetFileSize(Имя2);
  Message(?(ProgramMode()=1,""+CurDate()+","+CurTime()+" ","")+Тип+".IN("+КлИБ+"): SIZE="+Размер);
  Рез:=SysExecNoConsole("Modules\FreeForms\ВнутренниеОбработки\РаспределеннаяБаза\ОбработкаОбменаСервер\7za.exe x -y -o"+Кат+" "+Имя2+" *.*",1);
  If Рез<>0 Then
    Exit 0;
  EndIf;
  File.DeleteFile(Имя2);
  If not File.DoesFileExist(Кат+Имя+".txt") Then
    Exit 0;
  EndIf;
  Имя:=Кат+Имя+".txt";
  Exit 1;
EndFunction


//0, 1 или 2 -- стандарный ответ
Function ОтправитьФайл(Т,Имя,Тип="DOC",БезРазрыва=0)
  Кат:=AddBackSlash(GetTempDirectory());
  If (File.DoesFileExist(Кат+Имя+".txt"))Or(File.DoesFileExist(Кат+Имя+".7z")) Then
    File.DeleteFile(Кат+Имя+".txt");
    File.DeleteFile(Кат+Имя+".7z");
    If (File.DoesFileExist(Кат+Имя+".txt"))Or(File.DoesFileExist(Кат+Имя+".7z")) Then
      Message("Непредвиденная ошибка при удалении "+Имя+"...","!");
      Exit 2;
    EndIf;
  EndIf;
  if not Т.Save(Кат+Имя+".txt",1200,1) Then
    Message("Непредвиденная ошибка при сохранении "+Имя+"...","!");
    Exit 2;
  EndIf;
  Рез:=SysExecNoConsole("Modules\FreeForms\ВнутренниеОбработки\РаспределеннаяБаза\ОбработкаОбменаСервер\7za.exe a "+Кат+Имя+".7z "+Кат+Имя+".txt",1);
  If Рез<>0 Then
    Message("Непредвиденная ошибка при запаковке "+Имя+"...","!");
    Exit 2;
  EndIf;
  File.DeleteFile(Кат+Имя+".txt");
  
  УдФайл:="";
  Try
    Размер:=File.GetFileSize(Кат+Имя+".7z");
    Message(?(ProgramMode()=1,""+CurDate()+","+CurTime()+" ","")+Тип+".OUT("+КлИБ+"): SIZE="+Размер);
    
    УдФайл:=Кат+Имя+".7z";
    Form.StatusText("Отсылка файла "+Имя+".7z...");
    If not ConnObj.SendStr(Имя) Then
      Message("Непредвиденная ошибка при отправке файла "+Имя+"...","!");
      Exit 2;
    EndIf;
    If not ConnObj.SendFile(Кат+Имя+".7z") Then
      Message("Непредвиденная ошибка (2) при отправке файла "+Имя+"...","!");
      Exit 2;
    EndIf;
    Form.StatusText("Удаление файла "+Имя+".7z...");
    File.DeleteFile(УдФайл);
    УдФайл:="";
  Except
    Стр:=PopError();
    Message("Произошел разрыв связи: "+Стр,"!");
    If УдФайл<>"" Then
      File.DeleteFile(УдФайл);
    EndIf;
    Exit 1;
  EndTry;
  If not БезРазрыва Then
    ConnObj.Disconnect();
  EndIf;
  Form.StatusText("");
  Exit 0;
EndFunction
                
Function ЗагрузитьДокументы(Т)
  ФлОК:=1;
  Чл:=0;
  б:=Ref.рбПереносимыеДокументы;
  КолВо:=Т.Size();
  i:=2;
  While i<=КолВо Do
    Чл:=Чл+1;
    If Чл%100=0 Then
      Form.StatusText(""+(КолВо-i));
    EndIf;
    Стр:=Т.GetLine(i);
    Флаг:=Left(Стр,1);
    Индекс:=Mid(Стр,2);
    If Флаг="-" Then
      If б.Find("Индекс",Индекс) Then
        If б.Флаг<>1 Then
          б.Флаг:=1;
          ФлОК:=Min(глЗаписать(б),ФлОК);
        EndIf;
      Else
        б.New();
        б.Индекс:=Индекс;
        б.ПрефиксУдаленнойБазы:=КлИБ;
        б.Флаг:=1;
        ФлОК:=Min(глЗаписать(б),ФлОК);
      EndIf;
    ElseIf Флаг="+" Then
      If not б.Find("Индекс",Индекс) Then
        б.New();
        б.Индекс:=Индекс;
        б.ПрефиксУдаленнойБазы:=КлИБ;
      EndIf;
      б.Флаг:=0;
      Стр2:=Т.GetLine(i+1);//Шапка #1 (не используется в новой конф.)
      Стр3:=Т.GetLine(i+2);//Шапка #2 
      Стр4:=Т.GetLine(i+3);//Строки
      б.Реквизиты:=Стр2+Chr(14)+Стр3+Chr(14)+Стр4+Chr(14);
      б.Движения:=Т.GetLine(i+4);//Движения
      ФлОК:=Min(глЗаписать(б),ФлОК);
      i:=i+4;
    EndIf;
    i:=i+1;
  EndDo;
  Exit ФлОК;
EndFunction


Function ПринятьДокументы()
  Try
    While 0=0 Do
      If not ConnObj.isConnected() Then
        Exit 1;
      EndIf;
      Имя:=ConnObj.ReceiveStr();
      //Имя файла или команда "Вопрос" для окончания обмена файлами
      
      If isEmpty(глСрвОтвет) Then
        глСрвОтвет:=Tab.Create("КлИБ,Ответ");
      EndIf;
      
      ФлВопрос:=0;
      If Имя<>"Вопрос" Then
        If not ПринятьФайл(Имя,"DC") Then
          Exit 2;
        EndIf;
        ConnObj.Disconnect();
        Т:=Text.Create(1);
        Т.Load(Имя,0);
        File.DeleteFile(Имя);
        If глСрвОтвет.FindAndGoto(""+КлИБ+"@Тип3",,"КлИБ")=0 Then
          глСрвОтвет.AddLine("КлИб",""+КлИБ+"@Тип3");
        EndIf;
        глСрвОтвет.Ответ:="Ошибка";
        If ЗагрузитьДокументы(Т) Then
          глСрвОтвет.Ответ:="ОК";
        Else
          глСрвОтвет.Ответ:="Ошибка";
        EndIf;
        Exit 1;
      Else
        If глСрвОтвет.FindAndGoto(""+КлИБ+"@Тип3",,"КлИБ")=0 Then
          ConnObj.SendStr("Ошибка");
          ConnObj.Disconnect();
          Exit 1;
        EndIf;
        ConnObj.SendStr(?(Trim(глСрвОтвет.Ответ)="","Ошибка",Trim(глСрвОтвет.Ответ)));
        глСрвОтвет.Ответ:="Ошибка";
        ConnObj.Disconnect();
        Exit 1;
      EndIf;
    EndDo;
  Except
    Message("Произошел разрыв связи: "+PopError(),"!");
    Exit 1;
  EndTry;
  Exit 0;
EndFunction
                

//Отправляет не более 10000 запросов, чтобы не создавать слишком больших файлов пересылки
Function ОтправитьЗапросСправочники()
  
  Т:=Text.Create(1);
  Т.AddString("0");//Версия

  While 0=0 Do
    //Частичные запросы перед синхронизацией оператором
    аТемп:=TempDB.Create("зЭл:Ref.рбНесинхронизированныеЭлементы,зВид:STRING.100");
    аТемп.LoadFrom("Ref.рбНесинхронизированныеЭлементы","@ELEMENT->зЭл,ВидСправочника->зВид","@IsFolder=0","Флаг=0","ПрефиксУдаленнойБазы=КлИБ");
    аТемп.Select("зВид+,зЭл+");
    While аТемп.Next() Do
      зЭл:=аТемп.зЭл;
      Стр:=Trim(аТемп.зВид)+"#"+Trim(зЭл.КодУдаленнойБазы)+"#0";
      Стр1:=Trim(спДопПараметры.GetByName(Trim(аТемп.зВид)));
      Стр:=Стр+?(Стр1="","","#"+Стр1);
      Т.AddString(Стр);//Частичный запрос
      If Т.Size()>10000 Then
        Break 2;
      EndIf;
    EndDo;
    
    //Полные запросы
    аТемп:=TempDB.Create("зЭл:Ref.рбНесинхронизированныеЭлементы,зВид:STRING.100");
    аТемп.LoadFrom("Ref.рбНесинхронизированныеЭлементы","@ELEMENT->зЭл,ВидСправочника->зВид","@IsFolder=0","(Флаг=3)or(Флаг=6)or(Флаг=9)","ПрефиксУдаленнойБазы=КлИБ");
    аТемп.Select("зВид+,зЭл+");
    While аТемп.Next() Do
      Т.AddString(Trim(аТемп.зВид)+"#"+Trim(аТемп.зЭл.КодУдаленнойБазы)+"#1");//Полный запрос
      If Т.Size()>10000 Then
        Break 2;
      EndIf;
    EndDo;
    
    //Запрос на документы
    аТемп:=TempDB.Create("зДок:DB");
    аТемп.LoadFrom("Ref.рбЗапросНаДокументы","Документ->зДок","ПрефиксУдаленнойБазы=КлИБ");
    аТемп.Select();
    While аТемп.Next() Do
      зДок:=аТемп.зДок;
      If not isEmpty(зДок) Then
        Т.AddString("!DOC:"+Trim(зДок.DBName())+"#"+Trim(зДок.DocNum)+"#"+Дата2(зДок.DocDate));
        If Т.Size()>10000 Then
          Break 2;
        EndIf;
      EndIf;  
    EndDo;
    
    Break;
  EndDo;  
    
  If Т.Size()=1 Then
    ConnObj.SendStr("0");
    Exit 0;
  EndIf;
  
  Form.StatusText("Запаковка результата запроса справочников...");
  Exit ОтправитьФайл(Т,"RFOUT"+"_"+Trim(КлИБ),"REF1");
EndFunction
                

//Возврат: 0 -- ОК, 1 -- поправимая ошибка, 2 -- критичная ошибка
Function НайтиСинхронизированныйЭлемент(ВидМета,КодУдаленнойБазы,ФорсФлаг=0,ByRef РезЭл=0,ByRef РезЭлСнх=0,флБезСозданияСинхронизации=0)
  If Trim(КодУдаленнойБазы)="" Then
    Exit 0;
  EndIf;
  If Pos("/",КодУдаленнойБазы)>0 Then
    Вид2:=TearStr(КодУдаленнойБазы,"/");
    ВидМета:=?(ВидМета="",Вид2,ВидМета);
  EndIf;
  Инд:=Trim(КлИБ)+"#"+ВидМета+"#"+КодУдаленнойБазы;
  
//Исключения//Исключения//Исключения//Исключения
  If ВидМета="бухПланСчетов" Then
    Код:=КодУдаленнойБазы;
    If Left(Код,1)="+" Then
      Код:=Mid(Код,2);
    EndIf;
    If (Pos(".",Код)=2)Or(Length(Код)=1) Then
      Код:="0"+Код;
    EndIf;
    аЭл:=Ref.бухПланСчетов;
    If аЭл.Find("Code",Код) Then
      //Удалить лишние элементы?
      аЭл2:=Ref.рбНесинхронизированныеЭлементы;
      If аЭл2.Find("Индекс",Инд) Then
        аЭл2.DeletePhysically();
      EndIf;
      РезЭлСнх:=аЭл;
      Exit 0;
    EndIf;
  EndIf;
//Исключения//Исключения//Исключения//Исключения
  
  аЭл:=Ref.рбСопоставленныеЭлементы;
  If аЭл.Find("Индекс",Инд) Then
    РезЭлСнх:=аЭл.Элемент;
    Exit 0;
  EndIf;
  
  If флБезСозданияСинхронизации Then
    Exit 2;
  EndIf;
  
  аЭл:=Ref.рбНесинхронизированныеЭлементы;
  If not аЭл.Find("Индекс",Инд) Then
    //Для случаев более одного родителя оптимизация не работает, родитель будет заполнен при полном запросе
    флРодители:=Struct.Ref(ВидМета).Parents.Count()>1;
    If Struct.Ref(ВидМета).Parents.Count()=1 Then  
      Стр3:=КодУдаленнойБазы;
      Рез:=0;
      TearStr(Стр3);
      ИмяРод:=Struct.Ref(ВидМета).Parents(1).Name;
      Фл:=НайтиСинхронизированныйЭлемент(ИмяРод,Стр3,,Рез);
      If Фл<>0 Then
        Exit Фл;
      EndIf;
      If Рез<>0 Then
        If Рез.DBName()<>"рбСопоставленныеЭлементы" Then
          If (Рез.Флаг=3)Or(Рез.Флаг=4) Then
            ФорсФлаг:=3;
          EndIf;
        EndIf;
      EndIf;
    EndIf;
    
    //Добавляем элемент для синхронизации
    б:=глНайтиКонтейнерСопоставления(Trim(КлИБ),ВидМета,СпНЭГр,грБз);
    If б=0 Then
      Exit 2;
    EndIf;
    аЭл.New();
    аЭл.Folder(б);
    аЭл.ПрефиксУдаленнойБазы:=Trim(КлИБ);
    аЭл.КодУдаленнойБазы=КодУдаленнойБазы;
    аЭл.ВидСправочника:=ВидМета;
    аЭл.Флаг:=?(ФорсФлаг=0,флРодители,ФорсФлаг);
    аЭл.Индекс:=Инд;
    If not глЗаписать(аЭл) Then
      Exit 2;
    EndIf;
  EndIf;
  РезЭл:=аЭл;
  Exit 0;
EndFunction

//0 -- ОК, 1 -- поправимая ошибка, 2 -- критичная ошибка
Function ОбновитьСопоставлениеСправочника(Тип,Вид,СтрКод,ФлПер,СпСпр)
  //Обработка справочника
  If (Тип="REF")And(Вид<>"")And(Pos(",",Вид)=0) Then
    If ФлПер=0 Then
      Фл:=НайтиСинхронизированныйЭлемент(Вид,СтрКод);
      If Фл<>0 Then
        Exit Фл;
      EndIf;
    Else
      For i2:=1 To СпСпр.Size() Do
        Фл:=НайтиСинхронизированныйЭлемент(Вид,СпСпр.Get(i2));
        If Фл<>0 Then
          Exit Фл;
        EndIf;
      EndDo;
    EndIf;
  EndIf;
  Exit 0;
EndFunction


Function ПерекодироватьРеквизитСправочника(ByRef Стр,ФлПер,Тип,Вид,СпСпр)
  If ФлПер Then
    //<ДатаЗнач>+Chr(18)+<Знач>  [Chr(18)+...] [Chr(17)<ТабличныеЧасти>]
    СтрПер:=TearStr(Стр,Chr(14));
    СтрКод:="";
    While СтрПер<>"" Do
      Стр2:=Trim(TearStr(СтрПер,Chr(18)));
      Стр3:=Trim(TearStr(СтрПер,Chr(18)));
      If (Тип="REF")And(Вид<>"") Then
        СпСпр.Add(Стр3);
      EndIf;
      СтрКод:=СтрКод+"@"+Стр2+"@"+Replace(Стр3,"@",Chr(17));
    EndDo;
  Else
    СтрКод:=Trim(TearStr(Стр,Chr(14)));
  EndIf;
  Exit СтрКод;
EndFunction


//Возврат: 0 -- ОК, 1 -- был дисконнект, 2 -- внутренняя ошибка, продолжение невозможно
Function ПринятьСправочники(Т=0)

  Function _СоздатьНовыйЭлементВНесинхронизированныхЭлементах(ByRef аЭл,ВидСпр,УдКод,Флаг)
    //Создаем новый элемент в рбНесинхронизированныеЭлементы
    элКонт:=глНайтиКонтейнерСопоставления(Trim(КлИБ),ВидСпр);
    If элКонт=0 Then
      Exit 0;
    EndIf;
    Инд:=Trim(КлИБ)+"#"+ВидСпр+"#"+УдКод;
    аЭл.New();
    аЭл.Folder(элКонт);
    аЭл.ПрефиксУдаленнойБазы:=Trim(КлИБ);
    аЭл.КодУдаленнойБазы:=УдКод;
    аЭл.ВидСправочника:=ВидСпр;
    аЭл.Флаг:=Флаг;
    аЭл.Индекс:=Инд;
    If not глЗаписать(аЭл) Then
      Exit 0;
    EndIf;
    Exit 1;    
  EndFunction      


  ФлСоздаватьСопоставление:=0;
  If Т=0 Then
    Try
      Имя:=ConnObj.ReceiveStr();
      If Имя="0" Then
        Exit 0;
      EndIf;
      
      If not ПринятьФайл(Имя,"REF2") Then
        Exit 2;
      EndIf;
      
      ConnObj.Disconnect();
      Т:=Text.Create(1);
      Т.Load(Имя,0);
      File.DeleteFile(Имя);
    Except
      Message("Произошел разрыв связи: "+PopError(),"!");
      Exit 1;
    EndTry;
  Else
    ФлСоздаватьСопоставление:=1;
  EndIf;

  грБз:=глНайтиКонтейнерСопоставления(Trim(КлИБ));
  If грБз=0 Then
    Exit 2;
  EndIf;
  СпНЭГр:=List.Create();

  ТипДв:=Number(Т.GetLine(1));
  For i:=2 To Т.Size() Do
    Стр:=Т.GetLine(i);
    Form.StatusText("Спр/Док: "+(Т.Size()-i));
    
    //Запрос на документ
    If Pos("!DOC:",Стр)=1 Then
      TearStr(Стр,"!DOC:");
      ВидДок:=TearStr(Стр,"#");
      НомерДок:=TearStr(Стр,"#");
      ДатаДок:=Date(TearStr(Стр,"#"));
      Рез:=TearStr(Стр,"#");
      
      ФлОк:=0;
      If Рез="DELETED" Then
        //Необходимо удалить документ здесь 
        аДок:=глНайтиДокументПоНомеру(ВидДок,НомерДок,ДатаДок);
        If аДок<>0 Then
          If глУдалить(аДок,1) Then
            ФлОк:=1;
          EndIf;
        EndIf;
      ElseIf Рез="OK" Then
        аДок:=глНайтиДокументПоНомеру(ВидДок,НомерДок,ДатаДок);
        If аДок<>0 Then
          ФлОк:=1;
        EndIf;
      EndIf;
      
      If ФлОк Then
        аСпр:=Ref.рбЗапросНаДокументы;
        If аСпр.Find("Документ,ПрефиксУдаленнойБазы",аДок,КлИБ) Then
          аСпр.DeletePhysically();
        EndIf;
      EndIf;
      
      Continue;
    EndIf;
    //Запрос на документ
    
    ВидСпр:=TearStr(Стр,"#");
    УдКод:=TearStr(Стр,Chr(14));
    Инд:=Trim(КлИБ)+"#"+ВидСпр+"#"+УдКод;
    
    //Виртуальные справочники-исключения
//Дополнительные основные цены//Дополнительные основные цены//Дополнительные основные цены//Дополнительные основные цены//Дополнительные основные цены
    If ВидСпр="?цЦены?" Then
      УдКодТипаЦен:=TearStr(УдКод,"@");
      УдКодТМЦ:=TearStr(УдКод,"@");
      //"?цЦены?#"+аТипЦен.Code+"@"+<Вид>/а.Code+Chr(14)+"1"+Chr(14)+""+Chr(14)+"1"+Chr(14)+"#Цена"+Chr(14);
      TearStr(Стр,Chr(14));//"1"
      TearStr(Стр,Chr(14));//""
      TearStr(Стр,Chr(14));//"1"
      TearStr(Стр,Chr(14));//"#Цена"

      //Ищем тип цен
      аТипЦен:=0;
      НайтиСинхронизированныйЭлемент("цТипыЦен",УдКодТипаЦен,,,аТипЦен,1);
      If аТипЦен=0 Then
        Continue;
      EndIf;
      
      //Ищем ТМЦ
      аТМЦ:=0;
      НайтиСинхронизированныйЭлемент(?(pos("/",УдКодТМЦ)=0,"тмцНоменклатура",""),УдКодТМЦ,,,аТМЦ,1);
      If аТМЦ=0 Then
        Continue;
      EndIf;
      
      //+#<Дата>+Chr(14)+<Цена>+Chr(14)...
      Ц:=Ref.цЦены;
      If not Ц.Find("@Parent,ТипЦен",аТМЦ,аТипЦен) Then
        Ц.New();
        Ц.ТипЦен:=аТипЦен;
        Ц.Parent(аТМЦ);
        If not глЗаписать(Ц) Then
          Continue;
        EndIf;
      EndIf;
      
      СпКод:=Tab.Create("_Date,_Value");
      
      Код0:=Стр;
      Код0:=?(Left(Код0,1)="@",Mid(Код0,2),Код0);
      While Код0<>"" Do
        пДт:=Date(TearStr(Код0,"@"));
        пКод:=Trim(TearStr(Код0,"@"));
        СпКод.AddLine("_Date,_Value",пДт,пКод);
      EndDo;
      СпКод.Sort("_Date+");
      ДНач:=Date(СпДатыРеквизитовБаз.GetByName(КлИБ));//АктуальностьПериодическихРеквизитов
      ДНач:=?(isEmpty(ДНач),'01.01.1981',ДНач);
      Ц.SavePeriodicalValues("Цена",СпКод,ДНач);
      Continue;
    EndIf;
//Дополнительные основные цены//Дополнительные основные цены//Дополнительные основные цены//Дополнительные основные цены//Дополнительные основные цены
    
    ФлТип:=Number(TearStr(Стр,Chr(14)));//0 -- частичный ответ, 1 -- полный, -1 -- элемента в уд. базе нет, запрос нужно удалить
    
    аЭл:=Ref.рбНесинхронизированныеЭлементы;
    If not аЭл.Find("Индекс",Инд) Then
//Исключения//Исключения//Исключения//Исключения//Исключения//Исключения//Исключения//Исключения//Исключения
      If ВидСпр="тмцСвойстваОсновныхСредств" Then
        If ФлТип<>1 Then
          Continue;
        EndIf;
        //Данный доп. справочник отправляется вместе с элементами номенклатуры и всегда должен создавать элемент синхронизации
        //Однако в случае, когда это перенос измененных справочников (ФлСоздаватьСопоставление=1) и родитель этого элемента отсутствует и в несопоставленных и в сопоставленных, 
        //       мы пропускаем этот элемент
        //УдКод: <УдКодСвойств>@<УдКодНоменклатуры>
        ИндРодитель:=УдКод;
        TearStr(ИндРодитель,"@");
        ИндРодитель:=Trim(КлИБ)+"#тмцНоменклатура#"+ИндРодитель;
        аЭл0:=Ref.рбСопоставленныеЭлементы;
        аЭл1:=Ref.рбНесинхронизированныеЭлементы;
        If _And(аЭл1.Find("Индекс",ИндРодитель)=0,аЭл0.Find("Индекс",ИндРодитель)=0) Then
          Continue;
        Else
          If not _СоздатьНовыйЭлементВНесинхронизированныхЭлементах(аЭл,ВидСпр,УдКод,3) Then //Новый (особый справочник, элемент будет создан только если не существовал)
            Exit 2;
          EndIf;
        EndIf;  
//Исключения//Исключения//Исключения//Исключения//Исключения//Исключения//Исключения//Исключения//Исключения
      ElseIf (ФлСоздаватьСопоставление)And(ФлТип>=0) Then
        //Элемент был изменен в удаленной базе, изменения контролируются клиентом самостоятельно
        //  если элемент существует в текущей базе, создадим контейнер в рбНесинхронизированныеЭлементы
        аЭл0:=Ref.рбСопоставленныеЭлементы;
        If not аЭл0.Find("Индекс,флЗапретОбновленияРеквизитов",Инд,0) Then
          Continue;//Элемент отсутствует в текущей базе, мы можем его смело пропустить
        EndIf;
        If not _СоздатьНовыйЭлементВНесинхронизированныхЭлементах(аЭл,ВидСпр,УдКод,6) Then //Ресинхронизация, ожидает данные (изменится ниже)
          Exit 2;
        EndIf;
      Else
        Continue;
      EndIf;  
    EndIf;
    
    If ФлТип=-1 Then
      аЭл.DeletePhysically();
      //Также необходимо удалить сопоставленный элемент
      аЭл0:=Ref.рбСопоставленныеЭлементы;
      If аЭл0.Find("Индекс",Инд) Then
        аЭл0.DeletePhysically();
      EndIf;
      Continue;
    EndIf;
    аЭл.Name:=Trim(TearStr(Стр,Chr(14)));
    ФлДоп:=Number(TearStr(Стр,Chr(14)));
    
//Синхронизация исключений//Синхронизация исключений//Синхронизация исключений//Синхронизация исключений
    If ФлДоп=1 Then
      аЭл.ДополнительныеИдентификаторы:=Trim(TearStr(Стр,Chr(14)));
      
//Города, улицы//Города, улицы//Города, улицы//Города, улицы//Города, улицы//Города, улицы//Города, улицы
      If Pos(Trim(аЭл.ВидСправочника)+",","адГорода,адУлицы,")>0 Then
        //Ищем по коду базы, или присваиваем флаг "новый"
        аб:=DB("Ref."+Trim(аЭл.ВидСправочника));
        Фл0:=0;
        КодСтр:=УдКод;
        TearStr(КодСтр);
        аб2:=0;
        НайтиСинхронизированныйЭлемент(?(Pos(Trim(аЭл.ВидСправочника)+",","адГорода,")>0,"адАдминистративныеДеления","адГорода"),КодСтр,,,аб2);
        If аб2=0 Then
          Continue;
        EndIf;
        //аб.Parent(аб2);
        
        If (Trim(аЭл.ДополнительныеИдентификаторы)<>"")And(Trim(аЭл.ВидСправочника)<>"адУлицы") Then
          If Struct.Ref(Trim(аЭл.ВидСправочника)).HasFolders Then
            аб.Select("@Parent,КодБазы,@isFolder",аб2,Trim(аЭл.ДополнительныеИдентификаторы),Left(аЭл.КодУдаленнойБазы,1)="+");
          Else
            аб.Select("@Parent,КодБазы",аб2,Trim(аЭл.ДополнительныеИдентификаторы));
          Endif;  
          While аб.Next() Do
            Фл0:=аб.Copy();
            If UpperCase(Trim(аб.Name))=UpperCase(Trim(аЭл.Name)) Then
              Break;
            EndIf;
          EndDo;
        Else
          If Struct.Ref(Trim(аЭл.ВидСправочника)).HasFolders Then
            If аб.Find("@Parent,Name,@IsFolder",аб2,Trim(аЭл.Name),Left(аЭл.КодУдаленнойБазы,1)="+") Then
              Фл0:=аб;
            EndIf;
          ElseIf аб.Find("@Parent,Name",аб2,Trim(аЭл.Name)) Then
            Фл0:=аб;
          EndIf;
        EndIf;
        If Фл0=0 Then
          аЭл.Флаг:=3;
        Else
          аЭл.Флаг:=2;
          If not СоздатьСинхронизацию(аЭл,Фл0) Then
            Exit 2;
          EndIf;
        EndIf;
//Адреса доставки//Адреса доставки//Адреса доставки//Адреса доставки//Адреса доставки//Адреса доставки//Адреса доставки
      ElseIf Pos(Trim(аЭл.ВидСправочника)+",","адАдресаДоставки,адСсылкиНаАдресаДоставки,")>0 Then
        Фл:=Trim(аЭл.ВидСправочника)="адСсылкиНаАдресаДоставки";
        вТемп:=Ref.рбСопоставленныеЭлементы;
        КодСтр:=УдКод;
        TearStr(КодСтр);
        Инд:=?(Фл,Trim(КлИБ)+"#кнтДоговоры#"+Trim(КодСтр),Trim(КлИБ)+"#кнтКонтрагенты#"+Trim(КодСтр));
        If вТемп.Find("Индекс",Инд) Then
          аТемп:=DB("Ref."+?(Фл,"адСсылкиНаАдресаДоставки","адАдресаДоставки"));
          ФлОк:=0;
          ФлНет:=1;
          аТемп.Select("@Parent",вТемп.Элемент);
          While аТемп.Next() Do
            ФлНет:=0;
            If Фл Then
              If Trim(аТемп.адСсылка.Name)=Trim(аЭл.ДополнительныеИдентификаторы) Then
                ФлОк:=1;
              EndIf;
            ElseIf Trim(аТемп.Name)=Trim(аЭл.Name) Then
              ФлОк:=1;
            EndIf;
            If ФлОк Then
              If ПроверитьНаСуществованиеСинхронизации(аТемп,УдКод) Then
                аЭл.Флаг:=2;
                If not СоздатьСинхронизацию(аЭл,аТемп) Then
                  Exit 2;
                EndIf;
              EndIf;//если дубль, оставить на усмотрение оператора
              Break;
            EndIf;
          EndDo;
          
          //адСсылкиНаАдресаДоставки делаем всегда новыми, адАдресаДоставки оставляем на усмотрение оператора
          If (ФлНет)Or((Фл)And(not ФлОк)) Then
            аЭл.Флаг:=3;
          EndIf;
          
        EndIf;
      EndIf;
    EndIf;
      
//Свойства основных средств//Свойства основных средств//Свойства основных средств//Свойства основных средств
    If Trim(аЭл.ВидСправочника)="тмцСвойстваОсновныхСредств" Then
      //У одного элемента номенклатура должен быть только один элемент тмцСвойстваОсновныхСредств
      //При синхронизации такие элементы превращаем всегда в "новый" с тем, чтобы обработка загрузки нашла уже существующий элемент и обновила его
      //    оператору контроль над такими элементами давать нет смысла.
      аЭл.Флаг:=3;
    ElseIf Pos(Trim(аЭл.ВидСправочника)+",","тмцПартииТМЦ,маркСтатьиМаркетингаПокупателей,")>0 Then
      //Справочники-исключения, всегда помечаются, как новые
      аЭл.Флаг:=3;
    EndIf;  
    
//Синхронизация исключений//Синхронизация исключений//Синхронизация исключений//Синхронизация исключений
    
    If ФлТип=0 Then
      If аЭл.Флаг=0 Then
        аЭл.Флаг:=1;
      EndIf;  
    Else
      СтрРез:="";
      СтрТЧ:=Стр;
      Стр:=TearStr(СтрТЧ,Chr(17));
      While Стр<>"" Do
        СпСпр:=List.Create();
        Ид:=Trim(TearStr(Стр,Chr(14)));
        ФлПер:=0;
        If Left(Ид,1)="#" Then
          ФлПер:=1;
          Ид:=Mid(Ид,2);
        EndIf;
        
        If (Ид="Folder")or(Ид="Родитель") Then
          СтрКод:=Trim(TearStr(Стр,Chr(14)));
          СтрРез:=СтрРез+?(СтрРез<>"","#","")+Ид+"#"+СтрКод;
          Фл:=НайтиСинхронизированныйЭлемент(Trim(ВидСпр),СтрКод);//,3
          If Фл<>0 Then
            Exit Фл;
          EndIf;
        ElseIf not isEmpty(Struct.Ref(ВидСпр).Props(Ид)) Then
          Вид:=Struct.Ref(ВидСпр).Props(Ид).DataType;
          Тип:=TearStr(Вид,".");
          СтрКод:=ПерекодироватьРеквизитСправочника(Стр,ФлПер,Тип,Вид,СпСпр);
          СтрРез:=СтрРез+?(СтрРез<>"","#","")+?(ФлПер=1,"@","")+Ид+"#"+Replace(СтрКод,"#",chr(20));
          Фл:=ОбновитьСопоставлениеСправочника(Тип,Вид,СтрКод,ФлПер,СпСпр);
          If Фл<>0 Then
            Exit Фл;
          EndIf;
        EndIf;
      EndDo;
      //<ТабличныеЧасти>: <ИмяТабЧасти>#14[<ФлагПериод>]<ИдРеквизита>#14<ЗначениеИлиПериодичЗначения>#14... #17<ИмяТабЧасти>...
      While СтрТЧ<>"" Do
        Стр:=TearStr(СтрТЧ,Chr(17));
        ИдЧ:=Trim(TearStr(Стр,Chr(14)));
        If isEmpty(Struct.Ref(ВидСпр).LineParts(ИдЧ)) Then
          Continue;
        EndIf;
        СтрРез:=СтрРез+?(СтрРез<>"",Chr(18))+ИдЧ;
        
        While Стр<>"" Do
          СпСпр:=List.Create();
          Ид:=Trim(TearStr(Стр,Chr(14)));
          ФлПер:=0;
          If Left(Ид,1)="#" Then
            ФлПер:=1;
            Ид:=Mid(Ид,2);
          EndIf;
          
          If not isEmpty(Struct.Ref(ВидСпр).LineParts(ИдЧ).Props(Ид)) Then
            Вид:=Struct.Ref(ВидСпр).LineParts(ИдЧ).Props(Ид).DataType;
            Тип:=TearStr(Вид,".");
            СтрКод:=ПерекодироватьРеквизитСправочника(Стр,ФлПер,Тип,Вид,СпСпр);
            СтрРез:=СтрРез+?(СтрРез<>"","#")+?(ФлПер=1,"@","")+Ид+"#"+Replace(СтрКод,"#",chr(20));
            Фл:=ОбновитьСопоставлениеСправочника(Тип,Вид,СтрКод,ФлПер,СпСпр);
            If Фл<>0 Then
              Exit Фл;
            EndIf;
          EndIf;
        EndDo;  
      EndDo;
      
      аЭл.Реквизиты:=СтрРез;
      //Флаг 7 (данные уже были получены) возможен, если синхронизация случилась до того, как элемент был удален.
      аЭл.Флаг:=?((аЭл.Флаг=6)or(аЭл.Флаг=7)or(аЭл.Флаг=8),7,4);
    EndIf;
    If not глЗаписать(аЭл) Then
      Exit 2;
    EndIf;
  EndDo;
  
  If ФлСоздаватьСопоставление Then
    Exit 0;
  Else
    Exit 1;
  EndIf;  
EndFunction 

Function ПринятьСправочники2()
  Try
    While 0=0 Do
      If not ConnObj.isConnected() Then
        Exit 1;
      EndIf;
      Имя:=ConnObj.ReceiveStr();
      //Имя файла или команда "Вопрос" для окончания обмена файлами
      
      If isEmpty(глСрвОтвет) Then
        глСрвОтвет:=Tab.Create("КлИБ,Ответ");
      EndIf;
      
      ФлВопрос:=0;
      If Имя<>"Вопрос" Then
        If not ПринятьФайл(Имя,"REF3") Then
          Exit 2;
        EndIf;
        ConnObj.Disconnect();
        Т:=Text.Create(1);
        Т.Load(Имя,0);
        File.DeleteFile(Имя);
        If глСрвОтвет.FindAndGoto(""+КлИБ+"@Тип4",,"КлИБ")=0 Then
          глСрвОтвет.AddLine("КлИб",""+КлИБ+"@Тип4");
        EndIf;
        глСрвОтвет.Ответ:="Ошибка";
        //0 -- ОК, 1 -- был дисконнект, 2 -- внутренняя ошибка, продолжение невозможно
        Фл:=ПринятьСправочники(Т);
        If Фл=0 Then
          глСрвОтвет.Ответ:="ОК";
        Else
          глСрвОтвет.Ответ:="Ошибка";
        EndIf;
        Exit 1;
      Else
        If глСрвОтвет.FindAndGoto(""+КлИБ+"@Тип4",,"КлИБ")=0 Then
          ConnObj.SendStr("Ошибка");
          ConnObj.Disconnect();
          Exit 1;
        EndIf;
        ConnObj.SendStr(?(Trim(глСрвОтвет.Ответ)="","Ошибка",Trim(глСрвОтвет.Ответ)));
        глСрвОтвет.Ответ:="Ошибка";
        ConnObj.Disconnect();
        Exit 1;
      EndIf;
    EndDo;
  Except
    Message("Произошел разрыв связи: "+PopError(),"!");
    Exit 1;
  EndTry;
  Exit 0;
EndFunction



Function ПровестиОбмен()
  КлИБ:=ConnObj.ReceiveStr();
  If Trim(DBVar.ПрефиксИБ)=КлИБ Then
    Message("Внимание! Попытка обмена из текущей базы!","!");
    Exit;
  EndIf;
  
  Этап:=Number(ConnObj.ReceiveStr());
  If not ConnObj.SendCmd("OK  ") Then
    Exit;
  EndIf;
  
  If Этап=0 Then
    ConnObj.SendStr(Trim(DBVar.НачалоПериодаБазы));
    Префикс:=2;
    а:=Ref.рбУдаленныеБазы;
    If а.Find("ПрефиксБазы",КлИБ) Then
      Префикс:=а.КодОбмена;
    EndIf;
    ConnObj.SendStr(Str(Префикс));
    Exit;
  EndIf;
  
  //Работа
  While 0=0 Do
    If Этап=1 Then
      //Принятие документов (передача клиента самостоятельно с подтверждением сервера)
      Фл:=ПринятьДокументы();
    ElseIf Этап=2 Then
      //Запрос справочников (запрос сервера)
      Фл:=ОтправитьЗапросСправочники();
    ElseIf Этап=3 Then
      //Принятие справочников (ответ на запрос сервера)
      Фл:=ПринятьСправочники();
    ElseIf Этап=4 Then
      //Принятие справочников (передача клиента самостоятельно с подтверждением сервера)
      Фл:=ПринятьСправочники2();
    Else
      //Конец работы
      Break;
    EndIf;
    
    //0 -- ОК, 1 -- был дисконнект, 2 -- внутренняя ошибка, продолжение невозможно
    If Фл=2 Then
      Exit;
    EndIf;
    
    If (Этап>2)And(Фл=0) Then
      Break; //Окончание обмена одного из клиентов
    EndIf;
    Exit;
  EndDo;
                    
  ConnObj.Disconnect();
  //Запуск обработки справочников
  Message("Запуск модуля обработки справочников...");
  LoadModule(0,"Modules\FreeForms\ВнутренниеОбработки\РаспределеннаяБаза\ОбработкаСправочниковСинхронизации","!",0,"Module","Form");
  
  If Этап<2 Then
    Exit;
  EndIf;
  
  а:=Ref.рбУдаленныеБазы;
  If not а.Find("ПрефиксБазы",Trim(КлИБ)) Then
    а.New();
    а.ПрефиксБазы:=Trim(КлИБ);
    а.КодОбмена:=2;
  EndIf;
  а.ПоследнийОбмен:=""+CurDate()+" "+CurTime();
  глЗаписать(а);  
EndFunction


Function OnOpen()
  Result:=0;
  If not IsEmpty(Param) Then
    ConnObj:=Param.GetByName("Object");
    спДопПараметры:=List.Create();
    спДопПараметры.SetByName("кнтКонтрагенты","ИНН@ТипАктива@Folder");
    спДопПараметры.SetByName("тмцНоменклатура","Folder");
    спДопПараметры.SetByName("кнтДоговоры","ЮрЛицо");
    спДопПараметры.SetByName("адГорода","КодБазы");
    спДопПараметры.SetByName("адУлицы","КодБазы");
    спДопПараметры.SetByName("кнтБанковскиеСчета","Parent@НомерСчета");
    спДопПараметры.SetByName("адАдресаДоставки","Parent");
    спДопПараметры.SetByName("адСсылкиНаАдресаДоставки","адСсылка");
    спДопПараметры.SetByName("тсМодели","Folder");
    спДопПараметры.SetByName("тмцПартииТМЦ","КСР@НомерУдостоверения");
    
    СпДатыРеквизитовБаз:=List.Create();
    аЭл:=Ref.рбУдаленныеБазы;
    аЭл.Select("@Status",0);
    While аЭл.Next() Do
      темпКлИБ:=Trim(аЭл.ПрефиксБазы);
      СпДатыРеквизитовБаз.Add(аЭл.АктуальностьПериодическихРеквизитов,темпКлИБ);
    EndDo;    
    
    Try
      ПровестиОбмен();
    Finally
      ConnObj.Disconnect();
    EndTry;  
  EndIf;
EndFunction


