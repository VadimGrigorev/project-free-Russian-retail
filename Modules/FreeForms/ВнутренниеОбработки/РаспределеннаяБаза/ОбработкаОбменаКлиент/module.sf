//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var Сокет Export;
Var Сервер Export;
Var СерверМинДата Export;
Var КодОбмена Export;
Var Порт Export;
Var Пароль Export;
Var ПопыткиМин Export;
Var ЗанятМин Export;
Var ЗапросДокументы Export;//Будут ли отправляться измененные документы
Var ЗапросСправочники Export;//Будут ли оправляться измененные справочники
Var мАкт Export;
Var спДопОснТипыЦен Export;
Var ЧлЭл0 Export, ЧлЭл1 Export;


//0 -- начало, необходимо принять дополнительно нек. информацию
//1 -- этап отправки документов (передача клиента самостоятельно с подтверждением сервера)
//2 -- этап принятия запроса справочников (запрос сервера)
//3 -- этап отправки справочников (ответ на запрос сервера)
//4 -- этап отправки справочников (передача клиента самостоятельно с подтверждением сервера)
Function Соединиться(Этап="0")
  Form.StatusText("Соединение с сервером...");
  ФлОжид:=0;
  Сокет:=IPConnection.ConnectUSR1(Trim(Сервер)+?(Trim(Порт)="","",":"+Порт),Trim(Пароль));
  While 1=1 Do
    If _Or(isEmpty(Сокет),not Сокет.IsConnected()) Then
      //Невозможно соединиться
      ФлОжид:=Date();
      While _Or(isEmpty(Сокет),not Сокет.IsConnected()) Do
        If GetPeriodMs(ФлОжид)>ПопыткиМин*60000 Then
          Message("Сервер не отвечал в течение "+ПопыткиМин+" минут!","!");
          Exit 0;
        EndIf;
        Form.StatusText("Сервер не отвечает "+Trim(Round(GetPeriodMs(ФлОжид)/60000,2))+" мин.");
        Sleep(500);
        Сокет:=IPConnection.ConnectUSR1(Trim(Сервер)+?(Trim(Порт)="","",":"+Порт),Trim(Пароль));
      EndDo;
    Else
      Try
        If not Сокет.SendCmd("USR1") Then
          Message("Сервер не принял режим (1)!","!");
          Exit 0;
        EndIf;
        Комм:=Сокет.ReceiveCmd();
        If Комм="BUSY" Then
          //Сервер занят
          ФлЗанят:=?(ФлОжид=0,Date(),ФлОжид);
          While Комм="BUSY" Do
            If GetPeriodMs(ФлЗанят)>ЗанятМин*60000 Then
              Message("Сервер был занят в течение "+ЗанятМин+" минут!","!");
              Exit 0;
            EndIf;
            Form.StatusText("Сервер занят "+Trim(Round(GetPeriodMs(ФлЗанят)/60000,2))+" мин.");
            Sleep(1000);
            Сокет:=IPConnection.ConnectUSR1(Trim(Сервер)+?(Trim(Порт)="","",":"+Порт),Trim(Пароль));
            If _Or(not Сокет.IsConnected(),not Сокет.SendCmd("USR1")) Then
              Message("Сервер не принял режим (2)!","!");
              Exit 0;
            EndIf;
            Комм:=Сокет.ReceiveCmd();
          EndDo;
        EndIf;
        If Комм<>"OK  " Then
          Message("Сервер не принял режим (3)!","!");
          Exit 0;
        EndIf;
        If not Сокет.SendStr("CLIENTTOCENTRALEXCHANGE") Then
          Сокет:=0;
          Continue;
        EndIf;
        If not Сокет.SendCmd("FNSH") Then
          Сокет:=0;
          Continue;
        EndIf;
        Комм:=Сокет.ReceiveCmd();
        If Комм<>"OK  " Then
          Сокет:=0;
          Continue;
        EndIf;
        If not Сокет.SendStr(Trim(DBVar.ПрефиксИБ)) Then
          Сокет:=0;
          Continue;
        EndIf;
        If not Сокет.SendStr(Этап) Then
          Сокет:=0;
          Continue;
        EndIf;
        
        Комм:=Сокет.ReceiveCmd();
        If Комм<>"OK  " Then
          Message("Сервер не принял режим (4)! ("+Комм+")","!");
          Exit 0;
        EndIf;
        If Этап="0" Then
          СерверМинДата:=Date(Сокет.ReceiveStr());
          If not Сокет.IsConnected() Then
            Сокет:=0;
            Continue;
          EndIf;
          КодОбмена:=Number(Сокет.ReceiveStr());
          If not Сокет.IsConnected() Then
            Сокет:=0;
            Continue;
          EndIf;
        EndIf;
        Exit 1;
      Except
        Message(PopError(),"!");
        Сокет:=0;
        Continue;
      EndTry;
      Exit 1;
    EndIf;
  EndDo;
EndFunction

Function РазорватьСоединение()
  If Сокет<>0 Then
    Сокет.Disconnect();
    Сокет:=0;
  EndIf;
EndFunction


//0, 1 или 2 -- стандарный ответ
Function ОтправитьФайл(Т,Имя,Соед="0",Тип="DOC",БезРазрыва=0)
  Кат:=AddBackSlash(GetTempDirectory());
  If (File.DoesFileExist(Кат+Имя+".txt"))Or(File.DoesFileExist(Кат+Имя+".7z")) Then
    File.DeleteFile(Кат+Имя+".txt");
    File.DeleteFile(Кат+Имя+".7z");
    If (File.DoesFileExist(Кат+Имя+".txt"))Or(File.DoesFileExist(Кат+Имя+".7z")) Then
      Message("Непредвиденная ошибка при удалении "+Имя+"...","!");
      Exit 2;
    EndIf;
  EndIf;
  if not Т.Save(Кат+Имя+".txt",1200,1) Then
    Message("Непредвиденная ошибка при сохранении "+Имя+"...","!");
    Exit 2;
  EndIf;
  Рез:=SysExecNoConsole("Modules\FreeForms\ВнутренниеОбработки\РаспределеннаяБаза\ОбработкаОбменаСервер\7za.exe a "+Кат+Имя+".7z "+Кат+Имя+".txt",1);
  If Рез<>0 Then
    Message("Непредвиденная ошибка при запаковке "+Имя+"...","!");
    Exit 2;
  EndIf;
  File.DeleteFile(Кат+Имя+".txt");
  
  УдФайл:="";
  Try
    Размер:=File.GetFileSize(Кат+Имя+".7z");
    Message(?(ProgramMode()=1,""+CurDate()+","+CurTime()+" ","")+Тип+".OUT("+Trim(DBVar.ПрефиксИБ)+"): SIZE="+Размер);
    
    If Соед<>"0" Then
      If not Соединиться(Соед) Then
        Exit 1;
      EndIf;
    EndIf;    
    
    УдФайл:=Кат+Имя+".7z";
    Form.StatusText("Отсылка файла "+Имя+".7z...");
    If not Сокет.SendStr(Имя) Then
      Message("Непредвиденная ошибка при отправке файла "+Имя+"...","!");
      Exit 2;
    EndIf;
    
    If not Сокет.SendFile(Кат+Имя+".7z") Then
      Message("Непредвиденная ошибка (2) при отправке файла "+Имя+"...","!");
      Exit 2;
    EndIf;
    Form.StatusText("Удаление файла "+Имя+".7z...");
    File.DeleteFile(УдФайл);
    УдФайл:="";
  Except
    Стр:=PopError();
    Message("Произошел разрыв связи: "+Стр,"!");
    If УдФайл<>"" Then
      File.DeleteFile(УдФайл);
    EndIf;
    Exit 1;
  EndTry;
  If not БезРазрыва Then
    РазорватьСоединение();
  EndIf;
  Form.StatusText("");
  Exit 0;
EndFunction


Function ОтправитьТекстДок(Т,БезОтдыха=0)
  Фл:=ОтправитьФайл(Т,"DC"+"_"+Trim(DBVar.ПрефиксИБ)+"_"+Сервер,"1","DOC");
  If Фл<>0 Then
    Exit 0;
  EndIf;
  
  РазорватьСоединение();
  //0.5 минут 2000 строк
  If БезОтдыха=0 Then
    ТмпОтдых:=Round((Т.Size()/2000)*0.5,1);
    ТмпОтдых:=Trunc(Max(ТмпОтдых,0.1)*60);
    For i:=1 To ТмпОтдых Do
      Form.StatusText("Отдых: "+(ТмпОтдых-i)+" секунд...");
      Sleep(1000);
    EndDo;
  Else
    Sleep(1000);
  EndIf;
  If not Соединиться("1") Then
    Exit 0;
  EndIf;
  
  Form.StatusText("Ожидание ответа сервера...");
  If not Сокет.SendStr("Вопрос") Then
    Exit 0;
  EndIf;
  
  Стр:=Сокет.ReceiveStr();
  If not Сокет.IsConnected() Then
    Exit 0;
  EndIf;
  
  Exit Стр="ОК";
EndFunction

Function кУпростить(Код)
  If Length(Код)<3 Then
    Exit Код;
  EndIf;
  Смв:=Left(Код,1);
  If Смв="0" Then
    Exit Str(Number(Код));
  EndIf;
  If Смв<="9" Then
    Exit Код;
  EndIf;
  If Mid(Код,2,1)<>"0" Then
    Exit Код;
  EndIf;
  Exit Смв+Str(Number(Mid(Код,2)));
EndFunction


Function ПолучитьПолныйКод(Эл,СпрВид=0)
  If Эл.Selected()=0 Then
    Exit "";
  EndIf;
  Вид:=Эл.DBName();
//Исключения//Исключения//Исключения//Исключения//Исключения
  If Вид="бухПланСчетов" Then
    Exit ?(СпрВид=1,Вид+"/","")+?(Эл.IsFolder()=0,"","+")+Эл.Code;
  EndIf;
//Исключения//Исключения//Исключения//Исключения//Исключения
  If Struct.Ref(Вид).Parents.Count()=0 Then
    Exit ?(СпрВид=1,Вид+"/","")+?(Эл.IsFolder()=0,"","+")+кУпростить(Эл.Code);
  EndIf;
  Exit ?(СпрВид=1,Вид+"/","")+?(Эл.IsFolder()=0,"","+")+кУпростить(Эл.Code)+"@"+ПолучитьПолныйКод(Эл.Parent());
EndFunction

Function Расшифровать(Знч,флПростойВид)
  Вид:=TypeStr(Знч);
  If Pos("DB.",Вид)=1 Then
    TearStr(Вид,"DB.");
  ElseIf Вид="DB" Then
    Вид:="";
  EndIf;
  Тип:=TearStr(Вид,".");
  If (Тип="STRING")Or(Тип="NUMBER")Or(Тип="DATE") Then
    Exit Replace(Replace(Trim(Знч),Chr(13),Chr(16)),Chr(10),Chr(15));
  ElseIf Тип="ENUM" Then
    Exit Trim(Знч.Index());
  ElseIf Тип="REF" Then
    Exit Trim(ПолучитьПолныйКод(Знч,1-флПростойВид));
  ElseIf Тип="DOC" Then
    If IsEmpty(Знч) Then
      Exit "";
    ElseIf Знч.Selected()=0 Then
      Exit "";
    EndIf;
    Exit Trim(Знч.DBName()+"#"+Знч.DocDate+"#"+Знч.DocNum);
  EndIf;
EndFunction

Function РасшифроватьРеквизитСправочника(Знч,ФлПростой)
  СтрРез:="";
  Вид:=TypeStr(Знч);
  If Pos("DB.",Вид)=1 Then
    TearStr(Вид,"DB.");
  ElseIf Вид="DB" Then
    Вид:="";
  EndIf;
  Тип:=TearStr(Вид,".");
  
  If not ФлПростой Then
    СтрРез:=СтрРез+Тип+"@"+Вид+"@";
  EndIf;
  
  If Тип="STRING" Then
    СтрРез:=СтрРез+Replace(Replace(Trim(Знч),Chr(13),Chr(16)),Chr(10),Chr(15));
  ElseIf (Тип="NUMBER")Or(Тип="DATE") Then
    СтрРез:=СтрРез+Trim(Знч);
  ElseIf Тип="ENUM" Then
    If Знч.Selected()<>0 Then
      СтрРез:=СтрРез+Trim(Знч.Index());
    EndIf;  
  ElseIf Тип="REF" Then
    СтрРез:=СтрРез+Trim(ПолучитьПолныйКод(Знч,1-ФлПростой));
  ElseIf Тип="DOC" Then
    If IsEmpty(Знч) Then
      Exit "";
    ElseIf Знч.Selected()=0 Then
      Exit "";
    EndIf;
    Exit Trim(Знч.DBName()+"#"+Знч.DocDate+"#"+Знч.DocNum);
  EndIf;
  Exit СтрРез;
EndFunction


Function ОбработатьИсключения(аЭл,ByRef Атр,ByRef Ид)
  If (Ид="СубконтоТипаПроводки")And(Left(Атр,2)="ВС") Then
    //Старый: ВС00040@Справочник@бухЗначенияСубконто@00966#
    //Старый: "ВС"+<КодВида>+"@Ref/Справочник@"+<ИмяСправочника>+"@"+<КодСправочника>+"#"...
    //Новый: #54@[[ТипОбъекта]ТипСправочникаКромеЗначСубконто/]194#...
    //Новый: #54@[[ТипОбъекта]ТипСправочникаКромеЗначСубконто/]194#...
    
    Стр:=Атр;
    Стр2:="Строка.";
    While Стр<>"" Do
      Стр1:=Trim(TearStr(Стр,"#"));
      If Стр1="" Then
        Continue;
      EndIf;
      If Left(Стр1,1)="@" Then
        TearStr(Стр1,"@");
      EndIf;
      If Pos("ВС",Стр1)<>1 Then
        Message("Неверное значение при перекодировании реквизита СубконтоТипаПроводки (1), элемент "+аЭл+"!","!");
        Message("    Исходное значение реквизита: "+Атр+"!","!");
        Exit;
      EndIf;
      TearStr(Стр1,"ВС");
      КодВидаС:=TearStr(Стр1);
      аСуб:=глПолучитьЗначениеСубконто(Стр1);
      If not isEmpty(аСуб) Then
        Стр2:=Стр2+"ВС"+КодВидаС+"@Ref@"+аСуб.DBName()+"@"+ПолучитьПолныйКод(аСуб)+"#";
      Else
        Стр2:=Стр2+"ВС"+КодВидаС+"@#";
      EndIf;
    EndDo;
    If Стр2="Строка." Then
      Стр2:="Строка.ВС";
    EndIf;
    Атр:=Стр2;
  EndIf;
EndFunction

Function ОтправитьНакопленныеДокументы(Т,Сп,Сп2)
  КлВо:=Сп.Size()+Сп2.Size();
  Form.StatusText("Запаковка/отправка результата документов "+КлВо+"...");
  If not ОтправитьТекстДок(Т,?(КлВо>500,0,1)) Then
    Exit 0;
  EndIf;
  
  Чл:=0;
  For i:=1 To Сп.Size() Do
    аДок:=Сп.Get(i);
    If аДок.Lock() Then
      Try
        аДок.Reload();
        If (аДок.ФлагОбмена=8)And(аДок.Status()>1) Then
          аДок.ФлагОбмена:=КодОбмена;
          аДок.Save();
        EndIf;  
      Finally  
        аДок.Unlock();
      EndTry;  
    EndIf;
    Чл:=Чл+1;
    If Чл%10=0 Then
      Form.StatusText("(1) Снятие флагов с документов "+(Сп.Size()-Чл)+"...");
    EndIf;
  EndDo;
  
  Чл:=0;
  For i:=1 To Сп2.Size() Do
    аДок:=Сп2.Get(i);
    If аДок.Lock() Then
      Try
        аДок.Reload();
        If (аДок.ФлагОбмена=1)And(аДок.Status()<2) Then
          аДок.ФлагОбмена:=КодОбмена;
          аДок.Save();
        EndIf;  
      Finally  
        аДок.Unlock();
      EndTry;  
    EndIf;
    Чл:=Чл+1;
    If Чл%10=0 Then
      Form.StatusText("(2) Снятие флагов с документов "+(Сп2.Size()-Чл)+"...");
    EndIf;
  EndDo;
  
  Exit 1;
EndFunction


Function ДобавитьЭлементСправочникаВТаблицуВыгрузки(Т2,аЭл,УдКод,ФлТип,ФлДоп)
  ВидСпр:=аЭл.DBName();
          
  стрИмя:="";
  If глЕстьРеквизитСправочника("Name",Trim(ВидСпр)) Then
    стрИмя:=Trim(аЭл.Name);
  EndIf;  
  
  СтрРез:=ВидСпр+"#"+УдКод+Chr(14)+ФлТип+Chr(14)+стрИмя+Chr(14)+?((ФлТип=1)Or(ФлДоп=""),"0","1");
  If ФлТип=0 Then
    ЧлЭл0:=ЧлЭл0+1;
  EndIf;

  If (ФлТип=0)And(ФлДоп<>"") Then
    //спДопПараметры, клиентская сторона
    Стр:="";
    
//Исключение доп. параметры//Исключение доп. параметры//Исключение доп. параметры
    If ВидСпр="кнтДоговоры" Then
      ФлК:=Ref.кнтДоговоры.ElementsNumber("@Parent,ЮрЛицо",аЭл.Parent(),аЭл.ЮрЛицо);
      Стр:="("+ФлК+")";
    EndIf;
//Исключение доп. параметры//Исключение доп. параметры//Исключение доп. параметры
    
    While ФлДоп>"" Do
      Стр1:=TearStr(ФлДоп);
      If Стр1="ТипАктива" Then
        Стр:=Стр+?(Стр="","",",")+?(аЭл.IsFolder(),"",мАкт.Get(Max(Min(аЭл.ТипАктива+1,5),1)));
      ElseIf Стр1="Folder" Then
        Стр:=Стр+?(Стр="","",",")+Trim(аЭл.Folder());
      ElseIf Стр1="Parent" Then
        Стр:=Стр+?(Стр="","",",")+Trim(аЭл.Parent());
      Else
        Стр:=Стр+?(Стр="","",",")+Trim(аЭл.GetValue(Стр1));
      EndIf;
    EndDo;
    СтрРез:=СтрРез+Chr(14)+Стр;
  ElseIf ФлТип=1 Then
    //Папка?
    //СтрРез: <ВидКод>#14<Тип>#14<Наименование>#14<0> #14[<ФлагПериод>]<ИдРеквизита>#14<ЗначениеИлиПериодичЗначения>#14... #17<ТабличныеЧасти>
    //<ЗначениеИлиПериодичЗначения> (для периодических): <ДатаЗначения>#18<Значение> #18<ДатаЗначения2>#18<Значение2>...
    //<ТабличныеЧасти>: <ИмяТабЧасти>#14[<ФлагПериод>]<ИдРеквизита>#14<ЗначениеИлиПериодичЗначения>#14... #17<ИмяТабЧасти>...
    
    If аЭл.Folder().Selected()<>0 Then
      СтрРез:=СтрРез+Chr(14)+"Folder"+Chr(14)+Trim(ПолучитьПолныйКод(аЭл.Folder()));
    EndIf;
    //TODO: Добавить родителя (Parent) также как Folder в эту выгрузку
    //      Проблема при создании нового элемента, Parent должен быть указан сразу же (Folder, к примеру, можно сразу же не заполнять)
    //      Поэтому, нужно будет искать "Parent" в реквизитах сначала.
    
    For i:=1 To Struct.Ref(ВидСпр).Props.Count() Do
      Ид:=Struct.Ref(ВидСпр).Props(i).Name;
      If _Or(Ид="Code",Ид="Name") Then
        Continue;
      EndIf;
      ФлПростой:=Struct.Ref(ВидСпр).Props(i).IsSingleType;
      ФлПер:=Struct.Ref(ВидСпр).Props(i).Periodical;
      СтрРез:=СтрРез+Chr(14)+?(ФлПер=0,"","#")+Ид+Chr(14);
      
      If not ФлПер Then
        Знч:=аЭл.GetValue(Ид);
        ОбработатьИсключения(аЭл,Знч,Ид);

        СтрРез:=СтрРез+РасшифроватьРеквизитСправочника(Знч,ФлПростой);
      Else
        aTab:=аЭл.LoadPeriodicalValues(Ид);
        aTab.Select();
        While aTab.Next() Do
          Знч:=aTab._Value;
          СтрРез:=СтрРез+?(aTab.CurLine>1,Chr(18))+aTab._Date+Chr(18)+РасшифроватьРеквизитСправочника(Знч,ФлПростой);
        EndDo;
      EndIf;
    EndDo;
    
    //Строчные части
    If Struct.Ref(ВидСпр).LineParts.Count()>0 Then
      Фл:=0;
      For iLP:=1 To Struct.Ref(ВидСпр).LineParts.Count() Do
        пТипЧ:=Struct.Ref(ВидСпр).LineParts(iLP).Name;
        aTab:=аЭл.LineParts(пТипЧ);
        aTab.Select();
        While aTab.Next() Do
          Фл:=1;
          СтрРез:=СтрРез+Chr(17)+пТипЧ;
          Стр2:="";
          For i:=1 To Struct.Ref(ВидСпр).LineParts(iLP).Props.Count() Do
            Ид:=Struct.Ref(ВидСпр).LineParts(iLP).Props(i).Name;
            ФлПростой:=Struct.Ref(ВидСпр).LineParts(iLP).Props(i).IsSingleType;
            ФлПер:=Struct.Ref(ВидСпр).LineParts(iLP).Props(i).Periodical;
            СтрРез:=СтрРез+Chr(14)+?(ФлПер=0,"","#")+Ид+Chr(14);
            
            If not ФлПер Then
              Знч:=aTab.Get(aTab.CurLine,Ид);
              СтрРез:=СтрРез+РасшифроватьРеквизитСправочника(Знч,ФлПростой);
            Else
              bTab:=аЭл.LoadPeriodicalValues(пТипЧ+"."+aTab.CurLine+"."+Ид);
              bTab.Select();
              While bTab.Next() Do
                Знч:=bTab._Value;
                СтрРез:=СтрРез+?(bTab.CurLine>1,Chr(18))+bTab._Date+Chr(18)+РасшифроватьРеквизитСправочника(Знч,ФлПростой);
              EndDo;
            EndIf;
          EndDo;
        EndDo;
      EndDo;
      If not Фл Then
        СтрРез:=СтрРез+Chr(17);
      EndIf;
    EndIf;  
    ЧлЭл1:=ЧлЭл1+1;
  EndIf;
  
  Т2.AddString(СтрРез);
  
//Исключения: особые свойства номенклатуры//Исключения: особые свойства номенклатуры//Исключения: особые свойства номенклатуры
  If ФлТип=1 Then
    If (ВидСпр="тмцНоменклатура")And(спДопОснТипыЦен.Size()>0) Then
      For аТипыЦен:=1 To спДопОснТипыЦен.Size() Do
        аТипЦен:=спДопОснТипыЦен.Get(аТипыЦен);
        Ц:=Ref.цЦены;
        If not Ц.Find("@Parent,ТипЦен",аЭл,аТипЦен) Then
          Continue;
        EndIf;
        
        ФлЕстьЦена:=0;
        СтрРез:="?цЦены?#"+ПолучитьПолныйКод(аТипЦен)+"@"+ПолучитьПолныйКод(аЭл,1)+Chr(14)+"1"+Chr(14)+""+Chr(14)+"1"+Chr(14)+"#Цена"+Chr(14);
        aTab:=Ц.LoadPeriodicalValues("Цена");
        aTab.Select();
        While aTab.Next() Do
          СтрРез:=СтрРез+?(ФлЕстьЦена=0,"","@")+aTab._Date+"@"+Trim(aTab._Value);
          ФлЕстьЦена:=1;
        EndDo;
        
        If ФлЕстьЦена Then
          Т2.AddString(СтрРез);
        EndIf;
      EndDo;
    EndIf;
    
    If _And(ВидСпр="тмцНоменклатура",аЭл.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь) Then
      бЭл:=Ref.тмцСвойстваОсновныхСредств;
      If бЭл.Find("@Parent",аЭл)>0 Then
        ДобавитьЭлементСправочникаВТаблицуВыгрузки(Т2,бЭл,ПолучитьПолныйКод(бЭл),1,"");
      EndIf;
    EndIf;
    
  EndIf;
//Исключения: особые свойства номенклатуры//Исключения: особые свойства номенклатуры//Исключения: особые свойства номенклатуры

EndFunction


Function ДобавитьДокументВТекст(Т,Док)
  If Left(Док.DocNum,Length(Trim(DBVar.ПрефиксИБ)))<>Trim(DBVar.ПрефиксИБ) Then
    Message("Внимание! Выгружается документ "+Док+", похоже, созданный в другой базе! Возможен конфликт!","!");
  EndIf;
  
  Т.AddString("+"+Док.DBName()+"#"+FormatDate(Док.DocDate,"dd.mm.yy")+"#"+Док.DocNum);
  //$<ИмяРек>chr(12)<ЗначРег>chr(12)<ИмяРек>...
  Исключ:="ФлагОбмена,ПрефиксУдаленнойБазы,";
  Стр:="DOCTIME"+Chr(12)+FormatDate(Док.DocDate,"hh:tt:ss");
  Т.AddString("");//Устарело
  //Реквизиты шапки
  Вид:=Док.DBName();
  For i:=1 To Struct.Doc(Вид).Props.Count() Do
    Ид:=Struct.Doc(Вид).Props(i).Name;
    If _Or(Ид="ПрефиксУдаленнойБазы",Ид="DocDate",Ид="DocNum") Then
      Continue;
    EndIf;
    ФлПростой:=Struct.Doc(Вид).Props(i).IsSingleType;
    Атр:=Док.GetValue(Ид);
    If not IsEmpty(Атр) Then
      ОбработатьИсключения(Док,Атр,Ид);
      Стр:=Стр+?(Стр="","",Chr(12))+Ид+Chr(12)+Расшифровать(Атр,ФлПростой);
    EndIf;
  EndDo;
  Т.AddString(Стр);
  
  //Кодируем строки
  Вид:=Док.DBName();
  Стр:="";
  For iLP:=1 To Struct.Doc(Вид).LineParts.Count() Do
    //#<ИмяСтрочнойЧасти>#...
    пТипЧ:=Struct.Doc(Вид).LineParts(iLP).Name;
    aTab:=Док.LineParts(пТипЧ);
    aTab.Select();
    While aTab.Next() Do
      Стр:=Стр+?(Стр="","",Chr(14))+"#"+пТипЧ+"#";
      Стр2:="";
      For i:=1 To Struct.Doc(Вид).LineParts(iLP).Props.Count() Do
        Ид:=Struct.Doc(Вид).LineParts(iLP).Props(i).Name;
        ФлПростой:=Struct.Doc(Вид).LineParts(iLP).Props(i).IsSingleType;
        Атр:=aTab.Get(aTab.CurLine,Ид);
        If not IsEmpty(Атр) Then
          ОбработатьИсключения(Док,Атр,Ид);
          Стр2:=Стр2+?(Стр2="","",Chr(12))+Ид+Chr(12)+Расшифровать(Атр,ФлПростой);
        EndIf;
      EndDo;
      Стр:=Стр+Стр2;
    EndDo;
  EndDo;
  Т.AddString(Стр);
  
  //#<ТипДвиж><ИмяНак>#<ИмяАтр>#<ЗначАтр>...
  //Кодируем движения
  aList:=List.Create();
  aList.FromString(Док.GetUsedStoragesNames,",");
  Стр:="";
  For i:=1 to aList.Size() Do
    ИдНак:=aList.Get(i);
    TearStr(ИдНак,".");//STOR.БУХГАЛТЕРСКИЕСЧЕТА
    aTab:=Док.LoadStorage(ИдНак);
    флРасход:=aTab.GetColumnIndex("_Expense")>0;
    aTab.Select();
    While aTab.Next() Do
      Стр:=Стр+?(Стр="","",Chr(14))+?(флРасход,1-aTab._Expense,0)+ИдНак;
      For i2:=1 to Struct.Stor(ИдНак).Props.Count() Do
        Ид:=Struct.Stor(ИдНак).Props(i2).Name;
        ФлПростой:=Struct.Stor(ИдНак).Props(i2).IsSingleType;
        Атр:=aTab.Get(aTab.CurLine,Ид);
        If not IsEmpty(Атр) Then
          Стр:=Стр+Chr(12)+Ид+Chr(12)+Расшифровать(Атр,ФлПростой);
        EndIf;
      EndDo;
    EndDo;
  EndDo;
  Т.AddString(Стр);
EndFunction


//0 или 1
Function ПринятьФайл(ByRef Имя,Тип)
  Кат:=AddBackSlash(GetTempDirectory());
  If (File.DoesFileExist(Кат+Имя+".txt"))Or(File.DoesFileExist(Кат+Имя+"_CLN.7z")) Then
    File.DeleteFile(Кат+Имя+".txt");
    File.DeleteFile(Кат+Имя+"_CLN.7z");
    If (File.DoesFileExist(Кат+Имя+".txt"))Or(File.DoesFileExist(Кат+Имя+"_CLN.7z")) Then
      Exit 0;
    EndIf;
  EndIf;
  Имя2:=Сокет.ReceiveFile(Имя+"_CLN.7z",Кат);
  If Имя2="" Then
    Exit 0;
  EndIf;
  Размер:=File.GetFileSize(Имя2);
  Message(?(ProgramMode()=1,""+CurDate()+","+CurTime()+" ","")+Тип+".IN("+Trim(DBVar.ПрефиксИБ)+"): SIZE="+Размер);
  Рез:=SysExecNoConsole("Modules\FreeForms\ВнутренниеОбработки\РаспределеннаяБаза\ОбработкаОбменаСервер\7za.exe x -y -o"+Кат+" "+Имя2+" *.*",1);
  If Рез<>0 Then
    Exit 0;
  EndIf;
  File.DeleteFile(Имя2);
  If not File.DoesFileExist(Кат+Имя+".txt") Then
    Exit 0;
  EndIf;
  Имя:=Кат+Имя+".txt";
  Exit 1;
EndFunction

Function кВосстановить(Код,ВидСпр)
  If Left(Код,1)="+" Then
    Код:=Mid(Код,2);
  EndIf;
//Исключения//Исключения//Исключения//Исключения//Исключения
  If ВидСпр="бухПланСчетов" Then
    Exit Код;
  EndIf;
//Исключения//Исключения//Исключения//Исключения//Исключения
  Дл:=Struct.Ref(ВидСпр).Props("Code").DataType;
  TearStr(Дл,"STRING.");
  Дл:=Number(Дл);
  If Length(Код)=Дл Then
    Exit Код;
  EndIf;
  Пат:="0000000000000000";
  Смв:=Left(Код,1);
  If Смв<="9" Then
    Exit Right(Пат+Код,Дл);
  EndIf;
  Exit Смв+Right(Пат+Mid(Код,2),Дл-1);
EndFunction

Function НайтиЭлементПоПолномуКоду(ВидСпр,КодСпр,Источн)
  аЭл:=DB("Ref."+ВидСпр);
  аКод:=Struct.Ref(ВидСпр).Props("Code");
  ФлУникальный:=_And(not isEmpty(аКод.Numerator),аКод.Numerator.UnicityControl=0);
  
  If (Struct.Ref(ВидСпр).Parents.Count()=0)Or(ФлУникальный) Then
//Исключения//Исключения//Исключения
    Фл:=1;
    If ВидСпр="бухПланСчетов" Then
      If Left(КодСпр,1)="+" Then
        КодСпр:=Mid(КодСпр,2);
      EndIf;
      //Пример: 8.4, 44.1 уже 3
      If (Pos(".",КодСпр)=2)Or(Length(КодСпр)=1) Then
        КодСпр:="0"+КодСпр;
      EndIf;
      Фл:=0;
    EndIf;
//Исключения//Исключения//Исключения
    If Struct.Ref(ВидСпр).Parents.Count()>0 Then //Код уникальный, можно искать без опасения
      КодСпр:=TearStr(КодСпр);
    EndIf;

    If (Struct.Ref(ВидСпр).Props("Code").Numerator.DataType="NUMBER")And(Фл=1) Then
      КодСпр:=Number(КодСпр);//+ исчезает сам
    ElseIf Фл=1 Then
      КодСпр:=кВосстановить(КодСпр,ВидСпр);
    EndIf;
    If аЭл.Find("Code",КодСпр) Then
      Exit аЭл;
    EndIf;
    Message("Не найден элемент справочника "+ВидСпр+" с кодом "+КодСпр+", источник: "+Источн,"!");
    Exit 0;
  EndIf;
  If Struct.Ref(ВидСпр).Parents.Count()>1 Then
    Message("Для справочника "+ВидСпр+" существует более одного родителя, причем коды не уникальны по всему справочнику! Такая ситуация пока не поддерживается!","!");
    Exit 0;
  EndIf;
  
  МойКод:=TearStr(КодСпр);
  бЭл:=НайтиЭлементПоПолномуКоду(Struct.Ref(ВидСпр).Parents(1).Name,КодСпр,Источн);
  If бЭл<>0 Then
    If Struct.Ref(ВидСпр).Props("Code").Numerator.DataType="NUMBER" Then
      МойКод:=Number(МойКод);//+ исчезает сам
    Else
      МойКод:=кВосстановить(МойКод,ВидСпр);
    EndIf;
    If аЭл.Find("@Parent,Code",бЭл,МойКод) Then
      Exit аЭл;
    EndIf;
    Message("Не найден элемент справочника "+ВидСпр+" с кодом "+МойКод+" (владелец: "+бЭл+"), источник: "+Источн,"!");
    Exit 0;
  EndIf;
  Exit 0;
EndFunction




//0 -- невосстановимая ошибка, 1 -- Разрыв, 2 - ОК
Function ОтправитьИзмененныеСправочники(ByRef КолВоЭл);

  //0 -- ошибка, 1 -- ОК
  Function _ОтправитьРезультат(ByRef Т,СпВОжидании)
    Try
      Фл:=ОтправитьФайл(Т,"RF"+"_"+Trim(DBVar.ПрефиксИБ)+"_"+Сервер,"4","REF4");
      If Фл<>0 Then
        Exit 0;
      EndIf;
      
      РазорватьСоединение();
      //0.5 минут 2000 строк
      ТмпОтдых:=Round((Т.Size()/2000)*0.5,1);
      ТмпОтдых:=Trunc(Max(ТмпОтдых,0.1)*60);
      For i:=1 To ТмпОтдых Do
        Form.StatusText("Отдых: "+(ТмпОтдых-i)+" секунд...");
        Sleep(1000);
      EndDo;
      If not Соединиться("4") Then
        Exit 0;
      EndIf;
      
      Form.StatusText("Ожидание ответа сервера...");
      If not Сокет.SendStr("Вопрос") Then
        Exit 0;
      EndIf;
      
      Стр:=Сокет.ReceiveStr();
      If not Сокет.IsConnected() Then
        Exit 0;
      EndIf;
      
      Exit Стр="ОК";
    Finally
      If Result=1 Then
        //Для всех элементов в СпВОжидании состояния триггеров 3 переводим в 2
        Form.StatusText("Установка флагов 'выгружен' для "+СпВОжидании.Size()+" элементов...");
        For i:=1 To СпВОжидании.Size() Do
          aEl:=СпВОжидании.Get(i);
          If aEl.Lock() Then
            If aEl.GetTrigger()=3 Then
              aEl.SetTrigger(2);
            EndIf;  
            aEl.Unlock();
          EndIf;
        EndDo;
      EndIf;
      СпВОжидании.Clear();
      Т:=Text.Create(1);
      Т.AddString("0");
    EndTry;  
  EndFunction
  

  Function _ДобавитьСправочникВТекст(Имя,Путь,ByRef Т,спРодители,СпВОжидании)
    аТемп:=TempDB.Create("зЭл:Ref."+Имя);
    //Путь: @Parent..Ref.адАдресаДоставки.@Parent..Ref.кнтКонтрагенты -> @Parent..Ref.адАдресаДоставки.@Parent
    Стр:="";
    While Путь<>"" Do
      Стр:=Стр+TearStr(Путь,"@Parent")+"@Parent";
      If Pos("@Parent",Путь)=0 Then
        Break;
      EndIf;
    EndDo;
    Путь:=Стр;
    If isEmpty(Путь) Then
      Путь:="@ELEMENT";
    EndIf;
    aNum:=0;
    аТемп.LoadFrom("Ref."+Имя,"@ELEMENT->зЭл",Путь+" IN спРодители","@Trigger<>2");
    aSize:=аТемп.Size();
    аТемп.Select();
    While аТемп.Next() Do
      aNum:=aNum+1;
      If aNum%10=0 Then
        Form.StatusText("Выгрузка справочника "+Имя+": "+aNum+" из "+aSize);
      EndIf;
      aEl:=аТемп.зЭл;
      If aEl.Lock() Then
        aEl.SetTrigger(3);
        Try
          ДобавитьЭлементСправочникаВТаблицуВыгрузки(Т,aEl,ПолучитьПолныйКод(aEl),1,"");
        Except
          aEl.Unlock();
          Стр:=PopError();
          Form.StatusText("Внутренняя ошибка выгрузки: "+Стр);
          Message("Внутренняя ошибка выгрузки: "+Стр+", элемент "+aEl,"!");
          Exit 0;
        EndTry;
        aEl.Unlock();
      
        СпВОжидании.Add(aEl.Copy());
        КолВоЭл:=КолВоЭл+1;
        If СпВОжидании.Size()>1000 Then
          aNum2:=СпВОжидании.Size();
          If _ОтправитьРезультат(Т,СпВОжидании)<>1 Then
            Exit 0;
          EndIf;
          Message("Успешно выгружено измененных элементов: "+aNum2,"I");
        EndIf;
      EndIf;
    EndDo;    
    Exit 1;
  EndFunction

  Function _ДобавитьСправочникВТекстСПодчиненными(Имя,Путь,ByRef Т,спРодители,СпВОжидании)
    //Добавим все подчиненные справочники  
    For i:=1 To Struct.Ref(Имя).Children.Count() Do
      If _ДобавитьСправочникВТекстСПодчиненными(Struct.Ref(Имя).Children(i).Name,"@Parent..Ref."+Имя+?(Путь="","","."+Путь),Т,спРодители,СпВОжидании)=0 Then
        Exit 0;
      EndIf;
    EndDo;
  
    If Struct.Ref(Имя).Trigger Then
      If _ДобавитьСправочникВТекст(Имя,Путь,Т,спРодители,СпВОжидании)=0 Then
        Exit 0;
      EndIf;
    EndIf;
    Exit 1;
  EndFunction

  РазорватьСоединение();
  
  Т:=Text.Create(1);
  Т.AddString("0");
  СпВОжидании:=List.Create();//Элементы, отправленные и ожидающие обновления состояния триггера после принятия на другой стороне
  
  //Происходит отсылка элементов справочников, которые сами содержат, или родители которых содержат реквизит флОбновлятьИзПериферийныхБаз
  //           и которые имеют триггер изменения
  For i:=1 To Struct.Ref.Count() Do
    If isEmpty(Struct.Ref(i).Props("флОбновлятьИзПериферийныхБаз")) Then
      Continue;
    EndIf;
    aEl:=DB("Ref."+Struct.Ref(i).Name);
    спРодители:=aEl.Load(0,"флОбновлятьИзПериферийныхБаз,@isFolder",1,1);
    If спРодители.Size()>0 Then
      If _ДобавитьСправочникВТекстСПодчиненными(Struct.Ref(i).Name,"",Т,спРодители,СпВОжидании)=0 Then
        Exit 1;
      EndIf;
    EndIf;  
  EndDo;
  
  If СпВОжидании.Size()>0 Then
    aNum2:=СпВОжидании.Size();
    If _ОтправитьРезультат(Т,СпВОжидании)<>1 Then
      Exit 0;
    EndIf;
    Message("Успешно выгружено измененных элементов: "+aNum2,"I");    
    Exit 2;
  Else
    Exit 2;
  EndIf;
EndFunction





//0 -- невосстановимая ошибка, 1 -- Разрыв, 2 - ОК
Function ОтправитьДокументы(ByRef КолВоДок);
  РазорватьСоединение();
  
  Т:=Text.Create(1);
  Сп:=List.Create();
  Form.StatusText("Запрос по удаленным документам...");
  //Все удаленные документы
  Сп:=Ref.рбПереносимыеДокументы.Load(0,"Флаг",2);
  
  Т.AddString("5");//ТипДв
  For i:=1 To Сп.Size() Do
    аЭл:=Сп.Get(i);
    Т.AddString("-"+аЭл.Индекс);
    КолВоДок:=КолВоДок+1;
  EndDo;
  
  If Сп.Size()>0 Then
    Form.StatusText("Запаковка/отправка результата удаленные документы...");
    If not ОтправитьТекстДок(Т) Then
      Exit 0;
    EndIf;
    Form.StatusText("Очистка справочника удаленных документов...");
    For i:=1 To Сп.Size() Do
      аЭл:=Сп.Get(i);
      аЭл.DeletePhysically();
    EndDo;
    РазорватьСоединение();
  EndIf;
  

  Сп:=List.Create();
  Сп2:=List.Create();
  Т:=Text.Create(1);
  Т.AddString("5");
  
  
  iLoop:=1;
  While iLoop<=Struct.Doc.Count() Do
    РазорватьСоединение();
    
    ФлМинус:=0;
    Ид:=Struct.Doc(iLoop).Name;
    Form.StatusText("Запрос по документам "+Ид+"...");
    aDoc:=DB("Doc."+Ид);
    aDoc.UseOrder("DocDate+");
    aList:=aDoc.Load(1001,">@Status,<>ФлагОбмена,<ФлагОбмена,<>ФлагОбмена",1,Number(КодОбмена),9,1);
    
    Чл:=0;
    For i:=1 To aList.Size() Do
      аДок:=aList.Get(i);
      Чл:=Чл+1;
      If Чл%5=0 Then
        Form.StatusText(""+Ид+": "+Чл+" ("+аДок.DocDate+")...");
      EndIf;
      If аДок.Lock() Then
        аДок.Reload();
        аДок.ФлагОбмена:=8;
        аДок.Save();
        Try
          ДобавитьДокументВТекст(Т,аДок);
        Except
          аДок.Unlock();
          Стр:=PopError();
          Form.StatusText("Внутренняя ошибка выгрузки: "+Стр);
          Message("Внутренняя ошибка выгрузки: "+Стр+", документ "+аДок,"!");
          Exit 0;
        EndTry;
        аДок.Unlock();
      EndIf;
      
      Сп.Add(аДок);
      КолВоДок:=КолВоДок+1;
      If Сп.Size()>1000 Then
        ФлМинус:=1;
        Break;
      EndIf;
    EndDo;
    
    Form.StatusText("Запрос по удаленным документам "+Ид+"...");
    aList:=aDoc.Load(1001,"<@Status,ФлагОбмена",2,1);
    
    Чл:=0;
    For i:=1 To aList.Size() Do
      аДок:=aList.Get(i);
      Чл:=Чл+1;
      If Чл%5=0 Then
        Form.StatusText("(Уд) "+Ид+": "+Чл+" ("+аДок.DocDate+")...");
      EndIf;
      If Left(аДок.DocNum,Length(Trim(DBVar.ПрефиксИБ)))<>Trim(DBVar.ПрефиксИБ) Then
        Message("Внимание! Удаляется документ "+аДок+", похоже, созданный в другой базе! Возможен конфликт!","!");
      EndIf;
      
      Т.AddString("-"+аДок.DBName()+"#"+аДок.DocDate+"#"+аДок.DocNum);
      Сп2.Add(аДок);
      КолВоДок:=КолВоДок+1;
      If Сп.Size()+Сп2.Size()>1000 Then
        ФлМинус:=1;
        Break;
      EndIf;
    EndDo;
    
    iLoop:=iLoop+1-ФлМинус;
    
    If Сп.Size()+Сп2.Size()>1000 Then
      If not ОтправитьНакопленныеДокументы(Т,Сп,Сп2) Then
        Exit 0;
      EndIf;
      Сп:=List.Create();
      Сп2:=List.Create();
      Т:=Text.Create(1);
      Т.AddString("5");
    EndIf;
  EndDo;
    
  If Сп.Size()+Сп2.Size()>0 Then
    Sleep(100);
    If not ОтправитьНакопленныеДокументы(Т,Сп,Сп2) Then
      Exit 0;
    EndIf;
    Сп:=0;Сп2:=0;Т:=0;
  EndIf;
    
  Exit 2;
EndFunction


Function ВыполнитьРаботу(ПутьИни)
  If isEmpty(ПутьИни) Then
    Message("Неверно задан способ обмена! Проверьте настройки обмена!","!");
    Exit;
  EndIf;
  //1 - обычная, 2 - только справочники
  аБлокировка:=Ref.рбУдаленныеБазы;
  If not аБлокировка.Find("ПрефиксБазы",Trim(DBVar.ПрефиксИБ)) Then
    аБлокировка.New();
    аБлокировка.ПрефиксБазы:=Trim(DBVar.ПрефиксИБ);
    аБлокировка.КодОбмена:=2;
    аБлокировка.Приоритет:=10;
    If not глЗаписать(аБлокировка) Then
      Exit;
    EndIf;
  EndIf;
  аПольз:="";аМаш:="";аВремя:="";
  If аБлокировка.Lock(аПольз,аМаш,аВремя)=0 Then
    Стр:="Невозможно провести обмен с удаленной базой, так как в данный момент уже проходит обмен, который инициировал пользователь "+аПольз+" на "+аМаш+" в "+аВремя+"! "+
        "Пожалуйста, дождитесь окончания обмена, прежде чем запускать его у себя!";
    If ProgramMode()=1 Then
      Box(Стр,Q_STOP);
    Else
      Message(Стр,"!");
    EndIf;    
    Exit;  
  EndIf;

  Try
    //Создаем список типов цен, указанных в складах тек. базы (т.е., список доп. основных цен)
    спДопОснТипыЦен:=List.Create();
    аСклад:=Ref.общСклады;
    аСклад.Select();
    While аСклад.Next() Do
      If аСклад.IsFolder() Then
        Continue;
      EndIf;
      аТип:=аСклад.рзТипЦенПоступления;
      If аТип.Selected()=0 Then
        Continue;
      EndIf;
      
      If спДопОснТипыЦен.Find(аТип)=0 Then
        спДопОснТипыЦен.Add(аТип);
      EndIf;
    EndDo;
    
    
    Form.StatusText("Загрузка установок...");
    
    Уст:=Ini.Create();
    Уст.AddFromFile("Modules\FreeForms\ВнутренниеОбработки\Установки\НастройкаОбмена.ini",1);
    ПопыткиМин:=Number(Уст.GetData(ПутьИни+"\TryTime","10"));
    ЗанятМин:=Number(Уст.GetData(ПутьИни+"\WaitIfBusy","20"));
    Порт:=Уст.GetData(ПутьИни+"\ClnServer","localhost");
    Сервер:=TearStr(Порт,":");
    Порт:=Number(Порт);
    Порт:=?(Порт=0,13203,Порт);
    Отдохнуть:=Number(Уст.GetData(ПутьИни+"\CoolDown","5"));
    Таймаут:=Number(Уст.GetData(ПутьИни+"\TimeOut","30000"));
    Пароль:=Trim(Уст.GetData(ПутьИни+"\Password","123"));
    
    Form.StatusText("Соединение...");
    If not Соединиться("0") Then
      Exit;
    EndIf;
    
    If ЗапросДокументы=1 Then
      While 0=0 Do
        КолВоДок:=0;
        //0 -- невосстановимая ошибка, 1 -- Разрыв, 2 - ОК
        Try
          Фл:=ОтправитьДокументы(КолВоДок);
        Except
          Стр:=PopError();
          Form.StatusText("Разрыв связи или ошибка: "+Стр);
          Message("Разрыв связи или ошибка: "+Стр,"!");
          Фл:=0;
        EndTry  
        If Фл=0 Then
          Exit;
        ElseIf Фл=2 Then
          Break;
        EndIf;
      EndDo;
      Message("Отправлено измененных документов: "+КолВоДок,"I");
    EndIf;
    
    If ЗапросСправочники=1 Then
      While 0=0 Do
        КолВоЭл:=0;
        //0 -- невосстановимая ошибка, 1 -- Разрыв, 2 - ОК
        Фл:=0;
        Try
          Фл:=ОтправитьИзмененныеСправочники(КолВоЭл);
        Except
          Стр:=PopError();
          Form.StatusText("Разрыв связи или ошибка: "+Стр);
          Message("Разрыв связи или ошибка: "+Стр,"!");
          Фл:=0;
        EndTry
        If Фл=0 Then
          Message("Отправка измененных справочников завершена с ошибкой!","!");
          Exit;
        ElseIf Фл=2 Then
          Break;
        EndIf;
      EndDo;
      Message("Всего выгружено измененных элементов: "+КолВоЭл,"I");
    EndIf;
    
  //Справочники//Справочники//Справочники//Справочники//Справочники//Справочники//Справочники//Справочники//Справочники
    ЧлЭл0:=0;
    ЧлЭл1:=0;
    ФлЦиклов:=0;
    Form.StatusText("Этап синхронизации справочников...");
    While 0=0 Do
      Try
        РазорватьСоединение();
        
        ФлЦиклов:=ФлЦиклов+1;
        If ФлЦиклов=4 Then
          РазорватьСоединение();
          If not Соединиться("3") Then
            Exit;
          EndIf;
          Сокет.SendStr("0");
          Break;
        EndIf;
        
        If not Соединиться("2") Then
          Exit;
        EndIf;
    
        Имя:=Сокет.ReceiveStr();
        If Имя="0" Then
          РазорватьСоединение();
          If not Соединиться("3") Then
            Exit;
          EndIf;
          Сокет.SendStr("0");
          Break;
        EndIf;
        
        If not ПринятьФайл(Имя,"REF1") Then
          Message("Невозможно принять файл с сервера, ошибка передачи файла!","!");
          Exit;
        EndIf;
        Т:=Text.Create(1);
        Т.Load(Имя,0);
        File.DeleteFile(Имя);
        Т2:=Text.Create(1);
        Т2.AddString("0");
        
        
        НачБазы:=DBVar.НачалоПериодаБазы;
        ТипДв:=Number(Т.GetLine(1));
        For iLoop:=2 To Т.Size() Do
          Стр:=Т.GetLine(iLoop);
          If (Т.Size()-iLoop)%10=0 Then
            Form.StatusText("Синхронизация справочников/документов: "+(Т.Size()-iLoop));
          EndIf;
          
          //Запрос на документ
          If Pos("!DOC:",Стр)=1 Then
            TearStr(Стр,"!DOC:");
            ВидДок:=TearStr(Стр,"#");
            НомерДок:=TearStr(Стр,"#");
            ДатаДок:=Date(TearStr(Стр,"#"));
            If _Or(isEmpty(Struct.Doc(ВидДок)),ДатаДок<НачБазы) Then
              Т2.AddString("!DOC:"+ВидДок+"#"+НомерДок+"#"+ДатаДок+"#SKIP");
              Continue;
            EndIf;
            
            аДок:=глНайтиДокументПоНомеру(ВидДок,НомерДок,ДатаДок);
            If аДок=0 Then
              Т2.AddString("!DOC:"+ВидДок+"#"+НомерДок+"#"+ДатаДок+"#NOTFOUND");
              Continue;
            EndIf;
  
            If аДок.Status()<2 Then
              Т2.AddString("!DOC:"+ВидДок+"#"+НомерДок+"#"+ДатаДок+"#DELETED");
              Continue;
            EndIf;
            
            If аДок.Lock() Then
              Try
                аДок.Reload();
                аДок.ФлагОбмена:=0;
                аДок.Save();
              Finally  
                аДок.Unlock();
              EndTry;  
              Т2.AddString("!DOC:"+ВидДок+"#"+НомерДок+"#"+ДатаДок+"#OK");
            EndIf;  
            Continue;
          EndIf;
          
          //Справочники
          ВидСпр:=TearStr(Стр,"#");
          УдКод:=TearStr(Стр,"#");
          ФлТип:=Number(TearStr(Стр,"#"));// 0 - частичный, 1 - полный
          ФлДоп:=Trim(TearStr(Стр,"#"));//Список доп. параметров
          
          If isEmpty(Struct.Ref(ВидСпр)) Then
            Continue;
          EndIf;
                    
          аЭл:=НайтиЭлементПоПолномуКоду(ВидСпр,УдКод,ВидСпр+","+УдКод);
          If аЭл=0 Then
            Т2.AddString(ВидСпр+"#"+УдКод+Chr(14)+"-1");
            Continue;
          EndIf;
          Try
            ДобавитьЭлементСправочникаВТаблицуВыгрузки(Т2,аЭл,УдКод,ФлТип,ФлДоп);
          Except
            Стр:=PopError();
            Form.StatusText("Внутренняя ошибка выгрузки: "+Стр);
            Message("Внутренняя ошибка выгрузки: "+Стр+", элемент "+аЭл,"!");
            Exit;
          EndTry;
        EndDo;
        
        //Отправка Т2
        Фл:=ОтправитьФайл(Т2,"RF"+"_"+Trim(DBVar.ПрефиксИБ)+"_"+Сервер,"3","REF2");
        If Фл<>0 Then
          Exit;
        EndIf;
      Except
        Message("Произошел разрыв связи: "+PopError(),"!");
        If not Соединиться("2") Then
          Exit;
        EndIf;
      EndTry;
    EndDo;
    Message("Краткой сверке подверглось "+ЧлЭл0+" элементов!","I");
    Message("Полной сверке подверглось "+ЧлЭл1+" элементов!","I");
    
    Form.StatusText("Обмен завершен успешно!");
  Finally
    аБлокировка.Unlock();
  EndTry
EndFunction

Function OnOpen()
  Уст:=Ini.Create();
  Уст.AddFromFile("Modules\FreeForms\ВнутренниеОбработки\Установки\НастройкаОбмена.ini",1);
  мАкт:=List.Create("ПК","ПС-A","ПС-B","ПС-C","КР");
  
  спСпособОбмена:=List.Create();
  For i:=1 to Уст.ComponentsInBranch("") Do
    Стр:=Уст.GetComponentByNumberName("",i);
    If not Уст.IsBranch(Стр) Then
      Continue;
    EndIf;
    If UpperCase(Стр)="TRANSLATION" Then
      Continue;
    EndIf;
    If UpperCase(Стр)="FULLUPDATE" Then
      Continue;
    EndIf;
    спСпособОбмена.Add(Стр);
  EndDo;
  глСохранитьВМодуле("спСпособОбмена",спСпособОбмена);
  
  If not isEmpty(Param) Then
    Стр:=Trim(Param);
    //<ИдентификаторОбмена>#<ЗапросДокументы>#<ЗапросСправочники>
    ПутьИни:=TearStr(Стр,"#");
    ЗапросДокументы:=Number(TearStr(Стр,"#"));
    ЗапросСправочники:=Number(TearStr(Стр,"#"));
    ВыполнитьРаботу(ПутьИни);
    Exit 0;
  EndIf;
EndFunction

Function OnExecute()
  оСпособ:=Form.оСпособ.Value;
  If оСпособ.SelectedLine=0 Then
    Exit;
  EndIf;
  ЗапросДокументы:=Form.оЗапросДокументы.Value;
  ЗапросСправочники:=Form.оЗапросСправочники.Value;
  ВыполнитьРаботу(оСпособ.Get(оСпособ.SelectedLine));
EndFunction
