//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

Function НазначитьТип()
  Function НазначитьТипРекв(оСуб,ВС)
    If Trim(ВС.ТипЗначенияЛокальный)="" Then
      оСуб.SetType("Ref.бухЗначенияСубконто");
      If _And(not isEmpty(оСуб.Value),оСуб.Value.Parent()<>ВС) Then
        оСуб.Value:=0;
      EndIf;
    Else
      оСуб.SetType(Replace(Uppercase(ВС.ТипЗначенияЛокальный),"СПРАВОЧНИК","REF"));
    EndIf;
  EndFunction

  аСчет:=Form.оСчет.Value;
  If аСчет.Selected()>0 Then
    НазначитьТипРекв(Form.оСуб1,аСчет.ВидСубконто1);
    НазначитьТипРекв(Form.оСуб2,аСчет.ВидСубконто2);
    НазначитьТипРекв(Form.оСуб3,аСчет.ВидСубконто3);
  EndIf;
EndFunction


//Вызывается из редактора строки
Function ОбновитьТипы()
  аСчет:=Form.оСчет.Value;
  If аСчет.Selected()=0 Then
    Form.оСуб1.Value:=GetNothing();
    Form.оСуб2.Value:=GetNothing();
    Form.оСуб3.Value:=GetNothing();
    Form.тСчет.Caption:="";
  Else
    Form.тСчет.Caption:=аСчет.Name;
  EndIf;
  
  If аСчет.ВидСубконто1.Selected()=0 Then
    Form.тСуб1.Caption:="";
    Form.тС1.isDisabled:=1;
    Form.оСуб1.isDisabled:=1;
    Form.оСуб1.Value:=GetNothing();
  Else
    Form.тСуб1.Caption:=аСчет.ВидСубконто1.Name;
    Form.тС1.isDisabled:=0;
    Form.оСуб1.isDisabled:=0;
  EndIf;
  
  If аСчет.ВидСубконто2.Selected()=0 Then
    Form.тСуб2.Caption:="";
    Form.тС2.isDisabled:=1;
    Form.оСуб2.isDisabled:=1;
    Form.оСуб2.Value:=GetNothing();
  Else
    Form.тСуб2.Caption:=аСчет.ВидСубконто2.Name;
    Form.тС2.isDisabled:=0;
    Form.оСуб2.isDisabled:=0;
  EndIf;
  
  If аСчет.ВидСубконто3.Selected()=0 Then
    Form.тСуб3.Caption:="";
    Form.тС3.isDisabled:=1;
    Form.оСуб3.isDisabled:=1;
    Form.оСуб3.Value:=GetNothing();
  Else
    Form.тСуб3.Caption:=аСчет.ВидСубконто3.Name;
    Form.тС3.isDisabled:=0;
    Form.оСуб3.isDisabled:=0;
  EndIf;
  
  НазначитьТип();
  Exit "";
EndFunction

Function _ДобавитьСчета(Сп,Стр,Суб1,Суб2)
  аСч:=глНайтиСчет(Стр);
  aEl:=Ref.бухПланСчетов;
  aEl.Select("->@Folder",аСч);
  While aEl.Next() Do
    If (aEl.ВидСубконто1=Суб1)And(aEl.ВидСубконто2=Суб2) Then
      Сп.Add(aEl.Copy());
    EndIf;
  EndDo;
EndFunction

Function СоздатьДокумент(Коммент)
  аДок:=Doc.УниверсальныйДокумент;
  аДок.New();
  аДок.SetPrefix("DocNum",Trim(DBVar.ПрефиксИБ));
  аДок.КодОперации:=Enum.коУниверсальныйДокумент.УниверсальныйДокумент;
  аДок.DocDate:=BegOfDay(Form.ДокДата.Value);
  глЗаполнитьШапку(аДок);
  аДок.Комментарий:=Коммент;
  
  Exit аДок;
EndFunction


Function _СоздатьСтроку(ЗБ,aTab,Сч10,зН,зЮЛ)
  While ЗБ.Next(3) Do
    зСкл:=ЗБ.зСк;
    //Стр:="@Субконто1@0@тмцНоменклатура@"+зН.Code+"@Субконто2@0@общСклады@"+зСкл.Code;
    
    СчетКод:="41.1";
    If зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Товар Then
      СчетКод:=?(зСкл.флРозничныйСклад=0,"41.1","41.2");
    ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара Then
      СчетКод:="41.3";
    ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь Then
      СчетКод:=Сч10.Code;
    EndIf;
    Счет:=глНайтиСчет(СчетКод);
    
    Счет2:=Form.оСчет.Value;
    If (Счет2.Code="90.2.1")Or(Счет2.Code="90.2.2") Then
      Счет2:=глНайтиСчет(?(зСкл.флОблагаетсяЕНВД=0,"90.2.1","90.2.2"));
    EndIf;

    aTab.NewLine();
    aTab.ИмяНакопителя:="БухгалтерскиеСчета";
    aTab.ЗнакДвижения:="-";
    aTab.Аккумуляторы:="ЮрЛицо@"+глЗашифроватьЗначениеУД(зЮЛ)+"###Счет@"+глЗашифроватьЗначениеУД(Счет)+"###Субконто1@"+глЗашифроватьЗначениеУД(зН)+
      "###Субконто2@"+глЗашифроватьЗначениеУД(зСкл);
    aTab.Реквизиты:="КоррСчет@"+глЗашифроватьЗначениеУД(Счет2);
    aTab.Активы:="Количество@"+глЗашифроватьЗначениеУД(ЗБ.зКл)+"###Сумма@"+глЗашифроватьЗначениеУД(ЗБ.зСм);
    
    aTab.NewLine();
    aTab.ИмяНакопителя:="БухгалтерскиеСчета";
    aTab.ЗнакДвижения:="+";
    aTab.Аккумуляторы:="ЮрЛицо@"+глЗашифроватьЗначениеУД(зЮЛ)+"###Счет@"+глЗашифроватьЗначениеУД(Счет2)+?(not IsEmpty(Form.оСуб1.Value),"###Субконто1@"+глЗашифроватьЗначениеУД(Form.оСуб1.Value))
      +?(not IsEmpty(Form.оСуб2.Value),"###Субконто2@"+глЗашифроватьЗначениеУД(Form.оСуб2.Value))+?(not IsEmpty(Form.оСуб3.Value),"###Субконто3@"+глЗашифроватьЗначениеУД(Form.оСуб3.Value));
    aTab.Реквизиты:="КоррСчет@"+глЗашифроватьЗначениеУД(Счет);
    aTab.Активы:="Сумма@"+глЗашифроватьЗначениеУД(ЗБ.зСм);
  EndDo;
EndFunction        
        


Function РасхожденияСкладБухУчет()
  КонДата:=BegOfDay(Form.КонДата.Value);
  оН:=Form.оН.Value;
  оТГ:=Form.оТГ.Value;
  оСк:=Form.оСк.Value;
  
  If Form.оСчет.Value.Selected()=0 Then
    Box("Выберите корреспондирующий счет!",Q_STOP);
    Exit;
  EndIf;
  
  спСч:=List.Create();
  аСч:=глНайтиСчет("41.1");
  _ДобавитьСчета(спСч,"41",аСч.ВидСубконто1,аСч.ВидСубконто2);
  спСч.Add(глНайтиСчет("43"));
  аСч:=глНайтиСчет("10.1");
  _ДобавитьСчета(спСч,"10",аСч.ВидСубконто1,аСч.ВидСубконто2);
  
  Form.StatusText("Запрос по складскому учету...");
  ТЗ:="Period From КонДата to КонДата;
  |зН:=Storage.ОстаткиТМЦ.Номенклатура;
  |зТГ:=Storage.ОстаткиТМЦ.Номенклатура.ТоварнаяГруппа;
  |зСк:=Storage.ОстаткиТМЦ.Склад;
  |Condition(зН IN оН.Get(1));
  |Condition(зН NOT IN оН.Get(2));
  |Condition(зТГ IN оТГ.Get(1));
  |Condition(зТГ NOT IN оТГ.Get(2));
  |Condition(зСк IN оСк.Get(1));
  |Condition(зСк NOT IN оСк.Get(2));    
  |зЮЛ:=Storage.ОстаткиТМЦ.ЮрЛицо;
  |зКл:=EndTotals(Количество);
  |Group зЮЛ,зН,зСк;";
  З:=Query.Create();
  З.Execute(ТЗ);
  
  Form.StatusText("Запрос по счетам...");
  ТЗ:="Period From КонДата to КонДата;
  |зСчет:=Storage.БухгалтерскиеСчета.Счет;
  |Condition(зСчет IN спСч);
  |зСк:=Storage.БухгалтерскиеСчета.Субконто2;
  |Condition(зСк IN оСк.Get(1));
  |Condition(зСк NOT IN оСк.Get(2));    
  |зН:=Storage.БухгалтерскиеСчета.Субконто1;
  |Condition(зН IN оН.Get(1));
  |Condition(зН NOT IN оН.Get(2));
  |зТГ:=Storage.БухгалтерскиеСчета.Субконто1..Ref.тмцНоменклатура.ТоварнаяГруппа;
  |Condition(зТГ IN оТГ.Get(1));
  |Condition(зТГ NOT IN оТГ.Get(2));  
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |зКл:=EndTotals(Количество);
  |зСм:=EndTotals(Сумма);
  |Group зЮЛ,зН,зСк;";
  ЗБ:=Query.Create();
  ЗБ.Execute(ТЗ);
  
  аДок:=СоздатьДокумент("Устранение расхождений между учетом по складу и бух. счетами");
  aTab:=аДок.LineParts("Содержание");
  
  спЮЛ:=List.Create();
  Form.StatusText("Расчет и заполнение документов...");
  While З.Next(1) Do
    
    Сч10:=глНайтиСчет("10.1");
    If З.зЮЛ.GetValue("СчетХраненияОС",КонДата).Selected()<>0 Then
      Сч10:=З.зЮЛ.GetValue("СчетХраненияОС",КонДата);
    EndIf;
    
    спН:=List.Create();
    зЮЛ:=З.зЮЛ;
    спЮЛ.Add(зЮЛ);
    While З.Next(2) Do
      зН:=З.зН;
      спН.Add(зН);
      
      Form.StatusText("Заполнение: "+зЮЛ+", "+зН+"...");
      ТКолОп:=Tab.Create("Скл");
      ТКолОп.AddColumn("Чл",,"Number");
      ТКолБух:=Tab.Create("Скл");
      ТКолБух.AddColumn("Чл",,"Number");
      ТКолБух.AddColumn("См",,"Number");
      
      While З.Next(3) Do
        If З.зКл<>0 Then
          ТКолОп.AddLine("Скл,Чл",З.зСк,З.зКл);
        EndIf;
      EndDo;
      
      Цена0:=0;
      ЗБ.ResultTable.CurLine:=0;
      If ЗБ.ResultTable.LocateAndGoto("@LEVEL,зЮЛ,зН",2,зЮЛ,зН)>0 then
        Цена0:=?(ЗБ.зКл=0,0,ЗБ.зСм/ЗБ.зКл);
        While ЗБ.Next(3) Do
          ТКолБух.AddLine("Скл,Чл,См",ЗБ.зСк,ЗБ.зКл,ЗБ.зСм);
        EndDo;
      EndIf;
      
      //Таблица разницы между учетами
      ТРасх:=Tab.Create("Скл");
      ТРасх.AddColumn("Чл",,"Number");
      ТРасх.AddColumn("Цена",,"Number");
      а:=1;
      While а<=ТКолОп.Size() Do
        ТКолОп.CurLine:=а;
        ЧлБух:=0;
        СмБух:=0;
        If ТКолБух.FindAndGoto(ТКолОп.Скл,,"Скл")=0 Then
          If ТКолОп.Чл=0 Then
            ТКолОп.Remove(а);
            Continue;
          EndIf;
        Else
          If ТКолОп.Чл=ТКолБух.Чл Then
            ТКолОп.Remove(а);
            ТКолБух.Remove(ТКолБух.CurLine);
            Continue;
          EndIf;
          СмБух:=ТКолБух.См;
          ЧлБух:=ТКолБух.Чл;
          ТКолБух.Remove(ТКолБух.CurLine);
        EndIf;
        
        ТРасх.AddLine("Скл,Чл,Цена",ТКолОп.Скл,ЧлБух-ТКолОп.Чл,?(ЧлБух=0,Цена0,СмБух/ЧлБух));
        ТКолОп.Remove(а);
      EndDo;
      
      ТКолБух.Select();
      While ТКолБух.Next() Do
        ТРасх.AddLine("Скл,Чл,Цена",ТКолБух.Скл,ТКолБух.Чл,?(ТКолБух.Чл=0,Цена0,ТКолБух.См/ТКолБух.Чл));
      EndDo;
      
      //Создаем таблицу перемещения между складами
      ТПеремещ:=Tab.Create("Скл,Скл2");
      ТПеремещ.AddColumn("Чл",,"Number");
      ТПеремещ.AddColumn("Цена",,"Number");
      
      а:=1;
      While а<=ТРасх.Size() Do
        ТРасх.CurLine:=а;
        Чл:=ТРасх.Чл;
        Скл:=ТРасх.Скл;
        б:=а+1;
        While (б<=ТРасх.Size())And(Чл<>0) Do
          ТРасх.CurLine:=б;
          If (ТРасх.Чл<0)And(Чл>0) Then
            Чл0:=Min(-ТРасх.Чл,Чл);
            ТРасх.Чл:=ТРасх.Чл+Чл0;
            Чл:=Чл-Чл0;
            Чл0:=-Чл0;
          ElseIf (ТРасх.Чл>0)And(Чл<0) Then
            Чл0:=Min(ТРасх.Чл,-Чл);
            ТРасх.Чл:=ТРасх.Чл-Чл0;
            Чл:=Чл+Чл0;
          Else
            б:=б+1;
            Continue;
          EndIf;
          ТПеремещ.AddLine("Скл,Скл2,Чл,Цена",Скл,ТРасх.Скл,Чл0,ТРасх.Цена);
          If Round(ТРасх.Чл,6)=0 Then
            ТРасх.Remove(б);
          EndIf;
        EndDo;
        If Round(Чл,6)=0 Then
          ТРасх.Remove(а);
        Else
          а:=а+1;
        EndIf;
      EndDo;
      
      ТПеремещ.Select();
      While ТПеремещ.Next() Do
        //Создаем перемещения
        
        СчетКод:="41.1";
        If зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Товар Then
          СчетКод:=?(ТПеремещ.Скл.флРозничныйСклад=0,"41.1","41.2");
        ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара Then
          СчетКод:="41.3";
        ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь Then
          СчетКод:=Сч10.Code;
        EndIf;
        Счет:=глНайтиСчет(СчетКод);
        
        СчетКод2:="41.1";
        If зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Товар Then
          СчетКод2:=?(ТПеремещ.Скл2.флРозничныйСклад=0,"41.1","41.2");
        ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара Then
          СчетКод2:="41.3";
        ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь Then
          СчетКод2:=Сч10.Code;
        EndIf;
        Счет2:=глНайтиСчет(СчетКод2);
        
        Цена:=ТПеремещ.Цена;
        
        aTab.NewLine();
        aTab.ИмяНакопителя:="БухгалтерскиеСчета";
        aTab.ЗнакДвижения:="+";
        aTab.Аккумуляторы:="ЮрЛицо@"+глЗашифроватьЗначениеУД(зЮЛ)+"###Счет@"+глЗашифроватьЗначениеУД(Счет)+"###Субконто1@"+глЗашифроватьЗначениеУД(зН)+
          "###Субконто2@"+глЗашифроватьЗначениеУД(ТПеремещ.Скл);
        aTab.Реквизиты:="КоррСчет@"+глЗашифроватьЗначениеУД(Счет2);
        aTab.Активы:="Количество@"+глЗашифроватьЗначениеУД(ТПеремещ.Чл)+"###Сумма@"+глЗашифроватьЗначениеУД(Round(Цена*ТПеремещ.Чл,2));
        
        aTab.NewLine();
        aTab.ИмяНакопителя:="БухгалтерскиеСчета";
        aTab.ЗнакДвижения:="-";
        aTab.Аккумуляторы:="ЮрЛицо@"+глЗашифроватьЗначениеУД(зЮЛ)+"###Счет@"+глЗашифроватьЗначениеУД(Счет2)+"###Субконто1@"+глЗашифроватьЗначениеУД(зН)+
          "###Субконто2@"+глЗашифроватьЗначениеУД(ТПеремещ.Скл2);
        aTab.Реквизиты:="КоррСчет@"+глЗашифроватьЗначениеУД(Счет);
        aTab.Активы:="Количество@"+глЗашифроватьЗначениеУД(ТПеремещ.Чл)+"###Сумма@"+глЗашифроватьЗначениеУД(Round(Цена*ТПеремещ.Чл,2));
      EndDo;

      //Списание, оприходование: 90.2.1 или 90.2.2
      ТРасх.Select();
      While ТРасх.Next() Do
      
        СчетКод:="41.1";
        If зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Товар Then
          СчетКод:=?(ТРасх.Скл.флРозничныйСклад=0,"41.1","41.2");
        ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара Then
          СчетКод:="41.3";
        ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь Then
          СчетКод:=Сч10.Code;
        EndIf;
        Счет:=глНайтиСчет(СчетКод);
        
        Счет2:=Form.оСчет.Value;
        If (Счет2.Code="90.2.1")Or(Счет2.Code="90.2.2") Then
          Счет2:=глНайтиСчет(?(ТРасх.Скл.флОблагаетсяЕНВД=0,"90.2.1","90.2.2"));
        EndIf;
        Цена:=ТРасх.Цена;
        
        aTab.NewLine();
        aTab.ИмяНакопителя:="БухгалтерскиеСчета";
        aTab.ЗнакДвижения:="-";
        aTab.Аккумуляторы:="ЮрЛицо@"+глЗашифроватьЗначениеУД(зЮЛ)+"###Счет@"+глЗашифроватьЗначениеУД(Счет)+"###Субконто1@"+глЗашифроватьЗначениеУД(зН)+
          "###Субконто2@"+глЗашифроватьЗначениеУД(ТРасх.Скл);
        aTab.Реквизиты:="КоррСчет@"+глЗашифроватьЗначениеУД(Счет2);
        aTab.Активы:="Количество@"+глЗашифроватьЗначениеУД(ТРасх.Чл)+"###Сумма@"+глЗашифроватьЗначениеУД(Round(Цена*ТРасх.Чл,2));
        
        aTab.NewLine();
        aTab.ИмяНакопителя:="БухгалтерскиеСчета";
        aTab.ЗнакДвижения:="+";
        aTab.Аккумуляторы:="ЮрЛицо@"+глЗашифроватьЗначениеУД(зЮЛ)+"###Счет@"+глЗашифроватьЗначениеУД(Счет2)+?(not IsEmpty(Form.оСуб1.Value),"###Субконто1@"+глЗашифроватьЗначениеУД(Form.оСуб1.Value))
          +?(not IsEmpty(Form.оСуб2.Value),"###Субконто2@"+глЗашифроватьЗначениеУД(Form.оСуб2.Value))+?(not IsEmpty(Form.оСуб3.Value),"###Субконто3@"+глЗашифроватьЗначениеУД(Form.оСуб3.Value));
        aTab.Реквизиты:="КоррСчет@"+глЗашифроватьЗначениеУД(Счет);
        aTab.Активы:="Сумма@"+глЗашифроватьЗначениеУД(Round(Цена*ТРасх.Чл,2));
      EndDo;
    EndDo;//зН
    
    
    ЗБ.ResultTable.CurLine:=0;
    If ЗБ.ResultTable.LocateAndGoto("@LEVEL,зЮЛ",3,зЮЛ)=0 then
      Continue;
    EndIf;
    
    While ЗБ.Next(2) Do
      зН:=ЗБ.зН;
      If спН.Find(зН)=0 Then
        _СоздатьСтроку(ЗБ,aTab,Сч10,ЗБ.зН,ЗБ.зЮЛ);
      EndIf;
    EndDo;
  EndDo//зЮЛ;
  
  //Движения с новыми ЮЛ
  ЗБ.First();
  While ЗБ.Next(1) Do
    If спЮЛ.Find(ЗБ.зЮЛ)>0 Then
      Continue;
    EndIf;
    While ЗБ.Next(2) Do
      _СоздатьСтроку(ЗБ,aTab,Сч10,ЗБ.зН,ЗБ.зЮЛ);
    EndDo;
  EndDo;

  If aTab.Size()>0 Then
    If глОбработать(аДок) Then
      Message("Был создан документ "+аДок,"I");
    EndIf;
  EndIf;
EndFunction

Function РасхожденияКассыБухУчет()
  КонДата:=BegOfDay(Form.КонДата.Value);
  оН:=Form.оН.Value;
  оТГ:=Form.оТГ.Value;
  оСк:=Form.оСк.Value;

  If Form.оСчет.Value.Selected()=0 Then
    Box("Выберите корреспондирующий счет!",Q_STOP);
    Exit;
  EndIf;
  
  спСч:=List.Create();
  спСч.Add(глНайтиСчет("50.1"));
  Сч50:=глНайтиСчет("50.1");
  
  Form.StatusText("Запрос по кассам...");
  ТЗ:="Period From КонДата to КонДата;
  |зКс:=Storage.Касса.Касса;
  |зЮЛ:=Storage.Касса.ЮрЛицо;
  |зСм:=EndTotals(Сумма);
  |Group зЮЛ,зКс;";
  З:=Query.Create();
  З.Execute(ТЗ);
  
  Form.StatusText("Запрос по счетам...");
  ТЗ:="Period From КонДата to КонДата;
  |зСчет:=Storage.БухгалтерскиеСчета.Счет;
  |Condition(зСчет IN спСч);
  |зКс:=Storage.БухгалтерскиеСчета.Субконто1;
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |зСм:=EndTotals(Сумма);
  |Group зЮЛ,зКс;";
  ЗБ:=Query.Create();
  ЗБ.Execute(ТЗ);
  
  ТРез:=Tab.Create("зЮЛ,зКс");
  ТРез.AddColumn("зСм",,"Number");
  
  While З.Next(1) Do
    While З.Next(2) Do
      ТРез.AddLine("зЮЛ,зКс,зСм",З.зЮЛ,З.зКс,З.зСм);
    EndDo;
  EndDo;

  While ЗБ.Next(1) Do
    While ЗБ.Next(2) Do
      ТРез.AddLine("зЮЛ,зКс,зСм",ЗБ.зЮЛ,ЗБ.зКс,-ЗБ.зСм);
    EndDo;
  EndDo;
  ТРез.Group("зЮЛ,зКс","зСм");

  аДок:=СоздатьДокумент("Устранение расхождения между учетом по кассам и бух. счетами");
  aTab:=аДок.LineParts("Содержание");
  
  ТРез.Select();
  While ТРез.Next() Do
    If Round(ТРез.зСм,6)=0 Then
      Continue;
    EndIf;
      
    aTab.NewLine();
    aTab.ИмяНакопителя:="БухгалтерскиеСчета";
    aTab.ЗнакДвижения:="+";
    aTab.Аккумуляторы:="ЮрЛицо@"+глЗашифроватьЗначениеУД(ТРез.зЮЛ)+"###Счет@"+глЗашифроватьЗначениеУД(Сч50)+"###Субконто1@"+глЗашифроватьЗначениеУД(ТРез.зКс);
    aTab.Реквизиты:="КоррСчет@"+глЗашифроватьЗначениеУД(Form.оСчет.Value);
    aTab.Активы:="Сумма@"+глЗашифроватьЗначениеУД(ТРез.зСм);
    
    aTab.NewLine();
    aTab.ИмяНакопителя:="БухгалтерскиеСчета";
    aTab.ЗнакДвижения:="-";
    aTab.Аккумуляторы:="ЮрЛицо@"+глЗашифроватьЗначениеУД(ТРез.зЮЛ)+"###Счет@"+глЗашифроватьЗначениеУД(Form.оСчет.Value)+?(not IsEmpty(Form.оСуб1.Value),"###Субконто1@"+глЗашифроватьЗначениеУД(Form.оСуб1.Value))
      +?(not IsEmpty(Form.оСуб2.Value),"###Субконто2@"+глЗашифроватьЗначениеУД(Form.оСуб2.Value))+?(not IsEmpty(Form.оСуб3.Value),"###Субконто3@"+глЗашифроватьЗначениеУД(Form.оСуб3.Value));
    aTab.Реквизиты:="КоррСчет@"+глЗашифроватьЗначениеУД(Сч50);
    aTab.Активы:="Сумма@"+глЗашифроватьЗначениеУД(ТРез.зСм);
  EndDo;
    
  If aTab.Size()>0 Then
    If глОбработать(аДок) Then
      Message("Был создан документ "+аДок,"I");
    EndIf;
  EndIf;
EndFunction

Function РасхожденияБанкиБухУчет()
  КонДата:=BegOfDay(Form.КонДата.Value);
  оН:=Form.оН.Value;
  оТГ:=Form.оТГ.Value;
  оСк:=Form.оСк.Value;

  If Form.оСчет.Value.Selected()=0 Then
    Box("Выберите корреспондирующий счет!",Q_STOP);
    Exit;
  EndIf;
  
  спСч:=List.Create();
  спСч.Add(глНайтиСчет("51"));
  Сч51:=глНайтиСчет("51");
  
  Form.StatusText("Запрос по банкам...");
  ТЗ:="Period From КонДата to КонДата;
  |зБС:=Storage.Банк.БанковскийСчет;
  |зЮЛ:=Storage.Банк.ЮрЛицо;
  |Condition(Not isEmpty(зЮЛ));
  |зСм:=EndTotals(Сумма);
  |Group зЮЛ,зБС;";
  З:=Query.Create();
  З.Execute(ТЗ);
  
  Form.StatusText("Запрос по счетам...");
  ТЗ:="Period From КонДата to КонДата;
  |зСчет:=Storage.БухгалтерскиеСчета.Счет;
  |Condition(зСчет IN спСч);
  |зБС:=Storage.БухгалтерскиеСчета.Субконто1;
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |зСм:=EndTotals(Сумма);
  |Group зЮЛ,зБС;";
  ЗБ:=Query.Create();
  ЗБ.Execute(ТЗ);
  
  ТРез:=Tab.Create("зЮЛ,зБС");
  ТРез.AddColumn("зСм",,"Number");
  
  While З.Next(1) Do
    While З.Next(2) Do
      ТРез.AddLine("зЮЛ,зБС,зСм",З.зЮЛ,З.зБС,З.зСм);
    EndDo;
  EndDo;

  While ЗБ.Next(1) Do
    While ЗБ.Next(2) Do
      ТРез.AddLine("зЮЛ,зБС,зСм",ЗБ.зЮЛ,ЗБ.зБС,-ЗБ.зСм);
    EndDo;
  EndDo;
  ТРез.Group("зЮЛ,зБС","зСм");

  аДок:=СоздатьДокумент("Устранение расхождения между учетом по банкам и бух. счетами");
  aTab:=аДок.LineParts("Содержание");
  
  ТРез.Select();
  While ТРез.Next() Do
    If Round(ТРез.зСм,6)=0 Then
      Continue;
    EndIf;
      
    aTab.NewLine();
    aTab.ИмяНакопителя:="БухгалтерскиеСчета";
    aTab.ЗнакДвижения:="+";
    aTab.Аккумуляторы:="ЮрЛицо@"+глЗашифроватьЗначениеУД(ТРез.зЮЛ)+"###Счет@"+глЗашифроватьЗначениеУД(Сч51)+"###Субконто1@"+глЗашифроватьЗначениеУД(ТРез.зБС);
    aTab.Реквизиты:="КоррСчет@"+глЗашифроватьЗначениеУД(Form.оСчет.Value);
    aTab.Активы:="Сумма@"+глЗашифроватьЗначениеУД(ТРез.зСм);
    
    aTab.NewLine();
    aTab.ИмяНакопителя:="БухгалтерскиеСчета";
    aTab.ЗнакДвижения:="-";
    aTab.Аккумуляторы:="ЮрЛицо@"+глЗашифроватьЗначениеУД(ТРез.зЮЛ)+"###Счет@"+глЗашифроватьЗначениеУД(Form.оСчет.Value)+?(not IsEmpty(Form.оСуб1.Value),"###Субконто1@"+глЗашифроватьЗначениеУД(Form.оСуб1.Value))
      +?(not IsEmpty(Form.оСуб2.Value),"###Субконто2@"+глЗашифроватьЗначениеУД(Form.оСуб2.Value))+?(not IsEmpty(Form.оСуб3.Value),"###Субконто3@"+глЗашифроватьЗначениеУД(Form.оСуб3.Value));
    aTab.Реквизиты:="КоррСчет@"+глЗашифроватьЗначениеУД(Сч51);
    aTab.Активы:="Сумма@"+глЗашифроватьЗначениеУД(ТРез.зСм);
  EndDo;
    
  If aTab.Size()>0 Then
    If глОбработать(аДок) Then
      Message("Был создан документ "+аДок,"I");
    EndIf;
  EndIf;
EndFunction

Function OnExecute(СпУстановки)
  оВО:=Form.оВО.Value.SelectedLine;
  If оВО=1 Then //Устранять расхождения между учетом по складу и бух. счетами (41.1 и пр.)
    РасхожденияСкладБухУчет();
  ElseIf оВО=2 Then //Устранять расхождения между учетом по кассам и бух. счетами (50.1)
    РасхожденияКассыБухУчет();
  ElseIf оВО=3 Then //Устранять расхождения между учетом по банкам и бух. счетами (51)
    РасхожденияБанкиБухУчет();
  EndIf;

  Message("Обработка завершена успешно!","I");
EndFunction

