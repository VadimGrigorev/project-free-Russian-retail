//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
var ТабВыгружено Export;
Var ТВыгрузка Export,ТВыгрузкаСпр Export;
Var НомерВыгрузки Export;
Var РезКаталог Export;
Var аВыгруженоВсего Export;
Var аДок Export;

Function ОбновитьФорму()
  оИстория:=Form.оИстория.Value;
  Form.тДатаДна.isDisabled:=1-оИстория;
  Form.оДатаДна.isDisabled:=1-оИстория;
  Form.тДатаПериод.isDisabled:=оИстория;
  Form.оДатаПериод.isDisabled:=оИстория;
EndFunction

Function ОбновитьПризнакиФильтров()
  оНакопители:=Form.оНакопители.Value;
  оНакопители.Select();
  While оНакопители.Next() Do
    тФильтр:=оНакопители.тФильтр;
    Фл:=0;
    тФильтр.Select();
    While тФильтр.Next() Do
      If тФильтр.Фильтр.Get(1).Size()+тФильтр.Фильтр.Get(2).Size()>0 Then
        Фл:=1;
        Break;
      EndIf;
    EndDo;
    оНакопители.флФильтр:=?(Фл,"ДА","");
  EndDo;
EndFunction

Function ОбновитьТаблицуРеквизитов()
  оНакопители:=Form.оНакопители.Value;
  ОбновитьПризнакиФильтров();
  
  оФильтр:=Form.оФильтр.Value;  
  оФильтр.ClearLines();
  Ид:="";
  тФильтр:=0;
  If оНакопители.SelectedLine>0 Then
    Ид:=оНакопители.Get(оНакопители.SelectedLine,"Наименование");
    тФильтр:=оНакопители.Get(оНакопители.SelectedLine,"тФильтр");
  EndIf;
  
  If Ид="" Then
    Form.оФильтр.isDisabled:=1;
    Exit;
  EndIf;
  Form.оФильтр.isDisabled:=0;
  
  тФильтр.CopyTo(оФильтр,,,"Фильтр,пФильтр,Ид,зПерем,зПуть,идПуть,Сорт");
  тФильтр.Select();
  While тФильтр.Next() Do
    оФильтр.CurLine:=тФильтр.CurLine;
    If тФильтр.ФлОст Then
      оФильтр.BackgroundColor(оФильтр.CurLine,0,MixColors(_CLR_WINDOW,_CLR_RED,10));
    EndIf;
  EndDo;
EndFunction


Function ВыгрузитьУровень(З,Ур,спГруппы,Ид,ТВыгрузка,ТВыгрузкаСпр)
  If Ур<=спГруппы.Size() Then
    While З.Next(Ур) Do
      ВыгрузитьУровень(З,Ур+1,спГруппы,Ид,ТВыгрузка,ТВыгрузкаСпр);
    EndDo;
    Exit;
  EndIf;
  
  оБезСправочников:=Form.оБезСправочников.Value;
  оЗанул:=Form.оЗанул.Value;
  aTab:=0;
  If оЗанул Then
    aTab:=аДок.LineParts("Содержание");
    aTab.NewLine();
    aTab.ИмяНакопителя:=Ид;
    aTab.ЗнакДвижения:="-";
  EndIf;
  Form.StatusText("Выгрузка по "+Ид+" "+З.ResultTable.CurLine+"/"+З.ResultTable.Size());
  //TR:<Имя накопителя>#1<Знак движения + или ->#1<Реквизиты аккумуляторов>#1<Реквизиты активов>#1<Реквизиты остальных полей>
  //Аккумуляторы
  Стр:="TR:"+Ид+Chr(1)+"+"+Chr(1);
  Стр2:="";
  Фл:=0;
  зСчет:=0;
  For j:=1 to Struct.Stor(Ид).Props.Count() Do
    If Struct.Stor(Ид).Props(j).TotalsProp Then
      Ид2:=Struct.Stor(Ид).Props(j).Name;
      aEl:=З.Get("з"+Ид2);
      If _And(not оБезСправочников,DBTypeStr(aEl)="REF",not isEmpty(aEl)) Then
        глУниверсальнаяВыгрузкаВыгрузитьЭлементСправочника(aEl.Copy(),ТабВыгружено,ТВыгрузкаСпр);
      EndIf;
      AppendStringToBufferedString(Стр,?(Фл=0,"",Chr(2))+Ид2+"@"+глУниверсальнаяВыгрузкаВыгрузитьРеквизит(aEl));
      Фл:=1;
      If оЗанул Then
        AppendStringToBufferedString(Стр2,?(Стр2="","","###")+Ид2+"@"+глЗашифроватьЗначениеУД(aEl));
        If Ид2="Счет" Then
          зСчет:=aEl;
        EndIf;
      EndIf;
    EndIf;
  EndDo;
  If оЗанул Then
    aTab.Аккумуляторы:=Стр2;
  EndIf;  
  AppendStringToBufferedString(Стр,Chr(1));
  
  ФлНеНоль:=0;
  Стр2:="";
  Фл:=0;
  зСм:=0;
  For j:=1 to Struct.Stor(Ид).Props.Count() Do
    If Struct.Stor(Ид).Props(j).Asset Then
      Ид2:=Struct.Stor(Ид).Props(j).Name;
      aEl:=З.Get("_КО_"+Ид2);
      If Round(aEl,8)<>0 Then
        ФлНеНоль:=1;
      EndIf;  
      AppendStringToBufferedString(Стр,?(Фл=0,"",Chr(2))+Ид2+"@"+глУниверсальнаяВыгрузкаВыгрузитьРеквизит(aEl));
      Фл:=1;
      If оЗанул Then
        AppendStringToBufferedString(Стр2,?(Стр2="","","###")+Ид2+"@"+глЗашифроватьЗначениеУД(aEl));
        If Ид2="Сумма" Then
          зСм:=aEl;
        EndIf;
      EndIf;
    EndIf;
  EndDo;
  If not ФлНеНоль Then
    If оЗанул Then
      aTab.Remove(aTab.CurLine);
    EndIf;
    Exit;
  EndIf;
  If оЗанул Then
    aTab.Активы:=Стр2;
  EndIf;  
  AppendStringToBufferedString(Стр,Chr(1));
  
  Стр2:="";
  Фл:=0;
  For j:=1 to Struct.Stor(Ид).Props.Count() Do
    If _And(not Struct.Stor(Ид).Props(j).TotalsProp,not Struct.Stor(Ид).Props(j).Asset) Then
      Ид2:=Struct.Stor(Ид).Props(j).Name;
      aEl:=З.Get("з"+Ид2);
      If _And(not оБезСправочников,DBTypeStr(aEl)="REF",not isEmpty(aEl)) Then
        глУниверсальнаяВыгрузкаВыгрузитьЭлементСправочника(aEl.Copy(),ТабВыгружено,ТВыгрузкаСпр);
      EndIf;
      AppendStringToBufferedString(Стр,?(Фл=0,"",Chr(2))+Ид2+"@"+глУниверсальнаяВыгрузкаВыгрузитьРеквизит(aEl));
      Фл:=1;
      If оЗанул Then
        If _And(Ид="БухгалтерскиеСчета",not isEmpty(зСчет),зСчет.Забалансовый=0) Then
          If Ид2="КоррСчет" Then
            aEl:=Form.оКорСчет.Value;
          EndIf;
        EndIf;
        AppendStringToBufferedString(Стр2,?(Стр2="","","###")+Ид2+"@"+глЗашифроватьЗначениеУД(aEl));
      EndIf;      
    EndIf;
  EndDo;
  
  If оЗанул Then
    aTab.Реквизиты:=Стр2;
    If _And(Ид="БухгалтерскиеСчета",not isEmpty(зСчет),зСчет.Забалансовый=0) Then
      aTab.NewLine();
      aTab.ИмяНакопителя:=Ид;
      aTab.ЗнакДвижения:="+";
      aTab.Аккумуляторы:="ЮрЛицо@"+глЗашифроватьЗначениеУД(З.зЮрЛицо)+"###Счет@"+глЗашифроватьЗначениеУД(Form.оКорСчет.Value);
      aTab.Активы:="Сумма@"+глЗашифроватьЗначениеУД(зСм);
      aTab.Реквизиты:="КоррСчет@"+глЗашифроватьЗначениеУД(зСчет);
    EndIf;
  EndIf;
  ТВыгрузка.AddString(Стр);
EndFunction

Function локПослеВыгрузкиЭлемента()
  аВыгруженоВсего:=аВыгруженоВсего+1;
  
  If ТВыгрузкаСпр.Size()>100000 Then
    Имя:=Trim(РезКаталог)+"Refs_"+Right("0000"+НомерВыгрузки,4)+".txt";
    If File.DoesFileExist(Имя) Then
      Raise "Файл "+Имя+" уже существует в папке результата!";
    EndIf;
    ТВыгрузкаСпр.Save(Имя,-1,1);
    НомерВыгрузки:=НомерВыгрузки+1;
    ТВыгрузкаСпр:=Text.Create(1);
    ТВыгрузкаСпр.AddString("@REFSV4@");
  EndIf;  
EndFunction


Function OnExecute()
  РезКаталог:="Exchange.txt";
  If SaveFileDialog(РезКаталог,"Выберите каталог для выгрузки:")<>1 Then
    Exit;
  EndIf;
  РезКаталог:=GetPath(РезКаталог);
  If Trim(РезКаталог)="" Then
    Box("Необходимо выбрать каталог для выгрузки!",Q_STOP);
    Exit;
  EndIf;
  РезКаталог:=AddBackSlash(РезКаталог);
  
  //@REFSV4@
  //RF:<Вид>#1<Удален>#1<Папка>#1<ВидРодитель>|<КодРодитель (полный код)>#1<КодПапки (полный код)>#1<Code>#1<Кодированный Name>#1<Реквизит1>#1<Реквизит2>...
  //<Реквизит?>:         {<Ид>@<Периодический>@<ЗначениеРек>,#2<ИмяСтрочнойЧасти>}
  //<ИмяСтрочнойЧасти>:  После каждого имени строчной части следуют атрибуты новой строки, для перехода на следующую строку #2<ИмяСтрочнойЧасти> повторяется
  //<ЗначениеРек>:       для периодических: <ЗначениеПериод1>#3<ЗначениеПериод2>#3...
  //                     для обычных: <Значение>
  //<ЗначениеПериод>:    <ДатаЗначения>@<Значение>
  //<Значение>:          <ТипАтрибута>.<ЗначениеТипа>
  //<ТипАтрибута>:       {"STRING" (кодированная),"NUMBER","DATE","ENUM" (далее следует индекс),"REF" (далее следует <ПолныйКод>),"DOC" (далее следует <ВидДок>@<НомерДок>@<ДатаДок>)}
  //<ПолныйКод>:         <Код>@{+ если папка}<ВидРодитель>|<КодРодитель>@{+ если папка}<ВидРодитель>|<КодРодительРодителя>...  
  //
  //@BLNSV4@
  //BL:<Дата ввода остатков>#1<Комментарий (кодированная строка)>
  //TR:<Имя накопителя>#1<Знак движения + или ->#1<Реквизиты аккумуляторов>#1<Реквизиты активов>#1<Реквизиты остальных полей>
  //<Реквизиты аккумуляторов>/<Реквизиты активов>/<Реквизиты остальных полей>: <Реквизит1>#2<Реквизит2>...
  //<Реквизит?>:         <Ид>@<ТипАтрибута>.<Значение> (см. выше)
  ТВыгрузкаСпр:=Text.Create(1);
  ТВыгрузкаСпр.AddString("@REFSV4@");
  ТВыгрузка:=Text.Create(1);
  ТВыгрузка.AddString("@BLNSV4@");
  ТабВыгружено:=Tab.Create("Ид,Таб");
  НомерВыгрузки:=0;
  аВыгруженоВсего:=0;
  
  НачДата:='01.01.1981';
  КонДата:=BegOfDay(Form.оКонДата.Value);
  оНакопители:=Form.оНакопители.Value;
  оЗанул:=Form.оЗанул.Value;
  For iLoop:=1 To оНакопители.Size() Do
    If оНакопители.Check(iLoop,"Наименование")=0 Then
      Continue;
    EndIf;
    оНакопители.CurLine:=iLoop;
    флОстатки:=оНакопители.флОстатки;
    тФильтр:=оНакопители.тФильтр;
    Ид:=оНакопители.Наименование;
    
    If оЗанул Then
      аДок:=Doc.УниверсальныйДокумент;
      аДок.New();
      аДок.DocDate:=КонДата;
      аДок.КодОперации:=Enum.коУниверсальныйДокумент.УниверсальныйДокумент;
      аДок.SetPrefix("DocNum",Trim(DBVar.ПрефиксИБ)+"ЯЯ");
    EndIf;   
    
    Message("Выгружается накопитель "+Ид,"I");
    спГруппы:=List.Create();
    //Создаем запрос
    ТЗ:="Period From "+?(флОстатки,"КонДата","НачДата")+" to КонДата;";
    For j:=1 to Struct.Stor(Ид).Props.Count() Do
      Ид2:=Struct.Stor(Ид).Props(j).Name;
      ТЗ:=ТЗ+_NEWLINE+"з"+Ид2+":=Storage."+Ид+"."+Ид2+";";
      If Struct.Stor(Ид).Props(j).Asset Then
        If флОстатки Then
          ТЗ:=ТЗ+_NEWLINE+"_КО_"+Ид2+":=EndTotals("+Ид2+");";
        Else
          ТЗ:=ТЗ+_NEWLINE+"_КО_"+Ид2+":=SUM("+Ид2+");";
        EndIf;  
      Else
        If тФильтр.FindAndGoto(Ид2,,"Ид") Then
          If тФильтр.Фильтр.Get(1).Size()>0 Then
            ТЗ:=ТЗ+_NEWLINE+"Condition(з"+Ид2+" IN тФильтр.Get("+тФильтр.CurLine+",""Фильтр"").Get(1));";
          EndIf;
          If тФильтр.Фильтр.Get(2).Size()>0 Then
            ТЗ:=ТЗ+_NEWLINE+"Condition(з"+Ид2+" NOT IN тФильтр.Get("+тФильтр.CurLine+",""Фильтр"").Get(1));";
          EndIf;
        EndIf;
        If (not флОстатки)or(тФильтр.ФлОст) Then
          ТЗ:=ТЗ+_NEWLINE+"Group з"+Ид2+";";
          спГруппы.Add(Ид2);
        EndIf;
      EndIf;
    EndDo;
    //Заполняем ТВыгрузка
    Form.StatusText("Выполняется запрос по "+Ид);
    
    З:=Query.Create();
    З.Execute(ТЗ);
    
    //BL:<Дата ввода остатков>#1<Комментарий (кодированная строка)>
    ТВыгрузка.AddString("BL:"+КонДата+Chr(1)+EncodeString(Unicode("Перенос остатков накопителя "+Ид)));
    ВыгрузитьУровень(З,1,спГруппы,Ид,ТВыгрузка,ТВыгрузкаСпр);
    
    If оЗанул Then
      aTab:=аДок.LineParts("Содержание");
      If aTab.Size()>0 Then
        If Form.оЗапретДок.Value=1 Then
          аДок.ФлагОбмена:=9;
        EndIf;
        
        аДок.Save();
        сп:=List.Create();
        сп.SetByName("УровеньФорсирования",1);
        глРаботаетРобот:=1;
        Try
          If not аДок.Publish(сп) Then
            Raise "Невозможно обработать документ ("+аДок+")!";
          EndIf;
        Finally
          глРаботаетРобот:=0;
        EndTry;  
        
        Message("Документ обнуления выгруженных остатков: %LINK%","I",аДок);
      EndIf;
    EndIf;
  EndDo;
  
  If ТВыгрузка.Size()>1 Then
    Имя:=Trim(РезКаталог)+"Blns_0000.txt";
    If File.DoesFileExist(Имя) Then
      Raise "Файл "+Имя+" уже существует в папке результата!";
    EndIf;
    ТВыгрузка.Save(Имя,-1,1);
  EndIf;
  If ТВыгрузкаСпр.Size()>1Then
    Имя:=Trim(РезКаталог)+"Refs_"+Right("0000"+НомерВыгрузки,4)+".txt";
    If File.DoesFileExist(Имя) Then
      Raise "Файл "+Имя+" уже существует в папке результата!";
    EndIf;
    ТВыгрузкаСпр.Save(Имя,-1,1);
  EndIf;  
  
  Message("Выгрузка завершена успешно!","I");
EndFunction

