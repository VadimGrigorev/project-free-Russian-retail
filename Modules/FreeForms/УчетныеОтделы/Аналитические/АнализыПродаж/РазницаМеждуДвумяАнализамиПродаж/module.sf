//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

Function ОбновитьТексты()
  оРасш:=Form.оРасш.Value;
  
  оВидОтчета:=Form.оВидОтчета.Value;
  If оВидОтчета.Size()=0 Then
    оВидОтчета.Add(0,"Анализ продаж");
    оВидОтчета.Add(1,"Анализ закупок");
  EndIf;
  
  If оРасш=0 Then
    If оВидОтчета.Size()>2 Then
      оВидОтчета.Remove(3,оВидОтчета.Size()-2);
      оВидОтчета.SelectedLine:=1;
    EndIf;
  Else
    If оВидОтчета.Size()=2 Then
      оВидОтчета.Add(2,"Анализ движения (реализации)");
      оВидОтчета.Add(3,"Анализ движения (возвраты от покупателей)");
      оВидОтчета.Add(4,"Анализ движения (поступления)");
      оВидОтчета.Add(5,"Анализ движения (возвраты поставщикам)");
      оВидОтчета.Add(-1,"Анализ движения (полный)");
      оВидОтчета.Add(-2,"Перемещения ТМЦ");
      оВидОтчета.Add(-3,"Расход материалов в производстве");
      оВидОтчета.Add(-4,"Брак в производстве");
      оВидОтчета.Add(-5,"Приход изделий в производстве");
    EndIf;  
  EndIf;
  If оВидОтчета.SelectedLine=0 Then
    оВидОтчета.SelectedLine:=1;
  EndIf;
  
  aList:=List.Create("По юридическим лицам#Договор.ЮрЛицо#зЮЛ","По магазинам#Склад.Магазин#зМг",
    "По складам#Склад#зСк","По контрагентам#!Договор.@Parent#зК","По товарным группам#Номенклатура.ТоварнаяГруппа#зТГ","По номенклатуре#!Номенклатура#зН");

  If оРасш=1 Then
    aList.Add("По контрагентам!По договорам#Договор#зД");
    aList.Add("По цифровым кодам#Номенклатура.ВнешнийКод#зАрт");
    aList.Add("По цифровым кодам упаковки#Номенклатура.ВнешнийКодОсновнаяЕдиница#зАрт2");
    aList.Add("По основным сортам#Номенклатура.ВнешнийТекстовыйКод#зАрт3");
    aList.Add("По кодам АП ЕГАИС (в номенклатуре)#Номенклатура.ЕГАИСКодАП#зАрт4");
    aList.Add("По производителям номенклатуры#Номенклатура.сертПроизводитель#зПрТМЦ");
    aList.Add("По номенклатуре!По партиям ТМЦ#Партия#зПартия");
    aList.Add("По партиям ТМЦ!По производителям номенклатуры (из партий)#Партия.Производитель#зПрТМЦП");
    aList.Add("По кодам АП ЕГАИС (в партиях)#Партия.ЕГАИСКодАП#зВнКП");
    aList.Add("По коду ЕГАИС номенклатуры (в партиях)#Партия.ЕГАИСКодНоменклатуры#зВнКП2");
  EndIf;
  
  глЗаполнитьТаблицуФильтров("оГруппы",aList);
  глОбновитьТаблицуФильтров("оГруппы");
  
  //Доп. поля
  aList:=List.Create("Код текущего элемента#!#!зТекКод","Текущий элемент#!#!",
    "Контрагент#Договор.@Parent#зК","ИНН/КПП#Договор.@Parent.ИНН#зИНН","Код контрагента#Договор.@Parent.Code#зККод",
    "Договор#Договор#зД","Дней кредита#Договор.ГлубинаКредита#зДГДней","Сумма кредита#Договор.СуммаКредита#зДГСумма",
    "Номенклатура#Номенклатура#зН","Код номенклатуры#Номенклатура.Code#зНКод",
    "Товарная группа#Номенклатура.ТоварнаяГруппа#зТГ");
    
  If оРасш=1 Then
    aList.Add("ИНН/КПП!ID контрагента#Договор.@Parent.УникальныйИдентификатор#зИДКНТ");
    aList.Add("ID контрагента!Код ЕГАИС поставщика#Договор.@Parent.КодТочкиЕГАИС#зИДКНТ2");
    aList.Add("Номенклатура!Цифровой код производителя#Номенклатура.ВнешнийКод#зИДН");
    aList.Add("Код текущего элемента!Код текущего элемента (без ведущих нулей)##!зТекКод2");
    aList.Add("Цифровой код производителя!Цифровой код производителя2#Номенклатура.ВнешнийКодОсновнаяЕдиница#зИДН2");
    aList.Add("Цифровой код производителя2!Основной код (сорт)#Номенклатура.ВнешнийТекстовыйКод#зИД2Н");
    aList.Add("Основной код (сорт)!Код АП ЕГАИС (в номенклатуре)#Номенклатура.ЕГАИСКодАП#зИД2Н2");
  EndIf;

  глЗаполнитьСписокПоказателей("оПоля",aList);
  глОбновитьСписокПоказателей("оПоля");
EndFunction



Function ОбработатьВыводимоеЗначениеЛок(ByRef пЭл,ИмяПер)
  If IsEmpty(пЭл) Then
    If ИмяПер="зПартия" Then
      пЭл:="< Не указана партия ТМЦ >";
    Else
      пЭл:="< Не выбран >";
    EndIf;
  EndIf;
  глОбработатьВыводимоеЗначениеВОтчет(пЭл,ИмяПер);
EndFunction

Function Группировка(З,ТабФорма,Т,Ном,Ур,тГруппы,УрВсего,ФлНеТестировать=0)
  If Ном>тГруппы.Size() Then
    Exit;
  EndIf;
  If тГруппы.Check(Ном,"Группировка")=0 Then
    Группировка(З,ТабФорма,Т,Ном+1,Ур,тГруппы,УрВсего,ФлНеТестировать);
    Exit;
  EndIf;
  
  оУровни:=глПолучитьУстановку(ТабФорма,"оУровни");
  оПоля:=глПолучитьУстановку(ТабФорма,"оПоля");
  ИмяПер:=глПолучитьИмяПеременной(тГруппы,Ном);
  ИмяПер2:=Uppercase(ИмяПер);
  ГорДопПолей:=глПолучитьИзМодуля("ГорДопПолей");
  ФлОсновноеПоле:=глПолучитьИзМодуля("ФлОсновноеПоле");
  спГруппировкиСправочников:=глПолучитьИзМодуля("спГруппировкиСправочников");
  
  While З.Next(Ур) Do
    пЭл:=З.Get(ИмяПер);
    пЭлР:=пЭл;
    ОбработатьВыводимоеЗначениеЛок(пЭл,ИмяПер);
    Гр:=_And(Pos("DB.REF.",typestr(пЭлР))>0,not isEmpty(пЭлР),пЭлР.isFolder());
    
    Т.CopyByX("v2|h1",1);
    For i:=1 To оПоля.Size() Do
      If not оПоля.Check(i) Then
        Continue;
      EndIf;
      ИмяПоля:=глПолучитьИмяПеременной(оПоля,i,0,"зСпПерем");
      If ИмяПоля="!" Then
        пПоказатель:=пЭл;
        пПоказательР:=пЭлР;
      ElseIf ИмяПоля="!зТекКод" Then  
        пПоказатель:=глПолучитьКод(пЭлР);
        пПоказательР:=пЭлР;
      ElseIf ИмяПоля="!зТекКод2" Then  
        пПоказатель:=глНомерБезНулей(пЭлР,0);
        пПоказательР:=пЭлР;
      Else
        пПоказатель:=З.Get(ИмяПоля);
        пПоказательР:=пПоказатель;
        ОбработатьВыводимоеЗначениеЛок(пПоказатель,ИмяПоля);
      EndIf;
      Т.CopyByX("v2|h2");
    EndDo;
    Т.CopyByX("v2|h3");
    
    НачВыс:=Т.Height();
    Form.StatusText(НачВыс);
    Form.UpdateProgress(-1,,""+Т.Height());
    глРаскраситьСтроку(Т,1,ФлОсновноеПоле,Ур,УрВсего,2,1+ГорДопПолей,пЭлР);
    Группировка(З,ТабФорма,Т,Ном+1,Ур+1,тГруппы,УрВсего,ФлНеТестировать);
    
    If (оУровни=1)and(Ур<УрВсего) Then
      глДобавитьУровень(Т,НачВыс,Т.Height());
    EndIf;
  EndDo;
EndFunction

Function ИзменитьПеременную(ByRef ТЗ,СтрПерем,СтрЗамена,ФлПартии=0)
  //A:=Stor.ДвижениеТМЦ.Договор.@Parent; -> A:=<СтрЗамена>;
  Стр:=":=Stor.ДвижениеТМЦ."+СтрПерем;
  While Pos(Стр,ТЗ)>0 Do
    i:=Pos(Стр,ТЗ);
    Стр2:=Left(ТЗ,i-1)+":="+СтрЗамена+";";
    While ТЗ[i]<>";" Do
      i:=i+1;
    EndDo;
    ТЗ:=Стр2+Mid(ТЗ,i+1);
  EndDo;
  //Condition(Stor.ДвижениеТМЦ.Договор.@Parent.@IsFolder=0); -> Condition(<СтрЗамена>.@IsFolder=0);
  Стр:="Condition(Stor.ДвижениеТМЦ."+СтрПерем;
  While Pos(Стр,ТЗ)>0 Do
    i:=Pos(Стр,ТЗ);
    Стр2:=Left(ТЗ,i-1)+"Condition("+СтрЗамена+?(ФлПартии,".@Parent")+".@IsFolder=0);";
    While ТЗ[i]<>";" Do
      i:=i+1;
    EndDo;
    ТЗ:=Стр2+Mid(ТЗ,i+1);
  EndDo;
EndFunction


Function Печать(СпУстановки)
  ТабФорма:=СпУстановки.GetByName("Установки");
  Т:=СпУстановки.GetByName("Таблица");
  оГруппы:=глПолучитьУстановку(ТабФорма,"оГруппы");
  оПоля:=глПолучитьУстановку(ТабФорма,"оПоля");
  оВидОтчета:=глПолучитьУстановку(ТабФорма,"оВидОтчета").SelectedLine;
  оИсточникОтчета:=глПолучитьУстановку(ТабФорма,"оИсточникОтчета").SelectedLine;
  оУровни:=глПолучитьУстановку(ТабФорма,"оУровни");
  оТУТ:=глПолучитьУстановку(ТабФорма,"оТУТ");
  
  ФлЛок:=0;
  If Т=0 Then
    Т:=Table.Create();
  Else  
    ФлЛок:=1;
    Т.Lock();
    Т.Clear();
  EndIf;  
  
  Try
    Путь:="Stor.ДвижениеТМЦ";
    ТЗ:="";
    спРезПеременные:=List.Create();
    НачДата:=BegOfDay(глПолучитьУстановку(ТабФорма,"НачДата"));
    КонДата:=BegOfDay(глПолучитьУстановку(ТабФорма,"КонДата"));
    глПостроитьТекстЗапросаИзФильтров(ТЗ,ТабФорма,Путь,НачДата,КонДата,"оЮЛ@зЮЛ@Договор.ЮрЛицо,оМг@зМг@Склад.Магазин,оК@зК@Договор.@Parent,"+
      "оД@зД@Договор,оСк@зСк@Склад,оТГ@зТГ@Номенклатура.ТоварнаяГруппа,оН@зН@Номенклатура","оГруппы",спРезПеременные);

    ТЗ2:="";
    спРезПеременные2:=List.Create();
    НачДата2:=BegOfDay(глПолучитьУстановку(ТабФорма,"НачДата2"));
    КонДата2:=BegOfDay(глПолучитьУстановку(ТабФорма,"КонДата2"));
    глПостроитьТекстЗапросаИзФильтров(ТЗ2,ТабФорма,Путь,НачДата2,КонДата2,"оЮЛ2@зЮЛ@Договор.ЮрЛицо,оМг2@зМг@Склад.Магазин,оК2@зК@Договор.@Parent,"+
      "оД2@зД@Договор,оСк2@зСк@Склад,оТГ2@зТГ@Номенклатура.ТоварнаяГруппа,оН2@зН@Номенклатура","оГруппы",спРезПеременные2);
        
    //оВидОтчета
    //1 - Анализ продаж
    //2 - Анализ закупок
    //3 - Анализ движения (реализации)
    //4 - Анализ движения (возвраты от покупателей)
    //5 - Анализ движения (поступления)
    //6 - Анализ движения (возвраты поставщикам)
    //7 - Анализ движения (полный)
    //8 - Перемещения ТМЦ
    //9 - Расход материалов в производстве
    //10 - Брак в производстве
    //11 - Приход изделий в производстве
    
    //ТипЗаписи:
    //0-Реализация
    //1-Возврат от покупателя
    //2-Поступление
    //3-Возврат поставщику
    //4-Перемещения
    //5-Производство (списание в и возврат из) - только себестоимость
    //6-Брак - только себестоимость
    //7-Производство (произведенные изделия) - только себестоимость    
    
    СтрДоб:="";
    If Pos("зМрТип:=",ТЗ)=0 Then
      СтрДоб:=СтрДоб+"зМрТип:=Storage.ДвижениеТМЦ.ТипЗаписи;";
    EndIf;  
    If оВидОтчета=1 Then
      СтрДоб:=СтрДоб+"Condition(зМрТип<2);";
    ElseIf оВидОтчета=2 Then
      СтрДоб:=СтрДоб+"Condition((зМрТип>1)And(зМрТип<4));";
    ElseIf (оВидОтчета>2)And(оВидОтчета<7) Then
      СтрДоб:=СтрДоб+"Condition(зМрТип="+(оВидОтчета-3)+");";
    ElseIf оВидОтчета=7 Then
      СтрДоб:=СтрДоб+"Condition(зМрТип<4);";
    ElseIf оВидОтчета=8 Then
      СтрДоб:=СтрДоб+"Condition(зМрТип=4);";
    ElseIf оВидОтчета=9 Then
      СтрДоб:=СтрДоб+"Condition(зМрТип=5);";
    ElseIf оВидОтчета=10 Then
      СтрДоб:=СтрДоб+"Condition(зМрТип=6);";
    ElseIf оВидОтчета=11 Then
      СтрДоб:=СтрДоб+"Condition(зМрТип=7);";
    EndIf;

    If оТУТ=0 Then
      СтрДоб:=СтрДоб+_NEWLINE+"зМрТУ:=Storage.ДвижениеТМЦ.ТипУчета;Condition(зМрТУ=0);";
    EndIf;
        
    ТЗ2:=ТЗ2+СтрДоб;
    If оИсточникОтчета=1 Then
      ТЗ:=ТЗ+_NEWLINE+СтрДоб+_NEWLINE+"зКл:=SUM(Storage.ДвижениеТМЦ.Количество);";
      глПостроитьТекстЗапросаИзФильтров(ТЗ,ТабФорма,Путь,0,0,"","оПоля",спРезПеременные,-1);
    Else
      ТЗ:=ТЗ+_NEWLINE+"зКл:=SUM(1);";
      //Удалить Period
      TearStr(ТЗ,_NEWLINE);
      If pos(".Партия",ТЗ)>0 Then
        ИзменитьПеременную(ТЗ,"Договор","Ref.тмцПартииТМЦ",1);
        ИзменитьПеременную(ТЗ,"Партия","Ref.тмцПартииТМЦ",1);
        ИзменитьПеременную(ТЗ,"Номенклатура","Ref.тмцПартииТМЦ.@Parent",1);
        ИзменитьПеременную(ТЗ,"СтавкаНДС","Ref.тмцПартииТМЦ.@Parent.СтавкаНДС",1);
      Else
        ИзменитьПеременную(ТЗ,"Договор","Ref.тмцНоменклатура");
        ИзменитьПеременную(ТЗ,"Партия","Ref.тмцНоменклатура");
        ИзменитьПеременную(ТЗ,"Номенклатура","Ref.тмцНоменклатура");
        ИзменитьПеременную(ТЗ,"СтавкаНДС","Ref.тмцНоменклатура.СтавкаНДС");
      EndIf;
    EndIf;
    
    ТЗ2:=ТЗ2+_NEWLINE+"зКл:=SUM(Storage.ДвижениеТМЦ.Количество);";
    глПостроитьТекстЗапросаИзФильтров(ТЗ2,ТабФорма,Путь,0,0,"","оПоля",спРезПеременные2,-1);
    
    З:=Query.Create();
    aTab:=З.Execute(ТЗ,0);
    
    З2:=Query.Create();
    aTab2:=З2.Execute(ТЗ2,0);
    
    //Удаляем значения меньше или равные нулю
    aNum:=0;
    While aNum<aTab.Size() Do
      aNum:=aNum+1;
      If aTab.Get(aNum,"зКл")>0 Then
        Continue;
      EndIf;
      aTab.Remove(aNum);
      aNum:=aNum-1;
    EndDo;
    Стр:="";
    оГруппы.Select();
    While оГруппы.Next() Do
      If оГруппы.Check(оГруппы.CurLine,"Группировка")=1 Then
        Стр:=Стр+?(Стр<>"",",")+глПолучитьИмяПеременной(оГруппы,оГруппы.CurLine);
      EndIf;
    EndDo;
    aTab2.InnerJoin(aTab,Стр,"зКл");
    //aTab2 содержит только строки, которые нужно удалить из aTab
    aTab.Select();
    While aTab.Next() Do
      aTab.зКл:=1;
    EndDo;
    aTab2.Select();
    While aTab2.Next() Do
      aTab2.зКл:=-1;
    EndDo;
    aTab2.CopyTo(aTab);
    aTab.Group(Стр,"зКл");
    aTab.CurLine:=0;
    aTab.RemoveLocated("зКл",0);
    З2:=0;
    aTab2:=0;
    З.Postprocess();
    
    СпПоля:=List.Create();
    УрВсего:=глКоличествоУровнейИзФильтров(оГруппы);
    ГорДопПолей:=0;
    For i:=1 To оПоля.Size() Do
      If оПоля.Check(i) Then
        ГорДопПолей:=ГорДопПолей+1;
      EndIf;
    EndDo;
    If ГорДопПолей=0 Then
      Box("Необходимо выбрать по крайней мере одно горизонтальное поле!",Q_STOP);
      Exit;
    EndIf;
    глСохранитьВМодуле("ГорДопПолей",ГорДопПолей);
    
    оЗагол:="Отчет по разнице между двумя анализами продаж";
    оСвойства:=глСвойстваПечатиПростые();
    
    ФлОсновноеПоле:=2;
    Сп:=СпУстановки;
    Т.CopyByX("v1|h1",1);
    j:=0;
    For i:=1 To оПоля.Size() Do
      If not оПоля.Check(i) Then
        Continue;
      EndIf;
      j:=j+1;
      Стр:=оПоля.Get(i);
      tearStr(Стр,"#");
      If Стр="!" Then //Основное поле
        ФлОсновноеПоле:=j+1;
      EndIf;
      пПоле:=оПоля.GetName(i);
      If j=1 Then
        Т.CopyByX("v1|h2");
      Else
        Т.CopyByX("v1|h4");
      EndIf;
    EndDo;
    Т.CopyByX("v1|h3");
    глСохранитьВМодуле("ФлОсновноеПоле",ФлОсновноеПоле);
    
    Т.Options.FixedLine:=Т.Height();

    Группировка(З,ТабФорма,Т,1,1,оГруппы,УрВсего);
    
    j:=1;
    Т.CopyByX("v3|h1",1);
    For i:=1 To оПоля.Size() Do
      If not оПоля.Check(i) Then
        Continue;
      EndIf;
      j:=j+1;
      ИмяПоля:=глПолучитьИмяПеременной(оПоля,i,0,"зСпПерем");
      Т.CopyByX("v3|h2");
      If (ИмяПоля="!зТекКод")or(ИмяПоля="!зТекКод2") Then
        Т.Area(j,1).ColWidth:=150;
      EndIf;
    EndDo;
    Т.CopyByX("v3|h3");
    
    If оУровни=1 Then
      Т.Levels(0).Close();
    EndIf;
    глПечатнаяФормаОтчета(Т,Param,оЗагол);
  Finally
    If ФлЛок Then
      Т.Unlock();
      Т.EditorMode:=1;
    EndIf;
  EndTry;
  If not ФлЛок then 
    глЭтоБыстрыйВызовОтчета(Param,1);
  endif;  
EndFunction
  

Function OnDoubleClick(Таб)
  result:=not глРаботаСОсобымиИконкамиТаблицы(Таб);
EndFunction

Function OnExecute(СпУстановки)
  Печать(СпУстановки);
EndFunction
