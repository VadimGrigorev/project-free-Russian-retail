//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var Таб Export;
Var ТабСп Export;
Var ТбНачПланов Export,ТбНачПланов2 Export;//Первый день планов, последний день фактов
Var ПослДатаФактов Export;
Var спЦЗ Export;
Var ВсегоРазделов Export;
Var Т Export;
Var ФлРасшифровка Export;
Var ТИтоги Export;
Var спДвижение Export;//Итого по движению
Var спДвижениеП Export;//Итого по движению
Var спИтоги Export;//Полное вычисленное итого
Var спИтогиП Export;//Полное вычисленное итого



Function Дата2(аДата)
  Exit FormatDate(аДата,"dd.mm.yy");
EndFunction

Function РасшифровкаПростая(Сп)
  aList:=List.Create();
  aList.SetByName("ПлатежныйКалендарь",1);
  aList.SetByName("Тип",0);
  aList.SetByName("Сп",Сп);
  Exit aList;
EndFunction

Function НайтиДень(пДата,Таб,Тип="0")
  If Таб.FindAndGoto(""+Дата2(пДата)+"@"+Тип,,"Индекс")=0 Then
    Raise "Внимание! Ошибка позиционирования "+Дата2(пДата)+"@"+Тип+"! Сообщите разработчику!";
  EndIf;
EndFunction

Function ОбновитьЭлемент(Таб,Эл,Номер,См,ТипСм=0,СпДок=0)
  If См=0 Then
    Exit;
  EndIf;
  Таб2:=Таб.Таб;
  Таб2.CurLine:=Номер;
  If ТипСм=0 Then
    Таб2.См:=Таб2.См+См;
  Else
    Таб2.СмП:=Таб2.СмП+См;
  EndIf;
  Таб3:=Таб2.Таб;
  If Таб3.FindAndGoto(Эл,,"Эл")=0 Then
    Таб3.AddLine("Эл",Эл);
  EndIf;
  If СпДок<>0 Then
    If ТипСм=0 Then
      If TypeStr(Таб3.СпДок)="LIST" Then
        СпДок.CopyTo(Таб3.СпДок);
      Else
        Таб3.СпДок:=СпДок;
      EndIf;  
    Else
      If TypeStr(Таб3.СпДокП)="LIST" Then
        СпДок.CopyTo(Таб3.СпДокП);
      Else
        Таб3.СпДокП:=СпДок;
      EndIf;  
    EndIf;
  EndIf;
  
  
  If ТипСм=0 Then
    Таб3.См:=Таб3.См+См;
  Else
    Таб3.СмП:=Таб3.СмП+См;
  EndIf;
  
  Сп:=ТабСп.Get(Номер,"Сп");
  If Сп.Find(Эл)=0 Then
    Сп.Add(Эл);
  EndIf;
EndFunction


Function ОбновитьТбНачПланов(зЭл,Номер,См,зЭлКод=0)
  Инд:=""+Номер+"@"+?(зЭлКод=0,зЭл,зЭлКод);
  If ТбНачПланов.FindAndGoto(Инд,,"Индекс")=0 Then
    ТбНачПланов.AddLine("Индекс,Номер,зЭл",Инд,Номер,зЭл);
  EndIf;
  ТбНачПланов.Сумма:=ТбНачПланов.Сумма+См;
EndFunction

Function ОбновитьТбНачПланов2(зЭл,Номер,См,зЭлКод=0)
  Инд:=""+Номер+"@"+?(зЭлКод=0,зЭл,зЭлКод);
  If ТбНачПланов2.FindAndGoto(Инд,,"Индекс")=0 Then
    ТбНачПланов2.AddLine("Индекс,Номер,зЭл",Инд,Номер,зЭл);
  EndIf;
  ТбНачПланов2.Сумма:=ТбНачПланов2.Сумма+См;
EndFunction


Function СпецОбновитьТбНачПланов(Номер,ВНомер,Фл=1,ТолькоНеобраб=0)
  Таб2:=Таб.Таб;
  Таб2.CurLine:=Номер;
  Таб3:=Таб2.Таб;
  Таб3.Select();
  While Таб3.Next() Do
    Код:=0;
    If _And(Pos("DB.",typestr(Таб3.Эл))=1,not isEmpty(Таб3.Эл)) Then
      If DBTypeStr(Таб3.Эл)="ENUM" Then
        Код:=Str(Таб3.Эл.Index());
      Else
        Код:=Таб3.Эл.DBName()+"@"+Таб3.Эл.Code;
      EndIf;
    EndIf;
    If ТолькоНеобраб=0 Then
      ОбновитьТбНачПланов2(Таб3.Эл,ВНомер,Фл*Таб3.СмП,Код);
    Else
      Сп:=Таб3.СпДокП;
      If not IsEmpty(Сп) Then
        См:=0;
        For i:=1 To Сп.Size() Do
          д:=Сп.Get(i);
          If д.СтатусПлатежа<>Enum.зтСтатусыЗаявкиНаПлатежи.Осуществлен Then
            См:=См+д.СуммаВзаиморасчетов;
          EndIf;
        EndDo;
        ОбновитьТбНачПланов2(Таб3.Эл,ВНомер,Фл*См,Код);
      EndIf;
    EndIf;
  EndDo;
EndFunction

Function ОбновитьКорень(Номер,См,ТипСм=0,СпДок=0)
  Таб2:=Таб.Таб;
  Таб2.CurLine:=Номер;
  If ТипСм=0 Then
    Таб2.См:=Таб2.См+См;
  Else
    Таб2.СмП:=Таб2.СмП+См;
  EndIf;
  
  If СпДок<>0 Then
    If ТипСм=0 Then
      Таб2.СпДок:=СпДок;
    Else
      Таб2.СпДокП:=СпДок;
    EndIf;
  EndIf;
EndFunction


Function ОбновитьДень(Номер,См,ТипСм=0,СпДок=0)
  If См=0 Then
    Exit;
  EndIf;
  Таб2:=Таб.Таб;
  Таб2.CurLine:=Номер;
  If ТипСм=0 Then
    Таб2.См:=Таб2.См+См;
  Else
    Таб2.СмП:=Таб2.СмП+См;
  EndIf;
  If СпДок<>0 Then
    If ТипСм=0 Then
      If TypeStr(Таб2.СпДок)="LIST" Then
        СпДок.CopyTo(Таб2.СпДок);
      Else
        Таб2.СпДок:=СпДок;
      EndIf;  
    Else
      If TypeStr(Таб2.СпДокП)="LIST" Then
        СпДок.CopyTo(Таб2.СпДокП);
      Else
        Таб2.СпДокП:=СпДок;
      EndIf;  
    EndIf;
  EndIf;
EndFunction

//Способ: 0 -- пересчитать и записать, 1 -- прочитать из настроек
Function ПодготовитьПеременные(Способ=0) 
  //Начальные остатки 
  //  Расчетные счета                                               А1=1 +
  //      Расшифровка расчетных счетов
  //  Остатки в кассах                                              А2=2 +
  //      Расшифровка остатков в кассах
  //  Остатки в инкассации                                          А3=3 +
  //      Расшифровка остатков в инкассации
  //  Доп. строки нач. остатков                                     А4=4
  //Итого приход  
  //  Поступление кредитов                                          Б1=5 +
  //      Расшифровка поступления кредитов
  //  Овердрафт и подобные счета                                    Б1=19
  //      Расшифровка счетов
  //  Поступление денег на р/с                                      Б2=6 + (ПЛ)
  //      Поступления, определенные в затратах
  //      Разница в инкассации
  //      Расшифровка поступления денег
  //  Поступления денег в кассы                                     Б3=7 + (ПЛ)
  //      Поступления денег, определенные в затратах
  //      Расшифровка поступления денег
  //  Доп. строки приходов                                          Б4=8
  //Итого расход  
  //  Возврат кредитов                                              В1=9 +
  //      Расшифровка возврата кредитов
  //  Оплата поставщикам товара                                     В2=10 +
  //      Расшифровка по поставщикам товара
  //  Затраты по ЦЗ                                                 В3=20..x +  (ПЛ)
  //      Расшифровка по СЗ
  //  Внутренние перемещения, должен быть ноль                      В4=12 +
  //      Расшифровка внутренних, должен быть ноль
  //  Возврат ден. средств покупателям                              В5=13 +
  //  Затраты без движения денег (корректировки и прочее)           В6=14 +
  //Итого движение за период  
  //Конечные остатки  
  //  Расчетные счета                                               Г1=15 +
  //      Расшифровка расчетных счетов
  //  Остатки в кассах                                              Г2=16 +
  //      Расшифровка остатков в кассах
  //  Остатки в инкассации                                          Г3=17 +
  //      Расшифровка остатков в инкассации
  //  Доп. строки кон. остатков                                     Г4=18
  
  ВсегоРазделов:=20;
  оНастройка:=Form.оНастройка.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  Таб:=Tab.Create("Таб,Индекс");//Дата@Тип, Тип 0 -- день, 1 -- месяц
  ТабСп:=Tab.Create("Сп");
  
  For а:=1 To ВсегоРазделов Do
    ТабСп.AddLine("Сп",List.Create());
  EndDo;
  
  For iDate:=0 To КонДата-НачДата Do
    а:=НачДата+iDate;
    Таб.AddLine("Индекс",""+Дата2(а)+"@0");
    Таб2:=Tab.Create("Таб,Эл,СпДокП,СпДок");
    Таб2.AddColumn("См",,"Number");
    Таб2.AddColumn("СмП",,"Number");
    
    Таб.Таб:=Таб2;
    For а2:=1 To ВсегоРазделов Do
      Таб2.AddLine("СпДок,СпДокП",List.Create(),List.Create());
      Таб3:=Tab.Create("Таб,Эл,СпДокП,СпДок");
      Таб3.AddColumn("См",,"Number");
      Таб3.AddColumn("СмП",,"Number");
      Таб2.Таб:=Таб3;
    EndDo;
  EndDo;
  
  ТбНачПланов:=Tab.Create("Индекс,Номер,зЭл");//Индекс: Номер@Эл.Code
  ТбНачПланов.AddColumn("Сумма",,"Number");
  ЧислоДнейДляСреднего:=оНастройка.ЧислоДнейДляВычисленияСреднихПланов;
  ЧислоДнейДляСреднего:=?(ЧислоДнейДляСреднего<=0,14,ЧислоДнейДляСреднего);
  
  КДата:=КонДата;
  //Планы по дням считаются, как среднее за две недели (ЧислоДнейДляСреднего) с учетом текущего периода
  //Для планов промежуток: [НачПлДата..КонПлДата]
  //Для фактов промежуток: [НачДата..КонДата]
  //Запрос, период [НДата..КДата], включает оба промежутка
  
  НачПлДата:=BegOfDay(Min(Date()-ЧислоДнейДляСреднего,КДата-ЧислоДнейДляСреднего));
  КонПлДата:=НачПлДата+ЧислоДнейДляСреднего-1;
  НДата:=BegOfDay(Min(НачПлДата,НачДата));
  НачДата2:=BegOfDay(Min(НачДата,Date()));
  ПослДатаФактов:=BegOfDay(Date());
  
  //Запрос по счетам
  Form.StatusText("Запрос по счетам...");
  ТЗ:="Period From НачДата2 to КДата;
  |зСчет:=Storage.Банк.БанковскийСчет;
  |зПЮЛ:=Storage.Банк.БанковскийСчет.@Parent.СвоеЮрЛицо;
  |День:=Storage.Банк.@DAY;
  |Condition(NOT isEmpty(зПЮЛ));
  |зНО:=BegTotals(Сумма);
  |зП:=Income(Сумма);
  |зР:=Expense(Сумма);
  |Group День,зСчет;";
  
  З:=Query.Create();
  З.Execute(ТЗ,2);
  
  While З.Next(1) Do
    If З.День>=НачДата Then
      НайтиДень(З.День,Таб);
      While З.Next(2) Do
        ОбновитьЭлемент(Таб,З.зСчет,1,З.зНО);//НачОст
        ОбновитьЭлемент(Таб,З.зСчет,15,З.зНО+З.зП-З.зР);//КонОст
      EndDo;
    EndIf;
    
    If З.День=ПослДатаФактов Then
      While З.Next(2) Do
        ОбновитьТбНачПланов(З.зСчет,15,З.зНО+З.зП-З.зР,З.зСчет.DBName()+"@"+З.зСчет.Code);
      EndDo;
    EndIf;
  EndDo;
  
  
  
  //Овердрафт
  Form.StatusText("Запрос по овердрафтовым счетам...");
  СпОвСч:=List.Create();
  aTab:=оНастройка.LineParts("ОвердрафтовыеСчета");
  aTab.Select();
  While aTab.Next() Do
    If aTab.Счет.ЛимитКредита=0 Then
      Message("Счет %LINK% №"+Trim(aTab.Счет.НомерСчета)+" в банке %LINK%, указанный в настройке, не является овердрафтовым, так как не указан лимит кредита!","!",aTab.Счет.aTab.Счет.Банк);
      Message("Пожалуйста, укажите лимит, в противном случае счет будет исключен из отчета!","!");
      Continue;
    EndIf;
    СпОвСч.Add(aTab.Счет);
  EndDo;
  
  If (ПослДатаФактов<=КонДата)And(ПослДатаФактов>=НачДата) Then
    ТЗ:="Period From ПослДатаФактов to ПослДатаФактов;
    |зСчет:=Storage.Банк.БанковскийСчет;
    |Condition(зСчет IN СпОвСч);
    |зКО:=EndTotals(Сумма);
    |Group зСчет;";
    
    З:=Query.Create();
    З.Execute(ТЗ,2);
    While З.Next(1) Do
      НайтиДень(ПослДатаФактов,Таб);
      ОбновитьЭлемент(Таб,З.зСчет,19,Max(З.зСчет.ЛимитКредита+З.зКО,0),1);
      ОбновитьЭлемент(Таб,З.зСчет,15,Max(З.зСчет.ЛимитКредита+З.зКО,0),1);
      ОбновитьТбНачПланов(З.зСчет,15,Max(З.зСчет.ЛимитКредита+З.зКО,0),З.зСчет.DBName()+"@"+З.зСчет.Code);
    EndDo;
  EndIf;
  
  
  
  //Только поступления на р/с (перемещения банк и прочее исключается)
  ТЗ:="зДата:=BegOfDay(Doc.ВыпискаБанкаПриход.DocDate);Condition((зДата>=НДата)And(зДата<=КДата));
  |зСтатус:=Doc.ВыпискаБанкаПриход.@Status;Condition(зСтатус>1);
  |Документ:=Doc.ВыпискаБанкаПриход;
  |День:=BegOfDay(Doc.ВыпискаБанкаПриход.DocDate);
  |зСм:=Doc.ВыпискаБанкаПриход.СуммаВзаиморасчетов;
  |зСчет:=Doc.ВыпискаБанкаПриход.БанковскийСчет;
  |зП:=SUM(зСм);
  |Group День,зСчет,Документ;";
  
  ТбПл:=Tab.Create("Эл");
  ТбПл.AddColumn("См",,"Number");
  З:=Query.Create();
  З.Execute(ТЗ,2);
  
  While З.Next(1) Do
    If З.День>=НачДата Then
      НайтиДень(З.День,Таб);
      While З.Next(2) Do
        См:=З.Compute("зП");
        Сп:=List.Create();
        While З.Next(3) Do
          Сп.Add(З.Документ,""+З.Документ+" на "+глФРМ(З.зП));
        EndDo;
        ОбновитьЭлемент(Таб,З.зСчет,6,См,,Сп);//Приход !!! - (Приход на рс с затратами) - (Расход инкассации)
      EndDo;
    EndIf;
    
    //Планы по приходу
    If (З.День<=КонПлДата)And(З.День>=НачПлДата) Then
      While З.Next(2) Do
        If ТбПл.FindAndGoto(З.зСчет,,"Эл")=0 Then
          ТбПл.AddLine("Эл",З.зСчет);
        EndIf;
        ТбПл.См:=ТбПл.См+З.зП/ЧислоДнейДляСреднего;
      EndDo;
    EndIf;
  EndDo;
  
  а:=НачДата;
  While а<=КонДата Do
    If а<=ПослДатаФактов Then
      а:=а+1;
      Continue;
    EndIf;
    НайтиДень(а,Таб);
    ТбПл.Select();
    While ТбПл.Next() Do
      ОбновитьЭлемент(Таб,ТбПл.Эл,6,ТбПл.См,1);
    EndDo;
    а:=а+1;
  EndDo;
  
  
  
  спПок:=List.Create();
  спПок.Add(Enum.финТипПоказателяПлатежногоКалендаря.ПоступленияКредитов);
  спПок.Add(Enum.финТипПоказателяПлатежногоКалендаря.ВозвратКредитов);
  
  For iDate:=0 To КонДата-НачДата Do
    а:=НачДата+iDate;
    НайтиДень(а,Таб);
    Сп:=List.Create();
    Сп.SetByName("ТипЗначения",1);
    Сп.SetByName("зЭл",0);
    Сп.SetByName("зДень",а);
    Сп.SetByName("зПк",Enum.финТипПоказателяПлатежногоКалендаря.ПоступленияКредитов);
    ОбновитьКорень(5,0,1,Сп);
    
    Сп:=List.Create();
    Сп.SetByName("ТипЗначения",1);
    Сп.SetByName("зЭл",0);
    Сп.SetByName("зДень",а);
    Сп.SetByName("зПк",Enum.финТипПоказателяПлатежногоКалендаря.ВозвратКредитов);
    ОбновитьКорень(9,0,1,Сп);
  EndDo;
  
  
  
  If спПок.Size()>0 Then
    //Коэффициенты (для планов)
    ТЗ:="зЭл:=Ref.зтЗначенияПоказателей;
    |зПк:=Ref.зтЗначенияПоказателей.Показатель;Condition(зПк IN спПок);
    |зПлан:=Ref.зтЗначенияПоказателей.ФлПлан;Condition(зПлан=1);
    |зДт:=Ref.зтЗначенияПоказателей.ДатаДействия;Condition(зДт>=НачДата);Condition(зДт<=КонДата);
    |зЗн:=Ref.зтЗначенияПоказателей.Значение;
    |Group зПк,зЭл;";
    З:=Query.Create();
    З.Execute(ТЗ,2);
    
    While З.Next(1) Do
      While З.Next(2) Do
        зЭл:=З.зЭл;
        зДень:=зЭл.ДатаДействия;
        НайтиДень(зДень,Таб);
        Сп:=List.Create();
        Сп.SetByName("зЭл",зЭл);
        Сп.SetByName("зПк",З.зПк);
        Сп.SetByName("зДень",зДень);
        Сп.SetByName("ТипЗначения",1);
        If Enum.финТипПоказателяПлатежногоКалендаря.ПоступленияКредитов=З.зПк Then
          ОбновитьЭлемент(Таб,З.зПк,5,зЭл.Значение,1,Сп);
          ОбновитьЭлемент(Таб,З.зПк,15,зЭл.Значение,1);
          
          If зДень=ПослДатаФактов Then
            ОбновитьТбНачПланов(З.зПк,15,зЭл.Значение,Str(З.зПк.Index()));
          EndIf;
        Else
          ОбновитьЭлемент(Таб,З.зПк,9,зЭл.Значение,1,Сп);
          ОбновитьЭлемент(Таб,З.зПк,15,-зЭл.Значение,1);
          
          If зДень=ПослДатаФактов Then
            ОбновитьТбНачПланов(З.зПк,15,-зЭл.Значение,Str(З.зПк.Index()));
          EndIf;
        EndIf;
      EndDo;
    EndDo;
  EndIf;
  
  
  //Банки определенные в затратах, кроме инкассации, возможно, она учтена в затратах
  оКО:=Enum.коВыпискаБанкаПриход.Инкассация;
  ТЗ:="зДата:=BegOfDay(Doc.ВыпискаБанкаПриход.DocDate);Condition((зДата>=НачДата2)And(зДата<=КДата));
  |зСтатус:=Doc.ВыпискаБанкаПриход.@Status;Condition(зСтатус>1);
  |День:=BegOfDay(Doc.ВыпискаБанкаПриход.DocDate);
  |зСм:=Doc.ВыпискаБанкаПриход.СуммаВзаиморасчетов;
  |зЦЗ:=Doc.ВыпискаБанкаПриход.ЦентрЗатрат;
  |Документ:=Doc.ВыпискаБанкаПриход;
  |Condition(NOT isEmpty(зЦЗ));
  |зКО:=Doc.ВыпискаБанкаПриход.КодОперации;
  |Condition(зКО<>оКО);
  |зП:=SUM(зСм);
  |Group День,Документ;";
  
  З:=Query.Create();
  З.Execute(ТЗ,2);
  
  While З.Next(1) Do
    If З.День>=НачДата Then
      НайтиДень(З.День,Таб);
      См:=З.Compute("зП");
      Сп:=List.Create();
      While З.Next(2) Do
        Сп.Add(З.Документ,""+З.Документ+" на "+глФРМ(З.зП));
      EndDo;
      ОбновитьЭлемент(Таб,"Поступления на р/с, определенные в затратах (учтены в затратах)",6,-См,,Сп);//Приход - (Приход на рс с затратами) !!! - (Расход инкассации)
    EndIf;
  EndDo;
  
  //Запрос по кассам
  Form.StatusText("Запрос по кассам...");
  ТЗ:="Period From НДата to КДата;
  |День:=Storage.Касса.@DAY;
  |зК:=Storage.Касса.Касса;
  |зНО:=BegTotals(Сумма);
  |зП:=Income(Сумма);
  |зР:=Expense(Сумма);
  |Group День,зК;";
  
  З:=Query.Create();
  З.Execute(ТЗ,2);
  
  ТбПл:=Tab.Create("Эл");
  ТбПл.AddColumn("См",,"Number");
  ТбПл.AddColumn("СмР",,"Number");
  While З.Next(1) Do
    If З.День>=НачДата Then
      НайтиДень(З.День,Таб);
      While З.Next(2) Do
        ОбновитьЭлемент(Таб,З.зК,2,З.зНО);//НачОст
        ОбновитьЭлемент(Таб,З.зК,16,З.зНО+З.зП-З.зР);//КонОст
      EndDo;
    EndIf;
    
    If З.День=ПослДатаФактов Then
      While З.Next(2) Do
        ОбновитьТбНачПланов(З.зК,16,З.зНО+З.зП-З.зР,З.зК.DBName()+"@"+З.зК.Code);
      EndDo;
    EndIf;    
    
    //Планы по приходу и расходу
    //If (З.День<=КонПлДата)And(З.День>=НачПлДата) Then
    //  While З.Next(2) Do
    //    If ТбПл.FindAndGoto(З.зК,,"Эл") Then
    //      ТбПл.AddLine("Эл",З.зК);
    //    EndIf;
    //    ТбПл.См:=ТбПл.См+З.зП/ЧислоДнейДляСреднего;
    //    ТбПл.СмР:=ТбПл.СмР+З.зР/ЧислоДнейДляСреднего;
    //  EndDo;
    //EndIf;
  EndDo;
  
  //а:=НачДата;
  //While а<=КонДата Do
  //  If а<=ПослДатаФактов Then
  //    а:=а+1;
  //    Continue;
  //  EndIf;
  //  НайтиДень(а,Таб);
  //  ТбПл.Select();
  //  While ТбПл.Next() Do
  //    ОбновитьЭлемент(Таб,ТбПл.Эл,7,ТбПл.См,1);//Планы: приход
  //  EndDo;
  //  а:=а+1;
  //EndDo;
  
  
  ТЗ:="зДата:=BegOfDay(Doc.ПКО.DocDate);Condition((зДата>=НачДата2)And(зДата<=КДата));
  |зСтатус:=Doc.ПКО.@Status;Condition(зСтатус>1);
  |Документ:=Doc.ПКО;
  |День:=BegOfDay(Doc.ПКО.DocDate);
  |зСм:=Doc.ПКО.СуммаВзаиморасчетов;
  |зК:=Doc.ПКО.Касса;
  |зП:=SUM(зСм);
  |Group День,зК,Документ;";
  
  З:=Query.Create();
  З.Execute(ТЗ,2);
  
  ТбПл:=Tab.Create("Эл");
  ТбПл.AddColumn("См",,"Number");
  
  While З.Next(1) Do
    If З.День>=НачДата Then
      НайтиДень(З.День,Таб);
      While З.Next(2) Do
        См:=З.Compute("зП");
        Сп:=List.Create();
        While З.Next(3) Do
          Сп.Add(З.Документ,""+З.Документ+" на "+глФРМ(З.зП));
        EndDo;
        ОбновитьЭлемент(Таб,З.зК,7,См,,Сп);//Приход
      EndDo;
    EndIf;
  EndDo;
  
  
  //Кассы определенные в затратах
  ТЗ:="зДата:=BegOfDay(Doc.ПКО.DocDate);Condition((зДата>=НачДата2)And(зДата<=КДата));
  |зСтатус:=Doc.ПКО.@Status;Condition(зСтатус>1);
  |День:=BegOfDay(Doc.ПКО.DocDate);
  |Документ:=Doc.ПКО;
  |зСм:=Doc.ПКО.СуммаВзаиморасчетов;
  |зЦЗ:=Doc.ПКО.ЦентрЗатрат;
  |Condition(NOT isEmpty(зЦЗ));
  |зП=SUM(зСм);
  |Group День,Документ;";
  
  З:=Query.Create();
  З.Execute(ТЗ,2);
  While З.Next(1) Do
    If З.День>=НачДата Then
      НайтиДень(З.День,Таб);
      См:=-З.Compute("зП");
      Сп:=List.Create();
      While З.Next(2) Do
        Сп.Add(З.Документ,""+З.Документ+" на "+глФРМ(З.зП));
      EndDo;
      ОбновитьЭлемент(Таб,"Поступления в кассы, определенные в затратах (учтены в затратах)",7,См,,Сп);
    EndIf;
  EndDo;
  
  //Запрос по инкассации
  Form.StatusText("Запрос по инкассации...");
  Инк:=Enum.ТипыПодотчетныхОпераций.Инкассация;
  КДата:=КонДата;
  ТЗ:="Period From НДата to КДата;
  |День:=Storage.ПодотчетныеОперации.@DAY;
  |зК:=Storage.ПодотчетныеОперации.ПодотчетноеЛицо;
  |зТип:=Storage.ПодотчетныеОперации.ТипОперации;Condition(зТип=Инк);
  |зНО:=BegTotals(Сумма);
  |зП:=Income(Сумма);
  |зР:=Expense(Сумма);
  |Group День,зК;";
  
  СмСред:=0;
  СтрИнкасс:="Расход из инкассации (приход учтен в приходе на р/с)";
  З:=Query.Create();
  З.Execute(ТЗ,2);
  
  //TODO: 6 расшифровать по документам
  While З.Next(1) Do
    If З.День>=НачДата Then
      НайтиДень(З.День,Таб);
      While З.Next(2) Do
        ОбновитьЭлемент(Таб,З.зК,3,З.зНО);//НачОст
        ОбновитьЭлемент(Таб,СтрИнкасс,6,-З.зР);//Приход - (Приход на рс с затратами) - (Расход инкассации)
        ОбновитьЭлемент(Таб,З.зК,17,З.зНО+З.зП-З.зР);//КонОст
      EndDo;
    EndIf;
    
    ////Планы по приходу
    //If (З.День<=КонПлДата)And(З.День>=НачПлДата) Then
    //  While З.Next(2) Do
    //    СмСред:=СмСред-З.зР/ЧислоДнейДляСреднего;
    //  EndDo;
    //EndIf;
    
    If З.День=ПослДатаФактов Then
      While З.Next(2) Do
        ОбновитьТбНачПланов(З.зК,17,З.зНО+З.зП-З.зР,З.зК.DBName()+"@"+З.зК.Code);
      EndDo;
    EndIf;    
  EndDo;
  
  //а:=НачДата;
  //While а<=КонДата Do
  //  If а<=ПослДатаФактов Then
  //    а:=а+1;
  //    Continue;
  //  EndIf;
  //  НайтиДень(а,Таб);
  //  ОбновитьЭлемент(Таб,СтрИнкасс,6,СмСред,1);
  //  а:=а+1;
  //EndDo;
  
  
  
  //Запрос по кредитам
  Form.StatusText("Запрос по кредитам...");
  ТЗ:="Period From НачДата2 to КДата;
  |День:=Storage.Банк.@DAY;
  |зСчет:=Storage.Банк.БанковскийСчет;
  |зПЮЛ:=Storage.Банк.БанковскийСчет.@Parent.СвоеЮрЛицо;
  |Condition(isEmpty(зПЮЛ));
  |зНО:=BegTotals(Сумма);
  |зП:=Income(Сумма);
  |зР:=Expense(Сумма);
  |Group День,зСчет;";
  
  З:=Query.Create();
  З.Execute(ТЗ,2);
  
  //TODO: расшифровать по документам
  While З.Next(1) Do
    If З.День>=НачДата Then
      НайтиДень(З.День,Таб);
      While З.Next(2) Do
        //ОбновитьЭлемент(Таб,З.зСчет,1,З.зНО);//НачОст
        ОбновитьЭлемент(Таб,З.зСчет,5,З.зР);//Приход
        ОбновитьЭлемент(Таб,З.зСчет,9,З.зП);//Расход
      EndDo;
    EndIf;
  EndDo;
  
  оСт:=оНастройка.СтатьяОплатыПоставщикамТовара;
  If оСт.Selected()=0 Then
    Message("Внимание! В настройке отчета не указана статья оплаты поставщикам товара! Отчет будет показывать НЕВЕРНЫЕ цифры!","!");
  Else
    //Запрос по оплатам поставщикам товара
    Form.StatusText("Запрос по оплатам поставщикам товара...");
    ТЗ:="Period From НачДата to КДата;
    |День:=Storage.Затраты.@DAY;
    |Документ:=Storage.Затраты.@LINK;
    |зСм:=Storage.Затраты.Сумма;
    |зСЗ:=Storage.Затраты.СтатьяЗатрат;
    |зТЗ:=Storage.Затраты.ТипЗаписи;Condition(зТЗ<2);
    |Condition(зСЗ=оСт);
    |зП:=SUM(зСм);
    |Group День,Документ;";
    
    З:=Query.Create();
    З.Execute(ТЗ,2);
    
    While З.Next(1) Do
      НайтиДень(З.День,Таб);
      While З.Next(2) Do
        зК:="< Поставщик не указан >";
        зДок:=З.Документ;
        If _And(Not isEmpty(зДок),глЕстьРеквизитДокумента("Контрагент",зДок.DBName())) Then
          зК:=З.Документ.Контрагент;
        EndIf;
        Сп:=List.Create();
        Сп.Add(зДок,""+зДок+" на "+глФРМ(З.зП));
        ОбновитьЭлемент(Таб,зК,10,З.зП,0,Сп);
      EndDo;
    EndDo;
  EndIf;
  
  оСт2:=оНастройка.СтатьяВозвратДенежныхСредствПокупателям;
  If оСт2.Selected()=0 Then
    Message("Внимание! В настройке отчета не указана статья возврата ден. средств покупателям! Отчет будет показывать НЕВЕРНЫЕ цифры!","!");
  Else
    //Запрос по возвратам покупателей
    Form.StatusText("Запрос по возвратам ден. средст покупателям...");
    ТЗ:="Period From НачДата to КДата;
    |День:=Storage.Затраты.@DAY;
    |Документ:=Storage.Затраты.@LINK;
    |зСм:=Storage.Затраты.Сумма;
    |зСЗ:=Storage.Затраты.СтатьяЗатрат;
    |зТЗ:=Storage.Затраты.ТипЗаписи;Condition(зТЗ<2);
    |Condition(зСЗ=оСт2);
    |зП:=SUM(зСм);
    |Group День,Документ;";
    
    З:=Query.Create();
    З.Execute(ТЗ,2);
    
    While З.Next(1) Do
      Сп:=List.Create();
      While З.Next(2) Do
        зДок:=З.Документ;
        Сп.Add(зДок,""+зДок+" на "+глФРМ(З.зП));
      EndDo;
      НайтиДень(З.День,Таб);
      ОбновитьДень(13,З.Compute("зП"),0,Сп);
    EndDo;
  EndIf;
  
  //Запрос по не денежным затратам
  Form.StatusText("Запрос по затратам без денег...");
  тДок:="ПКО,РКО,ВыпискаБанкаРасход,ВыпискаБанкаПриход,";
  ТЗ:="Period From НачДата to КДата;
  |День:=Storage.Затраты.@DAY;
  |Документ:=Storage.Затраты.@LINK;
  |зСЗ:=Storage.Затраты.СтатьяЗатрат;
  |зЦЗ:=Storage.Затраты.ЦентрЗатрат;
  |зТЗ:=Storage.Затраты.ТипЗаписи;Condition(зТЗ<2);
  |зВз:=Storage.Затраты.ЦентрЗатрат.ВнутреннееПеремещение;
  |Condition(зВз<>1);
  |зСм:=Storage.Затраты.Сумма;
  |зП:=SUM(зСм);
  |Group День,Документ;";
  
  З:=Query.Create();
  З.Execute(ТЗ,2);
  
  While З.Next(1) Do
    НайтиДень(З.День,Таб);
    Таб2:=Таб.Таб;
    Таб2.CurLine:=14;
    
    См:=0;
    While З.Next(2) Do
      If Pos(З.Документ.DBName(),тДок)=0 Then
        См:=См+З.зП;
        Таб2.СпДок.Add(З.Документ,""+З.Документ+" на "+глФРМ(З.зП));
      EndIf;
    EndDo;
    ОбновитьДень(14,-См);
  EndDo;
  
  спСт:=List.Create();
  If оСт.Selected()<>0 Then
    спСт.Add(оСт);
  EndIf;
  If оСт2.Selected()<>0 Then
    спСт.Add(оСт2);
  EndIf;
  
  //Запрос по внутренним затратам
  //Нужно исключить отсюда: инкассирование, затраты без движения денег, перемещения денег банк
  Form.StatusText("Запрос по внутренним затратам...");
  тДок:="ПКО,РКО,ВыпискаБанкаРасход,ВыпискаБанкаПриход,";
  ТЗ:="Period From НачДата to КДата;
  |День:=Storage.Затраты.@DAY;
  |Документ:=Storage.Затраты.@LINK;
  |зСЗ:=Storage.Затраты.СтатьяЗатрат;"+
  ?(спСт.Size()=0,"","Condition(зСЗ NOT IN спСт);")+
  "зЦЗ:=Storage.Затраты.ЦентрЗатрат;
  |зТЗ:=Storage.Затраты.ТипЗаписи;Condition(зТЗ<2);
  |зВз:=Storage.Затраты.ЦентрЗатрат.ВнутреннееПеремещение;
  |Condition(зВз=1);
  |зСм:=Storage.Затраты.Сумма;
  |зП:=SUM(зСм);
  |Group День,зСЗ,Документ;";
  
  З:=Query.Create();
  З.Execute(ТЗ,2);
  
  While З.Next(1) Do
    НайтиДень(З.День,Таб);
    While З.Next(2) Do
      зСЗ:=З.зСЗ;
      зЦЗ:=З.зЦЗ;
      
      См:=0;
      Сп:=List.Create();
      While З.Next(3) Do
        д:=З.Документ;
        Вид:=д.DBName();
        If Pos(Вид,тДок)>0 Then
          //Инкассация?
          If UpperCase(Struct.Enum(д.КодОперации.DBName()).Values(д.КодОперации.Index()).Name)<>"ИНКАССАЦИЯ" Then
            См:=См+З.зП;
            Сп.Add(д,""+д+" на "+глФРМ(З.зП));
          EndIf;
        EndIf;
      EndDo;
      
      ОбновитьЭлемент(Таб,""+зЦЗ+" / "+зСЗ,12,См,,Сп);
    EndDo;
  EndDo;
  

  //Запрос по затратам
  Form.StatusText("Запрос по затратам...");
  ТЗ:="Period From НачДата to КДата;
  |День:=Storage.Затраты.@DAY;
  |Документ:=Storage.Затраты.@LINK;
  |зСм:=Storage.Затраты.Сумма;
  |зВз:=Storage.Затраты.ЦентрЗатрат.ВнутреннееПеремещение;
  |Condition(зВз<>1);
  |зТЗ:=Storage.Затраты.ТипЗаписи;Condition(зТЗ<2);
  |зСЗ:=Storage.Затраты.СтатьяЗатрат;"+
  ?(спСт.Size()=0,"","Condition(зСЗ NOT IN спСт);")+
  "зЦЗ:=Storage.Затраты.ЦентрЗатрат;
  |зП:=SUM(зСм);
  |Group День,зЦЗ,зСЗ,Документ;";
  
  З:=Query.Create();
  З.Execute(ТЗ,2);
  
  спЦЗ:=List.Create();
  While З.Next(1) Do
    НайтиДень(З.День,Таб);
    While З.Next(2) Do
      зЦЗ:=З.зЦЗ;
      //Добавить в ЦЗ?
      Номер:=спЦЗ.Find(зЦЗ);
      If Номер=0 Then
        спЦЗ.Add(зЦЗ);
        Номер:=спЦЗ.Size();
        
        Таб.Select();
        While Таб.Next() Do
          Таб2:=Таб.Таб;
          Таб2.AddLine("СпДок,СпДокП,Эл",List.Create(),List.Create(),зЦЗ);
          Таб3:=Tab.Create("Таб,Эл,СпДокП,СпДок");
          Таб3.AddColumn("См",,"Number");
          Таб3.AddColumn("СмП",,"Number");
          Таб2.Таб:=Таб3;
        EndDo;
        НайтиДень(З.День,Таб);
        
        ТабСп.AddLine("Сп",List.Create());
      EndIf;
      Номер:=Номер+ВсегоРазделов;
      
      While З.Next(3) Do
        зСЗ:=З.зСЗ;
        См:=З.Compute("зП");
        Сп:=List.Create();
        While З.Next(4) Do
          Сп.Add(З.Документ,""+З.Документ+" на "+глФРМ(З.зП));
        EndDo;
        ОбновитьЭлемент(Таб,зСЗ,Номер,См,,Сп);
      EndDo;
    EndDo;
  EndDo;
  
{  
  Form.StatusText("Запрос по заявкам на платежи...");
  //Заявки на платежи
  СпСт:=List.Create(Enum.зтСтатусыЗаявкиНаПлатежи.Новый,Enum.зтСтатусыЗаявкиНаПлатежи.Принят,Enum.зтСтатусыЗаявкиНаПлатежи.Осуществлен,Enum.зтСтатусыЗаявкиНаПлатежи.Отложен);
  НДата:=НачДата-62;
  ТЗ:="зДата:=BegOfDay(Doc.ЗаявкаНаПлатежи.DocDate);Condition((зДата>=НДата)And(зДата<=КДата));
  |зСтатус:=Doc.ЗаявкаНаПлатежи.@Status;Condition(зСтатус>1);
  |Документ:=Doc.ЗаявкаНаПлатежи;
  |зСм:=Doc.ЗаявкаНаПлатежи.СуммаВзаиморасчетов;
  |зСт:=Doc.ЗаявкаНаПлатежи.СтатусПлатежа;
  |Condition(зСт IN СпСт);
  |зДатаПл:=Doc.ЗаявкаНаПлатежи.ДатаПлатежа;
  |зДатаПлПр:=Doc.ЗаявкаНаПлатежи.ПринятаяДатаПлатежа;
  |Group Документ;";
  З:=Query.Create();
  З.Execute(ТЗ,2);
  
  While З.Next(1) Do
    зДатаПл:=BegOfDay(З.зДатаПлПр);
    If isEmpty(зДатаПл) Then
      зДатаПл:=BegOfDay(З.зДатаПл);
    EndIf;
    зСтарДатаПл:=зДатаПл;
    д:=З.Документ;
    
    If д.СтатусПлатежа<>Enum.зтСтатусыЗаявкиНаПлатежи.Осуществлен Then
      //Проверяем реальность статуса платежа
      а:=глНайтиПодчиненныйПоВиду(д,"ВыпискаБанкаРасход",-1);
      If а=0 Then
        а:=глНайтиПодчиненныйПоВиду(д,"РКО",-1);
      EndIf;
      If а<>0 Then
        аДок:=д.Copy();
        аДок.СтатусПлатежа:=Enum.зтСтатусыЗаявкиНаПлатежи.Осуществлен;
        глЗаписать(аДок);
        Статус:=аДок.СтатусПлатежа;
        д:=аДок;
      EndIf;
    EndIf;
    
    If зДатаПл<BegOfDay(CurDate()) Then
      If д.СтатусПлатежа<>Enum.зтСтатусыЗаявкиНаПлатежи.Осуществлен Then
        зДатаПл:=BegOfDay(CurDate());
      EndIf;
    EndIf;
    
    If (зДатаПл<НачДата)Or(зДатаПл>КонДата) Then
      Continue;
    EndIf;
    
    НайтиДень(зДатаПл,Таб);
    If д.СтатьяЗатрат=оСт Then
      //Оплата поставщикам товара?
      If д.СтатусПлатежа<>Enum.зтСтатусыЗаявкиНаПлатежи.Осуществлен Then
        ОбновитьЭлемент(Таб,д.Контрагент,10,д.СуммаВзаиморасчетов,1);
        ОбновитьЭлемент(Таб,д.Контрагент,15,-д.СуммаВзаиморасчетов,1);
        If зДатаПл=ПослДатаФактов Then
          ОбновитьТбНачПланов(д.Контрагент,15,-д.СуммаВзаиморасчетов,д.Контрагент.DBName()+"@"+д.Контрагент.Code);
        EndIf;
      EndIf;
      
      Сп:=List.Create();
      Таб2:=Таб.Таб;
      Таб2.CurLine:=10;
      Таб3:=Таб2.Таб;
      If Таб3.FindAndGoto(д.Контрагент,,"Эл")=1 Then
        If not IsEmpty(Таб3.СпДокП) Then
          Сп:=Таб3.СпДокП;
        Else
          Таб3.СпДокП:=Сп;
        EndIf;
      EndIf;
      Стр:=""+д+" на "+глФРМ(д.СуммаВзаиморасчетов);//+" ЦЗ/СЗ: "+д.ЦентрЗатрат+"/"+д.СтатьяЗатрат;
      If д.СтатусПлатежа<>Enum.зтСтатусыЗаявкиНаПлатежи.Осуществлен Then
        Ном:=д.СтатусПлатежа.Index();
        If Ном=1 Then
          Стр:=Стр+" (НЕ ОБРАБОТАН)"+?(зСтарДатаПл<зДатаПл," ПРОСРОЧЕН!","");
        ElseIf Ном=2 Then
          Стр:=Стр+" (Принят, НЕ ОПЛАЧЕН)"+?(зСтарДатаПл<зДатаПл," ПРОСРОЧЕН!","");
        ElseIf Ном=5 Then
          Стр:=Стр+" (ОТЛОЖЕН)"+?(зСтарДатаПл<зДатаПл," ПРОСРОЧЕН!","");
        EndIf;
      EndIf;
      Сп.Add(д,Стр);
    Else
      //Платеж по др. СЗ
      зЦЗ:=д.ЦентрЗатрат;
      Номер:=спЦЗ.Find(зЦЗ);
      If Номер=0 Then
        спЦЗ.Add(зЦЗ);
        Номер:=спЦЗ.Size();
        
        Таб.Select();
        While Таб.Next() Do
          Таб2:=Таб.Таб;
          Таб2.AddLine("СпДок,СпДокП,Эл",List.Create(),List.Create(),зЦЗ);
          Таб3:=Tab.Create("Таб,Эл,СпДокП,СпДок");
          Таб3.AddColumn("См",,"Number");
          Таб3.AddColumn("СмП",,"Number");
          Таб2.Таб:=Таб3;
        EndDo;
        НайтиДень(зДатаПл,Таб);
        ТабСп.AddLine("Сп",List.Create());
      EndIf;
      Номер:=Номер+ВсегоРазделов;
      зСЗ:=д.СтатьяЗатрат;
      If д.СтатусПлатежа<>Enum.зтСтатусыЗаявкиНаПлатежи.Осуществлен Then
        ОбновитьЭлемент(Таб,зСЗ,Номер,д.СуммаВзаиморасчетов,1);
        ОбновитьЭлемент(Таб,"Оплата по статьям затрат",15,-д.СуммаВзаиморасчетов,1);
        If зДатаПл=ПослДатаФактов Then
          ОбновитьТбНачПланов("Оплата по статьям затрат",15,-д.СуммаВзаиморасчетов);
        EndIf;
      EndIf;
      
      Сп:=List.Create();
      Таб2:=Таб.Таб;
      Таб2.CurLine:=Номер;
      Таб3:=Таб2.Таб;
      If Таб3.FindAndGoto(зСЗ,,"Эл")=1 Then
        If not IsEmpty(Таб3.СпДокП) Then
          Сп:=Таб3.СпДокП;
        Else
          Таб3.СпДокП:=Сп;
        EndIf;
      EndIf;
      Стр:=""+д+" на "+глФРМ(д.СуммаВзаиморасчетов);
      If д.НазначениеПлатежа=Enum.зтНазначениеЗаявкиНаПлатежи.ОплатаКонтрагенту Then
        Стр:=Стр+", контрагент: "+д.Контрагент;
      EndIf;
      If д.СтатусПлатежа<>Enum.зтСтатусыЗаявкиНаПлатежи.Осуществлен Then
        Ном:=д.СтатусПлатежа.Index();
        If Ном=1 Then
          Стр:=Стр+" (НЕ ОБРАБОТАН)"+?(зСтарДатаПл<зДатаПл," ПРОСРОЧЕН!","");
        ElseIf Ном=2 Then
          Стр:=Стр+" (Принят, НЕ ОПЛАЧЕН)"+?(зСтарДатаПл<зДатаПл," ПРОСРОЧЕН!","");
        ElseIf Ном=5 Then
          Стр:=Стр+" (ОТЛОЖЕН)"+?(зСтарДатаПл<зДатаПл," ПРОСРОЧЕН!","");
        EndIf;
      EndIf;
      Сп.Add(д,Стр);
    EndIf;
  EndDo;
}  

  
  //В день, когда есть и планы и факты, добавить к планам факты
  If (ПослДатаФактов<=КонДата)And(ПослДатаФактов>=НачДата) Then
    НайтиДень(ПослДатаФактов,Таб);
    Таб2:=Таб.Таб;
    Таб2.Select();
    While Таб2.Next() Do
      Таб2.СмП:=Таб2.СмП+Таб2.См;
      Таб3:=Таб2.Таб;
      Таб3.Select();
      While Таб3.Next() Do
        Таб3.СмП:=Таб3.СмП+Таб3.См;
      EndDo;
    EndDo;
  EndIf;  
EndFunction


Function УстановитьЭлемент(Эл,Номер,См,ТипСм=0,СпДок=0)
  If См=0 Then
    Exit;
  EndIf;
  Таб2:=Таб.Таб;
  Таб2.CurLine:=Номер;
  If ТипСм=0 Then
    Таб2.См:=См;
  Else
    Таб2.СмП:=См;
  EndIf;
  Таб3:=Таб2.Таб;
  If Таб3.FindAndGoto(Эл,,"Эл")=0 Then
    Таб3.AddLine("Эл",Эл);
  EndIf;
  If СпДок<>0 Then
    If ТипСм=0 Then
      Таб3.СпДок:=СпДок;
    Else
      Таб3.СпДокП:=СпДок;
    EndIf;
  EndIf;
  
  
  If ТипСм=0 Then
    Таб3.См:=См;
  Else
    Таб3.СмП:=См;
  EndIf;
  
  Сп:=ТабСп.Get(Номер,"Сп");
  If Сп.Find(Эл)=0 Then
    Сп.Add(Эл);
  EndIf;
EndFunction


Function ПодсчитатьИтоги(Номер)
  Таб2:=Таб.Таб;
  Таб2.CurLine:=Номер;
  Таб3:=Таб2.Таб;
  Таб2.См:=0;
  Таб2.СмП:=0;
  Таб3.Select();
  While Таб3.Next() Do
    Таб2.См:=Таб2.См+Таб3.См;
    Таб2.СмП:=Таб2.СмП+Таб3.СмП;
  EndDo;
EndFunction


Function ТипСекции(аДень)
  Exit ?(аДень=ПослДатаФактов,"h2",?(аДень<ПослДатаФактов,"h5","h4"));
EndFunction

Function НомерСтолбца(аДень)
  НачДата:=BegOfDay(Form.НачДата.Value);
  Exit ?(аДень<=ПослДатаФактов,5+(аДень-НачДата)*2,5+(аДень-НачДата)*2+2);
EndFunction

Function НомерСтолбцаПланы(аДень)
  НачДата:=BegOfDay(Form.НачДата.Value);
  Exit ?(аДень<ПослДатаФактов,5+(аДень-НачДата)*2,5+(аДень-НачДата)*2+2);
EndFunction

//Цвет: 0 -- нач/кон остатки, 1 -- приход, 2 -- расход, 3 -- промеж. итоги
Function ВывестиПустышку(пГруппа,Цвет=0,Сп=0,Сп2=0);
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  пПлан:="";
  пФакт:="";
  спДок:=GetNothing();
  спДокП:=GetNothing();
  Т.CopyByX("v2|h1",1);
  For iDate:=0 To КонДата-НачДата Do
    а:=НачДата+iDate;
    If Сп<>0 Then
      пФакт:=глФРМ(Number(Сп.GetByName(""+Дата2(а))));
    EndIf;
    If Сп2<>0 Then
      пПлан:=глФРМ(Number(Сп2.GetByName(""+Дата2(а))));
    EndIf;
    Т.CopyByX("v2|"+ТипСекции(а));
  EndDo;
  Т.CopyByX("v2|h3");
  Профайл:=?(Цвет=0,60,?(Цвет=3,62,?(Цвет=1,58,56)));
  Т.Area(2,Т.Height(),Т.Width()-1,Т.Height()).ColorProfile:=Профайл;
EndFunction

Function ВывестиИтого(Выс)
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  For iDate:=0 To КонДата-НачДата Do
    а:=НачДата+iDate;
    Инд:=""+Дата2(а)+"@0";
    If ТИтоги.FindAndGoto(Инд,,"Индекс")>0 Then
      If а<=ПослДатаФактов Then
        Т.Area(НомерСтолбца(а),Выс,НомерСтолбца(а),Выс).Text:=глФРМ(ТИтоги.См);
      EndIf;
      If а>ПослДатаФактов Then
        Т.Area(НомерСтолбца(а),Выс,НомерСтолбца(а),Выс).Text:=глФРМ(ТИтоги.СмП);
      ElseIf а=ПослДатаФактов Then
        Т.Area(НомерСтолбца(а)+2,Выс,НомерСтолбца(а)+2,Выс).Text:=глФРМ(ТИтоги.СмП);
      EndIf;
      ТИтоги.Remove(ТИтоги.CurLine);
    EndIf;
  EndDo;
EndFunction

//Тип:=0 -- нач ост, 1 -- приход, -1 -- расход, 2 -- кон ост
Function ВывестиГруппировку(пТекст,Номер,Цвет=0,Тип=0,СпецЦветПланы=0)
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оУровни:=Form.оУровни.Value;
  
  пГруппа:=пТекст;
  If ФлРасшифровка>0 Then
    Т.CopyByX("v2|h1",1);
  EndIf;
  For iDate:=0 To КонДата-НачДата Do
    а:=НачДата+iDate;
    НайтиДень(а,Таб);
    Таб2:=Таб.Таб;
    Таб2.CurLine:=Номер;
    пПлан:=глФРМ(Таб2.СмП);
    пФакт:=глФРМ(Таб2.См);
    
    Инд:=""+Дата2(а)+"@0";
    If ТИтоги.FindAndGoto(Инд,,"Индекс")=0 Then
      ТИтоги.AddLine("Индекс",Инд);
    EndIf;
    ТИтоги.См:=ТИтоги.См+Таб2.См;
    ТИтоги.СмП:=ТИтоги.СмП+Таб2.СмП;
    
    If Тип<>2 Then
      If (Тип<>0) Then
        спДвижение.SetByName(""+Дата2(а),Number(спДвижение.GetByName(""+Дата2(а)))+Таб2.См*Тип);
        спДвижениеП.SetByName(""+Дата2(а),Number(спДвижениеП.GetByName(""+Дата2(а)))+Таб2.СмП*Тип);
        спИтоги.SetByName(""+Дата2(а),Number(спИтоги.GetByName(""+Дата2(а)))+Таб2.См*Тип);
        спИтогиП.SetByName(""+Дата2(а),Number(спИтогиП.GetByName(""+Дата2(а)))+Таб2.СмП*Тип);
      Else
        спИтоги.SetByName(""+Дата2(а),Number(спИтоги.GetByName(""+Дата2(а)))+Таб2.См);
        спИтогиП.SetByName(""+Дата2(а),Number(спИтогиП.GetByName(""+Дата2(а)))+Таб2.СмП);
      EndIf;
    EndIf;
    
    СпДок:=Таб2.СпДок;
    СпДокП:=Таб2.СпДокП;
    If ФлРасшифровка>0 Then
      Т.CopyByX("v2|"+ТипСекции(а));
    EndIf;
  EndDo;
  If ФлРасшифровка>0 Then
    Т.CopyByX("v2|h3");
  EndIf;
  
  Т.Area(2,Т.Height(),2,Т.Height()).IndentX:=2;
  Профайл:=?(Цвет=0,60,?(Цвет=3,62,?(Цвет=1,58,56)));
  Т.Area(2,Т.Height(),Т.Width()-1,Т.Height()).ColorProfile:=Профайл;
  If СпецЦветПланы=1 Then
    For iDate:=0 To КонДата-НачДата Do
      а:=НачДата+iDate;
      If а<ПослДатаФактов Then
        Continue;
      EndIf;
      Т.Area(НомерСтолбцаПланы(а),Т.Height(),НомерСтолбцаПланы(а)+1,Т.Height()).ColorProfile:=54;
    EndDo;
  EndIf;
  
  //Расшифровка группировки
  аНачВыс:=Т.Height();
  Сп:=ТабСп.Get(Номер,"Сп");
  For i:=1 To Сп.Size() Do
    Эл:=Сп.Get(i);
    пГруппа:=Эл;
    If ФлРасшифровка>1 Then
      Т.CopyByX("v2|h1",1);
    EndIf;
    
    спКрас:=List.Create();
    
    For iDate:=0 To КонДата-НачДата Do
      а:=НачДата+iDate;
      НайтиДень(а,Таб);
      Таб2:=Таб.Таб;
      Таб2.CurLine:=Номер;
      Таб3:=Таб2.Таб;
      
      СпДок:=List.Create();
      СпДокП:=СпДок;
      пПлан:="";
      пФакт:="";
      If Таб3.FindAndGoto(Эл,,"Эл")>0 Then
        пПлан:=глФРМ(Таб3.СмП);
        пФакт:=глФРМ(Таб3.См);
        СпДок:=Таб3.СпДок;
        СпДокП:=Таб3.СпДокП;
      EndIf;
      
      If ФлРасшифровка>1 Then
        Т.CopyByX("v2|"+ТипСекции(а));
        ФлКрас:=0;
        If TypeStr(СпДокП)="LIST" Then
          For i2:=1 To СпДокП.Size() Do
            Стр:=СпДокП.GetName(i2);
            If Pos("ПРОСРОЧЕН!",Стр)>0 Then
              ФлКрас:=1;
              Break;
            EndIf;
          EndDo;
        EndIf;
        
        If ФлКрас=1 Then
          спКрас.Add(НомерСтолбцаПланы(а));
        EndIf;
      EndIf;
    EndDo;
    If ФлРасшифровка>1 Then
      Т.CopyByX("v2|h3");
      Т.Area(2,Т.Height(),2,Т.Height()).IndentX:=4;
      If Цвет>0 Then
        Профайл:=?(Цвет=3,54,?(Цвет=1,50,48));
        Т.Area(2,Т.Height(),Т.Width()-1,Т.Height()).ColorProfile:=Профайл;
      EndIf;
      For i2:=1 To спКрас.Size() Do
        флСтл:=спКрас.Get(i2);
        Т.Area(флСтл,Т.Height(),флСтл+1,Т.Height()).ColorProfile=38;//BackgroundColor:=38;//Яркое выделение
      EndDo;
    EndIf;
  EndDo;
  If (ФлРасшифровка>1)And(оУровни=1) Then
    Т.Levels(0).Add(0,аНачВыс,Т.Height());
  EndIf;  
EndFunction


Function ПечатьТаблицы(Обновление=0)
  оНастройка:=Form.оНастройка.Value;
  If оНастройка.Selected()=0 Then
    Exit;
  EndIf;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оУровни:=Form.оУровни.Value;
  
  Т:=Form.Таблица.Value;
  Нави:=?(Обновление=0,"",Т.NavigationState());
  Т.Lock();
  Try
    Т.Clear();
    
  //TODO: сделать таблицу планов, начиная с НачДата2 также, если нельзя "досчитать" до показательных дней 
  //TODO: Убрать столбики планов до текущей даты
  
    ТбНачПланов2:=Tab.Create();
    ТбНачПланов.CopyTo(ТбНачПланов2);
  
    Form.StatusText("Пересчет планов...");
    //Заполнение НачОсн/КонОст планов
    If КонДата>BegOfDay(Date()) Then
      //СпецОбновитьТбНачПланов(10,15,-1,1);
      //СпецОбновитьТбНачПланов(12,15,-1,1);
      //СпецОбновитьТбНачПланов(13,15,-1,1);
      //СпецОбновитьТбНачПланов(14,15,-1,1);
      //For а2:=1 To спЦЗ.Size() Do
      //  СпецОбновитьТбНачПланов(ВсегоРазделов+а2,15,-1,1);
      //EndDo;
      
      
      For iDate:=0 To КонДата-ПослДатаФактов-1 Do
        а:=ПослДатаФактов+1+iDate;
        НайтиДень(а,Таб);
        
        //Проставляем текущий начальный план
        ТбНачПланов2.Select();
        While ТбНачПланов2.Next() Do
          //15-1,16-2,17-3
          Ном:=ТбНачПланов2.Номер;
          Ном:=?(Ном=15,1,?(Ном=16,2,3));
          УстановитьЭлемент(ТбНачПланов2.зЭл,Ном,ТбНачПланов2.Сумма,1);
        EndDo;
        
        //Добавляем сумму планов за этот день: 5,6,7 - 9,10,20..х,12,13,14
        СпецОбновитьТбНачПланов(5,15);
        СпецОбновитьТбНачПланов(19,15);
        СпецОбновитьТбНачПланов(6,15);
  //      СпецОбновитьТбНачПланов(7,16);//Кассу не меняем
        СпецОбновитьТбНачПланов(9,15,-1);
        СпецОбновитьТбНачПланов(10,15,-1);
        СпецОбновитьТбНачПланов(12,15,-1);
        СпецОбновитьТбНачПланов(13,15,-1);
        СпецОбновитьТбНачПланов(14,15,-1);
        For а2:=1 To спЦЗ.Size() Do
          СпецОбновитьТбНачПланов(ВсегоРазделов+а2,15,-1);
        EndDo;
        
        НайтиДень(а,Таб);
        //Проставляем конечный план
        ТбНачПланов2.Select();
        While ТбНачПланов2.Next() Do
          УстановитьЭлемент(ТбНачПланов2.зЭл,ТбНачПланов2.Номер,ТбНачПланов2.Сумма,1);
        EndDo;
        
        ПодсчитатьИтоги(1);
        ПодсчитатьИтоги(2);
        ПодсчитатьИтоги(3);
        ПодсчитатьИтоги(15);
        ПодсчитатьИтоги(16);
        ПодсчитатьИтоги(17);
      EndDo;
    EndIf;
  
    
    
    спДвижение:=List.Create();//Итого по движению
    спДвижениеП:=List.Create();//Итого по движению
    спИтоги:=List.Create();//Полное вычисленное итого
    спИтогиП:=List.Create();//Полное вычисленное итого
    
    оЗагол:="Платежный календарь";
    оСвойства:="С "+Str(НачДата)+" по "+Str(КонДата)+", сформирован "+Str(CurDate())+", "+CurTime()+".";
    Т.SetSourceName("Table");
    Т.CopyByX("v1|h1",1);
    For iDate:=0 To КонДата-НачДата Do
      а:=НачДата+iDate;
      пДата:=а;
      Т.CopyByX("v1|"+ТипСекции(а));
    EndDo;
    Т.CopyByX("v1|h3");
    Т.Options.FixedLine:=Т.Height();
    Т.Options.FixedColumn:=4;
    
    ТИтоги:=Tab.Create("Индекс");
    ТИтоги.AddColumn("См",,"Number");
    ТИтоги.AddColumn("СмП",,"Number");
    
    ФлРасшифровка:=оНастройка.РасшифровыватьНачальныеОстатки;
    ВывестиПустышку("Начальные остатки");
    Выс:=Т.Height();
    ВывестиГруппировку("Остатки на расчетных счетах",1);
    ВывестиГруппировку("Остатки в кассах",2);
    ВывестиГруппировку("Остатки в инкассации",3);
    ВывестиИтого(Выс);
    
    ФлРасшифровка:=оНастройка.РасшифровыватьПриход;
    ВывестиПустышку("Приход (итого):",1);
    Выс:=Т.Height();
  
    ВывестиГруппировку("Поступление кредитов",5,1,1,1);
    ВывестиГруппировку("Овердрафтовые (или подобные) счета",19,1,1);
    ВывестиГруппировку("Поступление на расчетные счета",6,1,1);
    ВывестиГруппировку("Поступление в кассы",7,1,1);
    ВывестиИтого(Выс);
    
    ФлРасшифровка:=оНастройка.РасшифровыватьРасход;
    ВывестиПустышку("Расход (итого):",2);
    Выс:=Т.Height();
    ВывестиГруппировку("Возврат кредитов",9,2,-1,1);
    ВывестиГруппировку("Оплата поставщикам товара",10,2,-1);
    //Затраты по ЦЗ/СЗ
    For а:=1 To спЦЗ.Size() Do
      ВывестиГруппировку(спЦЗ.Get(а),а+ВсегоРазделов,2,-1);
    EndDo;
    ВывестиГруппировку("Внутренние перемещения (должен быть ноль!)",12,2,-1);
    ВывестиГруппировку("Возврат ден. средств покупателям",13,2,-1);
    ВывестиГруппировку("Затраты без движения денег (корректировки и прочее)",14,2,-1);
    ВывестиИтого(Выс);
    ВывестиПустышку("Итого движение за период:",0,спДвижение,спДвижениеП);
    
    ФлРасшифровка:=оНастройка.РасшифровыватьКонечныеОстатки;
    ВывестиПустышку("Конечные остатки");
    Выс:=Т.Height();
    ВывестиГруппировку("Остатки на расчетных счетах",15,,2);
    ВывестиГруппировку("Остатки в кассах",16,,2);
    ВывестиГруппировку("Остатки в инкассации",17,,2);
    ВывестиИтого(Выс);
    ВывестиПустышку("Конечные остатки, вычисленные из движения (проверка):",3,спИтоги,спИтогиП);
    
    Т.Levels(0).Close();
    Т.Options.LevelsVisible:=оУровни;
  Finally
    Т.NavigationState(Нави);
    Т.Unlock();
    Т.Update();
  EndTry;
EndFunction

Function ИзменитьЭлемент(Эл,Номер,См,СпДок=0)
  If См=0 Then
    Exit;
  EndIf;
  Таб2:=Таб.Таб;
  Таб2.CurLine:=Номер;
  Таб3:=Таб2.Таб;
  If Таб3.FindAndGoto(Эл,,"Эл")=0 Then
    Таб3.AddLine("Эл",Эл);
  EndIf;
  If СпДок<>0 Then
    Таб2.СпДокП:=СпДок;
  EndIf;
  
  Таб2.СмП:=Таб2.СмП-Таб3.СмП+См;
  Таб3.СмП:=См;
EndFunction

Function ЗаписатьЗначение(зПк,Зн,зДата,зЭл,Номер,СпДок)
  оНастройка:=Form.оНастройка.Value;
  Инд:=зПк.Index()+"#"+зДата;
  а:=Ref.зтЗначенияПоказателей;
  Фл:=0;
  If зЭл=0 Then
    Фл:=1;
    If а.Find("@Parent,Индекс,ФлПлан",оНастройка,Инд,1) Then
      зЭл:=а;
      Фл:=0;
    EndIf;
    If Фл Then
      а.New();
      а.Parent(оНастройка);
      а.Показатель:=зПк;
      а.ФлПлан:=1;
      а.ДатаДействия:=BegOfDay(зДата);
      а.Индекс:=Инд;
    EndIf;
  EndIf;
  If not Фл Then
    а:=зЭл.Copy();
  EndIf;
  а.Значение:=Зн;
  If глЗаписать(а) Then
    СпДок.SetByName("зЭл",зЭл);
    НайтиДень(зДата,Таб);
    //Необходимо исправить значение в таблице Таб с прошлого на текущее
    
    If Enum.финТипПоказателяПлатежногоКалендаря.ПоступленияКредитов=зПк Then
      ИзменитьЭлемент(зПк,5,Зн,СпДок);
      ИзменитьЭлемент(зПк,15,Зн);
      
      //If зДата=ПослДатаФактов Then
      //  ОбновитьТбНачПланов(З.зПк,15,зЭл.Значение,Str(З.зПк.Index()));
      //EndIf;
    Else
      ИзменитьЭлемент(зПк,9,Зн,СпДок);
      ИзменитьЭлемент(зПк,15,-Зн);
      
      //If зДата=ПослДатаФактов Then
      //  ОбновитьТбНачПланов(З.зПк,15,-зЭл.Значение,Str(З.зПк.Index()));
      //EndIf;
    EndIf;
  EndIf;
EndFunction

Function OnTableDblClick()
  оНастройка:=Form.оНастройка.Value;
  
  Т:=Form.Таблица.Value;
  if Т.SelectionMode>1 then
    Exit;
  EndIf;
  Знч:=Т.Area(Т.CurCol,Т.CurLine,Т.CurCol,Т.CurLine).Value;
  If TypeStr(Знч)<>"LIST" Then
    If (Pos("DB.",TypeStr(Знч))>0)And(not isEmpty(Знч)) Then
      If DBTypeStr(Знч)<>"ENUM" Then
        OpenObject(Знч,0,1);
      EndIf;
    EndIf;  
    Exit;
  EndIf;
  If Знч.GetByName("ПлатежныйКалендарь")<>1 Then
    Exit;
  EndIf;
  
  Тип:=Знч.GetByName("Тип");
  Сп:=Знч.GetByName("Сп");

  If Тип=0 Then
    //Вывести список документов с суммами
    If IsEmpty(Сп) Then
      Exit;
    EndIf;
    If IsEmpty(Сп.GetByName("ТипЗначения")) Then
      зДок:=0;
      If Сп.Select(зДок)=0 Then
        Exit;
      EndIf;
      OpenObject(зДок,0,1);
    ElseIf Сп.GetByName("ТипЗначения")=1 Then
      зПк:=Сп.GetByName("зПк");
      зЭл:=Сп.GetByName("зЭл");
      зДата:=Сп.GetByName("зДень");
      Зн:=0;
      If зЭл<>0 Then
        Зн:=зЭл.Copy().Значение;
      EndIf;
      If not AskNumber(Зн,"Введите новое значение плана:",15,2) Then
        Exit;
      EndIf;
      
      ЗаписатьЗначение(зПк,Зн,зДата,зЭл,?(зПк=Enum.финТипПоказателяПлатежногоКалендаря.ПоступленияКредитов,5,9),Сп);
      ПечатьТаблицы(1);
      
    EndIf;
  EndIf;  
EndFunction


Function OnExecute()
  оНастройка:=Form.оНастройка.Value;
  If оНастройка.Selected()=0 Then
    Box("Необходимо выбрать настройку отчета для форматирования!",Q_STOP);
    Exit;
  EndIf;
  ПодготовитьПеременные();
  ПечатьТаблицы();
EndFunction
