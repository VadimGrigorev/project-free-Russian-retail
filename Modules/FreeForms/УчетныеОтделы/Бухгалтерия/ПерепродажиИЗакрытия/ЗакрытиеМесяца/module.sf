//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

Function НазначитьТип()
  Function НазначитьТипРекв(оСуб,ВС)
    Фл:=0;
    If Trim(ВС.ТипЗначенияЛокальный)="" Then
      Стр:="Ref.бухЗначенияСубконто";
      Фл:=1;
    Else
      Стр:=Replace(Uppercase(ВС.ТипЗначенияЛокальный),"СПРАВОЧНИК","REF");
    EndIf;
    оСуб.SetType(Стр);
    If Фл Then
      If _And(not isEmpty(оСуб.Value),оСуб.Value.Parent()<>ВС) Then
        оСуб.Value:=0;
      EndIf;
    EndIf;
  EndFunction

  аСчет:=Form.Счет.Value;
  If аСчет.Selected()=0 Then
    Exit;
  EndIf;
  НазначитьТипРекв(Form.оСуб1,аСчет.ВидСубконто1);
  НазначитьТипРекв(Form.оСуб2,аСчет.ВидСубконто2);
  НазначитьТипРекв(Form.оСуб3,аСчет.ВидСубконто3);
EndFunction

Function ОбновитьСубконто()
  аСчет:=Form.Счет.Value;
  If аСчет.Selected()=0 Then
    Form.оСуб1.Value:=GetNothing();
    Form.оСуб2.Value:=GetNothing();
    Form.оСуб3.Value:=GetNothing();
    Form.тСчет.Caption:="";
  Else
    Form.тСчет.Caption:=аСчет.Name;
  EndIf;
  
  If аСчет.ВидСубконто1.Selected()=0 Then
    Form.тСуб1.Caption:="";
    Form.тС1.isDisabled:=1;
    Form.оСуб1.isDisabled:=1;
    Form.оСуб1.Value:=GetNothing();
  Else
    Form.тСуб1.Caption:=аСчет.ВидСубконто1.Name;
    Form.тС1.isDisabled:=0;
    Form.оСуб1.isDisabled:=0;
  EndIf;
  
  If аСчет.ВидСубконто2.Selected()=0 Then
    Form.тСуб2.Caption:="";
    Form.тС2.isDisabled:=1;
    Form.оСуб2.isDisabled:=1;
    Form.оСуб2.Value:=GetNothing();
  Else
    Form.тСуб2.Caption:=аСчет.ВидСубконто2.Name;
    Form.тС2.isDisabled:=0;
    Form.оСуб2.isDisabled:=0;
  EndIf;
  
  If аСчет.ВидСубконто3.Selected()=0 Then
    Form.тСуб3.Caption:="";
    Form.тС3.isDisabled:=1;
    Form.оСуб3.isDisabled:=1;
    Form.оСуб3.Value:=GetNothing();
  Else
    Form.тСуб3.Caption:=аСчет.ВидСубконто3.Name;
    Form.тС3.isDisabled:=0;
    Form.оСуб3.isDisabled:=0;
  EndIf;
  НазначитьТип();
  Exit "";
EndFunction

Function НайтиДокументы(Тип,Стр,Кмт,ByRef ФлВопрос)
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оЮЛ:=Form.оЮЛ.Value;

  //ТипПуст:="";
  ТЗ:="зДата:=BegOfDay(Doc.БухгалтерскаяОперация.DocDate);Condition((зДата>=НачДата)And(зДата<=КонДата));
  |зСтатус:=Doc.БухгалтерскаяОперация.@Status;Condition(зСтатус<>1);
  |зЮЛ:=Doc.БухгалтерскаяОперация.ЮрЛицо;
  |Condition(зЮЛ IN оЮЛ.Get(1));
  |Condition(зЮЛ NOT IN оЮЛ.Get(2));
  |зДок:=Doc.БухгалтерскаяОперация;
  |зТип:=Doc.БухгалтерскаяОперация.УникальныйИдентификатор;
  |Condition(зТип=Тип);
  |Group зЮЛ,зДок;";
  З:=Query.Create();
  З.Execute(ТЗ,2);
  
  Сп:=List.Create();
  Фл:=ФлВопрос;
  While З.Next(1) Do
    While З.Next(2) Do
      If not Фл Then
        Фл:=1;
        ФлВопрос:=1;
        If AskQuestion("За данный период уже обнаружены созданные документы "+Стр+" по выбранным юр. лицам. Желаете обновить документы?",Q_QUESTION+Q_YESNO)<>R_YES Then
          Exit 0;
        EndIf;
      EndIf;
      
      аДок:=З.зДок;
      If Pos("DB.DOC.",TypeStr(Сп.GetByName(З.зЮЛ.Code)))=1 Then
        If not глУдалить(аДок) Then
          Exit 0;
        EndIf;
      Else
        If аДок.Status()=1 Then
          If not глОтменитьУдаление(аДок) Then
            Exit 0;
          EndIf;
        EndIf;
        If аДок.Status()>1 Then
          If not глОтменитьОбработку(аДок) Then
            Exit 0;
          EndIf;
        EndIf;
        aTab:=аДок.LineParts("Содержание");
        aTab.ClearLines();
        аДок.Комментарий:=Кмт+", "+З.зЮЛ;
        аДок.Автор:=глПользователь;
        аДок.ЮрЛицо:=З.зЮЛ;
        If not глЗаписать(аДок) Then
          Exit 0;
        EndIf;
        Сп.SetByName(З.зЮЛ.Code,аДок);
      EndIf;
    EndDo;
  EndDo;
  Exit Сп;
EndFunction

Function ПолучитьТаблицуКорректировки()
  Тб:=Tab.Create("ЮЛ,Суб1,Суб2,Суб3,Индекс");
  Тб.AddColumn("Сумма",,"Number");
  Тб.AddColumn("Флаг",,"Number");
  Exit Тб;
EndFunction

Function УстановитьКоррСумму(Тб,См,зЮЛ,СчПриемник,зСуб1=0,зСуб2=0,зСуб3=0)
  If Тб=0 Then
    Exit;
  EndIf;
  
  Индекс:=зЮЛ.Code+Chr(1)+?(not IsEmpty(зСуб1),СчПриемник.ВидСубконто1.Code+":"+зСуб1.Code,"")+Chr(1)+
    ?(not IsEmpty(зСуб2),СчПриемник.ВидСубконто2.Code+":"+зСуб2.Code,"")+Chr(1)+?(not IsEmpty(зСуб3),СчПриемник.ВидСубконто3.Code+":"+зСуб3.Code,"");
  If Тб.FindAndGoto(Индекс,,"Индекс")=0 Then
    Тб.AddLine("Индекс,ЮЛ,Суб1,Суб2,Суб3",Индекс,зЮЛ,зСуб1,зСуб2,зСуб3);
  EndIf;
  Тб.Сумма:=Тб.Сумма+См;
EndFunction

Function ДобавитьСчетЕслиОнПодходящий(Сп,СчетСтр)
  Сч:=глНайтиСчет(СчетСтр);
  If Pos("ТМЦНОМЕНКЛАТУРА",UpperCase(Trim(Сч.ВидСубконто1.ТипЗначенияЛокальный)))>0 Then
    If Pos("ОБЩСКЛАДЫ",UpperCase(Trim(Сч.ВидСубконто2.ТипЗначенияЛокальный)))>0 Then
      Сп.Add(Сч);
      Exit;
    EndIf;
  EndIf;
  Message("Счет %LINK% не может был использован при пересчетете себестоимости, так как его субконто не являются соответственно Номенклатура и Склады!","!",СчетСтр);
EndFunction

Function ПолучитьДокИсправленияСебестоимости(спДок,пТип,зЮЛ)
  КонДата:=BegOfDay(Form.КонДата.Value);
  
  аДок:=спДок.GetByName(зЮЛ.Code);
  If pos("DB.DOC.",TypeStr(аДок))<>1 Then
    аДок:=Doc.БухгалтерскаяОперация;
    аДок.New();
    аДок.DocDate:=КонДата;
    аДок.КодОперации:=Enum.коБухгалтерскаяОперация.БухгалтерскаяОперация;
    аДок.Автор:=глПользователь;
    аДок.ЮрЛицо:=зЮЛ;
    аДок.УникальныйИдентификатор:=пТип;
    глУстановитьНовыйНомер(аДок);
    спДок.SetByName(зЮЛ.Code,аДок);
  EndIf;
  If пТип="ЗМ:СБС:П" Then
    аДок.Комментарий:="Исправление себестоимости (перемещения), "+зЮЛ;
  ElseIf пТип="ЗМ:СБС:П2" Then
    аДок.Комментарий:="Исправление себестоимости (перемещения, 43), "+зЮЛ;
  Else
    аДок.Комментарий:="Исправление себестоимости, "+зЮЛ;
  EndIf;  
  Exit аДок;
EndFunction

Function ПолучитьДокЗакрытияМесяца(спДок,пТип,зЮЛ)
  КонДата:=BegOfDay(Form.КонДата.Value);
  
  аДок:=спДок.GetByName(зЮЛ.Code);
  If pos("DB.DOC.",TypeStr(аДок))<>1 Then
    аДок:=Doc.БухгалтерскаяОперация;
    аДок.New();
    аДок.DocDate:=КонДата;
    аДок.КодОперации:=Enum.коБухгалтерскаяОперация.БухгалтерскаяОперация;
    аДок.Автор:=глПользователь;
    аДок.ЮрЛицо:=зЮЛ;
    аДок.УникальныйИдентификатор:=пТип;
    глУстановитьНовыйНомер(аДок);
    спДок.SetByName(зЮЛ.Code,аДок);
  EndIf;
  If пТип="ЗМ:СБС20" Then
    аДок.Комментарий:="Распред. производственных затрат, "+зЮЛ;
  Else
    аДок.Комментарий:="Закрытие месяца, "+зЮЛ;
  EndIf;
  Exit аДок;
EndFunction

//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость
//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость
//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость

//Процедура работает только для пемещений (пар 41.1 -> 41.1 или 41.1 -> 43 и проч.)
//Из пары движений учитывает только дебитные движения
//Используются счета: 41.1,41.2,41.3,10.1,10.2,10.4,10.5,10.6,10.7,10.8,10.9,43
Function ПересчитатьСебестоимостьПеремещений(спДок,тСчета,пТип,фл43=0)
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оЮЛ:=Form.оЮЛ.Value;
  оДоляНО:=Number(Form.оДоляНО.Value.Get(Form.оДоляНО.Value.SelectedLine));
    
  //Накапливаем приходы по перемещениям и средние цены
  ТПер:=Tab.Create("Индекс,ЮЛ,СчетД,СубД1,СубД2,СчетК,СубК1,СубК2,Сумма,Количество");
  ТЦены:=Tab.Create("Индекс,ЮЛ,Счет,Суб1,Суб2,Сумма,Количество");
  
  ТЗ:="зСтатус:=Doc.ПеремещениеТМЦ.@Status;Condition(зСтатус>1);зДата:=BegOfDay(Doc.ПеремещениеТМЦ.DocDate);Condition((зДата>=НачДата)And(зДата<=КонДата));
  |зЮЛ:=Doc.ПеремещениеТМЦ.ЮрЛицо;
  |Condition(зЮЛ IN оЮЛ.Get(1));
  |Condition(зЮЛ NOT IN оЮЛ.Get(2));
  |зДок:=Doc.ПеремещениеТМЦ;
  |Group зДок;";
  З:=Query.Create();
  З.Execute(ТЗ,2);
  
  тСчетаСтр:=","+тСчета+",";
  //ФлСообщение:=0;
  While З.Next(1) Do
    зДок:=З.зДок;
    Form.StatusText("Перемещения: "+зДок);
    aTab:=зДок.LoadStorage("БухгалтерскиеСчета");
    aTab.Select();
    While aTab.Next() Do
      Счет:=aTab.Счет;
      Номенклатура:=aTab.Субконто1;
      Количество:=Abs(aTab.Количество);
      Сумма:=Abs(aTab.Сумма);
      ФлРасход:=(aTab.Количество*?(aTab._Expense=1,-1,1))<0;
      Склад:=aTab.Субконто2;
      If aTab.Next() Then
        Склад2:=aTab.Субконто2;
        Счет2:=aTab.Счет;
        If Номенклатура<>aTab.Субконто1 Then
          Continue;//Неверное перемещение
        EndIf;
        If pos(","+Счет.Code+",",",41.1,41.2,41.3,10.1,10.2,10.4,10.5,10.6,10.7,10.8,10.9,43,")=0 Then
          Continue;//Счета не поддерживаются
        EndIf;
        If pos(","+Счет2.Code+",",",41.1,41.2,41.3,10.1,10.2,10.4,10.5,10.6,10.7,10.8,10.9,43,")=0 Then
          Continue;//Счета не поддерживаются
        EndIf;
        If ?(ФлРасход,Pos(","+Счет2+",",тСчетаСтр)=0,Pos(","+Счет+",",тСчетаСтр)=0) Then
          Continue;//Не счет вызова функции
        EndIf;
        If Round(Количество,6)=0 Then
          Continue;
        EndIf;
        
        If ФлРасход Then
          ТПер.AddLine("Индекс,ЮЛ,СчетД,СубД1,СубД2,СчетК,СубК1,СубК2,Сумма,Количество",зДок.ЮрЛицо.Code+"@"+Счет2.Code+"@"+Склад2.Code+"@"+Номенклатура.Code,зДок.ЮрЛицо,
            Счет2,Номенклатура,Склад2,Счет,Номенклатура,Склад,Сумма,Количество);
        Else
          ТПер.AddLine("Индекс,ЮЛ,СчетД,СубД1,СубД2,СчетК,СубК1,СубК2,Сумма,Количество",зДок.ЮрЛицо.Code+"@"+Счет.Code+"@"+Склад.Code+"@"+Номенклатура.Code,зДок.ЮрЛицо,
            Счет,Номенклатура,Склад,Счет2,Номенклатура,Склад2,Сумма,Количество);
        EndIf;
        
        //If not ФлСообщение Then
        //  Message("За выбранный период в базе найдены перемещения между складами. Такие документы могут создать неверную себестоимость и поддерживаются только частично!","!");
        //  Message("Рекомендуется проверить результат работы обработки!","!");
        //  ФлСообщение:=1;
        //EndIf;
      EndIf;
    EndDo;
  EndDo;
  ТПер.Group("Индекс,ЮЛ,СчетД,СубД1,СубД2,СчетК,СубК1,СубК2","Сумма,Количество");
  If ТПер.Size()=0 Then
    Exit 1;
  EndIf;
  
  
  спСчетК:=List.Create();
  While тСчета<>"" Do
    Стр:=TearStr(тСчета,",");
    ДобавитьСчетЕслиОнПодходящий(спСчетК,Стр);
  EndDo;
  If спСчетК.Size()=0 Then
    Message("Нет ни одного счета для пересчета себестоимости!","!");
    Exit 1;
  EndIf;
  
  If фл43 Then
    оСк:=Form.оСк.Value;
    If оСк.Get(1).Size()=0 Then
      Message("Необходимо задать склады производства (2 закладка), прежде чем пересчитывать себестоимость!","!");
      Exit 0;
    EndIf;
  EndIf;  
  
  //Нахождение средних цен
  //Приход2 и пр. нужны так как возвраты делают движение по приходу с минусом, необходимо учесть их в расходе, а не в приходе
  НачДата2:=BegOfMonth(КонДата-90);
  If фл43 Then
    НачДата2:=BegOfMonth(КонДата-365);
  EndIf;
  ТЗ:="Period From НачДата2 to КонДата;
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |Condition(зЮЛ IN оЮЛ.Get(1));
  |Condition(зЮЛ NOT IN оЮЛ.Get(2));
  |зСч:=Storage.БухгалтерскиеСчета.Счет;
  |зСчКорр:=Storage.БухгалтерскиеСчета.КоррСчет;
  |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
  |зСуб2:=Storage.БухгалтерскиеСчета.Субконто2;"+
  ?(фл43,"Condition(зСуб2 IN оСк.Get(1));Condition(зСуб2 NOT IN оСк.Get(2));")+
  "зДв:=Storage.БухгалтерскиеСчета.@EXPENSE;
  |зСм:=Storage.БухгалтерскиеСчета.Сумма;
  |зКл:=Storage.БухгалтерскиеСчета.Количество;
  |зНачОст:=BegTotals(Сумма);
  |зПриход:=SUM(?((зДв=0)And(зСм>0),зСм,0));
  |зПриход2:=SUM(?((зДв=1)And(зСм>0),зСм,0));
  |зРасход:=SUM(?((зДв=1)And(зСм<0),-зСм,0));
  |зРасход2:=SUM(?((зДв=0)And(зСм<0),-зСм,0));
  |зКонОст:=EndTotals(Сумма);
  |зНачОстКол:=BegTotals(Количество);
  |зПриходКол:=SUM(?((зДв=0)And(зКл>0),зКл,0));
  |зПриходКол2:=SUM(?((зДв=1)And(зКл>0),зКл,0));
  |зРасходКол:=SUM(?((зДв=1)And(зКл<0),-зКл,0));
  |зРасходКол2:=SUM(?((зДв=0)And(зКл<0),-зКл,0));
  |зКонОстКол:=EndTotals(Количество);
  |зДокумент:=Storage.БухгалтерскиеСчета.@LINK;
  |Condition(Not IsType(зДокумент,Doc.ПеремещениеТМЦ));
  |Condition(зСч IN спСчетК);
  |Group зЮЛ,зСч,зСуб2,зСуб1,зСчКорр,зДв;";
  З:=Query.Create();
  З.Execute(ТЗ,2);
    
  
  While З.Next(1) Do
    While З.Next(2) Do
      While З.Next(3) Do
        Form.StatusText("Себ (пер): "+З.зЮЛ+", "+З.зСч+", "+З.зСуб2);
        
        While З.Next(4) Do
          цСеб:=0;
          If IsEmpty(З.зСуб2) Then
            If not IsEmpty(З.зСуб1) Then
              Message("Для ЮЛ: %LINK%, для счета %LINK%, для номенклатуры: %LINK% ("+З.зСуб1.Code+") обнаружено пустое субконто склада! Пожалуйста, исправьте положение!","!",З.зЮЛ,З.зСч,З.зСуб1);
              Exit 0;
            Else
              Message("Для ЮЛ: %LINK%, для счета %LINK%, обнаружено пустое субконто склада и номенклатуры! Пожалуйста, исправьте положение!","!",З.зЮЛ,З.зСч);
              Exit 0;
            EndIf;
          ElseIf IsEmpty(З.зСуб1) Then
            Message("Для ЮЛ: %LINK%, для счета %LINK%, для склада: %LINK% ("+З.зСуб2.Code+") обнаружено пустое субконто номенклатуры! Пожалуйста, исправьте положение!","!",З.зЮЛ,З.зСч,З.зСуб2);
            Exit 0;
          EndIf;
          
          зПриходКол:=З.Compute("зПриходКол")+З.Compute("зПриходКол2");
          зПриход:=З.Compute("зПриход")+З.Compute("зПриход2");
          зРасходКол:=З.Compute("зРасходКол")+З.Compute("зРасходКол2");
          зРасход:=З.Compute("зРасход")+З.Compute("зРасход2");
          зНачОстКол:=З.BegTotals("зНачОстКол");
          зНачОст:=З.BegTotals("зНачОст");
          If оДоляНО<1 Then
            зНачОст:=зНачОст*оДоляНО;
            зНачОстКол:=зНачОстКол*оДоляНО;
          EndIf;
          
          зПриход2:=0;
          зПриходКол2:=0;
          //Находим пропорцию по приходу (по сумме)
          While З.Next(5) Do
            См1:=З.Compute("зПриход")+З.Compute("зПриход2");
            Кл1:=З.Compute("зПриходКол")+З.Compute("зПриходКол2");
            If Round(Кл1,6)<=0 Then
              Continue;
            EndIf;
            If pos(","+З.зСчКорр.Code+",",",41.1,41.2,41.3,10.1,10.2,10.4,10.5,10.6,10.7,10.8,10.9,43,")>0 Then
              Continue;//Пропускаем перемещения
            EndIf;
            
            См1:=Abs(См1);
            зПриход2:=зПриход2+См1;
            зПриходКол2:=зПриходКол2+Кл1;
          EndDo;
          
          цКол:=0;
          If Round(зПриход,2)<=0 Then
            зПриходКол:=0;
          EndIf;
          If Round(зПриходКол2,6)=0 Then
            If Round(зПриходКол,6)>0 Then
              цКол:=зПриходКол+Max(зНачОстКол,-зНачОстКол);
              цСеб:=зПриход+Max(зНачОст,-зНачОст);
            EndIf;  
          Else
            цКол:=зПриходКол2+Max(зНачОстКол,-зНачОстКол);
            цСеб:=зПриход2+Max(зНачОст,-зНачОст);
          EndIf;
            
          If Round(цКол,6)=0 Then
            //В случае отсутствия приходов и начального остатка (только возвраты), придется использовать возвраты, деваться некуда
            цКол:=зРасходКол+Max(зНачОстКол,-зНачОстКол);
            цСеб:=зРасход+Max(зНачОст,-зНачОст);
          EndIf;
          
          If Round(цКол,6)<>0 Then
            //цСеб:=Round(?(цКол=0,0,цСеб/цКол),2);
            ТЦены.AddLine("Индекс,ЮЛ,Счет,Суб1,Суб2,Сумма,Количество",З.зЮЛ.Code+"@"+З.зСч.Code+"@"+З.зСуб1.Code+"@"+З.зСуб2.Code,З.зЮЛ,З.зСч,З.зСуб1,З.зСуб2,цСеб,цКол);
            ТЦены.AddLine("Индекс,ЮЛ,Счет,Суб1,Суб2,Сумма,Количество",З.зЮЛ.Code+"@"+З.зСч.Code+"@"+З.зСуб1.Code,З.зЮЛ,З.зСч,З.зСуб1,0,цСеб,цКол);
          EndIf;
        EndDo;
      EndDo;
    EndDo;
  EndDo;//Цикл по юл. лицам
  ТЦены.Group("Индекс,ЮЛ,Счет,Суб1,Суб2","Сумма,Количество");
  
  //Создание корректировки
  ТПер.Select();
  While ТПер.Next() Do
    аДок:=ПолучитьДокИсправленияСебестоимости(спДок,пТип,ТПер.ЮЛ);
    If аДок=0 Then
      Exit 0;
    EndIf;
    aTab:=аДок.LineParts("Содержание");
    //Переместилось на сумму ТПер.Сумма
    //Должно было на сумму ТЦены.Цена*ТПер.Количество
    Индекс:=ТПер.ЮЛ.Code+"@"+ТПер.СчетД.Code+"@"+ТПер.СубД1.Code+"@"+ТПер.СубД2.Code;
    Индекс2:=ТПер.ЮЛ.Code+"@"+ТПер.СчетД.Code+"@"+ТПер.СубД1.Code+"@"+ТПер.СубК2.Code;
    Индекс3:=ТПер.ЮЛ.Code+"@"+ТПер.СчетД.Code+"@"+ТПер.СубД1.Code;
    If ТЦены.FindAndGoto(Индекс,,"Индекс") Then
      пЦена:=?(ТЦены.Количество=0,0,ТЦены.Сумма/ТЦены.Количество);
    ElseIf ТЦены.FindAndGoto(Индекс2,,"Индекс") Then
      пЦена:=?(ТЦены.Количество=0,0,ТЦены.Сумма/ТЦены.Количество);
    ElseIf ТЦены.FindAndGoto(Индекс3,,"Индекс") Then
      пЦена:=?(ТЦены.Количество=0,0,ТЦены.Сумма/ТЦены.Количество);
    Else
      Continue;//Невозможно скорректировать, неизвестна себестоимость
    EndIf;
    ПравСумма:=пЦена*ТПер.Количество;
    Разница:=ПравСумма-ТПер.Сумма;
    If Round(Разница,2)=0 Then
      Continue;
    EndIf;
    aTab.AddLine("Количество,Сумма,Цена,СчетД,СубконтоД1,СубконтоД2,СчетК,СубконтоК1,СубконтоК2",0,Разница,Разница,ТПер.СчетД,ТПер.СубД1,ТПер.СубД2,ТПер.СчетК,ТПер.СубК1,ТПер.СубК2);
  EndDo;
  
  Exit 1;
EndFunction




//ФлБезРазрезаСкладов исключает из подсчета перемещения и подсчитывает не в разрезе складов (корректировки производит в разрезе складов)
Function ПересчитатьСебестоимость(спДок,тСчета,пТип,Таб902,ТКоррСч20=0,ФлБезРазрезаСкладов0=0)
  Var НачДата Export, КонДата Export;

  Function _ВычислитьЦену(ByRef Цена0,З,флБезСкладов=0)
    оДоляНО:=Number(Form.оДоляНО.Value.Get(Form.оДоляНО.Value.SelectedLine));
    
    //Приход
    зПриходКол:=З.Compute("зПриходКол")+З.Compute("зПриходКол2");
    зПриход:=З.Compute("зПриход")+З.Compute("зПриход2");
    зРасходКол:=З.Compute("зРасходКол")+З.Compute("зРасходКол2");
    зРасход:=З.Compute("зРасход")+З.Compute("зРасход2");
  
    //Количество и сумма будут абсолютными, чтобы получить более правильное среднее арифметическое
    //Кроме того, это устраняет ситуацию с разными знаками
    зНачОстКол:=З.BegTotals("зНачОстКол");
    зНачОст:=З.BegTotals("зНачОст");
    If оДоляНО<1 Then
      зНачОст:=зНачОст*оДоляНО;
      зНачОстКол:=зНачОстКол*оДоляНО;
    EndIf;
    
    цКол:=зПриходКол+Max(зНачОстКол,-зНачОстКол);
    цСеб:=зПриход+Max(зНачОст,-зНачОст);
    If Round(цКол,6)=0 Then
      //В случае отсутствия приходов и начального остатка (только возвраты), придется использовать возвраты, деваться некуда
      цКол:=зРасходКол+Max(зНачОстКол,-зНачОстКол);
      цСеб:=зРасход+Max(зНачОст,-зНачОст);
    EndIf;
    If Round(цКол,6)=0 Then//Особые случаи и ошибки, ведущие к неверному пересчету без корректировки
      If флБезСкладов Then
        Exit 0;//Подсчет для этого случая будет в разрезе складов
      EndIf;
      Цена0:=глПолучитьОсновнуюЦену(З.зСуб1,З.зСуб2,КонДата);
    Else //Обычный случай
      Цена0:=Round(?(цКол=0,0,цСеб/цКол),2);
    EndIf;
    Exit 1;
  EndFunction
  

  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оЮЛ:=Form.оЮЛ.Value;
    
  спСчетК:=List.Create();
  While тСчета<>"" Do
    Стр:=TearStr(тСчета,",");
    ДобавитьСчетЕслиОнПодходящий(спСчетК,Стр);
  EndDo;
  If спСчетК.Size()=0 Then
    Message("Нет ни одного счета для пересчета себестоимости!","!");
    Exit 1;
  EndIf;
  
  If _And(Form.Счет.Value.Code="20",Uppercase(Form.оСуб1.Value)="ПРОИЗВОДСТВО",Uppercase(Form.оСуб2.Value)="ПРОИЗВОДСТВО") Then
    Message("Не разрешается выбирать счет по умолчанию (см. вторую закладку) с кодом 20 и двумя субконто ""производство"", так как данный счет с указанными субконто используется программой для технических целей!","!");
    Exit 0;
  EndIf;
  
  спСчетДебета:=List.Create();
  спСуб1Дебета:=List.Create();
  спСуб2Дебета:=List.Create();
  
  Счет20:=глНайтиСчет("20");
  Суб1_20:=глНайтиСубконтоПоИмени(Счет20.ВидСубконто1,"Производство");
  Суб2_20:=глНайтиСубконтоПоИмени(Счет20.ВидСубконто2,"Себестоимость материалов");
  спСчетДебета.SetByName("20",Счет20);
  спСуб1Дебета.SetByName("20",Суб1_20);
  спСуб2Дебета.SetByName("20",Суб2_20);

  СчетД:=глНайтиСчет("90.2.1");
  СчетД2:=глНайтиСчет("90.2.2");
  спСчетДебета.SetByName("90.2.1",СчетД);
  спСуб1Дебета.SetByName("90.2.1","");
  спСуб2Дебета.SetByName("90.2.1","");
  спСчетДебета.SetByName("90.2.2",СчетД2);
  спСуб1Дебета.SetByName("90.2.2","");
  спСуб2Дебета.SetByName("90.2.2","");

  СчетД:=глНайтиСчет("44.1");
  Суб1:=глНайтиСубконтоПоИмени(СчетД.ВидСубконто1,"Материальные расходы");
  спСчетДебета.SetByName("44.1",СчетД);
  спСуб1Дебета.SetByName("44.1",Суб1);
  спСуб2Дебета.SetByName("44.1","");

  СчетД:=глНайтиСчет("25");
  Суб1:=глНайтиСубконтоПоИмени(СчетД.ВидСубконто1,"Производство");
  Суб2:=глНайтиСубконтоПоИмени(СчетД.ВидСубконто2,"Производство");
  спСчетДебета.SetByName("25",СчетД);
  спСуб1Дебета.SetByName("25",Суб1);
  спСуб2Дебета.SetByName("25",Суб2);

  СчетД:=глНайтиСчет("26");
  Суб1:=глНайтиСубконтоПоИмени(СчетД.ВидСубконто1,"Производство");
  Суб2:=глНайтиСубконтоПоИмени(СчетД.ВидСубконто2,"Производство");
  спСчетДебета.SetByName("26",СчетД);
  спСуб1Дебета.SetByName("26",Суб1);
  спСуб2Дебета.SetByName("26",Суб2);

  СчетД:=глНайтиСчет("91.2");
  Суб91П:=глНайтиСубконтоПоИмени(СчетД.ВидСубконто1,"Производство");
  Суб91Р:=глНайтиСубконтоПоИмени(СчетД.ВидСубконто1,"Реализация");
  спСчетДебета.SetByName("91.2",СчетД);
  спСуб1Дебета.SetByName("91.2",Суб91П);
  спСуб2Дебета.SetByName("91.2","");

  тПерКом:="ЗМ:СБС:П";
  //Исправление себестоимости
  //Приход2 и пр. нужны так как возвраты делают движение по приходу с минусом, необходимо учесть их в расходе, а не в приходе
  ТЗ:="Period From НачДата to КонДата;
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |Condition(зЮЛ IN оЮЛ.Get(1));
  |Condition(зЮЛ NOT IN оЮЛ.Get(2));
  |зСч:=Storage.БухгалтерскиеСчета.Счет;
  |зСчКорр:=Storage.БухгалтерскиеСчета.КоррСчет;
  |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
  |зСуб2:=Storage.БухгалтерскиеСчета.Субконто2;
  |зДв:=Storage.БухгалтерскиеСчета.@EXPENSE;
  |зСм:=Storage.БухгалтерскиеСчета.Сумма;
  |зКл:=Storage.БухгалтерскиеСчета.Количество;
  |зНачОст:=BegTotals(Сумма);
  |зПриход:=SUM(?((зДв=0)And(зСм>0),зСм,0));
  |зПриход2:=SUM(?((зДв=1)And(зСм>0),зСм,0));
  |зРасход:=SUM(?((зДв=1)And(зСм<0),-зСм,0));
  |зРасход2:=SUM(?((зДв=0)And(зСм<0),-зСм,0));
  |зКонОст:=EndTotals(Сумма);
  |зНачОстКол:=BegTotals(Количество);
  |зПриходКол:=SUM(?((зДв=0)And(зКл>0),зКл,0));
  |зПриходКол2:=SUM(?((зДв=1)And(зКл>0),зКл,0));
  |зРасходКол:=SUM(?((зДв=1)And(зКл<0),-зКл,0));
  |зРасходКол2:=SUM(?((зДв=0)And(зКл<0),-зКл,0));
  |зКонОстКол:=EndTotals(Количество);
  |Condition(зСч IN спСчетК);"+?(ФлБезРазрезаСкладов0,"зДокумент:=Storage.БухгалтерскиеСчета.@LINK;
  |Condition(Not IsType(зДокумент,Doc.ПеремещениеТМЦ));")+
  "Group зЮЛ,зСч,зСуб1,зСуб2,зСчКорр,зДв;";
  If ФлБезРазрезаСкладов0 Then
    ТЗ:="("+ТЗ+")"+_NEWLINE+"Postprocessing ("+_NEWLINE+"SkipVariables зДокумент;)";
  EndIf;
  З:=Query.Create();
  З.Execute(ТЗ,2);
    

  While З.Next(1) Do //ЮрЛицо
    аДок:=ПолучитьДокИсправленияСебестоимости(спДок,пТип,З.зЮЛ);
    If аДок=0 Then
      Exit 0;
    EndIf;
    aTab:=аДок.LineParts("Содержание");
    спСуб1Дебета.SetByName("91.2",Суб91Р);
    
    См902:=0;
    Цена0:=0;
    While З.Next(2) Do //Счет
      Form.StatusText("Себ: "+З.зЮЛ+", "+З.зСч);
      
      While З.Next(3) Do //Номенклатура
      
        ФлБезРазрезаСкладов:=ФлБезРазрезаСкладов0;
        If ФлБезРазрезаСкладов0 Then
          If not _ВычислитьЦену(Цена0,З,1) Then
            ФлБезРазрезаСкладов:=0;
          EndIf;
        EndIf;
      
        While З.Next(4) Do //Склад
          цСеб:=0;
          If IsEmpty(З.зСуб2) Then
            If not IsEmpty(З.зСуб1) Then
              Message("Для ЮЛ: %LINK%, для счета %LINK%, для номенклатуры: %LINK% ("+З.зСуб1.Code+") обнаружено пустое субконто склада! Пожалуйста, исправьте положение!","!",З.зЮЛ,З.зСч,З.зСуб1);
              Exit 0;
            Else
              Message("Для ЮЛ: %LINK%, для счета %LINK%, обнаружено пустое субконто склада и номенклатуры! Пожалуйста, исправьте положение!","!",З.зЮЛ,З.зСч);
              Exit 0;
            EndIf;
          ElseIf IsEmpty(З.зСуб2) Then
            Message("Для ЮЛ: %LINK%, для счета %LINK%, для склада: %LINK% ("+З.зСуб2.Code+") обнаружено пустое субконто номенклатуры! Пожалуйста, исправьте положение!","!",З.зЮЛ,З.зСч,З.зСуб2);
            Exit 0;
          EndIf;
          
          Try
            Фл2:=З.зСуб2.флОблагаетсяЕНВД;
          Except
            Message("Для ЮЛ: %LINK%, для счета %LINK%, для номенклатуры: %LINK% ("+З.зСуб1.Code+") обнаружено неверное субконто склада: %LINK% ("+З.зСуб2.Code+"), типа "+
              З.зСуб2.DBName()+"! Пожалуйста, исправьте положение!","!",З.зЮЛ,З.зСч,З.зСуб1,З.зСуб2);
            Exit 0;
          EndTry;
                    
          If not ФлБезРазрезаСкладов Then
            If not _ВычислитьЦену(Цена0,З) Then
              Continue;
            EndIf;
          EndIf;
          
          зКонОстКол:=З.EndTotals("зКонОстКол");
          зКонОст:=З.EndTotals("зКонОст");
          If (зКонОстКол=0)And(зКонОст<>0) Then
            //Ошибка пустой цены: количество=0, сумма<>0
            Разница0:=зКонОст;
          ElseIf (зКонОстКол>0)And(зКонОст<0) Then
            //Колво больше нуля, сумма меньше нуля
            Разница0:=-Цена0*зКонОстКол+зКонОст;
          ElseIf (зКонОстКол<0)And(зКонОст>0) Then
            //Колво меньше нуля, сумма больше нуля
            Разница0:=Цена0*зКонОстКол+зКонОст;
          Else
            ПравСумма:=зКонОстКол*Цена0;
            ТекСумма:=зКонОст;
            Разница0:=ТекСумма-ПравСумма;
          EndIf;
          
          Деб:="90.2"+?(Фл2=0,".1",".2");
          If Pos("10.",З.зСч.Code)=1 Then
            Деб:="44.1";
          EndIf;
          
          //Находим пропорцию по расходу (по сумме)
          Кл0Колво:=З.Compute("зРасходКол")+З.Compute("зРасходКол2");
          См00:=З.Compute("зРасход")+З.Compute("зРасход2");
          См0:=0;
          тбДебет:=Tab.Create("Счет,Сумма,Количество,Суб1,Суб2,Суб3");
          While З.Next(5) Do //КоррСчет
            См1:=З.Compute("зРасход")+З.Compute("зРасход2");
            Кл1Колво:=З.Compute("зРасходКол")+З.Compute("зРасходКол2");
            If Round(См1,6)<=0 Then
              Continue;
            EndIf;
            If (Pos("91",З.зСчКорр.Code)=1)And(З.зСчКорр.Code<>"91.3") Then //And(ФлПроизв=1)
              тбДебет.AddLine("Счет,Сумма,Количество","91.2",См1,Кл1Колво);
            ElseIf Pos("25",З.зСчКорр.Code)=1 Then
              тбДебет.AddLine("Счет,Сумма,Количество","25",См1,Кл1Колво);
            ElseIf Pos("26",З.зСчКорр.Code)=1 Then
              тбДебет.AddLine("Счет,Сумма,Количество","26",См1,Кл1Колво);
            ElseIf Pos("41.",З.зСчКорр.Code)=1 Then
              Continue;
            ElseIf Pos("43",З.зСчКорр.Code)=1 Then
              Continue;
            ElseIf спСчетК.Find(З.зСчКорр)>0 Then
              Continue;
            Else
              тбДебет.AddLine("Счет,Сумма,Количество",Деб,См1,Кл1Колво);
            EndIf;
            См0:=См0+См1;
          EndDo; //КоррСчет
          
          If тбДебет.Size()=0 Then
            If Round(См00,6)=0 Then
              См00:=1;
              Кл0Колво:=1;
            EndIf;
            If Form.Счет.Value.Selected()<>0 Then
              тбДебет.AddLine("Счет,Суб1,Суб2,Суб3,Сумма,Количество",Form.Счет.Value,Form.оСуб1.Value,Form.оСуб2.Value,Form.оСуб3.Value,См00,Кл0Колво);
            Else
              тбДебет.AddLine("Счет,Сумма,Количество",Деб,См00,Кл0Колво);
            EndIf;  
            См0:=См00;
          EndIf;
          тбДебет.Group("Счет,Суб1,Суб2,Суб3","Сумма,Количество");
          
          
          тбДебет.Select();
          While тбДебет.Next() Do
            Деб:=тбДебет.Счет;
            клПроп:=тбДебет.Сумма/См0;
            
            //Счет дебета и его субконто
            СубД:="";
            СубД2:="";
            СубД3:="";
            If not isDbObject(Деб) Then
              СчДеб:=спСчетДебета.GetByName(Деб);
            Else
              СчДеб:=Деб;
            EndIF;  
            If not isEmpty(тбДебет.Суб1) Then
              СубД:=тбДебет.Суб1;
              СубД2:=тбДебет.Суб2;
              СубД3:=тбДебет.Суб3;
            Else
              If not IsEmpty(спСуб1Дебета.GetByName(Деб)) Then
                СубД:=спСуб1Дебета.GetByName(Деб);
              EndIf;
              If not isEmpty(спСуб2Дебета.GetByName(Деб)) Then
                СубД2:=спСуб2Дебета.GetByName(Деб);
              EndIf;
            EndIf;
            
            Разница:=Разница0*клПроп;
            If Round(Разница,2)=0 Then
              Continue;
            EndIf;
            
            If Pos("90.2.",СчДеб.Code)=1 Then
              См902:=См902+Разница;
            ElseIf (Pos("20",СчДеб.Code)=1)And(ТКоррСч20<>0) Then
              УстановитьКоррСумму(ТКоррСч20,Разница,З.зЮЛ,Счет20,Суб1_20,Суб2_20);
            EndIf;
            aTab.AddLine("Количество,Сумма,Цена,СчетД,СубконтоД1,СубконтоД2,СубконтоД3,СчетК",0,Разница,Разница,СчДеб,СубД,СубД2,СубД3,З.зСч);
            If IsEmpty(З.зСуб2) Then
              If not IsEmpty(З.зСуб1) Then
                Message("Для ЮЛ: %LINK%, для номенклатуры: %LINK% ("+З.зСуб1.Code+") обнаружено пустое субконто склада! Пожалуйста, исправьте положение!","!",З.зЮЛ,З.зСуб1);
                Exit 0;
              Else
                Message("Для ЮЛ: %LINK%, обнаружен остаток по пустому субконто склада и пустому субконто номенклатуры! Пожалуйста, исправьте положение!","!",З.зЮЛ);
                Exit 0;
              EndIf;
            ElseIf IsEmpty(З.зСуб1) Then
              Message("Для ЮЛ: %LINK%, для склада: %LINK% ("+З.зСуб2.Code+") обнаружено пустое субконто номенклатуры! Пожалуйста, исправьте положение!","!",З.зЮЛ,З.зСуб2);
              Exit 0;
            EndIf;
            aTab.СубконтоК1:=З.зСуб1;
            aTab.СубконтоК2:=З.зСуб2;
          EndDo;
          
        EndDo;//Склады
      EndDo;//Номенклатура
    EndDo;//Счет

    Таб902.AddLine("ЮрЛицо,Сумма",З.зЮЛ,См902);
  EndDo;//Цикл по юл. лицам
  
  Exit 1;
EndFunction

//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость
//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость
//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость

Function ПолучитьКоррСумму(Тб,зЮЛ,Счет,зСуб1=0,зСуб2=0,зСуб3=0)
  If Тб=0 Then
    Exit 0;
  EndIf;
  Индекс:=зЮЛ.Code+Chr(1)+?(not IsEmpty(зСуб1),Счет.ВидСубконто1.Code+":"+зСуб1.Code,"")+Chr(1)+
    ?(not IsEmpty(зСуб2),Счет.ВидСубконто2.Code+":"+зСуб2.Code,"")+Chr(1)+?(not IsEmpty(зСуб3),Счет.ВидСубконто3.Code+":"+зСуб3.Code,"");
  
  If Тб.FindAndGoto(Индекс,,"Индекс")=0 Then
    Exit 0;
  EndIf;
  If Тб.Флаг=1 Then
    Exit 0;
  EndIf;
  Тб.Флаг=1;
  Exit Тб.Сумма;
EndFunction


Function СписатьОстатки(спДок,СчетКстр,СчетДстр,пТип,ТбКоррСуммы=0,ТбУстКоррСуммы=0,аСуб1=0,аСуб2=0,стУсловие="")
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оЮЛ:=Form.оЮЛ.Value;
    
  СчетК:=глНайтиСчет(СчетКстр);
  СчетД:=глНайтиСчет(СчетДстр);
  ЧлГр:=?(СчетК.ВидСубконто2.Selected()<>0,2,1);
  ЧлГр:=?(СчетК.ВидСубконто3.Selected()<>0,3,ЧлГр);
  ФлКолич:=СчетК.Количественный;
  
  
  ТЗ:="Period From НачДата to КонДата;
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |Condition(зЮЛ IN оЮЛ.Get(1));
  |Condition(зЮЛ NOT IN оЮЛ.Get(2));"+_NEWLINE+
  стУсловие+
  "зСч:=Storage.БухгалтерскиеСчета.Счет;
  |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
  |зСуб2:=Storage.БухгалтерскиеСчета.Субконто2;
  |зСуб3:=Storage.БухгалтерскиеСчета.Субконто3;
  |зКонОст:=EndTotals(Сумма);
  |зРасход:=Expense(Сумма);
  |зПриход:=Income(Сумма);"+
  ?(ФлКолич=0,"",
  "зКонОстКл:=EndTotals(Количество);
  |зРасходКл:=Expense(Количество);
  |зПриходКл:=Income(Количество);")+
  "Condition(зСч=СчетК);
  |Group зЮЛ,зСуб1;"+
  ?(ЧлГр>1,"Group зСуб2;","")+
  ?(ЧлГр>2,"Group зСуб3;","");
  З:=Query.Create();
  З.Execute(ТЗ);

  While З.Next(1) Do
    аДок:=ПолучитьДокЗакрытияМесяца(спДок,пТип,З.зЮЛ);
    If аДок=0 Then
      Exit 0;
    EndIf;
    aTab:=аДок.LineParts("Содержание");
    
    While З.Next(2) Do
      зСуб1:=З.зСуб1;
      зСуб1Уст:=зСуб1;
      If IsEmpty(зСуб1) Then
        зСуб1:=0;
        зСуб1Уст:=0;
      Else
        If СчетД.ВидСубконто1<>СчетК.ВидСубконто1 Then
          зСуб1Уст:=0;
        EndIf;
      EndIf;
      If аСуб1<>0 Then
        зСуб1Уст:=аСуб1;
      EndIf;
      
      
      If ЧлГр=1 Then
        СмКорр:=ПолучитьКоррСумму(ТбКоррСуммы,З.зЮЛ,СчетК,?(СчетК.ВидСубконто1.Selected()<>0,зСуб1,0));
        Кл:=?(ФлКолич=0,0,З.зКонОстКл);
        If (З.зКонОст+СмКорр=0)And(Кл=0) Then
          Continue;
        EndIf;
        См:=З.зКонОст+СмКорр;
        
        УстановитьКоррСумму(ТбУстКоррСуммы,См,З.зЮЛ,СчетД,?(СчетД.ВидСубконто1.Selected()<>0,зСуб1Уст,0));
                
        If (СчетК.Пассивный=2)Or((СчетК.Пассивный=1)And(См<0)) Then
          См:=-См;
          Кл:=-Кл;
          aTab.AddLine("СчетД,СубконтоД1,СчетК,СубконтоК1",СчетК,зСуб1,СчетД,зСуб1Уст);
        Else
          aTab.AddLine("СчетД,СубконтоД1,СчетК,СубконтоК1",СчетД,зСуб1Уст,СчетК,зСуб1);
        EndIf;
        aTab.Количество:=Кл;
        aTab.Сумма:=См;
        aTab.Цена:=См;
      Else
        While З.Next(3) Do          
          зСуб2:=З.зСуб2;
          зСуб2Уст:=зСуб2;
          If IsEmpty(зСуб2) Then
            зСуб2:=0;
            зСуб2Уст:=0;
          Else
            If СчетД.ВидСубконто2<>СчетК.ВидСубконто2 Then
              зСуб2Уст:=0;
            EndIf;
          EndIf;
          If аСуб2<>0 Then
            зСуб2Уст:=аСуб2;
          EndIf;
          
          
          If ЧлГр=2 Then
            СмКорр:=ПолучитьКоррСумму(ТбКоррСуммы,З.зЮЛ,СчетК,?(СчетК.ВидСубконто1.Selected()<>0,зСуб1,0),?(СчетК.ВидСубконто2.Selected()<>0,зСуб2,0));
            Кл:=?(ФлКолич=0,0,З.зКонОстКл);
            If (З.зКонОст+СмКорр=0)And(Кл=0) Then
              Continue;
            EndIf;
            См:=З.зКонОст+СмКорр;
            УстановитьКоррСумму(ТбУстКоррСуммы,См,З.зЮЛ,СчетД,?(СчетД.ВидСубконто1.Selected()<>0,зСуб1Уст,0),?(СчетД.ВидСубконто2.Selected()<>0,зСуб2Уст,0));
            
            If (СчетК.Пассивный=2)Or((СчетК.Пассивный=1)And(См<0)) Then
              См:=-См;
              Кл:=-Кл;
              aTab.AddLine("СчетД,СубконтоД1,СубконтоД2,СчетК,СубконтоК1,СубконтоК2",СчетК,зСуб1,зСуб2,СчетД,зСуб1Уст,зСуб2Уст);
            Else
              aTab.AddLine("СчетД,СубконтоД1,СубконтоД2,СчетК,СубконтоК1,СубконтоК2",СчетД,зСуб1Уст,зСуб2Уст,СчетК,зСуб1,зСуб2);
            EndIf;
            aTab.Количество:=Кл;
            aTab.Сумма:=См;
            aTab.Цена:=См;
          Else
            While З.Next(4) Do          
              зСуб3:=З.зСуб3;
              зСуб3Уст:=зСуб3;
              If IsEmpty(зСуб3) Then
                зСуб3:=0;
                зСуб3Уст:=0;
              Else
                If СчетД.ВидСубконто3<>СчетК.ВидСубконто3 Then
                  зСуб3Уст:=0;
                EndIf;
              EndIf;
              
              СмКорр:=ПолучитьКоррСумму(ТбКоррСуммы,З.зЮЛ,СчетК,?(СчетК.ВидСубконто1.Selected()<>0,зСуб1,0),?(СчетК.ВидСубконто2.Selected()<>0,зСуб2,0),?(СчетК.ВидСубконто3.Selected()<>0,зСуб3,0));
              Кл:=?(ФлКолич=0,0,З.зКонОстКл);
              If (З.зКонОст+СмКорр=0)And(Кл=0) Then
                Continue;
              EndIf;
              См:=З.зКонОст+СмКорр;
              УстановитьКоррСумму(ТбУстКоррСуммы,См,З.зЮЛ,СчетД,?(СчетД.ВидСубконто1.Selected()<>0,зСуб1Уст,0),?(СчетД.ВидСубконто2.Selected()<>0,зСуб2Уст,0),?(СчетД.ВидСубконто3.Selected()<>0,зСуб3Уст,0));
              
              If (СчетК.Пассивный=2)Or((СчетК.Пассивный=1)And(См<0)) Then
                См:=-См;
                Кл:=-Кл;
                aTab.AddLine("СчетД,СубконтоД1,СубконтоД2,СубконтоД3,СчетК,СубконтоК1,СубконтоК2,СубконтоК3",СчетК,зСуб1,зСуб2,зСуб3,СчетД,зСуб1Уст,зСуб2Уст,зСуб3Уст);
              Else
                aTab.AddLine("СчетД,СубконтоД1,СубконтоД2,СубконтоД3,СчетК,СубконтоК1,СубконтоК2,СубконтоК3",СчетД,зСуб1Уст,зСуб2Уст,зСуб3Уст,СчетК,зСуб1,зСуб2,зСуб3);
              EndIf;
              aTab.Количество:=Кл;
              aTab.Сумма:=См;
              aTab.Цена:=См;
            EndDo;
          EndIf; //>2 Субконто  
        EndDo;
      EndIf; //>1 Субконто
      
    EndDo;
  EndDo;
  
  
  //Добавление остатков корректировок, которые не участвовали в основном запросе
  If ТбКоррСуммы<>0 Then
    СтЮЛ:=0;
    ТбКоррСуммы.Sort("ЮЛ");
    ТбКоррСуммы.Select();
    While ТбКоррСуммы.Next() Do
      If ТбКоррСуммы.Флаг=1 Then
        Continue;
      EndIf;
      If ТбКоррСуммы.Сумма=0 Then
        Continue;
      EndIf;
      If стУсловие<>"" Then
        If Pos("Condition(зЮЛ43=1)",стУсловие)>0 Then
          Continue;
        EndIf;
      EndIf;

      If СтЮЛ=0 Then
        СтЮЛ:=ТбКоррСуммы.ЮЛ;
        аДок:=ПолучитьДокЗакрытияМесяца(спДок,пТип,СтЮЛ);
        If аДок=0 Then
          Exit 0;
        EndIf;
      EndIf;
      aTab:=аДок.LineParts("Содержание");
      ТбКоррСуммы.Флаг:=1;
      См:=ТбКоррСуммы.Сумма;
      
      зСуб1:=ТбКоррСуммы.Суб1;
      зСуб1Уст:=зСуб1;
      If IsEmpty(зСуб1) Then
        зСуб1:=0;
        зСуб1Уст:=0;
      Else
        If СчетД.ВидСубконто1<>СчетК.ВидСубконто1 Then
          зСуб1Уст:=0;
        EndIf;
      EndIf;
      
      зСуб2:=ТбКоррСуммы.Суб2;
      зСуб2Уст:=зСуб2;
      If IsEmpty(зСуб2) Then
        зСуб2:=0;
        зСуб2Уст:=0;
      Else
        If СчетД.ВидСубконто2<>СчетК.ВидСубконто2 Then
          зСуб2Уст:=0;
        EndIf;
      EndIf;
      
      зСуб3:=ТбКоррСуммы.Суб3;
      зСуб3Уст:=зСуб3;
      If IsEmpty(зСуб3) Then
        зСуб3:=0;
        зСуб3Уст:=0;
      Else
        If СчетД.ВидСубконто3<>СчетК.ВидСубконто3 Then
          зСуб3Уст:=0;
        EndIf;
      EndIf;
      
      
      УстановитьКоррСумму(ТбУстКоррСуммы,См,ТбКоррСуммы.ЮЛ,СчетД,?(СчетД.ВидСубконто1.Selected()<>0,зСуб1Уст,0),?(СчетД.ВидСубконто2.Selected()<>0,зСуб2Уст,0),?(СчетД.ВидСубконто3.Selected()<>0,зСуб3Уст,0));
        
      If (СчетК.Пассивный=2)Or((СчетК.Пассивный=1)And(См<0)) Then
        См:=-См;
        aTab.AddLine("СчетД,СубконтоД1,СубконтоД2,СубконтоД3,СчетК,СубконтоК1,СубконтоК2,СубконтоК3",СчетК,зСуб1,зСуб2,зСуб3,СчетД,зСуб1Уст,зСуб2Уст,зСуб3Уст);
      Else
        aTab.AddLine("СчетД,СубконтоД1,СубконтоД2,СубконтоД3,СчетК,СубконтоК1,СубконтоК2,СубконтоК3",СчетД,зСуб1Уст,зСуб2Уст,зСуб3Уст,СчетК,зСуб1,зСуб2,зСуб3);
      EndIf;
      aTab.Количество:=0;
      aTab.Сумма:=См;
      aTab.Цена:=См;
    EndDo;
  EndIf;
  
  Exit 1;
EndFunction



Function ЗакрытиеСчета20На43(спДок,пТип,ТКоррСч20)
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оЮЛ:=Form.оЮЛ.Value;
  
  Счет20:=глНайтиСчет("20");
  Суб1_20:=глНайтиСубконтоПоИмени(Счет20.ВидСубконто1,"Производство");
  Суб2_20:=глНайтиСубконтоПоИмени(Счет20.ВидСубконто2,"Производство");
  //Суб2_20Себ:=глНайтиСубконтоПоИмени(Счет20.ВидСубконто2,"Себестоимость материалов");
  
  Счет43:=глНайтиСчет("43");
  Счет40:=глНайтиСчет("40");
  Суб1_40:=глНайтиСубконтоПоИмени(Счет40.ВидСубконто1,"Производство");
  
  //Запрос по ПРЯМЫМ затратам на счете 20 (20, производство, производство)
  ТЗ:="Period From НачДата to КонДата;
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |Condition(зЮЛ IN оЮЛ.Get(1));
  |Condition(зЮЛ NOT IN оЮЛ.Get(2));
  |зСч:=Storage.БухгалтерскиеСчета.Счет;
  |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
  |зСуб2:=Storage.БухгалтерскиеСчета.Субконто2;
  |Документ:=Storage.БухгалтерскиеСчета.@LINK;
  |Condition(зСч=Счет20);
  |Condition(зСуб1=Суб1_20);
  |Condition(зСуб2=Суб2_20);
  |зНачОст:=BegTotals(Сумма);
  |зРасход:=Expense(Сумма);
  |зПриход:=Income(Сумма);
  |Group зЮЛ,Документ;";
  З1:=Query.Create();
  З1.Execute(ТЗ);
  
  //ТабВыпВсего -- приходы и нач. остатки по 20-му счету
  //TODO: возможно, нужно вычесть суммы, ушедшие с 20го на 40й счет и прибавить суммы, пришедшие на 43-й в случае, если 40 счет не является транзитным
  ТабВыпВсего:=Tab.Create("ЮрЛицо");
  ТабВыпВсего.AddColumn("Сумма",,"Number");
  Фл:=0;
  //Проверка на эксклюзивность субконто для выпусков продукции
  While З1.Next(1) Do
    См:=З1.зНачОст+З1.зПриход;
    If См>0 Then
      ТабВыпВсего.AddLine("ЮрЛицо,Сумма",З1.зЮЛ,См);
    EndIf;
    
    While З1.Next(2) Do
      зДок:=З1.Документ;
      If (З1.зПриход<>0)Or(З1.зРасход<>0) Then
        If (зДок.DBName()<>"ВыпускПродукции")And(зДок.DBName()<>"РегистрацияВыпускаПродукции") Then
          If not Фл Then
            Message("Внимание! Субконто ""производство"", ""производство"" 20-го счета зарезервированы для хранения прямых производственных сумм!","!");
            Message("Указанные ниже документы создают начисления (или списания) на данные субконто 20-го счета, что искажает нахождение прямых расходов при закрытии месяца!","!");
            Message("Необходимо исправить документы, переместив суммы начисления на другие значения субконто!","!");
            Фл:=1;
          EndIf;
          Message("  %LINK%","!",зДок);
        EndIf;
      EndIf;
    EndDo;
  EndDo;
  
  If Фл Then
    Exit 0;
  EndIf;
  
  //Запрос по текущим выпущенным изделиям, приход с 40-го на 43-й
  //При этом должны учитываться только движения, для которых Субконто1 счета 40 равно Суб1_40
  ТЗ:="Period From НачДата to КонДата;
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |Condition(зЮЛ IN оЮЛ.Get(1));
  |Condition(зЮЛ NOT IN оЮЛ.Get(2));
  |зСч:=Storage.БухгалтерскиеСчета.Счет;
  |зСчКорр:=Storage.БухгалтерскиеСчета.КоррСчет;
  |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
  |зСуб2:=Storage.БухгалтерскиеСчета.Субконто2;
  |Condition(зСч=Счет43);
  |Condition(зСчКорр=Счет40);
  |зДок:=Storage.БухгалтерскиеСчета.@LINK;
  |//Condition(IsType(зДок,Doc.РегистрацияВыпускаПродукции));
  |зПриход:=Income(Сумма);
  |Group зЮЛ,зСуб1,зСуб2,зДок;";
  З2:=Query.Create();
  З2.Execute(ТЗ);
  
  ТабВыпТек:=Tab.Create("Индекс,ЮрЛицо,Номенклатура,Склад");//Индекс: <ЮлКод>@<ТмцКод>@<СкладКод>
  ТабВыпТек.AddColumn("Сумма",,"Number");
  While З2.Next(1) Do
    While З2.Next(2) Do
      While З2.Next(3) Do
        См:=З2.Compute("зПриход");
        If См>0 Then
          ТабВыпТек.AddLine("Индекс,ЮрЛицо,Номенклатура,Склад,Сумма",""+З2.зЮЛ.Code+"@"+З2.зСуб1.Code+"@"+З2.зСуб2.Code,З2.зЮЛ,З2.зСуб1,З2.зСуб2,См);
        EndIf;
      EndDo;
    EndDo;
  EndDo;
  
  //Запрос по ВСЕМ затратам на счете 20
  ТЗ:="Period From НачДата to КонДата;
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |Condition(зЮЛ IN оЮЛ.Get(1));
  |Condition(зЮЛ NOT IN оЮЛ.Get(2));
  |зСч:=Storage.БухгалтерскиеСчета.Счет;
  |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
  |зСуб2:=Storage.БухгалтерскиеСчета.Субконто2;
  |Condition(зСч=Счет20);
  |зНачОст:=BegTotals(Сумма);
  |зРасход:=Expense(Сумма);
  |зПриход:=Income(Сумма);
  |Group зЮЛ,зСуб1,зСуб2;";
  З3:=Query.Create();
  З3.Execute(ТЗ);

  While З3.Next(1) Do
    СтрСуб:=Trim(З3.зЮЛ.СубконтоСчета20ИсключенныеИзРаспределения);
    
    While З3.Next(2) Do
      While З3.Next(3) Do
        If СтрСуб<>"" Then
          If Pos(","+З3.зСуб2.Code+",",СтрСуб)>0 Then
            Continue;
          EndIf;
        EndIf;
        If (З3.зСуб1=Суб1_20)And(З3.зСуб2=Суб2_20) Then
          Continue;
        EndIf;
        зКонОст:=З3.зНачОст+З3.зПриход-З3.зРасход;
        УстановитьКоррСумму(ТКоррСч20,зКонОст,З3.зЮЛ,Счет20,З3.зСуб1,З3.зСуб2);
      EndDo;
    EndDo;
  EndDo;
  
  //Данная операция списывает затраты с 20-го счета на 40-й счет для всех субконто 20-го счета, кроме
  //  технического разреза суб1:Производство, суб2:Производство
  //С 20 счета нужно списывать сумму пропорционально отношению списания с тех. 20 счета (завершенное пр-во) к сумме начального сальдо и приходу на тех. 20 счет (текущее пр-во)
  //Здесь используется начальное сальдо и приход на тех. 20 счет, таблица ТабВыпВсего
  //Однако, суммы завершенного пр-ва берутся как расход с 40-го счета на 43, так как эта операция делится по складам и номенклатуре, иначе
  //  пропорция для всех произведенных изделий была бы одинаковой.
  //Расход с 40-го счета должен совпадать с расходом с тех. 20-го
  
  //Начисление затрат с субконто счета 20 на счет 43 ч/з 40, первая часть
  ТКоррСч20.AddColumn("Списано",,"Number");
  ТабВыпТек.Select();
  While ТабВыпТек.Next() Do
    СмВыпВсего:=0;
    If ТабВыпВсего.FindAndGoto(ТабВыпТек.ЮрЛицо,,"ЮрЛицо")>0 Then
      СмВыпВсего:=ТабВыпВсего.Сумма;
    EndIf;
    If СмВыпВсего=0 Then
      Continue;
    EndIf;
    Кф:=ТабВыпТек.Сумма/СмВыпВсего;
    
    См:=0;
    ТКоррСч20.Select();
    While ТКоррСч20.Next() Do
      If ТКоррСч20.ЮЛ<>ТабВыпТек.ЮрЛицо Then
        Continue;
      EndIf;
      If (ТКоррСч20.Суб1=Суб1_20)And(ТКоррСч20.Суб2=Суб2_20) Then
        Continue;
      EndIf;
      См2:=Round(ТКоррСч20.Сумма*Кф,2);
      ТКоррСч20.Списано:=ТКоррСч20.Списано+См2;
      См:=См+См2;
    EndDo;
    
    If См=0 Then
      Continue;
    EndIf;
    аДок:=ПолучитьДокЗакрытияМесяца(спДок,пТип,ТабВыпТек.ЮрЛицо);
    If аДок=0 Then
      Exit 0;
    EndIf;
    aTab:=аДок.LineParts("Содержание");
    aTab.AddLine("СчетД,СубконтоД1,СубконтоД2,СчетК,СубконтоК1,Сумма,Цена",Счет43,ТабВыпТек.Номенклатура,ТабВыпТек.Склад,Счет40,Суб1_40,См,См);
  EndDo;
  
  
  //Начисление затрат с субконто счета 20 на счет 43 ч/з 40, вторая часть
  ТКоррСч20.Select();
  While ТКоррСч20.Next() Do
    If (ТКоррСч20.Суб1=Суб1_20)And(ТКоррСч20.Суб2=Суб2_20) Then
      Continue;
    EndIf;
    If ТКоррСч20.Списано=0 Then
      Continue;
    EndIf;
    См:=ТКоррСч20.Списано;
    
    аДок:=ПолучитьДокЗакрытияМесяца(спДок,пТип,ТКоррСч20.ЮЛ);
    If аДок=0 Then
      Exit 0;
    EndIf;
    aTab:=аДок.LineParts("Содержание");
    aTab.AddLine("СчетД,СубконтоД1,СчетК,СубконтоК1,СубконтоК2,Сумма,Цена",Счет40,Суб1_40,Счет20,ТКоррСч20.Суб1,ТКоррСч20.Суб2,См,См);
  EndDo;
  
  Exit 1;
EndFunction


Function ОбработатьДокументы(СпДок)
  For i:=1 to спДок.Size() Do
    аДок:=спДок.Get(i);
    aTab:=аДок.LineParts("Содержание");
    If aTab.Size()>0 Then
      аДок.СуммаВзаиморасчетов:=aTab.Sum("Сумма");
      If not глЗаписать(аДок) Then
        Message("Невозможно записать документ! Запустите обработку снова!","!");
        Exit 0;
      EndIf;
      If not глОбработать(аДок) Then
        Message("Невозможно обработать документ %LINK%! Обработайте его вручную!","!",аДок);
      Else
        Message(" %LINK%",,аДок);
      EndIf;
    EndIf;
  EndDo;
  Exit 1;
EndFunction


Function ПолучитьЭлементОС(зН)
  If зН.Selected()<>1 Then
    Exit 0;
  EndIf;
  а:=Ref.тмцСвойстваОсновныхСредств;
  If а.Find("@Parent",зН)=0 Then
    Exit 0;
  EndIf;  
  Exit а;
EndFunction


Function Амортизация(спДок,СчетС,СчетНа);
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оЮЛ:=Form.оЮЛ.Value;
  флЕНВД:=Form.флЕНВД.Value;

  //Амортизация(спДок,"01.3","02.3");
  //Счет 01.3 -> 02.3
  Сч01:=глНайтиСчет(СчетС);
  ТЗ:="Period From НачДата to КонДата;
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |Condition(зЮЛ IN оЮЛ.Get(1));
  |Condition(зЮЛ NOT IN оЮЛ.Get(2));
  |зСч:=Storage.БухгалтерскиеСчета.Счет;
  |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
  |зСуб2:=Storage.БухгалтерскиеСчета.Субконто2;
  |зСуб3:=Storage.БухгалтерскиеСчета.Субконто3;
  |зНачОст:=BegTotals(Сумма);
  |зРасход:=Expense(Сумма);
  |зПриход:=Income(Сумма);
  |Condition(зСч=Сч01);
  |Group зЮЛ,зСуб1,зСуб2,зСуб3;";
  З:=Query.Create();
  З.Execute(ТЗ);
  
  
  Сч441:=глНайтиСчет("44.1");
  Сч021:=глНайтиСчет(СчетНа);
  аИзносОС:=глНайтиСубконтоПоИмени(Сч441.ВидСубконто1,"Износ ОС");
  While З.Next(1) Do
    
    аДок:=спДок.GetByName(З.зЮЛ.Code);
    If pos("DB.DOC.",TypeStr(аДок))<>1 Then
      аДок:=Doc.БухгалтерскаяОперация;
      аДок.New();
      аДок.DocDate:=КонДата;
      аДок.КодОперации:=Enum.коБухгалтерскаяОперация.БухгалтерскаяОперация;
      аДок.Комментарий:="Амортизация ОС с 01.1(3) по ю.л. "+З.зЮЛ;
      аДок.Автор:=глПользователь;
      аДок.ЮрЛицо:=З.зЮЛ;
      аДок.УникальныйИдентификатор:="ЗМ:АМР";
      глУстановитьНовыйНомер(аДок);
      спДок.SetByName(З.зЮЛ.Code,аДок);
    EndIf;
    aTab:=аДок.LineParts("Содержание");
    
    
    While З.Next(2) Do
      
      зН:=З.зСуб1;
      If зН.Selected()=0 Then
        Message("Субконто счета %LINK% типа ""основное средство"" с сальдо на конец периода "+глФРМ(З.зНачОст+З.зПриход-З.зРасход,"")+" не выбрано! Пожалуйста, исправьте положение перед закрытием месяца!","!",СчетС);
        Exit 0;//не ОС (!!)
      EndIf;
      If зН.ВидНоменклатуры<>Enum.ВидыНоменклатуры.Инвентарь Then
        Message("Номенклатура %LINK% ("+зН.Code+") не является ОС, однако содержится в сальдо счета %LINK%!","!",зН,СчетС);
        Continue;//не ОС (!!)
      EndIf;
      аОС:=ПолучитьЭлементОС(зН);
      If аОС=0 Then
        Message("Для основного средства %LINK% ("+зН.Code+") не заполнены свойства амортизации!","!",зН);
        Continue;
      EndIf;
      If (аОС.флНачислятьАмортизацию=0)Or(not isEmpty(аОС.ДатаВыбытия))Or(isEmpty(аОС.ДатаВводаВЭксплуатацию)) Then
        Continue;
      EndIf;
      
      СмНач:=аОС.ПервоначальнаяСтоимость;
      СрокМес:=аОС.СрокПолезногоИспользования;
      If СрокМес<=0 Then
        Message("Для основного средства %LINK% ("+зН.Code+") указан некорректный срок полезного использования!","!",зН);
        Continue;
      EndIf;
      
      СмЛинейная:=СмНач/СрокМес;
      а:=0;
      аДата:=BegOfMonth(аОС.ДатаВводаВЭксплуатацию);
      While аДата<=BegOfMonth(КонДата) Do
        а:=а+1;
        аДата:=EndOfMonth(аДата)+1;
      EndDo;
      ОстМес:=аОС.СрокПолезногоИспользования-а;
      If ОстМес<=0 Then
        Continue;
      EndIf;
      
      If (not isEmpty(аОС.ДатаМодернизации))And(BegOfMonth(аОС.ДатаМодернизации)<BegOfMonth(КонДата)) Then
        //Была модернизация
        аДата:=BegOfMonth(аОС.ДатаВводаВЭксплуатацию);
        While аДата<BegOfMonth(аОС.ДатаМодернизации) Do
          СрокМес:=СрокМес-1;
          СмНач:=СмНач-СмЛинейная;
          аДата:=EndOfMonth(аДата)+1;
        EndDo;
        СмНач:=СмНач+аОС.СтоимостьМодернизации;
        СмЛинейная:=СмНач/СрокМес;
      EndIf;
      
      If СмЛинейная<=0 Then
        Continue;
      EndIf;
      
      ФлОдин:=0;
      While З.Next(3) Do
        While З.Next(4) Do
          If З.зНачОст<>0 Then
            ФлОдин:=ФлОдин+1;
          EndIf;
          If З.зНачОст<=0 Then
            Continue;
          EndIf;
          зСкл:=З.зСуб3;
          зК:=З.зСуб2;
          
          aTab.AddLine("Количество,Сумма,Цена,СчетК",0,Round(СмЛинейная,2),Round(СмЛинейная,2),Сч021);
          If аОС.Счет.Selected()<>0 Then
            aTab.СчетД:=аОС.Счет;
            aTab.СубконтоД1:=аОС.Субконто1;
            aTab.СубконтоД2:=аОС.Субконто2;
            aTab.СубконтоД3:=аОС.Субконто3;
          Else
            aTab.СчетД:=Сч441;
            aTab.СубконтоД1:=аИзносОС;
          EndIf;
          
          аТемп:="";
          If Сч021.ВидСубконто2.Selected()<>0 Then
            If isEmpty(зК) Then
              Message("Амортизация обнаружено движение по номенклатуре %LINK% ("+зН.Code+") на счете %LINK% без указания субконто контрагенты. Необходимо исправить движение перед закрытием месяца!","!",зН,СчетС);
              Exit 0;
            EndIf;
          EndIf;
          
          If Сч021.ВидСубконто3.Selected()<>0 Then
            If isEmpty(зСкл) Then
              Message("Амортизация обнаружено движение по номенклатуре %LINK% ("+зН.Code+") на счете %LINK% без указания субконто склады. Необходимо исправить движение перед закрытием месяца!","!",зН,СчетС);
              Exit 0;
            EndIf;
          EndIf;
          
          aTab.СубконтоК1:=зН;
          If Сч021.ВидСубконто2.Selected()<>0 Then
            aTab.СубконтоК2:=зК;
            If Сч021.ВидСубконто3.Selected()<>0 Then
              aTab.СубконтоК3:=зСкл;
            EndIf;
          EndIf;
        EndDo;
      EndDo;
      
      If ФлОдин>1 Then
        Message("Основное средство %LINK% ("+зН.Code+") содержится более чем на одном складе (или за более чем одним поставщиком)! Такое невозможно!","!",зН);
      EndIf;
      
    EndDo;
  EndDo;
  
  Exit 1;
EndFunction



Function ЗакрытьАвансы(спДок,СчетКстр,СчетДстр,пТип,ФлПост=1)
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оЮЛ:=Form.оЮЛ.Value;
  СчетК:=глНайтиСчет(СчетКстр);
  СчетД:=глНайтиСчет(СчетДстр);
  
  ТЗ:="Period From НачДата to КонДата;
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |Condition(зЮЛ IN оЮЛ.Get(1));
  |Condition(зЮЛ NOT IN оЮЛ.Get(2));
  |зСч:=Storage.БухгалтерскиеСчета.Счет;
  |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
  |зКонОст:=EndTotals(Сумма);
  |зРасход:=Expense(Сумма);
  |зПриход:=Income(Сумма);
  |Condition(зСч=СчетК);
  |Group зЮЛ,зСуб1;";
  
  З:=Query.Create();
  З.Execute(ТЗ);
  
  ТЗ2:="Period From НачДата to КонДата;
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |Condition(зЮЛ IN оЮЛ.Get(1));
  |Condition(зЮЛ NOT IN оЮЛ.Get(2));
  |зСч:=Storage.БухгалтерскиеСчета.Счет;
  |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
  |зКонОст:=EndTotals(Сумма);
  |зРасход:=Expense(Сумма);
  |зПриход:=Income(Сумма);
  |Condition(зСч=СчетД);
  |Group зЮЛ,зСуб1;";
  
  З2:=Query.Create();
  З2.Execute(ТЗ);
  
  While З.Next(1) Do
    аДок:=ПолучитьДокЗакрытияМесяца(спДок,пТип,З.зЮЛ);
    If аДок=0 Then
      Exit 0;
    EndIf;
    aTab:=аДок.LineParts("Содержание");
    
    While З.Next(2) Do
      зСуб1:=З.зСуб1;
      
      З2.First();
      If З2.ResultTable.LocateAndGoto("@LEVEL,зЮЛ,зСуб1",1,З.зЮЛ,зСуб1)=0 then
        Continue;
      EndIf;
      
      If ((З2.зКонОст>=0)And(ФлПост=0))Or((З2.зКонОст<=0)And(ФлПост=1)) Then
        Continue;
      EndIf;
      зСмПогаш:=Max(З2.зКонОст,-З2.зКонОст);
      зСмАванс:=Max(З.зКонОст,-З.зКонОст);
      зСмПогаш:=Min(зСмПогаш,зСмАванс);
      См:=?(ФлПост=1,зСмПогаш,-зСмПогаш);
      
      aTab.AddLine("Количество",0);
      If (СчетК.Пассивный=2)Or((СчетК.Пассивный=1)And(См<0)) Then
        См:=-См;
        aTab.СчетД:=СчетК;
        aTab.СубконтоД1:=зСуб1;
        aTab.СчетК:=СчетД;
      Else
        aTab.СчетД:=СчетД;
        aTab.СчетК:=СчетК;
        aTab.СубконтоК1:=зСуб1;
      EndIf;
      aTab.Сумма:=См;
      aTab.Цена:=См;
    EndDo;
  EndDo;
  
  Exit 1;
EndFunction


Function OnExecute(СпУстановки)
  флЕНВД:=Form.флЕНВД.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оЮЛ:=Form.оЮЛ.Value;
  If (BegOfMonth(НачДата)<>НачДата)or(EndOfMonth(КонДата)<>КонДата) Then
    If AskQuestion("Начальная дата не совпадает с началом месяца или конечная дата не совпадает с концом месяца. Такой пересчет гарантировано создаст некорректные проводки! Вы уверены, что вы запускаете обработку правильно? ",Q_QUESTION+Q_YESNO)<>R_YES Then
      Exit;
    EndIf;
  EndIf;
  
//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость
//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость
//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость//Себестоимость

  If Form.оСеб.Value=1 Then
    
    ФлВопрос:=0;
    //Необходимо удалить все связанные документы до начала расчетов
    спДок20:=НайтиДокументы("ЗМ:СБС20","распределения производственных затрат","Распред. производственных затрат",ФлВопрос);
    If спДок20=0 Then
      Exit;
    EndIf;

    спДок:=НайтиДокументы("ЗМ:СБС","исправления себестоимости","Исправление себестоимости",ФлВопрос);
    If спДок=0 Then
      Exit;
    EndIf;
    
    спДокПер:=НайтиДокументы("ЗМ:СБС:П","исправления себестоимости (перемещения)","Исправление себестоимости (перемещения)",ФлВопрос);
    If спДокПер=0 Then
      Exit;
    EndIf;
    
    спДокПер2:=НайтиДокументы("ЗМ:СБС:П2","исправления себестоимости (перемещения, 43)","Исправление себестоимости (перемещения, 43)",ФлВопрос);
    If спДокПер2=0 Then
      Exit;
    EndIf;    
    
    //Исправление счета 10.3 (топливо)
    Сч103:=глНайтиСчет("10.3");
    Сч441:=глНайтиСчет("44.1");
    ТЗ:="Period From НачДата to КонДата;
    |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
    |Condition(зЮЛ IN оЮЛ.Get(1));
    |Condition(зЮЛ NOT IN оЮЛ.Get(2));
    |зСч:=Storage.БухгалтерскиеСчета.Счет;
    |зСчКорр:=Storage.БухгалтерскиеСчета.КоррСчет;
    |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
    |зСуб2:=Storage.БухгалтерскиеСчета.Субконто2;
    |зНачОст:=BegTotals(Сумма);
    |зПриход:=Income(Сумма);
    |зРасход:=Expense(Сумма);
    |зКонОст:=EndTotals(Сумма);
    |зНачОстКол:=BegTotals(Количество);
    |зПриходКол:=Income(Количество);
    |зРасходКол:=Expense(Количество);
    |зКонОстКол:=EndTotals(Количество);
    |Condition(зСч=Сч103);
    |Group зЮЛ,зСуб2,зСуб1,зСчКорр;";
    З:=Query.Create();
    З.Execute(ТЗ);
    
    ТКоррСч20:=ПолучитьТаблицуКорректировки();
    
    спСчетДебета:=List.Create();
    спСуб1Дебета:=List.Create();
    спСуб2Дебета:=List.Create();
    
    СчетД:=глНайтиСчет("25");
    Суб1:=глНайтиСубконтоПоИмени(СчетД.ВидСубконто1,"Производство");
    Суб2:=глНайтиСубконтоПоИмени(СчетД.ВидСубконто2,"Производство");
    спСчетДебета.SetByName("25",СчетД);
    спСуб1Дебета.SetByName("25",Суб1);
    спСуб2Дебета.SetByName("25",Суб2);
  
    СчетД:=глНайтиСчет("26");
    Суб1:=глНайтиСубконтоПоИмени(СчетД.ВидСубконто1,"Производство");
    Суб2:=глНайтиСубконтоПоИмени(СчетД.ВидСубконто2,"Производство");
    спСчетДебета.SetByName("26",СчетД);
    спСуб1Дебета.SetByName("26",Суб1);
    спСуб2Дебета.SetByName("26",Суб2);
  
    Счет20:=глНайтиСчет("20");
    Суб1_20:=глНайтиСубконтоПоИмени(Счет20.ВидСубконто1,"Производство");
    Суб2_20:=глНайтиСубконтоПоИмени(Счет20.ВидСубконто2,"Себестоимость материалов");
    спСчетДебета.SetByName("20",Счет20);
    спСуб1Дебета.SetByName("20",Суб1_20);
    спСуб2Дебета.SetByName("20",Суб2_20);
    
    СчетД:=глНайтиСчет("91.2");
    Суб91П:=глНайтиСубконтоПоИмени(СчетД.ВидСубконто1,"Производство");
    Суб91Р:=глНайтиСубконтоПоИмени(СчетД.ВидСубконто1,"Реализация");
    спСчетДебета.SetByName("91.2",СчетД);
    спСуб1Дебета.SetByName("91.2",Суб91П);
    спСуб2Дебета.SetByName("91.2","");
    
    
    оСуб:=глНайтиСубконтоПоИмени(Сч441.ВидСубконто1,"Транспортные расходы");
    оСуб2:=глНайтиСубконтоПоИмени(Сч441.ВидСубконто1,"Транспортные расходы на администрацию");
    
    While З.Next(1) Do
      аДок:=спДок.GetByName(З.зЮЛ.Code);
      If pos("DB.DOC.",TypeStr(аДок))<>1 Then
        аДок:=Doc.БухгалтерскаяОперация;
        аДок.New();
        аДок.DocDate:=КонДата;
        аДок.КодОперации:=Enum.коБухгалтерскаяОперация.БухгалтерскаяОперация;
        аДок.Комментарий:="Исправление себестоимости по ю.л. "+З.зЮЛ;
        аДок.УникальныйИдентификатор:="ЗМ:СБС";
        аДок.Автор:=глПользователь;
        аДок.ЮрЛицо:=З.зЮЛ;
        глУстановитьНовыйНомер(аДок);
        спДок.SetByName(З.зЮЛ.Code,аДок);
      EndIf;
      спСуб1Дебета.SetByName("91.2",Суб91Р);
      aTab:=аДок.LineParts("Содержание");
      
      
      
      См902:=0;
      While З.Next(2) Do
        While З.Next(3) Do
          цСеб:=0;
          
          цКол:=З.зПриходКол+З.зНачОстКол;
          цСеб:=З.зПриход+З.зНачОст;
          цСеб:=Round(?(цКол=0,0,цСеб/цКол),2);
          
          ПравСумма:=З.зКонОстКол*цСеб;
          ТекСумма:=З.зКонОст;
          Разница:=ТекСумма-ПравСумма;
          
          If Round(Разница,2)=0 Then
            Continue;
          EndIf;
          
          
          счРез0:="44";
          Кл0:=0;
          ТбРес:=Tab.Create("Счет");
          ТбРес.AddColumn("Количество",,"Number");
          While З.Next(4) Do
            счРез:=счРез0;
            If Pos("25",З.зСчКорр.Code)=1 Then
              счРез:="25";
            ElseIf Pos("26",З.зСчКорр.Code)=1 Then
              счРез:="26";
            ElseIf (Pos("91",З.зСчКорр.Code)=1)And(З.зСчКорр.Code<>"91.3") Then
              счРез:="91.2";
            EndIf;
            
            Кл0:=Кл0+З.зРасход;
            //ПравСумма:=З.зКонОстКол*цСеб;
            //ТекСумма:=З.зКонОст;
            //Разница:=ТекСумма-ПравСумма;
            ТбРес.AddLine("Счет,Количество",счРез,З.зРасход);
          EndDo;
          If Кл0=0 Then
            ТбРес.AddLine("Счет,Количество",счРез0,1);
            Кл0:=1;
          EndIf;
          If ТбРес.Size()>0 Then
            ТбРес.Group("Счет","Количество");
          EndIf;
          
          
          If IsEmpty(З.зСуб1) Then
            Message("Для ЮЛ: %LINK% на счете 10.3 обнаружены остатки без указания типа топлива/ГСМ"+
              ?(not IsEmpty(З.зСуб2)," (для транспортного средства %LINK%)","")+"! Пожалуйста, исправьте положение!","!",З.зЮЛ,З.зСуб2);
            Exit;
          EndIf;
          If IsEmpty(З.зСуб2) Then
            Message("Для ЮЛ: %LINK%, на счете 10.3 обнаружены остатки по топливу/ГСМ %LINK% ("+З.зСуб1.Code+") без указания транспортного средства!"+
              " Пожалуйста, проверьте, не ошибка ли это!","I",З.зЮЛ,З.зСуб1);
          EndIf;
          
          
          ТбРес.Select();
          While ТбРес.Next() Do
            
            См:=Round(ТбРес.Количество/Кл0*Разница,2);
            If См=0 Then
              Continue;
            EndIf;
            Сч:=ТбРес.Счет;
            
            aTab.AddLine("Количество,Сумма,Цена,СчетК",0,См,См,Сч103);
            If Сч="44" Then
              aTab.СчетД:=Сч441;
              aTab.СубконтоД1:=оСуб;
              If _And(not isEmpty(З.зСуб2),З.зСуб2.DBName()="тсТранспортныеСредства") Then
                If З.зСуб2.ВидТС=Enum.тсВид.Легковой Then
                  aTab.СубконтоД1:=оСуб2;
                EndIf;
              EndIf;
            Else
              aTab.СчетД:=спСчетДебета.GetByName(Сч);
              СубД:="";
              СубД2:="";
              If not isEmpty(спСуб1Дебета.GetByName(Сч)) Then
                aTab.СубконтоД1:=спСуб1Дебета.GetByName(Сч);
              EndIf;
              If not isEmpty(спСуб2Дебета.GetByName(Сч)) Then
                aTab.СубконтоД2:=спСуб2Дебета.GetByName(Сч);
              EndIf;
              
              If Pos("20",aTab.СчетД.Code)=1 Then
                УстановитьКоррСумму(ТКоррСч20,См,З.зЮЛ,Счет20,Суб1_20,Суб2_20);
              EndIf;
            EndIf;
            
            If not IsEmpty(З.зСуб2) Then
              aTab.СубконтоК1:=З.зСуб1;
              aTab.СубконтоК2:=З.зСуб2;
            Else
              aTab.СубконтоК1:=З.зСуб1;
            EndIf;
          EndDo;
        EndDo;
      EndDo;
    EndDo;
    
    Таб902:=Tab.Create("ЮрЛицо");
    Таб902.AddColumn("Сумма",,"Number");
    ФлНеСчитатьСебестоимостьСчета43ВРазрезеСкладов:=Number(DBVar.НеСчитатьСебестоимостьСчета43ВРазрезеСкладов);
    ФлНеСчитатьСебестоимостьСчетов41и10ВРазрезеСкладов:=Number(DBVar.НеСчитатьСебестоимостьСчетов41и10ВРазрезеСкладов);
    
    
    If not ФлНеСчитатьСебестоимостьСчетов41и10ВРазрезеСкладов Then
      If not ПересчитатьСебестоимостьПеремещений(спДокПер,"41.1,41.2,41.3,10.1,10.2,10.4,10.5,10.6,10.7,10.8,10.9","ЗМ:СБС:П") Then
        Exit;
      EndIf;
      
      If not ОбработатьДокументы(спДокПер) Then
        Exit;
      EndIf;
      спДокПер:=0;
    EndIf;  
    
    If not ПересчитатьСебестоимость(спДок,"41.1,41.2,41.3,10.1,10.2,10.4,10.5,10.6,10.7,10.8,10.9","ЗМ:СБС",Таб902,ТКоррСч20,ФлНеСчитатьСебестоимостьСчетов41и10ВРазрезеСкладов) Then
      Exit;
    EndIf;    

    //Производственные счета, необходимо делать до исправления себестоимости на счете 43
    Сч20:=глНайтиСчет("20");
    аСуб2:=глНайтиСубконтоПоИмени(Сч20.ВидСубконто2,"Общепроизводственные расходы");
    If not СписатьОстатки(спДок20,"25","20","ЗМ:СБС20",,ТКоррСч20,,аСуб2,"") Then
      Exit;
    EndIf;
    
    If not ЗакрытиеСчета20На43(спДок20,"ЗМ:СБС20",ТКоррСч20) Then
      Exit;
    EndIf;
    
    If not ОбработатьДокументы(спДок20) Then
      Exit;
    EndIf;
    
    спДок20:=0;
    
    If not ФлНеСчитатьСебестоимостьСчета43ВРазрезеСкладов Then
      If not ПересчитатьСебестоимостьПеремещений(спДокПер2,"43","ЗМ:СБС:П2",1) Then
        Exit;
      EndIf;
      
      If not ОбработатьДокументы(спДокПер2) Then
        Exit;
      EndIf;
      спДокПер2:=0;
    EndIf;

    If not ПересчитатьСебестоимость(спДок,"43","ЗМ:СБС",Таб902,0,ФлНеСчитатьСебестоимостьСчета43ВРазрезеСкладов) Then
      Exit;
    EndIf;    
    
    
    //Закрытие 90.2.х
    //90.1.1
    Сч9011:=глНайтиСчет("90.1");//90.1.1 и 90.1.2
    ТЗ:="Period From НачДата to КонДата;
    |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
    |Condition(зЮЛ IN оЮЛ.Get(1));
    |Condition(зЮЛ NOT IN оЮЛ.Get(2));
    |зСч:=Storage.БухгалтерскиеСчета.Счет;
    |зРасход:=Expense(Сумма);
    |зПриход:=Income(Сумма);
    |зРасходКол:=Expense(Количество);
    |зПриходКол:=Income(Количество);
    |Condition(зСч IN Сч9011);
    |Group зЮЛ;";
    ЗСч9011:=Query.Create();
    ЗСч9011.Execute(ТЗ);
    
    
    //90.3
    Сч903:=глНайтиСчет("90.3");
    ТЗ:="Period From НачДата to КонДата;
    |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
    |Condition(зЮЛ IN оЮЛ.Get(1));
    |Condition(зЮЛ NOT IN оЮЛ.Get(2));
    |зСч:=Storage.БухгалтерскиеСчета.Счет;
    |зРасход:=Expense(Сумма);
    |зПриход:=Income(Сумма);
    |зРасходКол:=Expense(Количество);
    |зПриходКол:=Income(Количество);
    |Condition(зСч=Сч903);
    |Group зЮЛ;";
    ЗСч903:=Query.Create();
    ЗСч903.Execute(ТЗ);
    
    //90.2 -- грязный
    Сч902:=глНайтиСчет("90.2");//90.2.1 и 90.2.2
    ТЗ:="Period From НачДата to КонДата;
    |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
    |Condition(зЮЛ IN оЮЛ.Get(1));
    |Condition(зЮЛ NOT IN оЮЛ.Get(2));
    |зСч:=Storage.БухгалтерскиеСчета.Счет;
    |зРасход:=Expense(Сумма);
    |зПриход:=Income(Сумма);
    |зРасходКол:=Expense(Количество);
    |зПриходКол:=Income(Количество);
    |Condition(зСч IN Сч902);
    |Group зЮЛ;";
    ЗСч902:=Query.Create();
    ЗСч902.Execute(ТЗ);
     
    ТЗ:="зЮЛ:=Ref.общЮридическиеЛица;
      |Condition(зЮЛ IN оЮЛ.Get(1));
      |Condition(зЮЛ NOT IN оЮЛ.Get(2));
      |Group зЮЛ;";
    ЗПЮЛ:=Query.Create();
    ЗПЮЛ.Execute(ТЗ);
     
    Таб902.Group("ЮрЛицо","Сумма");
    While ЗПЮЛ.Next(1) Do
      зЮЛ:=ЗПЮЛ.зЮЛ;
      
      См902:=0;
      If Таб902.FindAndGoto(зЮЛ,,"ЮрЛицо")>0 Then
        См902:=Таб902.Сумма;
      EndIf;  
      аДок:=ПолучитьДокИсправленияСебестоимости(спДок,"ЗМ:СБС",зЮЛ);
      If аДок=0 Then
        Exit;
      EndIf;
      aTab:=аДок.LineParts("Содержание");

      //Закрытие 90.2.х для одного ю.л.
      // Д              К             См
      // 62.1           90.1          150
      // 90.2           41.1.1        100
      // 90.3           76.Н.1        22.88
      // ----------------------------------
      // 90.9           99.1          27.12
      //
      
      //Д90.9 := К90.1 - Д90.2 - Д90.3
      См9011:=0;
      ЗСч9011.First();
      If ЗСч9011.ResultTable.LocateAndGoto("@LEVEL,зЮЛ",1,зЮЛ)>0 then
        См9011:=ЗСч9011.зРасход;
      EndIf;
      
      См903:=0;
      ЗСч903.First();
      If ЗСч903.ResultTable.LocateAndGoto("@LEVEL,зЮЛ",1,зЮЛ)>0 then
        См903:=ЗСч903.зПриход;
      EndIf;
      
      ЗСч902.First();
      If ЗСч902.ResultTable.LocateAndGoto("@LEVEL,зЮЛ",1,зЮЛ)>0 then
        См902:=См902+ЗСч902.зПриход;
      EndIf;
      
      См909:=См9011-См902-См903;
      
      If См909<>0 Then
        aTab.AddLine("СчетД,СчетК,Сумма,Цена",глНайтиСчет("90.9"),глНайтиСчет("99.1"),См909,См909);
      EndIf;
    EndDo;
    
    If not ОбработатьДокументы(спДок) Then
      Exit;
    EndIf;
  EndIf;
  
  
//Амортизация//Амортизация//Амортизация//Амортизация//Амортизация//Амортизация//Амортизация//Амортизация//Амортизация//Амортизация//Амортизация
//Амортизация//Амортизация//Амортизация//Амортизация//Амортизация//Амортизация//Амортизация//Амортизация//Амортизация//Амортизация//Амортизация
  
  If Form.оАмор.Value=1 Then
    
    спДок:=НайтиДокументы("ЗМ:АМР","амортизации ОС","Амортизация ОС с 01.1(3)",0);
    If спДок=0 Then
      Exit;
    EndIf;
    
    
    //Счет 01.1 -> 02.1
    Сч01:=глНайтиСчет("01.1");
    ТЗ:="Period From НачДата to КонДата;
    |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
    |Condition(зЮЛ IN оЮЛ.Get(1));
    |Condition(зЮЛ NOT IN оЮЛ.Get(2));
    |зСч:=Storage.БухгалтерскиеСчета.Счет;
    |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
    |зСуб2:=Storage.БухгалтерскиеСчета.Субконто2;
    |зНачОст:=BegTotals(Сумма);
    |зРасход:=Expense(Сумма);
    |зПриход:=Income(Сумма);
    |Condition(зСч=Сч01);
    |Group зЮЛ,зСуб1,зСуб2;";//ТМЦ, склад
    З:=Query.Create();
    З.Execute(ТЗ);
    
    
    Сч441:=глНайтиСчет("44.1");
    Сч021:=глНайтиСчет("02.1");
    аИзносОС:=глНайтиСубконтоПоИмени(Сч441.ВидСубконто1,"Износ ОС");
    While З.Next(1) Do
      
      аДок:=спДок.GetByName(З.зЮЛ.Code);
      If pos("DB.DOC.",TypeStr(аДок))<>1 Then
        аДок:=Doc.БухгалтерскаяОперация;
        аДок.New();
        аДок.DocDate:=КонДата;
        аДок.КодОперации:=Enum.коБухгалтерскаяОперация.БухгалтерскаяОперация;
        аДок.Комментарий:="Амортизация ОС с 01.1(3) по ю.л. "+З.зЮЛ;
        аДок.УникальныйИдентификатор:="ЗМ:АМР";
        аДок.Автор:=глПользователь;
        аДок.ЮрЛицо:=З.зЮЛ;
        глУстановитьНовыйНомер(аДок);
        спДок.SetByName(З.зЮЛ.Code,аДок);
      EndIf;
      aTab:=аДок.LineParts("Содержание");
      
      
      While З.Next(2) Do
        зН:=З.зСуб1;
        If _Or(isEmpty(зН),зН.DBName()<>"тмцНоменклатура") Then
          Message("ВНИМАНИЕ! Для юр. лица. %LINK% на счете 01.1 обнаружено пустое субконто номенклатуры!","!",З.зЮЛ);
          Continue;//не ОС (!!)
        EndIf;
        If зН.ВидНоменклатуры<>Enum.ВидыНоменклатуры.Инвентарь Then
          Message("Номенклатура %LINK% ("+зН.Code+") не является ОС, однако содержится в сальдо счета 01.1!","!",зН);
          Continue;//не ОС (!!)
        EndIf;
        аОС:=ПолучитьЭлементОС(зН);
        If аОС=0 Then
          Message("Для основного средства %LINK% ("+зН.Code+") не заполнены свойства амортизации!","!",зН);
          Continue;
        EndIf;
        If (аОС.флНачислятьАмортизацию=0)Or((BegOfDay(аОС.ДатаВыбытия)<КонДата)And(not isEmpty(аОС.ДатаВыбытия)))Or(isEmpty(аОС.ДатаВводаВЭксплуатацию)) Then
          Continue;
        EndIf;
        
        СмНач:=аОС.ПервоначальнаяСтоимость;
        СрокМес:=аОС.СрокПолезногоИспользования;
        If СрокМес<=0 Then
          Message("Для основного средства %LINK% ("+зН.Code+") указан некорректный срок полезного использования!","!",зН);
          Continue;
        EndIf;
        
        СмЛинейная:=СмНач/СрокМес;
        а:=0;аДата:=BegOfMonth(аОС.ДатаВводаВЭксплуатацию);
        While аДата<=BegOfMonth(КонДата) Do
          а:=а+1;
          аДата:=EndOfMonth(аДата)+1;
        EndDo;
        ОстМес:=аОС.СрокПолезногоИспользования-а;
        If ОстМес<=0 Then
          Continue;
        EndIf;
        
        If (not isEmpty(аОС.ДатаМодернизации))And(BegOfMonth(аОС.ДатаМодернизации)<BegOfMonth(КонДата)) Then
          //Была модернизация
          аДата:=BegOfMonth(аОС.ДатаВводаВЭксплуатацию);
          While аДата<BegOfMonth(аОС.ДатаМодернизации) Do
            СрокМес:=СрокМес-1;
            СмНач:=СмНач-СмЛинейная;
            аДата:=EndOfMonth(аДата)+1;
          EndDo;
          СмНач:=СмНач+аОС.СтоимостьМодернизации;
          СмЛинейная:=СмНач/СрокМес;
        EndIf;
        
        If СмЛинейная<=0 Then
          Continue;
        EndIf;
        
        ФлОдин:=0;
        While З.Next(3) Do
          If З.зНачОст<>0 Then
            ФлОдин:=ФлОдин+1;
          EndIf;
          If З.зНачОст<=0 Then
            Continue;
          EndIf;
          зСкл:=З.зСуб2;
          
          aTab.AddLine("Количество,Сумма,Цена,СчетК,СубконтоК1,СубконтоК2",0,Round(СмЛинейная,2),Round(СмЛинейная,2),Сч021,зН,зСкл);
          If аОС.Счет.Selected()<>0 Then
            aTab.СчетД:=аОС.Счет;
            aTab.СубконтоД1:=аОС.Субконто1;
            aTab.СубконтоД2:=аОС.Субконто2;
            aTab.СубконтоД3:=аОС.Субконто3;
          Else
            aTab.СчетД:=Сч441;
            aTab.СубконтоД1:=аИзносОС;
          EndIf;
        EndDo;
        
        If ФлОдин>1 Then
          Message("Основное средство %LINK% ("+зН.Code+") содержится более чем на одном складе! Такое невозможно!","!",зН);
        EndIf;
          
      EndDo;
    EndDo;
                           
    
    If not Амортизация(спДок,"01.3","02.3") Then
      Exit;
    EndIf;
    If not Амортизация(спДок,"03.1","02.2") Then
      Exit;
    EndIf;
    If not Амортизация(спДок,"03.2","02.2") Then
      Exit;
    EndIf;
    If not Амортизация(спДок,"03.3","02.2") Then
      Exit;
    EndIf;
    If not Амортизация(спДок,"03.4","02.2") Then
      Exit;
    EndIf;
    If not Амортизация(спДок,"03.5","02.2") Then
      Exit;
    EndIf;
    If not Амортизация(спДок,"04.1","05") Then
      Exit;
    EndIf;
    
    If not ОбработатьДокументы(спДок) Then
      Exit;
    EndIf;
    
  EndIf;
  
  
//Расходы будущих периодов//Расходы будущих периодов//Расходы будущих периодов//Расходы будущих периодов//Расходы будущих периодов//Расходы будущих периодов
//Расходы будущих периодов//Расходы будущих периодов//Расходы будущих периодов//Расходы будущих периодов//Расходы будущих периодов//Расходы будущих периодов
  
  If Form.оБудущ.Value=1 Then
    //Счет 97 -> 44.1
    Сч01:=глНайтиСчет("97");
    
    спДок:=НайтиДокументы("ЗМ:РБП","расх. буд. периодов","Списание расходов буд. пер., сч. 97",0);
    If спДок=0 Then
      Exit;
    EndIf;
    
    ТЗ:="Period From НачДата to КонДата;
    |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
    |Condition(зЮЛ IN оЮЛ.Get(1));
    |Condition(зЮЛ NOT IN оЮЛ.Get(2));
    |зСч:=Storage.БухгалтерскиеСчета.Счет;
    |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
    |зНачОст:=BegTotals(Сумма);
    |зРасход:=Expense(Сумма);
    |зПриход:=Income(Сумма);
    |Condition(зСч=Сч01);
    |Group зЮЛ,зСуб1;";
    З:=Query.Create();
    З.Execute(ТЗ);
    
        
    Сч441:=глНайтиСчет("44.1");
    Сч97:=глНайтиСчет("97");
    аРасходы:=глНайтиСубконтоПоИмени(Сч441.ВидСубконто1,"Расходы будущих периодов");
    While З.Next(1) Do
      
      аДок:=спДок.GetByName(З.зЮЛ.Code);
      If pos("DB.DOC.",TypeStr(аДок))<>1 Then
        аДок:=Doc.БухгалтерскаяОперация;
        аДок.New();
        аДок.DocDate:=КонДата;
        аДок.КодОперации:=Enum.коБухгалтерскаяОперация.БухгалтерскаяОперация;
        аДок.Комментарий:="Списание расходов буд. пер., сч. 97 по ю.л. "+З.зЮЛ;
        аДок.Автор:=глПользователь;
        аДок.ЮрЛицо:=З.зЮЛ;
        аДок.УникальныйИдентификатор:="ЗМ:РБП";
        глУстановитьНовыйНомер(аДок);
        спДок.SetByName(З.зЮЛ.Code,аДок);
      EndIf;
      aTab:=аДок.LineParts("Содержание");
      
      
      While З.Next(2) Do
        зН:=З.зСуб1;
        If З.зНачОст<=0 Then
          Continue;
        EndIf;
        If IsEmpty(зН) Then
          Message("Обнаружен остаток по расходам будущих периодов, причем элемент расходов не был выбран! Проверьте, пожалуйста, ОСВ и исправьте движение, прежде чем проводить закрытие месяца!","!");
          Continue;
        EndIf;
        
        If (isEmpty(зН.ДатаОкончанияСписания))Or(зН.ДатаНачалаСписания>зН.ДатаОкончанияСписания)Or(isEmpty(зН.ДатаНачалаСписания)) Then
          Message("Для расхода буд. периода %LINK% ("+зН.Code+") не заполнена (или неверно заполнена) дата окончания (начала) списания!","!",зН);
          Continue;
        EndIf;
        If зН.ДатаОкончанияСписания<НачДата Then
          Continue;
        EndIf;
        If зН.ДатаНачалаСписания>КонДата Then
          Continue;
        EndIf;
        
        зОстаток:=З.зНачОст;
        ОстДней:=зН.ДатаОкончанияСписания-Max(НачДата,зН.ДатаНачалаСписания);
        If ОстДней<=0 Then
          Continue;
        EndIf;
        
        См:=зОстаток/ОстДней*(Min(КонДата+1,зН.ДатаОкончанияСписания)-Max(НачДата,зН.ДатаНачалаСписания));
        
        aTab.AddLine("Количество,Сумма,Цена,СчетК,СубконтоК1",0,Round(См,2),Round(См,2),Сч97,зН);
        If зН.Счет.Selected()<>0 Then
          aTab.СчетД:=зН.Счет;
          aTab.СубконтоД1:=зН.Субконто1;
          aTab.СубконтоД2:=зН.Субконто2;
          aTab.СубконтоД3:=зН.Субконто3;
        Else
          aTab.СчетД:=Сч441;
          aTab.СубконтоД1:=аРасходы;
        EndIf;
      EndDo;
    EndDo;
    
    If not ОбработатьДокументы(спДок) Then
      Exit;
    EndIf;
    
  EndIf;
  
//Закрытие месяца//Закрытие месяца//Закрытие месяца//Закрытие месяца//Закрытие месяца//Закрытие месяца//Закрытие месяца//Закрытие месяца
//Закрытие месяца//Закрытие месяца//Закрытие месяца//Закрытие месяца//Закрытие месяца//Закрытие месяца//Закрытие месяца//Закрытие месяца

  If Form.оЗакМесяца.Value=1 Then
    //60.2 -> 60.1 (не нужно, так как 60.2 закрывается при формировании книги продаж/покупок)
    //62.2 -> 62.1 (не нужно, так как 62.2 закрывается при формировании книги продаж/покупок)
    //44.1 -> 90.7.1
    
    спДок:=НайтиДокументы("ЗМ:Месяц","закрытия месяца","Закрытие месяца",0);
    If спДок=0 Then
      Exit;
    EndIf;
    
    //Закрытие 60.2 и 62.2
    //If not ЗакрытьАвансы(спДок,"60.2","60.1","ЗМ:Месяц") Then
    //  Exit;
    //EndIf;
    //If not ЗакрытьАвансы(спДок,"62.2","62.1","ЗМ:Месяц",0) Then
    //  Exit;
    //EndIf;
    
    ТКоррСч90:=ПолучитьТаблицуКорректировки();
    
    
    
    //Производственные счета (только частный случай -- не собственное производство)
    Сч20:=глНайтиСчет("20");
    ТКоррСч20:=ПолучитьТаблицуКорректировки();
    If not СписатьОстатки(спДок,"26","90.8."+?(флЕНВД=0,"1","2"),"ЗМ:Месяц",,ТКоррСч90,,,"") Then
      Exit;
    EndIf;
    
    
    
    If not СписатьОстатки(спДок,"44.2","90.8."+?(флЕНВД=0,"1","2"),"ЗМ:Месяц",,ТКоррСч90) Then
      Exit;
    EndIf;
    If not СписатьОстатки(спДок,"44.1","90.7.1","ЗМ:Месяц",,ТКоррСч90) Then
      Exit;
    EndIf;
    //If not СписатьОстатки(спДок,"44.2","90.7.2","ЗМ:Месяц",,ТКоррСч90) Then
    //  Exit;
    //EndIf;

    
    ТКорр:=ПолучитьТаблицуКорректировки();
    If not СписатьОстатки(спДок,"91.1","91.9","ЗМ:Месяц",,ТКорр) Then
      Exit;
    EndIf;
    If not СписатьОстатки(спДок,"91.2","91.9","ЗМ:Месяц",,ТКорр) Then
      Exit;
    EndIf;
    If not СписатьОстатки(спДок,"91.3","91.9","ЗМ:Месяц",,ТКорр) Then
      Exit;
    EndIf;
    
    
    If not СписатьОстатки(спДок,"91.9","99.1","ЗМ:Месяц",ТКорр) Then
      Exit;
    EndIf;

    //Итого по 90
    Сч90:=глНайтиСчет("90");
    Сч909:=глНайтиСчет("90.9");
    ТЗ:="Period From НачДата to КонДата;
    |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
    |Condition(зЮЛ IN оЮЛ.Get(1));
    |Condition(зЮЛ NOT IN оЮЛ.Get(2));
    |зСч:=Storage.БухгалтерскиеСчета.Счет;
    |зКонОст:=EndTotals(Сумма);
    |Condition(зСч IN Сч90);
    |Condition(зСч NOT IN Сч909);
    |Group зЮЛ;";
    З:=Query.Create();
    З.Execute(ТЗ);
    While З.Next(1) Do
      УстановитьКоррСумму(ТКоррСч90,З.зКонОст,З.зЮЛ,глНайтиСчет("90.9"));
    EndDo;
    
    If not СписатьОстатки(спДок,"90.9","99.1","ЗМ:Месяц3",ТКоррСч90) Then
      Exit;
    EndIf;
    
    If not ОбработатьДокументы(спДок) Then
      Exit;
    EndIf;
    
  EndIf;
  
//Закрытие года//Закрытие года//Закрытие года//Закрытие года//Закрытие года//Закрытие года//Закрытие года//Закрытие года//Закрытие года
//Закрытие года//Закрытие года//Закрытие года//Закрытие года//Закрытие года//Закрытие года//Закрытие года//Закрытие года//Закрытие года
  
  If Form.оЗакГода.Value=1 Then
    
    спДок:=НайтиДокументы("ЗМ:Год","закрытия года","Закрытие года",0);
    If спДок=0 Then
      Exit;
    EndIf;
    
    
    ТКорр:=ПолучитьТаблицуКорректировки();
    If not СписатьОстатки(спДок,"90.7.1","90.9","ЗМ:Год",,ТКорр) Then
      Exit;
    EndIf;
    If not СписатьОстатки(спДок,"90.7.2","90.9","ЗМ:Год",,ТКорр) Then
      Exit;
    EndIf;
    If not СписатьОстатки(спДок,"90.1.1","90.9","ЗМ:Год",,ТКорр) Then
      Exit;
    EndIf;
    If not СписатьОстатки(спДок,"90.1.2","90.9","ЗМ:Год",,ТКорр) Then
      Exit;
    EndIf;
    If not СписатьОстатки(спДок,"90.2.1","90.9","ЗМ:Год",,ТКорр) Then
      Exit;
    EndIf;
    If not СписатьОстатки(спДок,"90.2.2","90.9","ЗМ:Год",,ТКорр) Then
      Exit;
    EndIf;
    If not СписатьОстатки(спДок,"90.3","90.9","ЗМ:Год",,ТКорр) Then
      Exit;
    EndIf;
    
    
    ТКорр2:=ПолучитьТаблицуКорректировки();
    If not СписатьОстатки(спДок,"90.9","99.1","ЗМ:Год",ТКорр,ТКорр2) Then
      Exit;
    EndIf;
    If not СписатьОстатки(спДок,"91.9","99.1","ЗМ:Год",,ТКорр2) Then
      Exit;
    EndIf;
//    If not СписатьОстатки(спДок,"99.2","99.1","ЗМ:Год",,ТКорр2) Then
//      Exit;
//    EndIf;


    If not СписатьОстатки(спДок,"99.1","84.1","ЗМ:Год",ТКорр2) Then
      Exit;
    EndIf;
    
    If not ОбработатьДокументы(спДок) Then
      Exit;
    EndIf;
  EndIf;
  
  Message("Работа окончена!","I");
EndFunction
