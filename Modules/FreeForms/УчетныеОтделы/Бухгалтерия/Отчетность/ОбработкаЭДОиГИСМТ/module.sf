//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var локДрайверПодписи Export, спВнешПровайдерЭДО Export;
Var СпДокумент Export, ТоварнаяГруппа Export;//Форма: СозданиеНовогоПоступления
Var спТекущиеПроцессы Export; //Использовать lock для обращения, каждый элемент -- список

//Форма: СозданиеНовогоПоступления
Var ТипДокумента Export;//0 -- ТМЦ (ГИС МТ), 1 -- ТМЦ (не ГИС МТ), 2 -- услуги
Var спТипыДокумента Export;

//Форма: ПроверкаМарокПоступления
Var НакопленноеСообщение Export;
Var ПроверкаИконкаПапка Export,ПроверкаИконкаПапка2 Export,ПроверкаИконкаМарка Export,ПроверкаИконкаПапкаПроверена Export,ПроверкаИконкаМаркаПроверена Export,ПроверкаИконкаПапкаВозврат Export,ПроверкаИконкаМаркаВозврат Export;
Var ПроверкаСпПроверенные Export, ПроверкаСпВозвраты Export;

Function ЗагрузитьТекущийДокумент(ФлТихо=0,ByRef Ошибка="") Forward;

Function БыстроеФорматированиеJSON(Стр)
  If _Or(pos("HTTP/",Стр)=1,pos(_NEWLINE+"HTTP/1.1",Стр)>0) Then
    Стр2:=TearStr(Стр,_NEWLINE+_NEWLINE);
    If Стр="" Then
      Exit Стр2;
    EndIf;
  EndIf;
  Стр:=Replace(Replace(Стр,"{""","{"+_NEWLINE+""""),",""",","+_NEWLINE+"""");
  Exit Стр;
EndFunction

//Отдельный поток сделан из-за того, что провайдер иногда не отвечает, и мы не можем завешивать интерфейс попытками соединиться
//Отключить: 0 -- подключение, 1 -- выход из формы
Function ОбновитьДрайверЭДО(спВнешПровайдерЭДО,Магазин,Форма,Отключить=0)
  спТекущиеПроцессы:=спВнешПровайдерЭДО["спТекущиеПроцессы"];
  Try
    If спВнешПровайдерЭДО["Инициализирован"]=1 Then
      спТекущиеПроцессы.AddValue(0,"Закрываем сессию провайдера ЭДО");
      спДрайвер:=спВнешПровайдерЭДО["спДрайвер"];
      If _And(TypeStr(спДрайвер)="LIST",not IsEmpty(спДрайвер["МодульДрайвера"])) Then
        Стр:=Trim(ExecuteFunction("DriverDisconnect",спДрайвер["МодульДрайвера"],спДрайвер));
        Стр2:=Trim(ExecuteFunction("DriverDeinit",спДрайвер["МодульДрайвера"],спДрайвер));
        спТекущиеПроцессы.RemoveValue(0);
      EndIf;
    EndIf;
  Except
  EndTry;
  спВнешПровайдерЭДО["Инициализирован"]:=0;
  If Отключить=1 Then
    PostMessageToForm(Форма,10010,"");
    Exit;
  EndIf;
  спДрайвер:=List.Create();
  Try
    спТекущиеПроцессы.AddValue(1,"Открываем сессию провайдера ЭДО");
    спДрайвер:=глЗагрузитьДрайверПровайдераЭДО(Магазин);
    спТекущиеПроцессы.RemoveValue(1);
  Except
  EndTry;
  спВнешПровайдерЭДО["спДрайвер"]:=спДрайвер;
  спВнешПровайдерЭДО["Инициализирован"]:=?(спДрайвер.Size()>0,1,2);
EndFunction

Function ОбновитьДрайверПодписи(Отключить=0)
  оМагазин:=Form.оМагазин.Value;
  Try
    If _And(TypeStr(локДрайверПодписи)="LIST",not IsEmpty(локДрайверПодписи["МодульДрайвера"])) Then
      ExecuteFunction("DriverDisconnect",локДрайверПодписи["МодульДрайвера"],локДрайверПодписи);
      ExecuteFunction("DriverDeinit",локДрайверПодписи["МодульДрайвера"],локДрайверПодписи);
    EndIf;
  Except
  EndTry;
  If Отключить=1 Then
    Exit;
  EndIf;
  
  локДрайверПодписи:=глЗагрузитьДрайверПодписи(Form.оМагазин.Value);
  ФлОк:=0;
  СтрОтвет:="";
  Try
    If IsEmpty(локДрайверПодписи["МодульДрайвера"]) Then
      СтрОтвет:="<Невозможно загрузить драйвер>";
      Exit;
    EndIf;
    If оМагазин.СертификатПодписи="" Then
      СтрОтвет:="<Для магазина не выбран сертификат обмена>";
      Exit;
    EndIf;
    локДрайверПодписи["Идентификатор"]:=оМагазин.СертификатПодписи;
    Стр:=Trim(ExecuteFunction("CheckCertificate",локДрайверПодписи["МодульДрайвера"],локДрайверПодписи));
    If Стр<>"" Then
      СтрОтвет:="<Ошибка: "+Стр+">";
      Exit;
    EndIf;
    If локДрайверПодписи["Найден"]<>1 Then
      СтрОтвет:="<Сертификат отсутствует на текущей машине!>";
      Exit;
    EndIf;
    ФлОк:=1;
    СтрОтвет:=локДрайверПодписи["ИмяСертификата"];
    If локДрайверПодписи["Рабочий"]<>1 Then
      Box("Сертификат, закрепленный за выбранным магазином, истек или является нерабочим! Обработка обмена не будет работать корректно!",Q_STOP);
    ElseIf GetPeriod(Date(),локДрайверПодписи["ДатаОкончания"],4)<1209600 Then //14 days
      Box("Сертификат, закрепленный за выбранным магазином, истекает "+локДрайверПодписи["ДатаОкончания"]+" (менее чем через 2 недели)! Заменяйте сертификат вовремя, чтобы избежать простоя!",Q_WARNING);
    EndIf;
  Finally
    Form.пТекущийСертификат.Value:=СтрОтвет;
  EndTry
  If not ФлОк Then
    Box("Невозможно загрузить драйвер подписи или требуемый сертификат не установлен на этой машине! Обработка обмена не будет работать корректно!",Q_STOP);
  EndIf;
EndFunction

Function ДатаЗапроса(аДата)
  //Даты: yyyy-MM-ddTHH:mm:ss.SSS’Z
  Exit EncodeString(FormatDate(аДата,"YYYY-mm-dd""T""hh:tt:ss.ppp")+"Z","PE");
EndFunction


Function ПолучитьЭлементJSON(ByRef Текст,От="{")
  //{..{..}..},{..{..}..},
  i:=1;
  While _And(i<=Length(Текст),Текст[i]<>От) Do
    i:=i+1;
  EndDo;
  i0:=i+1;
  Уровень:=1;
  While i<Length(Текст) Do
    i:=i+1;
    If _Or(Текст[i]="[",Текст[i]="{") Then
      Уровень:=Уровень+1;
    ElseIf _Or(Текст[i]="]",Текст[i]="}") Then
      Уровень:=Уровень-1;
      If Уровень=0 Then
        Break;
      EndIf;
    ElseIf Текст[i]="""" Then //TODO: '
      While i<Length(Текст) Do
        i:=i+1;
        If Текст[i]="\" Then //\"
          i:=i+1;
        ElseIf Текст[i]="""" Then
          i:=i+1;
          Break;
        EndIf;
      EndDo;
    EndIf;
  EndDo;
  Result:=Mid(Текст,i0,i-i0-1);
  Текст:=Mid(Текст,i+1);
EndFunction

Function ЗагрузитьМассивJSON(Стр)
  //"Name":Value,...
  //Value: "..\"..?", ?, [...]
  aList:=List.Create();
  While Стр<>"" Do
    TearStr(Стр,"""");
    Имя:=TearStr(Стр,"""");
    TearStr(Стр,":");
    Стр:=Trim(Стр);
    If Length(Стр)=0 Then
      aList[Имя]:="";
      Break;
    EndIf;
    If Стр[1]="""" Then
      TearStr(Стр,"""");
      i:=0;
      While i<Length(Стр) Do
        i:=i+1;
        If Стр[i]="\" Then
          i:=i+1;
        ElseIf Стр[i]="""" Then
          Break;
        EndIf;
      EndDo;
      Знач:=Left(Стр,i-1);
      Стр:=Mid(Стр,i+1);
      Знач:=DecodeString(Знач,"JSON");
      TearStr(Стр,",");
    ElseIf Стр[1]="[" Then
      Знач:=ПолучитьЭлементJSON(Стр,"[");
      TearStr(Стр,",");
    Else
      Знач:=Trim(TearStr(Стр,","));
      If _And(Знач<>"",Знач[1]>="0",Знач[1]<="9") Then
        Знач:=Number(Знач);
      EndIf;
    EndIf;
    aList[Имя]:=Знач;
  EndDo;
  Exit aList;
EndFunction


Function ЗагрузитьПеременные(Стр)
  Сп:=List.Create();
  While Pos("=",Стр)>0 Do
    TearStr(Стр," ");
    Имя:=Trim(TearStr(Стр,"="));
    TearStr(Стр,"""");
    Значение:=TearStr(Стр,"""");
    Сп[Имя]:=DecodeXMLString(Значение);
  EndDo;
  Exit Сп;
EndFunction

Function ПолучитьЛокальныеПоступления(НачДата,КонДата)
  оМагазин:=Form.оМагазин.Value;
  оЮЛ:=оМагазин.ЮрЛицо;

  КДата:=КонДата+1;
  спТип:=List.Create(Enum.коПоступлениеТМЦ.ПоступлениеТМЦ,Enum.коПоступлениеТМЦ.ВнутреннееПеремещение);  
  ТЗ:="(зСтатус:=Doc.ПоступлениеТМЦ.@Status;Condition(зСтатус<>1);зДата:=Doc.ПоступлениеТМЦ.DocDate;Condition((зДата>=НачДата)And(зДата<КДата));
  |зДок:=Doc.ПоступлениеТМЦ;
  |зКО:=Doc.ПоступлениеТМЦ.КодОперации;
  |Condition(зКО IN спТип);  
  |зЮЛ:=Doc.ПоступлениеТМЦ.ЮрЛицо;
  |Condition(зЮЛ=оМагазин.ЮрЛицо);
  |зИНН:=Doc.ПоступлениеТМЦ.Контрагент.ИНН;
  |зНомерВх:=Doc.ПоступлениеТМЦ.НомерДокВходящий;
  |зДатаВх:=Doc.ПоступлениеТМЦ.ДатаДокВходящий;
  |зНомерВхСФ:=Doc.ПоступлениеТМЦ.НомерДокВходящийСФ;
  |зДатаВхСФ:=Doc.ПоступлениеТМЦ.ДатаДокВходящийСФ;
  |Group зДок;) UNION ALL (
  |зСтатус:=Doc.ПоступлениеПрочее.@Status;Condition(зСтатус<>1);зДата:=Doc.ПоступлениеПрочее.DocDate;Condition((зДата>=НачДата)And(зДата<КДата));
  |зДок:=Doc.ПоступлениеПрочее;
  |зЮЛ:=Doc.ПоступлениеПрочее.ЮрЛицо;
  |Condition(зЮЛ=оМагазин.ЮрЛицо);
  |зИНН:=Doc.ПоступлениеПрочее.Контрагент.ИНН;
  |зНомерВх:=Doc.ПоступлениеПрочее.НомерДокВходящий;
  |зДатаВх:=Doc.ПоступлениеПрочее.ДатаДокВходящий;
  |зНомерВхСФ:=Doc.ПоступлениеПрочее.НомерДокВходящийСФ;
  |зДатаВхСФ:=Doc.ПоступлениеПрочее.ДатаДокВходящийСФ;
  |Group зДок;)";
    
  З:=Query.Create();
  ТПоступления:=З.Execute(ТЗ,0);
  
  КДата:=КонДата+7;
  спТип:=List.Create(Enum.коВозвратПоставщику.ВозвратТМЦ,Enum.коВозвратПоставщику.ВнутреннееПеремещение);  
  ТЗ:="зСтатус:=Doc.ВозвратПоставщику.@Status;Condition(зСтатус<>1);зДата:=Doc.ВозвратПоставщику.DocDate;Condition((зДата>=НачДата)And(зДата<КДата));
  |зДок:=Doc.ВозвратПоставщику;
  |зКО:=Doc.ВозвратПоставщику.КодОперации;
  |Condition(зКО IN спТип);  
  |зЮЛ:=Doc.ВозвратПоставщику.ЮрЛицо;
  |Condition(зЮЛ=оМагазин.ЮрЛицо);
  |зДО:=Doc.ВозвратПоставщику.ДокОснование;
  |Group зДок;";
  З:=Query.Create();
  ТВозвраты:=З.Execute(ТЗ,0);
  
  ТПоступления.Sort("зДата+,зНомер+");
  ТПоступления.AddColumn("спВозвраты");
  ТПоступления.Select();
  While ТПоступления.Next() Do
    ТПоступления.зИНН:=TearStr((ТПоступления.зИНН),"/");
    While ТВозвраты.FindAndGoto(ТПоступления.зДок,,"зДО")>0 Do
      If IsEmpty(ТПоступления.спВозвраты) Then
        ТПоступления.спВозвраты:=List.Create();
      EndIf;
      ТПоступления.спВозвраты.Add(ТВозвраты.зДок);
      ТВозвраты.зДО:=0;
    EndDo;
  EndDo;
  З:=0;
  Exit ТПоступления;
EndFunction

Function ОбновитьЛокальноеПоступление(ТПоступления)
  оДокументы:=Form.оДокументы.Value;
  зДокЛок:=ТПоступления.зДок.Copy();
  оДокументы.Локальный:=зДокЛок;
  оДокументы.зДокЛок:=зДокЛок.DocNum+" от "+зДокЛок.DocDate;
  If not IsEmpty(ТПоступления.спВозвраты) Then
    оДокументы.спВозвраты:=ТПоступления.спВозвраты;
    If оДокументы.спВозвраты.Size()=1 Then
      оДокументы.зВзв:=оДокументы.спВозвраты[1].DocNum+" от "+оДокументы.спВозвраты[1].DocDate;
    Else
      оДокументы.зВзв:=""+оДокументы.спВозвраты.Size()+" возвратов";
    EndIf;
  EndIf;
EndFunction


Function ЗагрузитьДокументУПД(Стр,ByRef Ошибка,СпДокумент=0)
  оМагазин:=Form.оМагазин.Value;
  оЮЛ:=оМагазин.ЮрЛицо;
  ИННЮЛ:=оЮЛ.ИНН;
  ИННЮЛ:=TearStr(ИННЮЛ,"/");

  //Результат: КНД,Сумма,ПродавецИД,ПокупательИД,ПродавецИмя,ПродавецИНН,ПродавецКПП,ПродавецАдрес,ПродавецGLN,ДокНомер,ДокДата,СчФакНомер,СчФакДата,ТСтроки
  If СпДокумент=0 Then
    СпДокумент:=List.Create();
  EndIf;
  Стр:=ReformatXML(Стр,0b100011);
  While 1 Do
    //Формат: <Заголовок><Файл ИдФайл="..." ВерсФорм="..." ВерсПрог="...">
    If Pos("<?",Стр)<10 Then
      TearStr(Стр,"?>");
    EndIf;
    iNum:=Pos("<Файл",Стр);
    If (iNum=0)Or(iNum>10) Then
      Break;
    EndIf;
    TearStr(Стр,"<");
    Сп:=ЗагрузитьПеременные(TearStr(Стр,">"));
    If IsEmpty(Сп["ИдФайл"]) Then
      Break;
    EndIf;
    СпДокумент["ИдФайл"]:=Сп["ИдФайл"];
    TearStr(Стр,"<СвУчДокОбор");
    If Стр="" Then
      Break;
    EndIf;
    Сп:=ЗагрузитьПеременные(TearStr(Стр,">"));
    СпДокумент["ПродавецИД"]:=Сп["ИдОтпр"];
    СпДокумент["ПокупательИД"]:=Сп["ИдПол"];
    TearStr(Стр,"<Документ");
    If Стр="" Then
      Break;
    EndIf;
    Сп:=ЗагрузитьПеременные(TearStr(Стр,">"));
    СпДокумент["КНД"]:=Сп["КНД"];
    СпДокумент["ПоФактХЖ"]:=Сп["ПоФактХЖ"];
    СпДокумент["ДокДата"]:=Date(Сп["ДатаИнфПр"]+" "+Replace(Сп["ВремИнфПр"],".",":"));
    Стр0:=Стр;
    
    //Заголовок
    TearStr(Стр,"<СвСчФакт");
    If Стр="" Then
      Break;
    EndIf;
    Сп:=ЗагрузитьПеременные(TearStr(Стр,">"));
    СпДокумент["СчФакНомер"]:=Сп["НомерСчФ"];
    СпДокумент["СчФакДата"]:=Date(Сп["ДатаСчФ"]);
    
    Стр1:=Стр;
    TearStr(Стр1,"<ИспрСчФ");
    Сп:=ЗагрузитьПеременные(TearStr(Стр1,"</ИспрСчФ>"));
    If not IsEmpty(Date(Сп["ДефДатаИспрСчФ"])) Then
      СпДокумент["СчФакИсправлениеНомер"]:=Сп["ДефНомИспрСчФ"];
      СпДокумент["СчФакИсправлениеДата"]:=Date(Сп["ДефДатаИспрСчФ"]);
    EndIf;
    
    //Продавец
    Стр1:=Стр;
    TearStr(Стр1,"<СвПрод");
    Стр1:=TearStr(Стр1,"</СвПрод>");
    If Pos("<СвЮЛУч",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвЮЛУч");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвЮЛУч>"));
      СпДокумент["ПродавецИмя"]:=Сп["НаимОрг"];
      СпДокумент["ПродавецИНН"]:=Сп["ИННЮЛ"];
      СпДокумент["ПродавецКПП"]:=Сп["КПП"];
    ElseIf Pos("<СвФЛУч",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвФЛУч");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвФЛУч>"));
      СпДокумент["ПродавецИмя"]:=Сп["ФИО"];
      СпДокумент["ПродавецИНН"]:=Сп["ИННФЛ"];
      СпДокумент["ПродавецКПП"]:="";
    ElseIf Pos("<СвИП",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвИП");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвИП>"));
      СпДокумент["ПродавецИмя"]:=Сп["ФИО"];
      СпДокумент["ПродавецИНН"]:=Сп["ИННФЛ"];
      СпДокумент["ПродавецКПП"]:="";
    Else
      Break;
    EndIf;
    If Pos("<Адрес",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<Адрес");
      Стр2:=TearStr(Стр2,"</Адрес>");
      TearStr(Стр2,"<АдрРФ");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</АдрРФ>"));
      //<АдрРФ Индекс="..." КодРегион="..." Город="..." Улица="..." Дом="..."/>
      СпДокумент["ПродавецАдрес"]:=Сп["Индекс"]+","+Сп["Район"]+","+Сп["Город"]+","+Сп["НаселПункт"]+","+Сп["Улица"]+","+Сп["Дом"]+","+Сп["Корпус"];
    EndIf;
    
    //Покупатель
    Стр1:=Стр;
    TearStr(Стр1,"<СвПокуп");
    Стр1:=TearStr(Стр1,"</СвПокуп>");
    If Pos("<СвЮЛУч",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвЮЛУч");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвЮЛУч>"));
      If ИННЮЛ<>Сп["ИННЮЛ"] Then
        Ошибка:="Документ предназначен для другого юр. лица (ИНН: "+Сп["ИННЮЛ"]+")!";
        Exit 0;
      EndIf;
    ElseIf Pos("<СвФЛУч",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвФЛУч");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвФЛУч>"));
      If ИННЮЛ<>Сп["ИННФЛ"] Then
        Ошибка:="Документ предназначен для другого юр. лица (ИНН: "+Сп["ИННФЛ"]+")!";
        Exit 0;
      EndIf;
    ElseIf Pos("<СвИП",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвИП");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвИП>"));
      If ИННЮЛ<>Сп["ИННФЛ"] Then
        Ошибка:="Документ предназначен для другого юр. лица (ИНН: "+Сп["ИННФЛ"]+")!";
        Exit 0;
      EndIf;
    Else
      Break;
    EndIf;
    
    Стр1:=Стр;
    TearStr(Стр1,"<ДокПодтвОтгр");
    If Стр1="" Then
      Break;
    EndIf;
    Сп:=ЗагрузитьПеременные(TearStr(Стр1,"</ДокПодтвОтгр>"));
    СпДокумент["ДокНомер"]:=Сп["НомДокОтгр"];
    СпДокумент["ДокДата"]:=Date(Сп["ДатаДокОтгр"]);
    
    Стр1:=Стр;
    TearStr(Стр1,"<ИнфПолФХЖ1");
    If Стр1<>"" Then
      Стр1:=TearStr(Стр1,"</ИнфПолФХЖ1>");
      While Pos("<ТекстИнф",Стр1)>0 Do
        TearStr(Стр1,"<ТекстИнф");
        Сп:=ЗагрузитьПеременные(TearStr(Стр1,"</ТекстИнф>"));
        If Сп["Идентиф"]="номер_накладной" Then
          СпДокумент["ДокНомер"]:=Сп["Значен"];
        ElseIf Сп["Идентиф"]="дата_накладной" Then
          СпДокумент["ДокДата"]:=Date(Сп["Значен"]);
        ElseIf Сп["Идентиф"]="GLN_поставщика" Then
          СпДокумент["ПродавецGLN"]:=Сп["Значен"];
        EndIf;
      EndDo;
    EndIf;
    
    СпДокумент["Сумма"]:=0;
    //Товары
    ТСтроки:=Tab.Create("Наименование,Артикул,Штрихкод,ОКЕИ,Количество,Цена,Сумма,СтавкаНДС,спМаркиУпаковок,спМаркиЕдиниц,ФлМаркиГотовы");
    СпДокумент["ТСтроки"]:=ТСтроки;
    Стр:=Стр0;
    TearStr(Стр,"<ТаблСчФакт");
    Стр:=TearStr(Стр,"</ТаблСчФакт>");
    If Стр="" Then
      Break;
    EndIf;
    While Pos("<СведТов",Стр)>0 Do
      TearStr(Стр,"<СведТов");
      Стр1:=TearStr(Стр,"</СведТов>");
      Стр2:=TearStr(Стр1,">");
      Сп:=ЗагрузитьПеременные(Стр2);
      Наименование:=Сп["НаимТов"];
      ОКЕИ:=Сп["ОКЕИ_Тов"];
      Количество:=Number(Сп["КолТов"]);
      Сумма:=Number(Сп["СтТовУчНал"]);
      Цена:=Round(Сумма/Количество,2);
      СтавкаНДС:=Сп["НалСт"];
      If (СтавкаНДС="20%")Or(СтавкаНДС="20/120") Then
        СтавкаНДС:=Enum.СтавкиНДС.НДС20;
      ElseIf (СтавкаНДС="18%")Or(СтавкаНДС="18/118") Then
        СтавкаНДС:=Enum.СтавкиНДС.НДС18;
      ElseIf (СтавкаНДС="10%")Or(СтавкаНДС="10/110") Then
        СтавкаНДС:=Enum.СтавкиНДС.НДС10;
      ElseIf СтавкаНДС="0%" Then
        СтавкаНДС:=Enum.СтавкиНДС.НДС0;
      ElseIf СтавкаНДС="без НДС" Then
        СтавкаНДС:=Enum.СтавкиНДС.БезНДС;
      Else
        //"НДС исчисляется налоговым агентом"
        СтавкаНДС:=Enum.СтавкиНДС.НДС20;
      EndIf;
      //Штрихкод,МаркиУпаковок,МаркиЕдиниц
      СпМаркиУпаковок:=List.Create();
      СпМаркиЕдиниц:=List.Create();
      Артикул:="";
      Стр2:=Стр1;
      TearStr(Стр2,"<ДопСведТов");
      If Стр2<>"" Then
        Сп:=ЗагрузитьПеременные(TearStr(Стр2,">"));
        Артикул:=Сп["АртикулТов"];
        Стр2:=TearStr(Стр1,"</ДопСведТов>");
        TearStr(Стр2,"<НомСредИдентТов>");
        Стр2:=TearStr(Стр2,"</НомСредИдентТов>");
        If Pos("<КИЗ>",Стр2)>0 Then
          //СпМаркиЕдиниц
          While Стр2<>"" Do
            TearStr(Стр2,"<КИЗ>");
            Стр3:=DecodeXMLString(Trim(TearStr(Стр2,"</КИЗ>")));
            If Стр3<>"" Then
              СпМаркиЕдиниц.Add(Стр3);
            EndIf;
          EndDo;
        ElseIf Pos("<НомУпак>",Стр2)>0 Then
          //СпМаркиУпаковок
          While Стр2<>"" Do
            TearStr(Стр2,"<НомУпак>");
            Стр3:=DecodeXMLString(Trim(TearStr(Стр2,"</НомУпак>")));
            If Стр3<>"" Then
              СпМаркиУпаковок.Add(Стр3);
            EndIf;
          EndDo;
        EndIf;
      EndIf;
      Штрихкод:="";
      While Стр1<>"" Do
        TearStr(Стр1,"<ИнфПолФХЖ2");
        Сп:=ЗагрузитьПеременные(TearStr(Стр1,"</ИнфПолФХЖ2>"));
        If Сп["Идентиф"]="штрихкод" Then
          Штрихкод:=Сп["Значен"];
        ElseIf Сп["Идентиф"]="вложенность" Then
          Чл:=Number(Сп["Значен"]);
          Количество:=Количество*?(Чл=0,1,Чл);
          Цена:=Round(Сумма/Количество,2);
        EndIf;
      EndDo;
      ТСтроки.AddLine("Наименование,Артикул,ОКЕИ,Штрихкод,Количество,Цена,Сумма,СтавкаНДС,спМаркиУпаковок,спМаркиЕдиниц,ФлМаркиГотовы",
        Наименование,Артикул,ОКЕИ,Штрихкод,Количество,Цена,Сумма,СтавкаНДС,СпМаркиУпаковок,СпМаркиЕдиниц,0);
    EndDo;//По строкам
    СпДокумент["Сумма"]:=ТСтроки.Sum("Сумма");
    Exit СпДокумент;
  EndDo;  
  Ошибка:="Документ имеет неверный формат!";
  Exit 0;
EndFunction

Function ОбновитьТаблицы(флФорс=0,ИзФайлов=0)
  оМагазин:=Form.оМагазин.Value;
  оТоварнаяГруппа:=Form.оТоварнаяГруппа.Value;
  оДокументы:=Form.оДокументы.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  
  If оМагазин.Selected()=0 Then
    If флФорс=1 Then
      Box("Необходимо выбрать магазин!",Q_STOP);
    EndIf;
    Exit 0;
  EndIf;
  If ИзФайлов=1 Then
    спТипыДокументов:=List.Create();
    спТипыДокументов["1115131"]:="УПД";
  
    спИконкиДокументов:=List.Create();
    спИконкиДокументов["1115131"]:=279;
    
    Сп:=0;
    If not OpenFileDialog(Сп,"Выберите файлы поступлений УПД в формате xml","Файлы xml (*.xml)|*.xml",2) Then
      Exit 1;
    EndIf;
    ФлОшибки:=0;
    оДокументы.Lock();
    Try
      If оДокументы.Size()>0 Then
        If AskQuestion("Очистить текущий список документов перед загрузкой из файла?",Q_QUESTION+Q_YESNO,R_YES)=R_YES Then
          оДокументы.ClearLines();
        EndIf;
      EndIf;
    
      НачДата2:=0;
      КонДата2:=0;
      For i:=1 To Сп.Size() Do
        Файл:=Сп[i];
        Try
          Стр:=FileToString(Файл,0);
        Except
          Message("Невозможно прочитать файл "+Файл,"!");
          ФлОшибки:=1;
          Continue;
        EndTry;
        If StringTypeStr(Стр)="ANSI" Then
          If _Or(pos("""utf-16",Стр)>0,pos("""UTF-16",Стр)>0) Then
            Стр:=TranslateFrom(Стр,1200);
          ElseIf _Or(pos("""utf-8",Стр)>0,pos(ANSI(Chr($3C,1)+Chr($D0,1)+Chr($A4,1)+Chr($D0,1)+Chr($B0,1)+Chr($D0,1)+Chr($B9,1)+Chr($D0,1)+Chr($BB,1)),Стр)>0) Then
            Стр:=TranslateFrom(Стр,65001);
          EndIf;
        EndIf;
        СтрОшибка:="";
        СпДокумент:=ЗагрузитьДокументУПД(Стр,СтрОшибка);
        //КНД,ПродавецИмя,ПродавецИНН,ПродавецКПП,ПродавецАдрес,ПродавецGLN,ДокНомер,ДокДата,СчФакНомер,СчФакДата,Сумма,Строки
        If IsEmpty(СпДокумент) Then
          Message(СтрОшибка,"!");
          ФлОшибки:=1;
          Continue;
        EndIf;
        аДата:=СпДокумент["ДокДата"];
        If НачДата2=0 Then
          НачДата2:=аДата-7;
        Else
          НачДата2:=Min(аДата-7,НачДата2);
        EndIf;
        If КонДата2=0 Then
          КонДата2:=аДата+7;
        Else
          КонДата2:=Min(аДата+7,КонДата2);
        EndIf;
        
        аТип:=спТипыДокументов[СпДокумент["КНД"]];
        аТип:=?(IsEmpty(аТип),СпДокумент["КНД"],аТип);
        аСтатус:="Из файла";
        If оДокументы.FindAndGoto(СпДокумент["ДокНомер"]+" от "+аДата,,"зДок")>0 Then
          Message("Документ "+СпДокумент["ДокНомер"]+" от "+аДата+" пропущен, так как уже присутствует в таблице!","I");
          Continue;
        EndIf;
        ТСтроки:=СпДокумент["ТСтроки"];
        СтрЗагрузить:="";
        ТСтроки.Select();
        While ТСтроки.Next() Do
          If ТСтроки.ФлМаркиГотовы=0 Then
            СтрЗагрузить:="Марки";
            Break;
          EndIf;
        EndDo;
        
        оДокументы.AddLine("Идентификатор,зКонтрагент,зДок,зТип,зСтатус,Загрузить,Сумма,СпДокумент","",СпДокумент["ПродавецИмя"]+", "+СпДокумент["ПродавецИНН"]+"/"+
          СпДокумент["ПродавецКПП"],СпДокумент["ДокНомер"]+" от "+аДата,аТип,аСтатус,СтрЗагрузить,СпДокумент["Сумма"],СпДокумент);
        аИконка:=спИконкиДокументов[СпДокумент["КНД"]];
        аИконка:=?(IsEmpty(аИконка),122,аИконка);
        оДокументы.Icon(оДокументы.CurLine,"Иконка",аИконка);
      EndDo;
      
      ТПоступления:=ПолучитьЛокальныеПоступления(НачДата2,Max(КонДата2,Date()));
      оДокументы.Select();
      While оДокументы.Next() Do
        СпДокумент:=оДокументы.СпДокумент;
        If IsEmpty(СпДокумент) Then
          Continue;
        EndIf;
        пИНН:=СпДокумент["ПродавецИНН"];
        пИНН:=TearStr(пИНН,"/");        
        
        ТПоступления.CurLine:=0;
        If ТПоступления.LocateAndGoto("зНомерВх,зИНН",СпДокумент["ДокНомер"],пИНН)>0 Then //Поиск по вх. номеру и ИНН контрагента
          ОбновитьЛокальноеПоступление(ТПоступления);
        ElseIf ТПоступления.LocateAndGoto("зНомерВх,зДатаВх",СпДокумент["ДокНомер"],СпДокумент["ДокДата"])>0 Then //Поиск по вх. номеру и дате
          ОбновитьЛокальноеПоступление(ТПоступления);
        EndIf;
      EndDo;
    Finally
      оДокументы.UnLock();
    EndTry;
    If ФлОшибки Then
      Box("Некоторые документы не удалось загрузить в список!",Q_WARNING);
    EndIf;
    Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",1,оДокументы.Size());
    
    Form.bPanelClose.SetFocus();
    Exit 1;
  EndIf;
  
  //If оТоварнаяГруппа.Selected()=0 Then
  //  If флФорс=1 Then
  //    Box("Необходимо выбрать товарную группу!",Q_STOP);
  //  EndIf;
  //  Exit 0;
  //EndIf;
  //If IsEmpty(Form.пТекущийСертификат.Value) Then
  //  If флФорс=1 Then
  //    Box("Для магазина не выбран текущий сертификат!",Q_STOP);
  //  EndIf;
  //  Exit 0;
  //EndIf;
  
  If not IsEmpty(оМагазин.ПутьДрайвераЭДО) Then
    If спВнешПровайдерЭДО["Инициализирован"]=0 Then
      Box("Драйвер провайдера ЭДО найходится в процессе инициализации, попробуйте выполнить эту функцию позднее!",Q_STOP);
      Exit 0;
    ElseIf спВнешПровайдерЭДО["Инициализирован"]<>1 Then
      Box("Невозможно подключение к драйверу ЭДО!",Q_STOP);
      Exit 0;
    EndIf;
    спДрайвер:=спВнешПровайдерЭДО["спДрайвер"];
  
    If IsEmpty(спДрайвер["МодульДрайвера"]) Then
      Box("Драйвер провайдера ЭДО не было инициализирован!",Q_STOP);
      Exit 0;
    EndIf;
    
    спДрайвер["ДрайверШифрования"]:=локДрайверПодписи;
    спДрайвер["СД_НачДата"]:=НачДата;
    спДрайвер["СД_КонДата"]:=КонДата;
    спДрайвер["СД_МаксимумСтрокВОтвете"]:=200;
    спДрайвер["СД_ТипДокумента"]:=0;
    //TODO: спДрайвер["СД_ТипДокумента"]
    спДрайвер["СД_СостояниеДокумента"]:=0;
    Стр:=Trim(ExecuteFunction("DocumentsList",спДрайвер["МодульДрайвера"],спДрайвер));
    If Стр<>"" Then
      спДрайвер["ДрайверШифрования"]:=0;
      Box("Ошибка при загрузке информации о документах: "+Стр+"!",Q_STOP);
      Exit 0;
    EndIf;
    спДрайвер["ДрайверШифрования"]:=0;
    СпДокументы:=спДрайвер["Документы"];
    спТипыДокументов:=List.Create("Поступление","Реализация","Заявка","Возврат поставщику","Возврат от покупателя","< Неизвестный >");
    спСтатусыДокументов:=List.Create("не отправлен","ожидает обработку","ожидает прием","принят","отменен","ошибка","???");
    спИконкиДокументов:=List.Create(279,230,146,247,231,122);
    ТПоступления:=ПолучитьЛокальныеПоступления(НачДата-7,КонДата+7);
    
    ФлОшибки:=0;
    оДокументы.Lock();
    Try
      оДокументы.ClearLines();
      For i:=1 To СпДокументы.Size() Do
        //СпДокумент: Идентификатор,Тип,Статус,Сумма,Комментарий,ПродавецИмя,ПродавецИНН,ПродавецКПП,ПродавецАдрес,ПродавецGLN,ДокНомер,ДокДата,СчФакНомер,СчФакДата,ТСтроки
        //  ТСтроки (могут быть опущены): "Наименование,Артикул,Штрихкод,ОКЕИ,Количество,Цена,Сумма,СтавкаНДС,спМаркиУпаковок,спМаркиЕдиниц,ФлМаркиГотовы"
        СпДокумент:=СпДокументы[i];
        If IsEmpty(СпДокумент["ТСтроки"]) Then
          СтрЗагрузить:="Строки,Марки";
        Else
          СтрЗагрузить:="";
          ТСтроки:=СпДокумент["ТСтроки"];
          ТСтроки.Select();
          While ТСтроки.Next() Do
            If ТСтроки.ФлМаркиГотовы=1 Then
              Continue;
            EndIf;
            СтрЗагрузить:="Марки";
            Break;
          EndDo;
        EndIf;
        пТип:=спТипыДокументов[СпДокумент["Тип"]];
        If IsEmpty(пТип) Then
          пТип:=СпДокумент["Тип"];
        EndIf;
        оДокументы.AddLine("Идентификатор,зКонтрагент,зДок,зТип,зСтатус,Загрузить,Сумма,СпДокумент",СпДокумент["Идентификатор"],СпДокумент["ПродавецИмя"]+", "+СпДокумент["ПродавецИНН"]+"/"+
          СпДокумент["ПродавецКПП"],СпДокумент["ДокНомер"]+" от "+СпДокумент["ДокДата"],спТипыДокументов[СпДокумент["Тип"]],спСтатусыДокументов[СпДокумент["Статус"]],СтрЗагрузить,СпДокумент["Сумма"],СпДокумент);
        аИконка:=спИконкиДокументов[СпДокумент["Тип"]];
        аИконка:=?(IsEmpty(аИконка),122,аИконка);
        оДокументы.Icon(оДокументы.CurLine,"Иконка",аИконка);
        
        ТПоступления.CurLine:=0;
        If ТПоступления.LocateAndGoto("зНомерВх,зИНН",СпДокумент["ДокНомер"],СпДокумент["ПродавецИНН"])>0 Then //Поиск по вх. номеру и ИНН контрагента
          ОбновитьЛокальноеПоступление(ТПоступления);
        ElseIf ТПоступления.LocateAndGoto("зНомерВхСФ,зИНН",СпДокумент["ДокНомер"],СпДокумент["ПродавецИНН"])>0 Then //Поиск по вх. номеру сч/ф и ИНН контрагента
          ОбновитьЛокальноеПоступление(ТПоступления);
        ElseIf ТПоступления.LocateAndGoto("зНомерВх,зДатаВх",СпДокумент["ДокНомер"],СпДокумент["ДокДата"])>0 Then //Поиск по вх. номеру и дате
          ОбновитьЛокальноеПоступление(ТПоступления);
        ElseIf ТПоступления.LocateAndGoto("зНомерВхСФ,зДатаВх",СпДокумент["ДокНомер"],СпДокумент["ДокДата"])>0 Then //Поиск по вх. номеру и дате сч/ф
          ОбновитьЛокальноеПоступление(ТПоступления);
        EndIf;
      EndDo;
    Finally
      оДокументы.UnLock();
    EndTry;
    If ФлОшибки Then
      Box("Некоторые документы не удалось загрузить в список!",Q_WARNING);
    EndIf;
    Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",1,оДокументы.Size());
    
    Form.bPanelClose.SetFocus();
    Exit 1;
  EndIf;
  
  Box("В магазине не настроен провайдер ЭДО, информация будет получена из ГИС МТ, но последний не дает возможности запросить свойства документа, кроме того, в списке будут только принятиые или отклоненные документы, "+
    "поэтому, информация по документам будет предоставлена только для справки! Для корректной работы с документами, необходимо настроить провайдера ЭДО или загрузить доументы из внешних файлов XML",Q_WARNING);
      
  //Запрос по документам
  //Доп. фильтры: documentType: LP_SHIP_RECEIPT (LP_SHIP_RECEIPT_CSV, LP_SHIP_RECEIPT_XML) -- поступления (не используется)
  //                            LP_RETURN (LP_RETURN_CSV, LP_RETURN_XML) -- возврат в оборот
  //                            LP_ACCEPT_GOODS (LP_ACCEPT_GOODS_CSV, LP_ACCEPT_GOODS_XML) -- принятие поступления
  //                            LP_CANCEL_SHIPMENT -- отмена принятия
  //                            LP_INTRODUCE_OST (LP_INTRODUCE_OST_CSV, LP_INTRODUCE_OST_XML) -- оприходования
  //                            LK_RECEIPT (LK_RECEIPT_CSV, LK_RECEIPT_XML) -- списание марок
  //                            RECEIPT, RECEIPT_RETURN -- розничные чеки
  //                            WRITE_OFF -- списание (только для табака)
  //                            UNIVERSAL_TRANSFER_DOCUMENT -- поступления УПД
  //                            UNIVERSAL_TRANSFER_DOCUMENT_FIX -- поступления УПД, исправление
  //                            UNIVERSAL_CORRECTION_DOCUMENT -- поступления УПД, корректировка
  //                            UNIVERSAL_CORRECTION_DOCUMENT_FIX -- поступления УПД, исправление корректировки
  //                            UNIVERSAL_CANCEL_DOCUMENT -- отказ от УПД
  //limit: (20..10000): всегда 200
  //pg: товарная группа, всегда задана
  //documentStatus: IN_PROGRESS -- проверяется
  //        CHECKED_OK -- обработан
  //        CHECKED_NOT_OK -- обработан с ошибками
  //        PROCESSING_ERROR -- техническая ошибка
  //        ACCEPTED -- принят
  //        CANCELLED -- отменен
  //        WAIT_ACCEPTANCE -- ожидает приёмку
  //        PARSE_ERROR -- обработан с ошибками
  //        WAIT_PARTICIPANT_REGISTRATION -- ожидает регистрации участника в ГИС МТ
  //        WAIT_FOR_CONTINUATION -- ожидает продолжения обработки документа
  Стр2:="/api/v4/true-api/doc/list?dateFrom="+ДатаЗапроса(НачДата)+"&dateTo="+ДатаЗапроса(КонДата)+"&pg="+оТоварнаяГруппа.ВнешнееНаименование+"&limit=200";
  Стр:="";
  СтрОшибка:=ВыполнитьЗапросГИСМТ(локДрайверПодписи,Стр2,Стр,0);
  If Not IsEmpty(СтрОшибка) Then
    СтрОшибка:=БыстроеФорматированиеJSON(СтрОшибка);
    Тч:=Text.Create();
    Тч.AddString(СтрОшибка);
    Тч.Show("Ошибка получения списка документов",,1);
    Exit;
  EndIf;
  оДокументы.ClearLines();
  ТПоступления:=ПолучитьЛокальныеПоступления(НачДата,КонДата);
  
  спТипыДокументов:=List.Create();
  спТипыДокументов["LP_RETURN"]:="Возврат в оборот";
  спТипыДокументов["LP_RETURN_CSV"]:="Возврат в оборот";
  спТипыДокументов["LP_RETURN_XML"]:="Возврат в оборот";
  спТипыДокументов["LP_ACCEPT_GOODS"]:="Подтверждение";
  спТипыДокументов["LP_ACCEPT_GOODS_CSV"]:="Подтверждение";
  спТипыДокументов["LP_ACCEPT_GOODS_XML"]:="Подтверждение";
  спТипыДокументов["LP_CANCEL_SHIPMENT"]:="Отказ";
  спТипыДокументов["LP_INTRODUCE_OST"]:="Оприходование";
  спТипыДокументов["LP_INTRODUCE_OST_CSV"]:="Оприходование";
  спТипыДокументов["LP_INTRODUCE_OST_XML"]:="Оприходование";
  спТипыДокументов["LK_RECEIPT"]:="Списание";
  спТипыДокументов["LK_RECEIPT_CSV"]:="Списание";
  спТипыДокументов["LK_RECEIPT_XML"]:="Списание";
  спТипыДокументов["WRITE_OFF"]:="Списание";
  спТипыДокументов["RECEIPT"]:="Розн. продажа";
  спТипыДокументов["RECEIPT_RETURN"]:="Розн. возврат";
  спТипыДокументов["UNIVERSAL_TRANSFER_DOCUMENT"]:="УПД";
  спТипыДокументов["UNIVERSAL_TRANSFER_DOCUMENT_FIX"]:="УПД, исправ.";
  спТипыДокументов["UNIVERSAL_CORRECTION_DOCUMENT"]:="УПД коррекц.";
  спТипыДокументов["UNIVERSAL_CORRECTION_DOCUMENT_FIX"]:="УПД коррекц. исправ.";
  спТипыДокументов["UNIVERSAL_CANCEL_DOCUMENT"]:="Отказ от УПД";
  
  спИконкиДокументов:=List.Create();
  спИконкиДокументов["RECEIPT"]:=230;
  спИконкиДокументов["RECEIPT_RETURN"]:=230;
  спИконкиДокументов["UNIVERSAL_TRANSFER_DOCUMENT"]:=279;
  спИконкиДокументов["UNIVERSAL_TRANSFER_DOCUMENT_FIX"]:=279;
  спИконкиДокументов["UNIVERSAL_CORRECTION_DOCUMENT"]:=279;
  спИконкиДокументов["UNIVERSAL_CORRECTION_DOCUMENT_FIX"]:=279;
  спИконкиДокументов["UNIVERSAL_CANCEL_DOCUMENT"]:=279;
  
  спСтатусыДокументов:=List.Create();
  спСтатусыДокументов["IN_PROGRESS"]:="проверяется";
  спСтатусыДокументов["CHECKED_OK"]:="обработан";
  спСтатусыДокументов["CHECKED_NOT_OK"]:="ошибка";
  спСтатусыДокументов["PROCESSING_ERROR"]:="тех. ошибка";
  спСтатусыДокументов["ACCEPTED"]:="принят";
  спСтатусыДокументов["CANCELLED"]:="отменен";
  спСтатусыДокументов["WAIT_ACCEPTANCE"]:="ожидает прием";
  спСтатусыДокументов["PARSE_ERROR"]:="ошибка";
  спСтатусыДокументов["WAIT_PARTICIPANT_REGISTRATION"]:="участник не в ГИС МТ";
  спСтатусыДокументов["WAIT_FOR_CONTINUATION"]:="ожидает обработку";
  
  ФлЧастьСписка:=Pos("],""nextPage"":true}",Стр)>0;
  оДокументы.Lock();
  Try
    TearStr(Стр,"""results"":[");
    While Стр<>"" Do
      Стр2:=ПолучитьЭлементJSON(Стр);
      Сп:=ЗагрузитьМассивJSON(Стр2);
      If IsEmpty(Сп["number"]) Then
        Continue;
      EndIf;
      аДата:=Left(Сп["docDate"],10);//2020-07-02
      аДата:=Date(Mid(аДата,9,2)+"."+Mid(аДата,6,2)+"."+Mid(аДата,1,4));
      аТип:=спТипыДокументов[Сп["type"]];
      аТип:=?(IsEmpty(аТип),Сп["type"],аТип);
      аСтатус:=спСтатусыДокументов[Сп["status"]];
      аСтатус:=?(IsEmpty(аСтатус),Сп["status"],аСтатус);
      оДокументы.AddLine("Идентификатор,зКонтрагент,зДок,зТип,зСтатус,Загрузить",Сп["number"],Сп["senderName"]+", "+Сп["senderInn"],Сп["invoiceNumber"]+" от "+аДата,аТип,аСтатус,
        "Строки,Марки");
      аИконка:=спИконкиДокументов[Сп["type"]];
      аИконка:=?(IsEmpty(аИконка),122,аИконка);
      оДокументы.Icon(оДокументы.CurLine,"Иконка",аИконка);
      
      ВхНомер:=Сп["invoiceNumber"];
      ВхДата:=аДата;
      ВхИНН:=Сп["senderInn"];
      //Поиск локального
      ТПоступления.CurLine:=0;
      If ТПоступления.LocateAndGoto("зНомерВх,зИНН",ВхНомер,ВхИНН)>0 Then //Поиск по вх. номеру и ИНН контрагента
        ОбновитьЛокальноеПоступление(ТПоступления);
      ElseIf ТПоступления.LocateAndGoto("зНомерВх,зДатаВх",ВхНомер,ВхДата)>0 Then //Поиск по вх. номеру и дате
        ОбновитьЛокальноеПоступление(ТПоступления);
      EndIf;
    EndDo;
    Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",1,оДокументы.Size());
  Finally
    оДокументы.UnLock();
  EndTry;
  If ФлЧастьСписка Then
    Box("В список попали не все документы выбранного периода! Выберите меньший период, чтобы получить полный список!",Q_WARNING);
  EndIf;
  
  Form.bPanelClose.SetFocus();
  Exit 1;
EndFunction

Function УдалитьКрипточасть(СтрМарка,ТоварнаяГруппа);
  If Lowercase(ТоварнаяГруппа.ВнешнееНаименование)="tobacco" Then
    If Length(СтрМарка)=29 Then //Сигареты
      Exit Left(СтрМарка,21);
    ElseIf Length(СтрМарка)=25 Then //Сигареты, частичная крипточасть
      Exit Left(СтрМарка,21);
    ElseIf Length(СтрМарка)=35 Then //Сигареты, блок
      Exit Left(СтрМарка,25);
    EndIf;
  Else
    If Pos(Chr(29),СтрМарка)>0 Then
      Exit Left(СтрМарка,Pos(Chr(29),СтрМарка)-1);
    EndIf;
  EndIf;
  Exit СтрМарка;
EndFunction


Function ОчиститьСкобки(СтМарка)
  //(01)04600439000204(21)??????"
  If Length(СтМарка)>21 Then
    If (СтМарка[1]="(")And(СтМарка[4]=")") Then
      СтМарка:=Mid(СтМарка,2,2)+Mid(СтМарка,5);
    EndIf;
    If (СтМарка[17]="(")And(СтМарка[20]=")") Then
      СтМарка:=Left(СтМарка,16)+Mid(СтМарка,18,2)+Mid(СтМарка,21);
    EndIf;
  EndIf;
  Exit СтМарка;
EndFunction


Function ЗагрузитьМаркиТекущегоДокумента(ФлТихо=0,ByRef Ошибка="")
  Ошибка:="";
  оДокументы:=Form.оДокументы.Value;
  If оДокументы.SelectedLine=0 Then
    Exit 0;
  EndIf;
  Try
    If Form.оТоварнаяГруппа.Value.Selected()=0 Then
      Ошибка:="Не выбрана товарная группа ГИС МТ документа!";
      Exit 0;
    EndIf;
    If IsEmpty(локДрайверПодписи["МодульДрайвера"]) Then
      Ошибка:="Драйвер подписи не работает или установлен некорректно! Обратитесь к администратору!";
      Exit 0;
    EndIf;
    
    оДокументы.CurLine:=оДокументы.SelectedLine;
    ФлЗапрос:=0;
    СпДокумент:=оДокументы.СпДокумент;
    ТСтроки:=СпДокумент["ТСтроки"];
    ТСтроки.Select();
    While ТСтроки.Next() Do
      If ТСтроки.ФлМаркиГотовы=1 Then
        Continue;
      EndIf;
      
      СпСтар:=ТСтроки.спМаркиЕдиниц.Copy();
      If ТСтроки.спМаркиУпаковок.Size()>0 Then
        //Запрос штучных марок из марок упаковок, марки должны быть без крипточасти
        Form.StatusText("Запрос марок единиц: "+ТСтроки.Наименование);
        СтрТело:="[";
        For iLoop:=1 To ТСтроки.спМаркиУпаковок.Size() Do
          СтрТело:=СтрТело+?(iLoop>1,",")+""""+EncodeString(УдалитьКрипточасть(ТСтроки.спМаркиУпаковок[iLoop],Form.оТоварнаяГруппа.Value),"JSON")+"""";
        EndDo;
        СтрТело:=СтрТело+"]";
        СтрОшибка:=ВыполнитьЗапросГИСМТ(локДрайверПодписи,"/api/v3/true-api/cises/aggregated/list?pg="+Form.оТоварнаяГруппа.Value.ВнешнееНаименование,СтрТело,0);
        If Not IsEmpty(СтрОшибка) Then
          Ошибка:="Ошибка при запросе штучных марки из марки упаковки: "+СтрОшибка+"!";
          Exit 0;
        EndIf;
        СтУпаковка:=ТСтроки.спМаркиУпаковок[1];
        //{
        //"010460043994001221?????\"\"":{
        //"00000046235046T??????":[],
        //"00000046235046G??????":[],
        //"00000046235046u??????":[],
        //"00000046235046o??????":[],
        //"00000046235046L??????":[],
        //"000000462350469??????":[],
        //"00000046235046A??????":[],
        //"00000046235046i??????":[],
        //"00000046235046T??????":[],
        //"00000046235046R??????":[]},
        //"...":{...}}
        TearStr(СтрТело,_NEWLINE+_NEWLINE);
        aTree:=глЗагрузитьДеревоJSON(СтрТело);
        For j:=1 To aTree.Size() Do
          If TypeStr(aTree.ByIndex(j))="TREE.BRANCH" Then
            aBranch:=aTree.ByIndex(j);
            СтУпаковка:=ОчиститьСкобки(aBranch.Name);
            For i:=1 To aBranch.Size() Do
              ТСтроки.спМаркиЕдиниц.Add(aBranch.ByIndex(i).Name,СтУпаковка);
            EndDo;
          EndIf;
        EndDo;
      EndIf;
      
      If СпСтар.Size()>0 Then
        //Запрос марок упаковок из штучных марок, марки должны быть без крипточасти
        Form.StatusText("Запрос марок упаковки: "+ТСтроки.Наименование);
        СтрТело:="{""cis"":"""+EncodeString(УдалитьКрипточасть(СпСтар[1],Form.оТоварнаяГруппа.Value),"JSON")+"""}";
        СтрОшибка:=ВыполнитьЗапросГИСМТ(локДрайверПодписи,"/api/v3/true-api/cises/history/list",СтрТело,0);
        If Not IsEmpty(СтрОшибка) Then
          ТСтроки.спМаркиЕдиниц:=СпСтар;
          Ошибка:="Ошибка при запросе марки упаковки: "+СтрОшибка+"!";
          Exit 0;
        EndIf;
        //{"cisAggregation":[{
        //"cis":"00000046247131%??????",
        //"operationType":"AGGREGATION",
        //"operationDate":"2022-02-22T21:11:21.247Z",
        //"packageType":"UNIT",
        //"extendedPackageType":"UNIT",
        //"parent":"(01)04600439000204(21)>l-SZM\""},...]}
        СтУпаковка:="";
        While Pos("""parent"":",СтрТело)>0 Do
          TearStr(СтрТело,"""parent"":");
          TearStr(СтрТело,"""");
          СтУпаковка:=ОчиститьСкобки(DecodeString(TearStr(СтрТело,"""}"),"JSON"));
        EndDo;
        For i:=1 To СпСтар.Size() Do//Первые СпСтар.Size() марок
          СтрМарка:=УдалитьКрипточасть(ТСтроки.спМаркиЕдиниц[i],Form.оТоварнаяГруппа.Value);
          ТСтроки.спМаркиЕдиниц.Set(i,СтрМарка,СтУпаковка);
        EndDo;
        ТСтроки.спМаркиУпаковок.Add(СтУпаковка);
      EndIf;
      ТСтроки.ФлМаркиГотовы:=1;
    EndDo;
    
    If not ФлТихо Then
      Box("Запрос марок для выбранной накладной выполнен удачно!",Q_INFORMATION);
    EndIf;
    оДокументы.Загрузить:="";
    Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",оДокументы.CurLine,оДокументы.CurLine);
    Exit 1;
  Finally
    If (not ФлТихо)And(Ошибка<>"") Then
      Box("Невозможно обновить марки в выбранном документе, ошибка: "+Ошибка+"!",Q_STOP);
    EndIf;
  EndTry;
  Exit 0;
EndFunction

Function ВывестиОтчетПоДокументу()
  оДокументы:=Form.оДокументы.Value;
  If оДокументы.SelectedLine=0 Then
    Exit;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  СпДокумент:=оДокументы.СпДокумент;
  If _Or(IsEmpty(СпДокумент),IsEmpty(СпДокумент["ТСтроки"])) Then
    Ошибка:="";
    If not ЗагрузитьТекущийДокумент(1,Ошибка) Then
      Box("Невозможно загрузить текущий документ ("+Ошибка+")!",Q_STOP);
      Exit;
    EndIf;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  СпДокумент:=оДокументы.СпДокумент;
  
  Т:=Table.Create();
  Т.SetSourceName("Документ");
  оЗагол:="Входящий документ № "+СпДокумент["ДокНомер"]+" от "+СпДокумент["ДокДата"];
  пНомДата:=СпДокумент["ДокНомер"]+" от "+СпДокумент["ДокДата"];
  пНомДатаСФ:=СпДокумент["СчФакНомер"]+" от "+СпДокумент["СчФакДата"];
  пКНД:=СпДокумент["КНД"];
  пКонтрагент:=СпДокумент["ПродавецИмя"];
  пИННКПП:=СпДокумент["ПродавецИНН"]+"/"+СпДокумент["ПродавецКПП"];
  пАдрес:=СпДокумент["ПродавецАдрес"];
  пКодGLN:=СпДокумент["ПродавецGLN"];
  Т.CopyByX("v1",1);
  
  пН:=0;
  ТСтроки:=СпДокумент["ТСтроки"];
  ТСтроки.Select();
  While ТСтроки.Next() Do
    пН:=пН+1;
    пНоменклатура:=ТСтроки.Наименование;
    пАртикул:=ТСтроки.Артикул;
    пШтрихкод:=ТСтроки.Штрихкод;
    пКолВо:=глФРМЧл(ТСтроки.Количество);
    пЦена:=глФРМ(ТСтроки.Цена);
    пСумма:=глФРМ(ТСтроки.Сумма);
    пСтавкаНДС:=ТСтроки.СтавкаНДС;
    спМарки:=List.Create();
    спМарки.SetByName("ГИСМТ",1);
    спМарки.SetByName("ПоказатьМарки",1);
    спМарки.SetByName("Марки",ТСтроки.спМаркиЕдиниц);
    спМарки.SetByName("Упаковки",ТСтроки.спМаркиУпаковок);
    пМарки:=?(ТСтроки.спМаркиЕдиниц.Size()=0,"",""+ТСтроки.спМаркиЕдиниц.Size()+" шт.")+?(ТСтроки.спМаркиУпаковок.Size()=0,""," "+ТСтроки.спМаркиУпаковок.Size()+" уп.");
    Т.CopyByX("v2",1);
  EndDo;
  глПечатнаяФормаОтчета(Т,0,оЗагол);
EndFunction

Function OnDoubleClick(Таб)
  Result:=0;
  If глРаботаСОсобымиИконкамиТаблицы(Таб) Then
    Exit;
  EndIf;
  if Таб.SelectionMode>1 then
    Exit 1;
  EndIf;  
  Сп:=Таб.Area(Таб.CurCol,Таб.CurLine,Таб.CurCol,Таб.CurLine).Value;
  If TypeStr(Сп)<>"LIST" Then
    Exit 1;
  EndIf;
  If Сп.GetByName("ГИСМТ")=1 Then
    If Сп.GetByName("ПоказатьМарки")=1 Then
      Тч:=Text.Create();
      Тч.AddString("--- Упаковки ---");
      Тч.AddString(Сп.GetByName("Упаковки").ToString(_NEWLINE));
      Тч.AddString("--- Штуки ---");
      Сп2:=Сп.GetByName("Марки");
      For i:=1 To Сп2.Size() Do
        Тч.AddString(Сп2.GetName(i)+_TAB+Сп2[i]);
      EndDo;
      Тч.Show("Марки",,1);
      Exit;
    EndIf;
  EndIf;
  
  If Сп.Size()=1 Then
    OpenObject(Сп.Get(1),0,1);
  Else
    Об:=0;
    If Сп.Select(Об,0,"Выбор объекта")>0 Then
      OpenObject(Об,0,1);
    EndIf;
  EndIf;  
EndFunction

Function ОчиститьВходящиеПоступления()
  Form.оДокументы.Value.ClearLines();
EndFunction

Function НайтиИлиСоздатьПоставщика(КодGLN,Наименование,пИНН,пКПП,Адрес)
  аПр:=Ref.кнтКонтрагенты;
  If ?(КодGLN<>"",not аПр.Find("КодТочкиЕГАИС,@IsFolder,@Status,ТипАктива",КодGLN,0,0,1),
    not аПр.Find("~(Left(ИНН,"+Length(пИНН)+")=пИНН)And(@IsFolder=0)And(@Status=0)And(ТипАктива=1)")) Then
    //Создание поставщика
    аПапка:=0;
    If аПр.Find("~(ТипАктива=1)And(@IsFolder=0)And(@Status=0)And(@Folder.Name=""Поставщики"")") Then
      аПапка:=аПр.Folder();
    ElseIf аПр.Find("~(ТипАктива=1)And(@IsFolder=0)And(@Status=0)") Then
      аПапка:=аПр.Folder();
    Else
      аПапка:=Ref.кнтКонтрагенты;
      аПапка.New(1);
      аПапка.Name:="Поставщики";
      аПапка.ТипАктива:=1;
      If not глЗаписать(аПапка) Then
        Exit;
      EndIf;
    EndIf;
    аПр.New();
    аПр.Folder(аПапка);
    аПр.ТипАктива:=1;
    аПр.Name:=Наименование;
    аПр.ПолнНаименование:=Наименование;
    аПр.ВидКонтрагента:=?(Length(пИНН)>10,Enum.ВидыКонтрагентов.ФизЛицо,Enum.ВидыКонтрагентов.ЮрЛицо);
    аПр.ИНН:=пИНН+?(пКПП<>"","/"+пКПП);
    аПр.КодТочкиЕГАИС:=КодGLN;
    аПр.ЮрАдрес:=Адрес;
    аПр.ФактАдрес:=Адрес;
    If not глЗаписать(аПр) Then
      Exit;
    EndIf;
  EndIf;
  Exit аПр;        
EndFunction


Function СозданиеВходящегоПоступления()
  оДокументы:=Form.оДокументы.Value;
  оМагазин:=Form.оМагазин.Value;
  оЮЛ:=оМагазин.ЮрЛицо;
  If оДокументы.SelectedLine=0 Then
    Exit;
  EndIf;
  If Form.оТоварнаяГруппа.Value.Selected()=0 Then
    Box("Для создания поступления необходимо выбрать корректную товарную группу ГИС МТ для запроса по маркам и корректного создания номенклатуры!",Q_STOP);
    Exit;
  Else
    If AskQuestion("Для создания поступления необходимо выбрать корректную товарную группу ГИС МТ для запроса по маркам и корректного создания номенклатуры! "+
        "Вы уверены, что группа "+Form.оТоварнаяГруппа.Value+" соответствует поступающему товару (исправить ошибочно выбранную группы в дальнейшем может быть затруднительным)?",Q_QUESTION+Q_YESNO,R_YES)=R_NO Then
      Exit;
    EndIf;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  If оДокументы.Локальный=-1 Then
    Exit;
  EndIf;
  СпДокумент:=оДокументы.СпДокумент;
  If _Or(IsEmpty(оДокументы.СпДокумент),IsEmpty(СпДокумент["ТСтроки"])) Then
    Ошибка:="";
    If not ЗагрузитьТекущийДокумент(1,Ошибка) Then
      Box("Невозможно загрузить текущий документ ("+Ошибка+")!",Q_STOP);
      Exit;
    EndIf;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  ФлЗапрос:=0;
  СпДокумент:=оДокументы.СпДокумент;
  ТСтроки:=СпДокумент["ТСтроки"];
  ТСтроки.Select();
  While ТСтроки.Next() Do
    If ТСтроки.ФлМаркиГотовы=1 Then
      Continue;
    EndIf;
    ФлЗапрос:=1;
    Break;
  EndDo;
  If ФлЗапрос Then
    Ошибка:="";
    While not ЗагрузитьМаркиТекущегоДокумента(1,Ошибка) Do
      аОтв:=AskQuestion("Невозможно загрузить марки текущего документа ("+Ошибка+"). Вы можете игнорировать это сообщение, но в этом случае марки штучных единиц не попадут в базу данных.",Q_WARNING+Q_ABORTRETRYIGNORE);
      If аОтв=R_ABORT Then
        Exit;
      EndIf;
      If аОтв<>R_RETRY Then
        Break;
      EndIf;
    EndDo;
  EndIf;
  
  ФлИзФайла:=IsEmpty(оДокументы.Идентификатор);
  Box("При создании документа поступления из входящего документа УПД будьте предельно вниманительны и сверяйте каждую позицию товара с бумажной накладной! Для позиций, которые не поступали раньше, необходимо будет создать или выбрать элемент номенклатуры.",Q_WARNING);
  Кнт:=НайтиИлиСоздатьПоставщика(СпДокумент["ПродавецGLN"],СпДокумент["ПродавецИмя"],СпДокумент["ПродавецИНН"],СпДокумент["ПродавецКПП"],СпДокумент["ПродавецАдрес"]);
  СпДокумент["Поставщик"]:=Кнт;

  aList:=List.Create();
  aList["СпДокумент"]:=СпДокумент;
  aList["ТоварнаяГруппа"]:=Form.оТоварнаяГруппа.Value;
  LoadModule(0,"Modules\FreeForms\УчетныеОтделы\Бухгалтерия\Отчетность\ОбработкаЭДОиГИСМТ",aList,0,"Module","СозданиеНовогоПоступления");
  If aList["Ответ"]<>1 Then
    Exit 0;
  EndIf;
  ТСтроки:=aList["ТСтроки"];
  ТСтроки2:=СпДокумент["ТСтроки"];
  ТипДокумента:=aList["ТипДокумента"];
  
  aDoc:=?(ТипДокумента=2,Doc.ПоступлениеПрочее,Doc.ПоступлениеТМЦ);
  aDoc.New();
  aDoc.DocDate:=Date();
  aDoc.Автор:=глПользователь;
  aDoc.ЮрЛицо:=оМагазин.ЮрЛицо;
  aDoc.Магазин:=оМагазин;
  глУстановитьНовыйНомер(aDoc);
  aDoc.НомерДокВходящий:=СпДокумент["ДокНомер"];
  aDoc.ДатаДокВходящий:=СпДокумент["ДокДата"];
  aDoc.НомерДокВходящийСФ:=СпДокумент["СчФакНомер"];
  aDoc.ДатаДокВходящийСФ:=СпДокумент["СчФакДата"];
  If ТипДокумента<2 Then
    aDoc.АдресДоставки:=СпДокумент["ПродавецАдрес"];
    aDoc.Склад:=оМагазин.Склад;
    aDoc.КодОперации:=Enum.коПоступлениеТМЦ.ПоступлениеТМЦ;
  Else
    aDoc.КодОперации:=Enum.коПоступлениеПрочее.ПоступлениеПрочее;
  EndIf;
  //aDoc.УникальныйИдентификатор3:="!"+ТабПоступления.РегИДСправки;
  aDoc.УчитыватьВНалоговомУчете:=1;
  aDoc.Контрагент:=Кнт;
  
  bDoc:=Doc.ВозвратПоставщику;
  bDoc.New();
  bDoc.DocDate:=Date();
  bDoc.Автор:=глПользователь;
  bDoc.ЮрЛицо:=оМагазин.ЮрЛицо;
  bDoc.Магазин:=оМагазин;
  глУстановитьНовыйНомер(bDoc);
  bDoc.АдресДоставки:=СпДокумент["ПродавецАдрес"];
  bDoc.Склад:=оМагазин.Склад;
  bDoc.КодОперации:=Enum.коВозвратПоставщику.ВозвратТМЦ;
  bDoc.УчитыватьВНалоговомУчете:=1;
  bDoc.Контрагент:=Кнт;
  
  аДог:=Ref.кнтДоговоры;
  If Not аДог.Find("~(@Parent=Кнт)And(ЮрЛицо=оЮЛ)And(@Status=0)") Then
    If Not аДог.Find("~(@Parent=Кнт)And(ЮрЛицо=оЮЛ)") Then
      аДог.New();
      аДог.Name:="Договор по "+оЮЛ;
      аДог.ЮрЛицо:=оЮЛ;
      аДог.Parent(Кнт);
      If not глЗаписать(аДог) Then
        Exit;
      EndIf;
    EndIf;
  EndIf;
  aDoc.Договор:=аДог;
  aDoc.Контрагент:=аДог.Parent();
  глПриИзмененииДоговора(aDoc);
  bDoc.Договор:=аДог;
  bDoc.Контрагент:=аДог.Parent();
  глПриИзмененииДоговора(bDoc);
  
  флОк:=0;
  BeginTransaction();
  Try
    If not глЗаписать(aDoc) Then
      Exit;
    EndIf;
    bDoc.ДокОснование:=aDoc;
  
    If ТипДокумента=2 Then
      aTab:=aDoc.LineParts("Содержание");
    Else
      aTab:=aDoc.LineParts("Номенклатура");
    EndIf;
    bTab:=bDoc.LineParts("Номенклатура");
    //ТСтроки: "зНомГИС,зАртикул,оПроверка,оШтрихкод,Номенклатура,Партия,КоличествоВОсновных,КоличествоВБазовых,Количество,флПроверено,Цена,Сумма,Индекс"
    ТМарки:=Tab.Create("Партия,Ящик,Марка");
    ТМарки2:=Tab.Create("Партия,Ящик,Марка");//Возврат
    ТСтроки.Select();
    While ТСтроки.Next() Do
      Form.StatusText(""+ТСтроки.CurLine+" из "+ТСтроки.Size());
      If ТипДокумента=2 Then
        зКл:=Round(Max(ТСтроки.Количество-ТСтроки.КоличествоВозвраты,0),6);
        If зКл=0 Then
          Continue;
        EndIf;
        If зКл<ТСтроки.Количество Then
          зСм:=Round(ТСтроки.Цена*зКл,2);
        Else
          зСм:=Round(ТСтроки.Сумма,2);
        EndIf;
        aTab.AddLine("Содержание,Количество,Цена,Сумма,СуммаНДС",ТСтроки.зНомГИС,зКл,Round(ТСтроки.Цена,2),зСм,Round(зСм*глКоэффНДС(Enum.СтавкиНДС.НДС20),2));
      Else
        aTab.AddLine("Номенклатура,Партия,Количество,Цена,Сумма",ТСтроки.Номенклатура,ТСтроки.Партия,ТСтроки.Количество,Round(ТСтроки.Цена,2),Round(ТСтроки.Сумма,2));
        If Trim(ТСтроки.оШтрихкод)<>"" Then
          Стр:=Trim(ТСтроки.оШтрихкод);
          аШК:=Ref.тмцШтрихкоды;
          If Not аШК.Find("<>@Parent,@Status,Name",ТСтроки.Номенклатура,0,Стр) Then
            аШК:=Ref.тмцШтрихкоды;
            аШК.New();
            аШК.Parent(ТСтроки.Номенклатура);
            аШК.Name:=Стр;
            аШК.Коэффициент:=1;
            аШК.Save();
          EndIf;
        EndIf;
        If ТипДокумента=0 Then
          If IsEmpty(aTab.Партия) Then
            Дата:=BegOfDay(СпДокумент["ДокДата"]);
            аПар:=Ref.тмцПартииТМЦ;
            If not аПар.Find("@Parent,@Status,ЕГАИСКодНоменклатуры,НомерУдостоверения,Дата",ТСтроки.Номенклатура,0,Trim(ТСтроки.оШтрихкод),СпДокумент["ДокНомер"],Дата) Then
              аПар.New();
              аПар.Parent(ТСтроки.Номенклатура);
              аПар.Name:=""+Дата+" ("+СпДокумент["ДокНомер"]+")";
              аПар.НомерУдостоверения:=СпДокумент["ДокНомер"];
              аПар.КСР:=Дата;
              аПар.Дата:=Дата;
              аПар.ЕГАИСКодНоменклатуры:=Trim(ТСтроки.оШтрихкод);
              аПар.ЕГАИСКодСправок:=Trim(ТСтроки.зАртикул);
              аПар.флМарочныйУчет:=1;
              аПар.ЦенаМаксимальнаяПродажная:=ТСтроки.МаксЦена;
              аПар.Поступление:=aDoc;
              If not глЗаписать(аПар) Then
                Exit;
              EndIf;
            ElseIf _Or(аПар.Поступление<>aDoc,аПар.ЦенаМаксимальнаяПродажная<>ТСтроки.МаксЦена) Then
              аПар.ЦенаМаксимальнаяПродажная:=ТСтроки.МаксЦена;
              аПар.Поступление:=aDoc;
              If not глЗаписать(аПар) Then
                Exit;
              EndIf;
            EndIf;
            aTab.Партия:=аПар;
          ElseIf _Or(аПар.Поступление<>aDoc,аПар.ЦенаМаксимальнаяПродажная<>ТСтроки.МаксЦена) Then
            аПар.ЦенаМаксимальнаяПродажная:=ТСтроки.МаксЦена;
            аПар.Поступление:=aDoc;
            If not глЗаписать(аПар) Then
              Exit;
            EndIf;
          EndIf;
        EndIf;
      EndIf;
      aTab.СтавкаНДС:=ТСтроки.Номенклатура.СтавкаНДС;
      If ТипДокумента<2 Then
        Ц0:=глПолучитьОсновнуюЦену(ТСтроки.Номенклатура,оМагазин.Склад,aDoc.DocDate);
        aTab.ЦенаБезСкидки:=?(Ц0=0,ТСтроки.Цена,Ц0);
        глПересчитатьСтроку(aDoc,aTab,"Количество2@СуммаНДС");
      EndIf;
      //Создание марок для этой строки
      ТСтроки2.CurLine:=ТСтроки.Индекс;
      If ТипДокумента=0 Then
        If (ТСтроки2.спМаркиУпаковок.Size()>0)And(ТСтроки2.спМаркиЕдиниц.Size()=0) Then
          For i:=1 to ТСтроки2.спМаркиУпаковок.Size() Do
            ТМарки.AddLine("Партия,Ящик,Марка",aTab.Партия,ТСтроки2.спМаркиУпаковок[i],"");
          EndDo;
        ElseIf ТСтроки2.спМаркиЕдиниц.Size()>0 Then
          For i:=1 to ТСтроки2.спМаркиЕдиниц.Size() Do
            ТМарки.AddLine("Партия,Ящик,Марка",aTab.Партия,Trim(ТСтроки2.спМаркиЕдиниц.GetName(i)),ТСтроки2.спМаркиЕдиниц[i]);
          EndDo;
        EndIf;
      EndIf;
      If ТипДокумента<2 Then
        If ТСтроки.КоличествоВозвраты>0 Then
          If ТСтроки.спВозвраты.Size()>0 Then
            For i:=1 to ТСтроки.спВозвраты.Size() Do
              ТМарки2.AddLine("Партия,Ящик,Марка",aTab.Партия,"",ТСтроки.спВозвраты[i]);
            EndDo;
          EndIf;
          bTab.AddLine("Номенклатура,Партия,Количество,Цена,Сумма,СтавкаНДС",aTab.Номенклатура,aTab.Партия,ТСтроки.КоличествоВозвраты,aTab.Цена,aTab.Сумма,aTab.СтавкаНДС);
          глПересчитатьСтроку(bDoc,bTab,"Количество2@СуммаНДС");
        EndIf;
      EndIf;
    EndDo;
    aDoc.СуммаВзаиморасчетов:=aTab.Sum("Сумма");
    If not глЗаписать(aDoc) Then
      Exit;
    EndIf;
    bDoc.СуммаВзаиморасчетов:=bTab.Sum("Сумма");
    If bTab.Size()>0 Then
      If not глЗаписать(bDoc) Then
        Exit;
      EndIf;
    EndIf;
    
    If ТипДокумента=0 Then
      //Создать марки для этого поступления, все марки должны иметь флаг 0
      If ТМарки.Size()>0 Then
        If глМаркиЗарегистрироватьДокумент(aDoc,ТМарки,?(ФлИзФайла,5,1))<>1 Then
          Exit;
        EndIf;
      EndIf;
      
      If ТМарки2.Size()>0 Then
        If глМаркиЗарегистрироватьДокумент(bDoc,ТМарки2,0)<>1 Then
          Exit;
        EndIf;
      EndIf;
    EndIf;
    
    флОк:=1;
  Finally
    If флОк Then
      CommitTransaction();
    Else
      RollbackTransaction();
    EndIf;
  EndTry;
  оДокументы.зДокЛок:=aDoc.DocNum+" от "+aDoc.DocDate;
  оДокументы.зКонтрагент:=aDoc.Контрагент;
  оДокументы.Локальный:=aDoc;
  If bTab.Size()>0 Then
    If IsEmpty(оДокументы.спВозвраты) Then
      оДокументы.спВозвраты:=List.Create();
    EndIf;
    оДокументы.спВозвраты.Add(bDoc);
    оДокументы.зВзв:=bDoc.DocNum+" от "+bDoc.DocDate;
    LoadModule(0,"Modules\FreeForms\ВнутренниеОбработки\ОбработкиДокументов\ДеревоДокументов",aDoc,0,"Module","Form");
  Else
    OpenObject(aDoc,0,1);
  EndIf;
EndFunction

Function ПроверкаМарокПринятьСканирование(Стр)
  If Trim(Стр)="" Then
    Exit;
  EndIf;
  MainTab:=Form.MainTab.Value;
  Стр:=УдалитьКрипточасть(Стр,ТоварнаяГруппа);
  aBranch:=MainTab.Find(Стр,1);
  If IsEmpty(aBranch) Then
    Box("Сканируемый штрихкод "+Стр+" не найден в таблице проверки! Убедитесь, что вы сканируете марку, а не штрихкод EAN!",Q_STOP);
    Exit;
  EndIf;
  ТСтроки:=Param["ТСтроки"];
  
  aBranch.IsSelected:=1;
  If IsEmpty(aBranch.Parent) Then
    If aBranch.Icon=ПроверкаИконкаПапкаПроверена Then
      Box("Этот ящик уже проверялся!",Q_INFORMATION);
      Exit;
    ElseIf aBranch.Icon=ПроверкаИконкаПапкаВозврат Then
      ПроверкаСпВозвраты.RemoveValue(aBranch.Value,1);
    EndIf;
  
    //Ящик
    aBranch.Icon:=ПроверкаИконкаПапкаПроверена;
    aBranch.FontStyle:=1;
    aBranch.FontColor:=_CLR_GREEN;
    ПроверкаСпПроверенные.Add(aBranch.Value,,,1);
    Form.IsChanged(1);
    
    aBranch2:=aBranch.FirstChild();
    While not isEmpty(aBranch2) Do
      If aBranch2.Icon=ПроверкаИконкаМаркаВозврат Then
        aBranch2.Icon:=ПроверкаИконкаМарка;
        aBranch2.FontStyle:=0;
        aBranch2.FontColor:=_CLR_WINDOWTEXT;
        ПроверкаСпВозвраты.RemoveValue(aBranch2.Value,1);
      EndIf;
      aBranch2:=aBranch2.Next();
    EndDo;
  Else
    If aBranch.Icon=ПроверкаИконкаМаркаПроверена Then
      Box("Эта марка уже проверялась!",Q_INFORMATION);
      Exit;
    ElseIf aBranch.Icon=ПроверкаИконкаМаркаВозврат Then
      ПроверкаСпВозвраты.RemoveValue(aBranch.Value,1);
    EndIf;
  
    Form.IsChanged(1);
    aBranch.Icon:=ПроверкаИконкаМаркаПроверена;
    aBranch.FontStyle:=1;
    aBranch.FontColor:=_CLR_GREEN;
    ПроверкаСпПроверенные.Add(aBranch.Value,,,1);
  EndIf;
EndFunction

Function ЗагрузитьТекущийДокумент(ФлТихо=0,ByRef Ошибка="")
  оМагазин:=Form.оМагазин.Value;
  оДокументы:=Form.оДокументы.Value;
  If оДокументы.SelectedLine=0 Then
    Exit 0;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  If IsEmpty(оМагазин.ПутьДрайвераЭДО) Then
    Ошибка:="Функция загрузки документа не поддерживается без настроенного драйвера провайдера ЭДО!";
    If not ФлТихо Then
      Box(Ошибка,Q_STOP);
    EndIf;
    Exit 0;
  EndIf;
  спДрайвер:=спВнешПровайдерЭДО["спДрайвер"];
  If IsEmpty(спДрайвер["МодульДрайвера"]) Then
    Ошибка:="Драйвер провайдера ЭДО не было инициализирован!";
    If not ФлТихо Then
      Box(Ошибка,Q_STOP);
    EndIf;
    Exit 0;
  EndIf;
  СпДокумент:=оДокументы.СпДокумент;
  If IsEmpty(СпДокумент["Идентификатор"]) Then
    Ошибка:="Документы данного вида не могут быть загружены в этой обработке!";
    If not ФлТихо Then
      Box(Ошибка,Q_STOP);
    EndIf;
    Exit 0;
  EndIf;
  
  спДрайвер["ДрайверШифрования"]:=локДрайверПодписи;
  спДрайвер["СпДокумент"]:=СпДокумент;
  Стр:=Trim(ExecuteFunction("LoadDocument",спДрайвер["МодульДрайвера"],спДрайвер));
  If Стр<>"" Then
    спДрайвер["ДрайверШифрования"]:=0;
    Ошибка:=Стр;
    Message("Ошибка при загрузке информации о документе: "+Стр+"!","!");
    Exit 0;
  EndIf;
  Стр:=СпДокумент["Содержимое"];
  СтрОшибка:="";
  If ЗагрузитьДокументУПД(Стр,СтрОшибка,СпДокумент)=0 Then
    Message(СтрОшибка,"!");
    Exit 0;
  EndIf;
  //Обновляем некоторые свойства...
  оДокументы.зКонтрагент:=СпДокумент["ПродавецИмя"]+", "+СпДокумент["ПродавецИНН"]+"/"+СпДокумент["ПродавецКПП"];
  оДокументы.зДок:=СпДокумент["ДокНомер"]+" от "+СпДокумент["ДокДата"];
  оДокументы.Сумма:=СпДокумент["Сумма"];
  //зТип,зСтатус,Icon?
  If IsEmpty(СпДокумент["ТСтроки"]) Then
    СтрЗагрузить:="Строки,Марки";
    Exit 0;
  Else
    СтрЗагрузить:="";
    ТСтроки:=СпДокумент["ТСтроки"];
    ТСтроки.Select();
    While ТСтроки.Next() Do
      If ТСтроки.ФлМаркиГотовы=1 Then
        Continue;
      EndIf;
      If ТСтроки.спМаркиУпаковок.Size()+ТСтроки.спМаркиЕдиниц.Size()=0 Then
        Continue;
      EndIf;
      СтрЗагрузить:="Марки";
      Break;
    EndDo;
  EndIf;
  оДокументы.Загрузить:=СтрЗагрузить;
  Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",оДокументы.CurLine,оДокументы.CurLine);
  Exit 1;
EndFunction

Function ОбновитьВидимостьСозданиеНовогоПоступления()
  Form.пТипДокумента.Text:=спТипыДокумента[ТипДокумента+1];
  If ТипДокумента=0 Then
    Form.ТСтроки.Value.Column("Номенклатура").isVisible:=1;
    Form.ТСтроки.Value.Column("оШтрихкод").isVisible:=1;
    Form.ТСтроки.Value.Column("Единицы").isVisible:=1;
    Form.ТСтроки.Value.Column("Партия").isVisible:=1;
    Form.ТСтроки.Value.Column("КоличествоВБазовых").isVisible:=1;
    Form.ТСтроки.Value.Column("КоличествоВОсновных").Caption:="Целые";
    If (Lowercase(ТоварнаяГруппа.ВнешнееНаименование)="tobacco")or(Lowercase(ТоварнаяГруппа.ВнешнееНаименование)="otp") Then
      Form.ТСтроки.Value.Column("МаксЦена").isVisible:=1;
    Else
      Form.ТСтроки.Value.Column("МаксЦена").isVisible:=0;
    EndIf;
    Form.пТипДокумента.FontColor:=_CLR_GREEN;
    Form.пТоварнаяГруппа.IsDisabled:=0;
    Form.пГруппа.IsDisabled:=0;
  ElseIf ТипДокумента=1 Then
    Form.ТСтроки.Value.Column("Номенклатура").isVisible:=1;
    Form.ТСтроки.Value.Column("оШтрихкод").isVisible:=1;
    Form.ТСтроки.Value.Column("Единицы").isVisible:=1;
    Form.ТСтроки.Value.Column("Партия").isVisible:=0;
    Form.ТСтроки.Value.Column("КоличествоВБазовых").isVisible:=1;
    Form.ТСтроки.Value.Column("КоличествоВОсновных").Caption:="Целые";
    Form.ТСтроки.Value.Column("МаксЦена").isVisible:=0;
    Form.пТипДокумента.FontColor:=_CLR_BLUE;
    Form.пТоварнаяГруппа.IsDisabled:=1;
    Form.пГруппа.IsDisabled:=1;
  Else
    Form.ТСтроки.Value.Column("Номенклатура").isVisible:=0;
    Form.ТСтроки.Value.Column("оШтрихкод").isVisible:=0;
    Form.ТСтроки.Value.Column("Единицы").isVisible:=0;
    Form.ТСтроки.Value.Column("Партия").isVisible:=0;
    Form.ТСтроки.Value.Column("КоличествоВБазовых").isVisible:=0;
    Form.ТСтроки.Value.Column("КоличествоВОсновных").Caption:="Количество";
    Form.ТСтроки.Value.Column("МаксЦена").isVisible:=0;
    Form.пТипДокумента.FontColor:=_CLR_RED;
    Form.пТоварнаяГруппа.IsDisabled:=1;
    Form.пГруппа.IsDisabled:=1;
  EndIf;
EndFunction

Function ИзменитьДокументаСозданиеНовогоПоступления(Объект)
  aTab:=СпДокумент["ТСтроки"];
  ФлМарки:=0;
  aTab.Select();
  While aTab.Next() Do
    If aTab.спМаркиЕдиниц.Size()+aTab.спМаркиУпаковок.Size()>0 Then
      ФлМарки:=1;
      Break;
    EndIf;
  EndDo;
  If ФлМарки Then
    Box("Документ содержит марки, он может иметь только тип поступления ГИС МТ!",Q_STOP);
    Exit;
  EndIf;

  спТипыДокумента:=List.Create("Поступление товаров, подлежащих прослеживаемости (ГИС МТ)","Поступление обычных товаров (не ГИС МТ)","Поступление услуг (не номенклатура, нет количественного учета)");
  //"Поступление товаров, подлежащих прослеживаемости (ГИС МТ)","Поступление обычных товаров (не ГИС МТ)","Поступление услуг (не номенклатура, нет количественного учета)"
  aNum:=спТипыДокумента.Select(,Объект);
  If aNum>0 Then
    ТипДокумента:=aNum-1;
    ОбновитьВидимостьСозданиеНовогоПоступления();
  ENdIf;
EndFunction

Function ПринятьВходящийДокумент()
  оМагазин:=Form.оМагазин.Value;
  оДокументы:=Form.оДокументы.Value;
  If оДокументы.SelectedLine=0 Then
    Exit 0;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  If IsEmpty(оМагазин.ПутьДрайвераЭДО) Then
    Box("Функция принятия документа не поддерживается без настроенного драйвера провайдера ЭДО!",Q_STOP);
    Exit 0;
  EndIf;
  СпДокумент:=оДокументы.СпДокумент;
  If IsEmpty(СпДокумент["Идентификатор"]) Then
    Box("Документы данного вида не могут быть использованы в этой обработке!",Q_STOP);
    Exit 0;
  EndIf;
  спДрайвер:=спВнешПровайдерЭДО["спДрайвер"];
  If IsEmpty(спДрайвер["МодульДрайвера"]) Then
    Box("Драйвер провайдера ЭДО не было инициализирован!",Q_STOP);
    Exit 0;
  EndIf;
  If IsEmpty(оДокументы.Локальный) Then
    Box("Данное входящее поступление не имеет локального. Без создания локального документа разрешена только операция отказа!",Q_STOP);
    Exit 0;
  EndIf;
  аДок:=оДокументы.Локальный;
  ФлТовар:=аДок.DBName="ПоступлениеТМЦ";
  
  //Необходимо, чтобы получить идентификаторы получателя и отправителя
  СпДокумент:=оДокументы.СпДокумент;
  If _Or(IsEmpty(СпДокумент),IsEmpty(СпДокумент["ТСтроки"])) Then
    Ошибка:="";
    If not ЗагрузитьТекущийДокумент(1,Ошибка) Then
      Box("Невозможно загрузить текущий документ ("+Ошибка+")!",Q_STOP);
      Exit;
    EndIf;
  EndIf;
  
  СпБлок:=List.Create();
  аПольз:="";аКомп:="";аДата:="";
  If not аДок.Lock(аПольз,аКомп,аДата) Then
    Box("Документ "+аДок+" открыт на запись. В данный момент с ним работает пользователь "+аПольз+" (компьютер "+аКомп+")! Пожалуйста, закройте документ, чтобы выполнить операцию!",Q_STOP);
    Exit 0;
  EndIf;
  СпБлок.Add(аДок);

  Try
    аДок.Reload();
    
    If ФлТовар Then
      ТМаркиВозврата:=Tab.Create("Партия,Марка,Ящик");
      ТМарки:=глМаркиЗагрузитьДокумент(аДок,,1);//Партия,Марка,Ящик
      aTab:=аДок.LineParts("Номенклатура").Copy();
      aTab.AddColumn("КоличествоВозврат",,"Number");
      aTab.AddColumn("СуммаВозврат",,"Number");
      aList:=аДок.LoadLinkedDocuments(1);
      For i:=1 To aList.Size() Do 
        бДок:=aList.Get(i);
        If _Or(бДок.DBName()<>"ВозвратПоставщику",бДок.Status()<2) Then
          Continue;
        EndIf;
        bTab:=бДок.LineParts("Номенклатура");
        bTab.Select();
        While bTab.Next() Do
          aTab.AddLine("Номенклатура,Партия,Количество,КоличествоВозврат,СуммаВозврат",bTab.Номенклатура,bTab.Партия,0,bTab.Количество,bTab.Сумма);
        EndDo;
        ТМарки2:=глМаркиЗагрузитьДокумент(бДок,,1);
        ТМаркиВозврата.Combine(ТМарки2,"Партия,Марка","ADD");
        ТМарки2.Combine(ТМарки,"Партия,Марка","SUB");
        If ТМарки2.Size()>0 Then
          Стр:="Документ возврата "+бДок+" содержит маркировку продукции, которая отсутствовала в оригинальном документе (к примеру, "+ТМарки2["Марка",1]+"!";
          Message(Стр,"!");
          Exit 0;
        EndIf;
      EndDo;
      aTab.Group("Номенклатура,Партия","Количество,КоличествоВозврат,Сумма,СуммаВозврат");
    Else
      aTab:=аДок.LineParts("Содержание").Copy();
      aTab.AddColumn("Количество0",,"Number");
      aTab.AddColumn("Сумма0",,"Number");
      aTab.AddColumn("СодержаниеВрем");
      aTab.Select();
      While aTab.Next() Do
        aTab.СодержаниеВрем:=aTab.Содержание;
      EndDo;
      флДлинаКодаПоля:=Struct.Doc(аДок.DBName()).LineParts("Содержание").Props("Содержание").DataType;
      tearStr(флДлинаКодаПоля,"STRING.");
      флДлинаКодаПоля:=Number(флДлинаКодаПоля);
      
      ТСтроки:=СпДокумент["ТСтроки"];
      ТСтроки.Select();
      While ТСтроки.Next() Do
        пНоменклатура:=Left(ТСтроки.Наименование,флДлинаКодаПоля);
        If aTab.FindAndGoto(пНоменклатура,,"СодержаниеВрем")=0 Then
          aTab.AddLine("Содержание,Количество0,Сумма0",пНоменклатура,ТСтроки.Количество,ТСтроки.Сумма);
        Else
          aTab.Количество0:=ТСтроки.Количество;
          aTab.Сумма0:=ТСтроки.Сумма;
        EndIf;
        aTab.СодержаниеВрем:=0;
      EndDo;
      //aTab.Group("Содержание","Количество,Сумма,Сумма0,Количество0");
      aTab.AddColumn("КоличествоВозврат",,"Number");
      aTab.AddColumn("СуммаВозврат",,"Number");
      aTab.Select();
      While aTab.Next() Do
        aTab.КоличествоВозврат:=Round(aTab.Количество0-aTab.Количество,6);
        aTab.Количество:=aTab.Количество0;
        aTab.СуммаВозврат:=Round(aTab.Сумма0-aTab.Сумма,2);
        aTab.Сумма:=aTab.Сумма0;
      EndDo;
    EndIf;
    
    спДрайвер["Вложения"]:=List.Create();
    If (aTab.Sum("КоличествоВозврат")<>0)Or(aTab.Sum("СуммаВозврат")<>0) Then
      aList:=List.Create();
      aList.SetByName("Таб",aTab);
      LoadModule(0,"Modules\FreeForms\УчетныеОтделы\Бухгалтерия\Отчетность\ОбработкаЭДОиГИСМТ",aList,0,"Module","ПросмотрРасхождений");
      If aList.GetByName("Ответ")<>1 Then
        Exit 1;
      EndIf;
      //Создаем ТОРГ-2 (КНД 1175014)
      //DP_PRIRASXPRIN_<ИдентификаторПолучателя>_<ИдентификаторОтправителя>_ГГГГММДД_<ГУИД>
      Тек:=Date();
      пДатаТек:=FormatDate(Тек,"dd.mm.YYYY");
      пВремяТек:=Replace(GetTime(Тек),":",".");
      ИмяАкта:="DP_PRIRASXPRIN_"+СпДокумент["ПокупательИД"]+"_"+СпДокумент["ПродавецИД"]+"_"+FormatDate(Тек,"YYYYmmdd")+"_"+CreateGUID();
      
      пЮЛ:=EncodeXMLString(аДок.ЮрЛицо.Контрагент.ПолнНаименование);
      СтрАкт:="<?xml version=""1.0"" encoding=""windows-1251""?>
        |<Файл ИдФайл="""+ИмяАкта+""" ВерсФорм=""5.01"" ВерсПрог=""SF 1.0"">
        |<СвУчДокОбор ИдОтпр="""+СпДокумент["ПокупательИД"]+""" ИдПол="""+СпДокумент["ПродавецИД"]+"""></СвУчДокОбор>
        |<Документ КНД=""1175014"" ПоФактХЖ=""Документ о приемке ценностей и (или) расхождениях, выявленных при их приемке"" НаимДокОпр=""Документ о приемке ценностей и (или) расхождениях, выявленных при их приемке"" ДатаИнфПок="""+пДатаТек+""" ВремИнфПок="""+пВремяТек+""" НаимЭконСубСост="""+пЮЛ+""">";
        //<ИдентДокПР ДатаДокПР="16.05.2022" НомДокПР="416"/>
        //<СодФХЖ1 ОбстИсп="3000"></СодФХЖ1>        
        //<СодФХЖ2 Заключение="Перечисленные в документе ценностиприняты с излишком." СодСоб="Настоящий Акт составлен комиссией, которая произвела осмотр прибывшего груза и установила: доставлен товар по сопроводительному документу 1605-2ARG1от 16.05.2022. Перечисленные в документе ценностиприняты с излишком.">
      //Передать доп. документ в спДрайвер для добавления к списку документов.
      //СБИС.ЗаписатьВложение https://sbis.ru/help/integration/api/all_methods/write_enclosure
    EndIf;

    спДрайвер["ДрайверШифрования"]:=локДрайверПодписи;
    спДрайвер["СпДокумент"]:=СпДокумент;
    спДрайвер["Действие"]:=0;
    Стр:=Trim(ExecuteFunction("WriteInboundDocument",спДрайвер["МодульДрайвера"],спДрайвер));
    спДрайвер["Вложения"]:=0;
    If Стр<>"" Then
      спДрайвер["ДрайверШифрования"]:=0;
      Box("Ошибка при выполнении операции: "+Стр+"!",Q_STOP);
      Exit 0;
    EndIf;
    If спДрайвер["Результат"]<>1 Then
      Box("Ошибка при выполнении операции: "+спДрайвер["Ошибка"]+"!",Q_STOP);
      Exit 0;
    EndIf;
    оДокументы.зСтатус:="принят";
    Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",оДокументы.CurLine,оДокументы.CurLine);
    Box("Документ успешно принят!",Q_INFORMATION);
  Finally
    If СпБлок.Size()>0 Then
      MassUnlock(СпБлок);
    EndIf;  
  EndTry;
  Exit 1;
EndFunction

Function ОтклонитьВходящийДокумент()
  оМагазин:=Form.оМагазин.Value;
  оДокументы:=Form.оДокументы.Value;
  If оДокументы.SelectedLine=0 Then
    Exit 0;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  If IsEmpty(оМагазин.ПутьДрайвераЭДО) Then
    Box("Функция отклонения документа не поддерживается без настроенного драйвера провайдера ЭДО!",Q_STOP);
    Exit 0;
  EndIf;
  СпДокумент:=оДокументы.СпДокумент;
  If IsEmpty(СпДокумент["Идентификатор"]) Then
    Box("Документы данного вида не могут быть использованы в этой обработке!",Q_STOP);
    Exit 0;
  EndIf;
  спДрайвер:=спВнешПровайдерЭДО["спДрайвер"];
  If IsEmpty(спДрайвер["МодульДрайвера"]) Then
    Box("Драйвер провайдера ЭДО не было инициализирован!",Q_STOP);
    Exit 0;
  EndIf;
  
  спДрайвер["ДрайверШифрования"]:=локДрайверПодписи;
  спДрайвер["Вложения"]:=List.Create();
  спДрайвер["СпДокумент"]:=СпДокумент;
  спДрайвер["Действие"]:=1;
  Стр:=Trim(ExecuteFunction("WriteInboundDocument",спДрайвер["МодульДрайвера"],спДрайвер));
  If Стр<>"" Then
    спДрайвер["ДрайверШифрования"]:=0;
    Box("Ошибка при выполнении операции: "+Стр+"!",Q_STOP);
    Exit 0;
  EndIf;
  If спДрайвер["Результат"]<>1 Then
    Box("Ошибка при выполнении операции: "+спДрайвер["Ошибка"]+"!",Q_STOP);
    Exit 0;
  EndIf;
  оДокументы.зСтатус:="принят";
  Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",оДокументы.CurLine,оДокументы.CurLine);
  Box("Документ успешно принят!",Q_INFORMATION);
  Exit 1;
EndFunction

Function ВывестиДеревоТекущегоДокумента()
  оМагазин:=Form.оМагазин.Value;
  оДокументы:=Form.оДокументы.Value;
  If оДокументы.SelectedLine=0 Then
    Exit 0;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  If IsEmpty(оМагазин.ПутьДрайвераЭДО) Then
    Box("Эта функция не поддерживается без настроенного драйвера провайдера ЭДО!",Q_STOP);
    Exit 0;
  EndIf;
  СпДокумент:=оДокументы.СпДокумент;
  If IsEmpty(СпДокумент["Идентификатор"]) Then
    Box("Документы данного вида не могут быть использованы в этой обработке!",Q_STOP);
    Exit 0;
  EndIf;
  спДрайвер:=спВнешПровайдерЭДО["спДрайвер"];
  If IsEmpty(спДрайвер["МодульДрайвера"]) Then
    Box("Драйвер провайдера ЭДО не было инициализирован!",Q_STOP);
    Exit 0;
  EndIf;
  
  спДрайвер["ДрайверШифрования"]:=локДрайверПодписи;
  спДрайвер["СпДокумент"]:=СпДокумент;
  Стр:=Trim(ExecuteFunction("LoadAttachments",спДрайвер["МодульДрайвера"],спДрайвер));
  If Стр<>"" Then
    спДрайвер["ДрайверШифрования"]:=0;
    спДрайвер["Документы"]:=0;
    Box("Ошибка при выполнении операции: "+Стр+"!",Q_STOP);
    Exit 0;
  EndIf;
  If спДрайвер["Результат"]<>1 Then
    Box("Некоторые документы не могут быть загружены из-за ошибок!",Q_WARNING);
  EndIf;
  ДДокументы:=спДрайвер["Документы"];
  спДрайвер["Документы"]:=0;
  aList:=List.Create();
  aList["Документы"]:=ДДокументы;
  LoadModule(0,"Modules\FreeForms\УчетныеОтделы\Бухгалтерия\Отчетность\ОбработкаЭДОиГИСМТ",aList,0,"Module","ДеревоДокумента");
  
  Exit 1;
EndFunction

Function ДеревоДокументовСохранитьВФайл(Ветка)

  Function _Сохранить(Ветка,Путь)
    Result:=1;
    If Ветка.Size()>0 Then
      For i:=1 To Ветка.Size() Do
        Result:=_Сохранить(Ветка.ByIndex(i),Путь+?(TypeStr(Ветка)="TREE.BRANCH",Ветка.Name+"\")) And Result;
      EndDo;
      Exit;
    ElseIf Pos("Ошибка загрузки ",Ветка.Name)=1 Then
      Exit;
    ElseIf Str(Ветка.Value)="" Then
      Exit;
    EndIf;
    Файл:=Путь+Ветка.Name;
    Стр:=Str(Ветка.Value);
    Try
      File.CreateDirectory(GetPath(Файл));
      StringToFile(Стр,Файл,0,0);
    Except
      Result:=0;
      Box("Невозможно сохранить файл "+Файл,Q_WARNING);
    EndTry;
  EndFunction
  
  РезКаталог:="";
  If not SelectFolderDialog(РезКаталог,"Выберите каталог для сохранения файлов:") Then
    Exit;
  EndIf;
  Путь:=AddBackSlash(РезКаталог);
  Фл:=_Сохранить(Ветка,Путь);
  If Фл Then
    Box("Сохранение выполнено успешно!",Q_INFORMATION);
  EndIf;
EndFunction

спТекущиеПроцессы:=List.Create();
SetMultiThreaded(спТекущиеПроцессы);
