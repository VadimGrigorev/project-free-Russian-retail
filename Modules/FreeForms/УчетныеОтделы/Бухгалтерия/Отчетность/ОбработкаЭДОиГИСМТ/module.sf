//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var локДрайверПодписи Export, спВнешПровайдерЭДО Export;
Var СпДокумент Export, ФлСтолбикМаксЦены Export;//Форма: СозданиеНовогоПоступления
Var спТекущиеПроцессы Export; //Использовать lock для обращения, каждый элемент -- список
Var ФлИсходящиеВсе Export;
Var СтарЮЛ Export;
Var ТДокументыИсхПолн Export; //Используется для фильтра и сортировки

//Состояния документов (СтатусЧл): 0 -- Все доступные (только при запросе), не отправлен
//                                 1 -- Отправлен (ожидает ответа)
//                                 2 -- Ожидает ответа покупателя/поставщика (отклонение)
//                                 3 -- Ожидает наш ответ (отклонение)
//                                 4 -- Подтвежденные (закрытые)
//                                 5 -- Отклоненные, удаленные (закрытые)
//                                 6 -- С ошибками или проблемами доставки
//                                 7 -- Неизвестное
//                                 8 -- Документ не найден в ЭДО 

//Данные состояние дополняют полученные состояния из драйвера ЭДО, если последний не может получить полную информацию в режиме списка документов
//Состояния документов (УникальныйИдентификатор4): "%" -- отправлен акт отказа от документа, ожидается его принятие на другой стороне (превращается в 2, даже если статус ЭДО иной)
//                                                 "#" -- документ отклонен (превращается в 5, даже если статус ЭДО иной)

//Форма: СозданиеНовогоПоступления
Var ТипДокумента Export;//0 -- ТМЦ (ГИС МТ), 1 -- ТМЦ (не ГИС МТ), 2 -- услуги, 3 -- Поступление ОС
Var спТипыДокумента Export;

//Форма: ПроверкаМарокПоступления
Var НакопленноеСообщение Export;
Var ПроверкаИконкаПапка Export,ПроверкаИконкаПапка2 Export,ПроверкаИконкаМарка Export,ПроверкаИконкаПапкаПроверена Export,ПроверкаИконкаМаркаПроверена Export,ПроверкаИконкаПапкаВозврат Export,ПроверкаИконкаМаркаВозврат Export;
Var ПроверкаСпПроверенные Export, ПроверкаСпВозвраты Export;

Function ЗагрузитьТекущийДокумент(ФлТихо=0,ByRef Ошибка="") Forward;

Function БыстроеФорматированиеJSON(Стр)
  If _Or(pos("HTTP/",Стр)=1,pos(_NEWLINE+"HTTP/1.1",Стр)>0) Then
    Стр2:=TearStr(Стр,_NEWLINE+_NEWLINE);
    If Стр="" Then
      Exit Стр2;
    EndIf;
  EndIf;
  Стр:=Replace(Replace(Стр,"{""","{"+_NEWLINE+""""),",""",","+_NEWLINE+"""");
  Exit Стр;
EndFunction

//Отдельный поток сделан из-за того, что провайдер иногда не отвечает, и мы не можем завешивать интерфейс попытками соединиться
//Отключить: 0 -- подключение, 1 -- выход из формы
Function ОбновитьДрайверЭДО(спВнешПровайдерЭДО,ЮрЛицо,Форма,Отключить=0)
  локДрайверПодписи:=спВнешПровайдерЭДО["ДрайверПодписи"];
  спТекущиеПроцессы:=спВнешПровайдерЭДО["спТекущиеПроцессы"];
  Try
    If спВнешПровайдерЭДО["Инициализирован"]=1 Then
      спТекущиеПроцессы.AddValue(0,"Закрываем сессию провайдера ЭДО");
      спДрайвер:=спВнешПровайдерЭДО["спДрайвер"];
      спДрайвер["ДрайверШифрования"]:=локДрайверПодписи;
      If _And(TypeStr(спДрайвер)="LIST",not IsEmpty(спДрайвер["МодульДрайвера"])) Then
        Стр:=Trim(ExecuteFunction("DriverDisconnect",спДрайвер["МодульДрайвера"],спДрайвер));
        Стр2:=Trim(ExecuteFunction("DriverDeinit",спДрайвер["МодульДрайвера"],спДрайвер));
        спТекущиеПроцессы.RemoveValue(0);
      EndIf;
    EndIf;
  Except
    спТекущиеПроцессы.Clear();
  EndTry;
  спВнешПровайдерЭДО["Инициализирован"]:=0;
  If Отключить=1 Then
    PostMessageToForm(Форма,10010,"");
    Exit;
  EndIf;
  спДрайвер:=List.Create();
  Try
    спТекущиеПроцессы.AddValue(1,"Открываем сессию провайдера ЭДО");
    спДрайвер:=глЗагрузитьДрайверПровайдераЭДО(ЮрЛицо,локДрайверПодписи);
    спТекущиеПроцессы.RemoveValue(1);
  Except
    спТекущиеПроцессы.Clear();
  EndTry;
  спВнешПровайдерЭДО["спДрайвер"]:=спДрайвер;
  спВнешПровайдерЭДО["Инициализирован"]:=?(спДрайвер.Size()>0,1,2);
EndFunction

Function ОбновитьДрайверПодписи(Отключить=0)
  оЮрЛицо:=Form.оЮрЛицо.Value;
  Try
    If _And(TypeStr(локДрайверПодписи)="LIST",not IsEmpty(локДрайверПодписи["МодульДрайвера"])) Then
      ExecuteFunction("DriverDisconnect",локДрайверПодписи["МодульДрайвера"],локДрайверПодписи);
      ExecuteFunction("DriverDeinit",локДрайверПодписи["МодульДрайвера"],локДрайверПодписи);
    EndIf;
  Except
  EndTry;
  If Отключить=1 Then
    Exit;
  EndIf;
  
  локДрайверПодписи:=глЗагрузитьДрайверПодписи(Form.оЮрЛицо.Value);
  спВнешПровайдерЭДО["ДрайверПодписи"]=локДрайверПодписи;
  ФлОк:=0;
  СтрОтвет:="";
  Try
    If IsEmpty(локДрайверПодписи["МодульДрайвера"]) Then
      СтрОтвет:="<Невозможно загрузить драйвер>";
      Exit;
    EndIf;
    If оЮрЛицо.СертификатПодписи="" Then
      СтрОтвет:="<Для юр. лица не выбран сертификат обмена>";
      Exit;
    EndIf;
    локДрайверПодписи["Идентификатор"]:=оЮрЛицо.СертификатПодписи;
    Стр:=Trim(ExecuteFunction("CheckCertificate",локДрайверПодписи["МодульДрайвера"],локДрайверПодписи));
    If Стр<>"" Then
      СтрОтвет:="<Ошибка: "+Стр+">";
      Exit;
    EndIf;
    If локДрайверПодписи["Найден"]<>1 Then
      СтрОтвет:="<Сертификат отсутствует на текущей машине!>";
      Exit;
    EndIf;
    ФлОк:=1;
    СтрОтвет:=локДрайверПодписи["ИмяСертификата"];
    If локДрайверПодписи["Рабочий"]<1 Then
      Box("Сертификат, закрепленный за выбранным юр. лицом, истек или является нерабочим! Обработка обмена не будет работать корректно!",Q_STOP);
    ElseIf GetPeriod(Date(),локДрайверПодписи["ДатаОкончания"],4)<1209600 Then //14 days
      Box("Сертификат, закрепленный за выбранным юр. лицом, истекает "+локДрайверПодписи["ДатаОкончания"]+" (менее чем через 2 недели)! Заменяйте сертификат вовремя, чтобы избежать простоя!",Q_WARNING);
    EndIf;
  Finally
    Form.пТекущийСертификат.Value:=СтрОтвет;
  EndTry
  If not ФлОк Then
    Box("Невозможно загрузить драйвер подписи или требуемый сертификат не установлен на этой машине! Обработка обмена не будет работать корректно!",Q_STOP);
  EndIf;
EndFunction

Function ДатаЗапроса(аДата)
  //Даты: yyyy-MM-ddTHH:mm:ss.SSS’Z
  Exit EncodeString(FormatDate(аДата,"YYYY-mm-dd""T""hh:tt:ss.ppp")+"Z","PE");
EndFunction


Function ПолучитьЭлементJSON(ByRef Текст,От="{")
  //{..{..}..},{..{..}..},
  i:=1;
  While _And(i<=Length(Текст),Текст[i]<>От) Do
    i:=i+1;
  EndDo;
  i0:=i+1;
  Уровень:=1;
  While i<Length(Текст) Do
    i:=i+1;
    If _Or(Текст[i]="[",Текст[i]="{") Then
      Уровень:=Уровень+1;
    ElseIf _Or(Текст[i]="]",Текст[i]="}") Then
      Уровень:=Уровень-1;
      If Уровень=0 Then
        Break;
      EndIf;
    ElseIf Текст[i]="""" Then //TODO: '
      While i<Length(Текст) Do
        i:=i+1;
        If Текст[i]="\" Then //\"
          i:=i+1;
        ElseIf Текст[i]="""" Then
          //i:=i+1;
          Break;
        EndIf;
      EndDo;
    EndIf;
  EndDo;
  Result:=Mid(Текст,i0,i-i0);
  Текст:=Mid(Текст,i+1);
EndFunction

Function ЗагрузитьМассивJSON(Стр)
  //"Name":Value,...
  //Value: "..\"..?", ?, [...]
  aList:=List.Create();
  While Стр<>"" Do
    TearStr(Стр,"""");
    Имя:=TearStr(Стр,"""");
    TearStr(Стр,":");
    Стр:=Trim(Стр);
    If Length(Стр)=0 Then
      aList[Имя]:="";
      Break;
    EndIf;
    If Стр[1]="""" Then
      TearStr(Стр,"""");
      i:=0;
      While i<Length(Стр) Do
        i:=i+1;
        If Стр[i]="\" Then
          i:=i+1;
        ElseIf Стр[i]="""" Then
          Break;
        EndIf;
      EndDo;
      Знач:=Left(Стр,i-1);
      Стр:=Mid(Стр,i+1);
      Знач:=DecodeString(Знач,"JSON");
      TearStr(Стр,",");
    ElseIf Стр[1]="[" Then
      Знач:=ПолучитьЭлементJSON(Стр,"[");
      TearStr(Стр,",");
    Else
      Знач:=Trim(TearStr(Стр,","));
      If _And(Знач<>"",Знач[1]>="0",Знач[1]<="9") Then
        Знач:=Number(Знач);
      EndIf;
    EndIf;
    aList[Имя]:=Знач;
  EndDo;
  Exit aList;
EndFunction


Function ЗагрузитьПеременные(Стр)
  Сп:=List.Create();
  While Pos("=",Стр)>0 Do
    TearStr(Стр," ");
    Имя:=Trim(TearStr(Стр,"="));
    TearStr(Стр,"""");
    Значение:=TearStr(Стр,"""");
    Сп[Имя]:=DecodeXMLString(Значение);
  EndDo;
  Exit Сп;
EndFunction

Function СтавкаНДСВСтр(Ставка,ФлБезНДС=0)
  //0%,10%,18%,20%,10/110%,18/118%,20/120%,без НДС,НДС исчисляется налоговым агентом
  If ФлБезНДС Then
    Exit "без НДС";
  ElseIf Ставка=Enum.СтавкиНДС.БезНДС Then
    Exit "без НДС";
  ElseIf Ставка=Enum.СтавкиНДС.НДС0 Then
    Exit "0%";
  ElseIf Ставка=Enum.СтавкиНДС.НДС10 Then
    Exit "10%";
  ElseIf Ставка=Enum.СтавкиНДС.НДС18 Then
    Exit "18%";
  ElseIf Ставка=Enum.СтавкиНДС.НДС20 Then
    Exit "20%";
  ElseIf Ставка=Enum.СтавкиНДС.НДС5 Then
    Exit "5%";
  ElseIf Ставка=Enum.СтавкиНДС.НДС7 Then
    Exit "7%";
  Else
    Exit "без НДС";
  EndIf;
EndFunction


Function ПолучитьЛокальныеПоступления(НачДата,КонДата)
  оЮЛ:=Form.оЮрЛицо.Value;

  КДата:=КонДата+1;
  спТип:=List.Create(Enum.коПоступлениеТМЦ.ПоступлениеТМЦ,Enum.коПоступлениеТМЦ.ВнутреннееПеремещение);  
  спТип2:=List.Create(Enum.коРегистрацияОС.ПоступлениеОС);  
  ТЗ:="(зСтатус:=Doc.ПоступлениеТМЦ.@Status;Condition(зСтатус<>1);зДата:=Doc.ПоступлениеТМЦ.DocDate;Condition((зДата>=НачДата)And(зДата<КДата));
  |зДок:=Doc.ПоступлениеТМЦ;
  |зКО:=Doc.ПоступлениеТМЦ.КодОперации;
  |Condition(зКО IN спТип);  
  |зЮЛ:=Doc.ПоступлениеТМЦ.ЮрЛицо;
  |Condition(зЮЛ=оЮЛ);
  |зИНН:=Doc.ПоступлениеТМЦ.Контрагент.ИНН;
  |зНомерВх:=Doc.ПоступлениеТМЦ.НомерДокВходящий;
  |зДатаВх:=Doc.ПоступлениеТМЦ.ДатаДокВходящий;
  |зНомерВхСФ:=Doc.ПоступлениеТМЦ.НомерДокВходящийСФ;
  |зДатаВхСФ:=Doc.ПоступлениеТМЦ.ДатаДокВходящийСФ;
  |Group зДок;) UNION ALL (
  |зСтатус:=Doc.ПоступлениеПрочее.@Status;Condition(зСтатус<>1);зДата:=Doc.ПоступлениеПрочее.DocDate;Condition((зДата>=НачДата)And(зДата<КДата));
  |зДок:=Doc.ПоступлениеПрочее;
  |зЮЛ:=Doc.ПоступлениеПрочее.ЮрЛицо;
  |Condition(зЮЛ=оЮЛ);
  |зИНН:=Doc.ПоступлениеПрочее.Контрагент.ИНН;
  |зНомерВх:=Doc.ПоступлениеПрочее.НомерДокВходящий;
  |зДатаВх:=Doc.ПоступлениеПрочее.ДатаДокВходящий;
  |зНомерВхСФ:=Doc.ПоступлениеПрочее.НомерДокВходящийСФ;
  |зДатаВхСФ:=Doc.ПоступлениеПрочее.ДатаДокВходящийСФ;
  |Group зДок;) UNION ALL (
  |зСтатус:=Doc.РегистрацияОС.@Status;Condition(зСтатус<>1);зДата:=Doc.РегистрацияОС.DocDate;Condition((зДата>=НачДата)And(зДата<КДата));
  |Condition(Doc.РегистрацияОС.КодОперации IN спТип2);
  |зДок:=Doc.РегистрацияОС;
  |зЮЛ:=Doc.РегистрацияОС.ЮрЛицо;
  |Condition(зЮЛ=оЮЛ);
  |зИНН:=Doc.РегистрацияОС.Контрагент.ИНН;
  |зНомерВх:=Doc.РегистрацияОС.НомерДокВходящий;
  |зДатаВх:=Doc.РегистрацияОС.ДатаДокВходящий;
  |зНомерВхСФ:=Doc.РегистрацияОС.НомерДокВходящийСФ;
  |зДатаВхСФ:=Doc.РегистрацияОС.ДатаДокВходящийСФ;
  |Group зДок;)";
    
  З:=Query.Create();
  ТПоступления:=З.Execute(ТЗ,0);
  
  КДата:=КонДата+7;
  спТип:=List.Create(Enum.коВозвратПоставщику.ВозвратТМЦ,Enum.коВозвратПоставщику.ВнутреннееПеремещение);  
  ТЗ:="зСтатус:=Doc.ВозвратПоставщику.@Status;Condition(зСтатус<>1);зДата:=Doc.ВозвратПоставщику.DocDate;Condition((зДата>=НачДата)And(зДата<КДата));
  |зДок:=Doc.ВозвратПоставщику;
  |зКО:=Doc.ВозвратПоставщику.КодОперации;
  |Condition(зКО IN спТип);  
  |зЮЛ:=Doc.ВозвратПоставщику.ЮрЛицо;
  |Condition(зЮЛ=оЮЛ);
  |зДО:=Doc.ВозвратПоставщику.ДокОснование;
  |Group зДок;";
  З:=Query.Create();
  ТВозвраты:=З.Execute(ТЗ,0);
  
  ТПоступления.Sort("зДата+,зНомер+");
  ТПоступления.AddColumn("спВозвраты");
  ТПоступления.Select();
  While ТПоступления.Next() Do
    ТПоступления.зИНН:=TearStr((ТПоступления.зИНН),"/");
    While ТВозвраты.FindAndGoto(ТПоступления.зДок,,"зДО")>0 Do
      If IsEmpty(ТПоступления.спВозвраты) Then
        ТПоступления.спВозвраты:=List.Create();
      EndIf;
      ТПоступления.спВозвраты.Add(ТВозвраты.зДок);
      ТВозвраты.зДО:=0;
    EndDo;
  EndDo;
  З:=0;
  Exit ТПоступления;
EndFunction

Function ОбновитьЛокальноеПоступление(ТПоступления,спСтатусыДокументов=0)
  оДокументы:=Form.оДокументы.Value;
  зДокЛок:=ТПоступления.зДок.Copy();
  оДокументы.Локальный:=зДокЛок;
  оДокументы.зДокЛок:=зДокЛок.DocNum+" от "+зДокЛок.DocDate;
  If _And(спСтатусыДокументов<>0,глЕстьРеквизитДокумента("УникальныйИдентификатор4",зДокЛок.DBName())) Then
    ЛокСтатус:=зДокЛок.УникальныйИдентификатор4;
    If ЛокСтатус="%" Then
      ЛокСтатус:=2;
    ElseIf ЛокСтатус="#" Then
      ЛокСтатус:=5;
    Else
      ЛокСтатус:=0;
    EndIf;
    If ((оДокументы.СтатусЧл=1)Or(оДокументы.СтатусЧл=7))And(ЛокСтатус>0) Then
      оДокументы.зСтатус:="(лок) "+спСтатусыДокументов[ЛокСтатус];
      оДокументы.СтатусЧл:=ЛокСтатус;
    EndIf;
  EndIf;
  
  If not IsEmpty(ТПоступления.спВозвраты) Then
    оДокументы.спВозвраты:=ТПоступления.спВозвраты;
    If оДокументы.спВозвраты.Size()=1 Then
      оДокументы.зВзв:=оДокументы.спВозвраты[1].DocNum+" от "+оДокументы.спВозвраты[1].DocDate;
    Else
      оДокументы.зВзв:=""+оДокументы.спВозвраты.Size()+" возвратов";
    EndIf;
  EndIf;
EndFunction


Function ЗагрузитьДокументУПД(Стр,ByRef Ошибка,СпДокумент=0)
  оЮЛ:=Form.оЮрЛицо.Value;
  ИННЮЛ:=оЮЛ.ИНН;
  ИННЮЛ:=TearStr(ИННЮЛ,"/");

  //Результат: КНД,Сумма,ПродавецИД,ПокупательИД,ПродавецИмя,ПродавецИНН,ПродавецКПП,ПродавецАдрес,ПродавецGLN,ДокНомер,ДокДата,СчФакНомер,СчФакДата,ТСтроки
  If СпДокумент=0 Then
    СпДокумент:=List.Create();
  EndIf;
  Стр:=ReformatXML(Стр,0b100011);
  While 1 Do
    //Формат: <Заголовок><Файл ИдФайл="..." ВерсФорм="..." ВерсПрог="...">
    If Pos("<?",Стр)<10 Then
      TearStr(Стр,"?>");
    EndIf;
    iNum:=Pos("<Файл",Стр);
    If (iNum=0)Or(iNum>10) Then
      Break;
    EndIf;
    TearStr(Стр,"<");
    Сп:=ЗагрузитьПеременные(TearStr(Стр,">"));
    If IsEmpty(Сп["ИдФайл"]) Then
      Break;
    EndIf;
    СпДокумент["ИдФайл"]:=Сп["ИдФайл"];
    If Pos("<СвУчДокОбор",Стр)>0 Then //5.01
      TearStr(Стр,"<СвУчДокОбор");
      If Стр="" Then
        Break;
      EndIf;
      Сп:=ЗагрузитьПеременные(TearStr(Стр,">"));
      СпДокумент["ПродавецИД"]:=Сп["ИдОтпр"];
      СпДокумент["ПокупательИД"]:=Сп["ИдПол"];
    Else
      //ON_NSCHFDOPPR_<Получ>_<Отправ>_GGGGMMDD_<GUID>_N2_N3_N4_N5_N6_N7
      Стр2:=Сп["ИдФайл"];
      TearStr(Стр2,"ON_");
      TearStr(Стр2,"_");
      If Стр2="" Then
        Break;
      EndIf;
      СпДокумент["ПокупательИД"]:=TearStr(Стр2,"_");
      СпДокумент["ПродавецИД"]:=TearStr(Стр2,"_");
    EndIf;
    TearStr(Стр,"<Документ");
    If Стр="" Then
      Break;
    EndIf;
    Сп:=ЗагрузитьПеременные(TearStr(Стр,">"));
    СпДокумент["КНД"]:=Сп["КНД"];
    СпДокумент["ПоФактХЖ"]:=Сп["ПоФактХЖ"];
    СпДокумент["ДокДата"]:=Date(Сп["ДатаИнфПр"]+" "+Replace(Сп["ВремИнфПр"],".",":"));
    Стр0:=Стр;
    
    //Заголовок
    TearStr(Стр,"<СвСчФакт");
    If Стр="" Then
      Break;
    EndIf;
    Сп:=ЗагрузитьПеременные(TearStr(Стр,">"));
    СпДокумент["СчФакНомер"]:=CoalesceEx(2,Сп["НомерСчФ"],Сп["НомерДок"]);
    СпДокумент["СчФакДата"]:=Date(CoalesceEx(2,Сп["ДатаСчФ"],Сп["ДатаДок"]));
    
    Стр1:=Стр;
    If Pos("<ИспрСчФ",Стр)>0 Then //5.01
      TearStr(Стр1,"<ИспрСчФ");
      Сп:=ЗагрузитьПеременные(TearStr(Стр1,"</ИспрСчФ>"));
      If not IsEmpty(Date(Сп["ДефДатаИспрСчФ"])) Then
        СпДокумент["СчФакИсправлениеНомер"]:=Сп["ДефНомИспрСчФ"];
        СпДокумент["СчФакИсправлениеДата"]:=Date(Сп["ДефДатаИспрСчФ"]);
      EndIf;
    Else
      TearStr(Стр1,"<ИспрДок");
      Сп:=ЗагрузитьПеременные(TearStr(Стр1,"</ИспрДок>"));
      If not IsEmpty(Date(Сп["НомИспр"])) Then
        СпДокумент["СчФакИсправлениеНомер"]:=Сп["НомИспр"];
        СпДокумент["СчФакИсправлениеДата"]:=Date(Сп["ДатаИспр"]);
      EndIf;
    EndIf;
    
    //Продавец
    Стр1:=Стр;
    TearStr(Стр1,"<СвПрод");
    Стр1:=TearStr(Стр1,"</СвПрод>");
    If Pos("<СвЮЛУч",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвЮЛУч");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвЮЛУч>"));
      СпДокумент["ПродавецИмя"]:=Сп["НаимОрг"];
      СпДокумент["ПродавецИНН"]:=Сп["ИННЮЛ"];
      СпДокумент["ПродавецКПП"]:=Сп["КПП"];
    ElseIf Pos("<СвФЛУч",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвФЛУч");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвФЛУч>"));
      СпДокумент["ПродавецИмя"]:=Сп["Фамилия"]+" "+Сп["Имя"]+" "+Сп["Отчество"];
      СпДокумент["ПродавецИНН"]:=Сп["ИННФЛ"];
      СпДокумент["ПродавецКПП"]:="";
    ElseIf Pos("<СвИП",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвИП");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвИП>"));
      СпДокумент["ПродавецИмя"]:=Сп["Фамилия"]+" "+Сп["Имя"]+" "+Сп["Отчество"];
      СпДокумент["ПродавецИНН"]:=Сп["ИННФЛ"];
      СпДокумент["ПродавецКПП"]:="";
    Else
      Break;
    EndIf;
    //Адрес продавца
    If Pos("<Адрес",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<Адрес");
      Стр2:=TearStr(Стр2,"</Адрес>");
      If Pos("<АдрРФ",Стр2)>0 Then
        TearStr(Стр2,"<АдрРФ");
        Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</АдрРФ>"));
        //<АдрРФ Индекс="..." КодРегион="..." Город="..." Улица="..." Дом="..."/>
        СпДокумент["ПродавецАдрес"]:=Сп["Индекс"]+","+Сп["Район"]+","+Сп["Город"]+","+Сп["НаселПункт"]+","+Сп["Улица"]+","+Сп["Дом"]+","+Сп["Корпус"];
      ElseIf Pos("<АдрИнф",Стр2)>0 Then
        TearStr(Стр2,"<АдрИнф");
        Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</АдрИнф>"));
        //<АдрИнф КодСтр="" НаимСтран="" АдрТекст=""/>
        СпДокумент["ПродавецАдрес"]:=Сп["АдрТекст"];
      EndIf;
    EndIf;
    
    //Покупатель
    Стр1:=Стр;
    TearStr(Стр1,"<СвПокуп");
    Стр1:=TearStr(Стр1,"</СвПокуп>");
    If Pos("<СвЮЛУч",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвЮЛУч");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвЮЛУч>"));
      If ИННЮЛ<>Сп["ИННЮЛ"] Then
        Ошибка:="Документ предназначен для другого юр. лица (ИНН: "+Сп["ИННЮЛ"]+")!";
        Exit 0;
      EndIf;
      СпДокумент["ПокупательИмя"]:=Сп["НаимОрг"];
      СпДокумент["ПокупательИНН"]:=Сп["ИННЮЛ"];
      СпДокумент["ПокупательКПП"]:=Сп["КПП"];
    ElseIf Pos("<СвФЛУч",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвФЛУч");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвФЛУч>"));
      If ИННЮЛ<>Сп["ИННФЛ"] Then
        Ошибка:="Документ предназначен для другого юр. лица (ИНН: "+Сп["ИННФЛ"]+")!";
        Exit 0;
      EndIf;
      СпДокумент["ПокупательИмя"]:=Сп["Фамилия"]+" "+Сп["Имя"]+" "+Сп["Отчество"];
      СпДокумент["ПокупательИНН"]:=Сп["ИННФЛ"];
      СпДокумент["ПокупательКПП"]:="";      
    ElseIf Pos("<СвИП",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвИП");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвИП>"));
      If ИННЮЛ<>Сп["ИННФЛ"] Then
        Ошибка:="Документ предназначен для другого юр. лица (ИНН: "+Сп["ИННФЛ"]+")!";
        Exit 0;
      EndIf;
      СпДокумент["ПокупательИмя"]:=Сп["Фамилия"]+" "+Сп["Имя"]+" "+Сп["Отчество"];
      СпДокумент["ПокупательИНН"]:=Сп["ИННФЛ"];
      СпДокумент["ПокупательКПП"]:="";      
    Else
      Break;
    EndIf;
    //Адрес покупателя
    If Pos("<Адрес",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<Адрес");
      Стр2:=TearStr(Стр2,"</Адрес>");
      If Pos("<АдрРФ",Стр2)>0 Then
        TearStr(Стр2,"<АдрРФ");
        Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</АдрРФ>"));
        //<АдрРФ Индекс="..." КодРегион="..." Город="..." Улица="..." Дом="..."/>
        СпДокумент["ПокупательАдрес"]:=Сп["Индекс"]+","+Сп["Район"]+","+Сп["Город"]+","+Сп["НаселПункт"]+","+Сп["Улица"]+","+Сп["Дом"]+","+Сп["Корпус"];
      ElseIf Pos("<АдрИнф",Стр2)>0 Then
        TearStr(Стр2,"<АдрИнф");
        Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</АдрИнф>"));
        //<АдрИнф КодСтр="" НаимСтран="" АдрТекст=""/>
        СпДокумент["ПокупательАдрес"]:=Сп["АдрТекст"];
      EndIf;
    EndIf;
    
    //Адрес грузополучателя
    Стр1:=Стр;
    TearStr(Стр1,"<ГрузПолуч");
    Стр1:=TearStr(Стр1,"</ГрузПолуч>");
    If Pos("<Адрес",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<Адрес");
      Стр2:=TearStr(Стр2,"</Адрес>");
      If Pos("<АдрРФ",Стр2)>0 Then
        TearStr(Стр2,"<АдрРФ");
        Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</АдрРФ>"));
        //<АдрРФ Индекс="..." КодРегион="..." Город="..." Улица="..." Дом="..."/>
        СпДокумент["ГрузополучательАдрес"]:=Сп["Индекс"]+","+Сп["Район"]+","+Сп["Город"]+","+Сп["НаселПункт"]+","+Сп["Улица"]+","+Сп["Дом"]+","+Сп["Корпус"];
      ElseIf Pos("<АдрИнф",Стр2)>0 Then
        TearStr(Стр2,"<АдрИнф");
        Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</АдрИнф>"));
        //<АдрИнф КодСтр="" НаимСтран="" АдрТекст=""/>
        СпДокумент["ГрузополучательАдрес"]:=Сп["АдрТекст"];
      EndIf;
    EndIf;
    
    
    Стр1:=Стр;
    If Pos("<ДокПодтвОтгрНом",Стр1)>0 Then
      TearStr(Стр1,"<ДокПодтвОтгрНом");
      If Стр1<>"" Then
        Сп:=ЗагрузитьПеременные(TearStr(Стр1,"</ДокПодтвОтгрНом>"));
        СпДокумент["ДокНомер"]:=Сп["РеквНомерДок"];
        СпДокумент["ДокДата"]:=Date(Сп["РеквДатаДок"]);
      Else
        СпДокумент["ДокНомер"]:=СпДокумент["СчФакНомер"];
        СпДокумент["ДокДата"]:=СпДокумент["СчФакДата"];
      EndIf;
    Else
      TearStr(Стр1,"<ДокПодтвОтгр");
      If Стр1<>"" Then
        Сп:=ЗагрузитьПеременные(TearStr(Стр1,"</ДокПодтвОтгр>"));
        СпДокумент["ДокНомер"]:=Сп["НомДокОтгр"];
        СпДокумент["ДокДата"]:=Date(Сп["ДатаДокОтгр"]);
      Else
        СпДокумент["ДокНомер"]:=СпДокумент["СчФакНомер"];
        СпДокумент["ДокДата"]:=СпДокумент["СчФакДата"];
      EndIf;
    EndIf;
    
    Стр1:=Стр;
    TearStr(Стр1,"<ИнфПолФХЖ1");
    If Стр1<>"" Then
      Стр1:=TearStr(Стр1,"</ИнфПолФХЖ1>");
      While Pos("<ТекстИнф",Стр1)>0 Do
        TearStr(Стр1,"<ТекстИнф");
        Сп:=ЗагрузитьПеременные(TearStr(Стр1,"</ТекстИнф>"));
        If Сп["Идентиф"]="номер_накладной" Then
          СпДокумент["ДокНомер"]:=Сп["Значен"];
        ElseIf Сп["Идентиф"]="дата_накладной" Then
          СпДокумент["ДокДата"]:=Date(Сп["Значен"]);
        ElseIf Сп["Идентиф"]="GLN_поставщика" Then
          СпДокумент["ПродавецGLN"]:=Сп["Значен"];
        EndIf;
      EndDo;
    EndIf;
    
    СпДокумент["Сумма"]:=0;
    //Товары
    ТСтроки:=Tab.Create("Наименование,Номенклатура,Партия,Артикул,Штрихкод,ОКЕИ,Количество,Цена,Сумма,СтавкаНДС,спМаркиУпаковок,спМаркиЕдиниц,ФлМаркиГотовы");
    СпДокумент["ТСтроки"]:=ТСтроки;
    Стр:=Стр0;
    TearStr(Стр,"<ТаблСчФакт");
    Стр:=TearStr(Стр,"</ТаблСчФакт>");
    If Стр="" Then
      Break;
    EndIf;
    While Pos("<СведТов",Стр)>0 Do
      TearStr(Стр,"<СведТов");
      Стр1:=TearStr(Стр,"</СведТов>");
      Стр2:=TearStr(Стр1,">");
      Сп:=ЗагрузитьПеременные(Стр2);
      Наименование:=Сп["НаимТов"];
      ОКЕИ:=Сп["ОКЕИ_Тов"];
      Количество:=Number(Сп["КолТов"]);
      If Количество=0 Then
        Количество:=1;
      EndIf;
      Сумма:=Number(Сп["СтТовУчНал"]);
      Цена:=Round(Сумма/Количество,2);
      СтавкаНДС:=Сп["НалСт"];
      If (СтавкаНДС="20%")Or(СтавкаНДС="20/120") Then
        СтавкаНДС:=Enum.СтавкиНДС.НДС20;
      ElseIf (СтавкаНДС="18%")Or(СтавкаНДС="18/118") Then
        СтавкаНДС:=Enum.СтавкиНДС.НДС18;
      ElseIf (СтавкаНДС="10%")Or(СтавкаНДС="10/110") Then
        СтавкаНДС:=Enum.СтавкиНДС.НДС10;
      ElseIf (СтавкаНДС="5%")Or(СтавкаНДС="5/105") Then
        СтавкаНДС:=Enum.СтавкиНДС.НДС5;
      ElseIf (СтавкаНДС="7%")Or(СтавкаНДС="7/107") Then
        СтавкаНДС:=Enum.СтавкиНДС.НДС7;
      ElseIf СтавкаНДС="0%" Then
        СтавкаНДС:=Enum.СтавкиНДС.НДС0;
      ElseIf СтавкаНДС="без НДС" Then
        СтавкаНДС:=Enum.СтавкиНДС.БезНДС;
      Else
        //"НДС исчисляется налоговым агентом"
        СтавкаНДС:=Enum.СтавкиНДС.НДС20;
      EndIf;
      //Штрихкод,МаркиУпаковок,МаркиЕдиниц
      СпМаркиУпаковок:=List.Create();
      СпМаркиЕдиниц:=List.Create();
      Артикул:="";
      Стр2:=Стр1;
      TearStr(Стр2,"<ДопСведТов");
      If Стр2<>"" Then
        Сп:=ЗагрузитьПеременные(TearStr(Стр2,">"));
        Артикул:=Сп["АртикулТов"];
        Стр2:=TearStr(Стр1,"</ДопСведТов>");
        While Стр2<>"" Do
          TearStr(Стр2,"<НомСредИдентТов");
          СтрПал:=TearStr(Стр2,">");
          If Pos("ИдентТрансУпак=""",СтрПал)>0 Then
            TearStr(СтрПал,"ИдентТрансУпак=""");
            СтрПал:=DecodeXMLString(Trim(TearStr(СтрПал,"""")));
          Else
            СтрПал:="";
          EndIf;
          Стр3:=TearStr(Стр2,"</НомСредИдентТов>");
          //<КИЗ>...</КИЗ> -- марка (штука или упаковка)
          //<НомУпак>01...</НомУпак> -- код агрегации упаковки
          //<НомСредИдентТов ИдентТрансУпак="00..."/> -- код агрегации паллеты
          If Pos("<КИЗ>",Стр3)>0 Then
            //СпМаркиЕдиниц
            While Стр3<>"" Do
              TearStr(Стр3,"<КИЗ>");
              Стр4:=DecodeXMLString(Trim(TearStr(Стр3,"</КИЗ>")));
              If Стр4<>"" Then
                СпМаркиЕдиниц.Add(Стр4);
              EndIf;
            EndDo;
          ElseIf Pos("<НомУпак>",Стр3)>0 Then
            //СпМаркиУпаковок, исключаем ОСУ (02??????????????37...)
            While Стр3<>"" Do
              TearStr(Стр3,"<НомУпак>");
              Стр4:=DecodeXMLString(Trim(TearStr(Стр3,"</НомУпак>")));
              If Стр4<>"" Then
                If _Or(Length(Стр4)<18,Left(Стр4,2)<>"02",Mid(Стр4,17,2)<>"37") Then
                  СпМаркиУпаковок.Add(Стр4);
                EndIf;
              EndIf;
            EndDo;
          ElseIf СтрПал<>"" Then
            СпМаркиУпаковок.Add(СтрПал);
          EndIf;
        EndDo;
      EndIf;
      Штрихкод:="";
      While Стр1<>"" Do
        TearStr(Стр1,"<ИнфПолФХЖ2");
        Сп:=ЗагрузитьПеременные(TearStr(Стр1,"</ИнфПолФХЖ2>"));
        If Сп["Идентиф"]="штрихкод" Then
          Штрихкод:=Сп["Значен"];
        ElseIf Сп["Идентиф"]="вложенность" Then
          Чл:=Number(Сп["Значен"]);
          Количество:=Количество*?(Чл=0,1,Чл);
          Цена:=Round(Сумма/Количество,2);
        EndIf;
      EndDo;
      ТСтроки.AddLine("Наименование,Артикул,ОКЕИ,Штрихкод,Количество,Цена,Сумма,СтавкаНДС,спМаркиУпаковок,спМаркиЕдиниц,ФлМаркиГотовы",
        Наименование,Артикул,ОКЕИ,Штрихкод,Количество,Цена,Сумма,СтавкаНДС,СпМаркиУпаковок,СпМаркиЕдиниц,0);
    EndDo;//По строкам
    СпДокумент["Сумма"]:=ТСтроки.Sum("Сумма");
    Exit СпДокумент;
  EndDo;  
  Ошибка:="Документ имеет неверный формат!";
  Exit 0;
EndFunction

Function ОбновитьЗакладкуИсходящихДокументов(ФлПолноеОбновление=1)
  оЮрЛицо:=Form.оЮрЛицо.Value;
  If оЮрЛицо.Selected()=0 Then
    Box("Необходимо выбрать юр. лицо!",Q_STOP);
    Exit 0;
  EndIf;
  ФлПолноеОбновление:=?(IsEmpty(ТДокументыИсхПолн),1,ФлПолноеОбновление);

  оДокументыИсх:=Form.оДокументыИсх.Value;
  оДокументыИсх.ClearLines();
  оДокументыИсх.Column("зДок").ForbidMassLoad:=1;     //Не загружая полные таблицы документов, мы экономим память, большое количество загруженных документов может быстро ее истратить
  СтрСорт:=Form.оДокументыИсх.SortString;
  СтрКнт:=Uppercase(оДокументыИсх.Column("зКонтрагент").Filter);
  
  If ФлПолноеОбновление Then
    ТДокументыИсхПолн:=оДокументыИсх.Copy();
    
    НачДата:=BegOfDay(Form.НачДата.Value);
    КонДата:=BegOfDay(Form.КонДата.Value);
    ObjC:=ObjectCollector.Create();
    
    КДата:=КонДата+1;
    КДата2:=КДата+7;
    спТип:=List.Create(Enum.коРеализация.Реализация,Enum.коРеализация.ВнутреннееПеремещение);  
    спТип2:=List.Create(Enum.коВозвратОтПокупателя.ВозвратТМЦ,Enum.коВозвратОтПокупателя.ВозвратСторнирование);  
    ТЗ:="зСтатус:=Doc.Реализация.@Status;Condition(зСтатус>1);зДата:=Doc.Реализация.DocDate;Condition((зДата>=НачДата)And(зДата<КДата));
    |зДок:=Doc.Реализация;
    |зКО:=Doc.Реализация.КодОперации;
    |Condition(зКО IN спТип);"+?(not ФлИсходящиеВсе,"зПр:=Doc.Реализация.Номенклатура.Номенклатура.флПодлежитПрослеживаемости;Condition(зПр=1);")+"
    |зЮрЛицо:=Doc.Реализация.ЮрЛицо;
    |Condition(зЮрЛицо=оЮрЛицо);
    |Group зДок;";
    
    ТЗ2:="зСтатус:=Doc.ВозвратОтПокупателя.@Status;Condition(зСтатус>1);зДата:=Doc.ВозвратОтПокупателя.DocDate;Condition((зДата>=НачДата)And(зДата<КДата2));
    |зДок:=Doc.ВозвратОтПокупателя;
    |Condition(Doc.ВозвратОтПокупателя.КодОперации IN спТип2);
    |Condition(Doc.ВозвратОтПокупателя.ЮрЛицо=оЮрЛицо);
    |Group зДок;";
    
    З:=Query.Create();
    З.Execute(ТЗ,0);

    З2:=Query.Create();
    Тб2:=З2.Execute(ТЗ2,0);
    Тб2.AddColumn("зДО");
    ФлБыстрыйПоискВозвратов:=Тб2.Size()<1000;
    If ФлБыстрыйПоискВозвратов Then
      MassLoadObjects(Тб2,"зДок,зДО",,,2,"УникальныйИдентификатор");
      Тб2.Sort("зДО");
    EndIf;
    
    Тб:=З.ResultTable;
    Тб.AddColumn("зЗО");
    Тб.AddColumn("Контрагент");
    Тб.AddColumn("Ид2");
    Тб.AddColumn("пДок");
    Тб.AddColumn("ЧлВозвраты");
    Тб.AddColumn("ФлОшибкаВозврата");
    Тб.Column("зДок").ForbidMassLoad:=1;                //Не загружая полные таблицы документов, мы экономим память, большое количество загруженных документов может быстро ее истратить
    ТДокументыИсхПолн.Column("зДок").ForbidMassLoad:=1;
  
    //ФлТипРеализаций:=Number(оТипРеализаций.Get(оТипРеализаций.SelectedLine));
    ФлТипРеализаций:=0;//TODO
    Ном:=0;
    While Ном<Тб.Size() Do
      Ном:=Ном+1;
      If Ном%100=0 Then
        Form.StatusText("Обработка реализаций: "+Ном+" из "+Тб.Size());
      EndIf;  
      
      Тб.CurLine:=Ном;
      зДок:=Тб.зДок.Copy();//Экономия памяти, в таблице Тб должны храниться только не загруженные объекты
      Ид2:=Trim(зДок.УникальныйИдентификатор);
      Фл:=1;
      //TODO: Фильтр
      If not Фл Then
        Тб.Remove(Ном);
        Ном:=Ном-1;
        Continue;
      EndIf;
      
      Тб.Ид2:=Ид2;
      Тб.Контрагент:=ObjC.Get(зДок.Контрагент);
      Тб.пДок:=""+зДок;
      Тб.ФлОшибкаВозврата:=0;
      Тб.ЧлВозвраты:=0;
      While Тб2.FindAndGoto(зДок,,"зДО",ФлБыстрыйПоискВозвратов)>0 Do
        зДок2:=?(ФлБыстрыйПоискВозвратов,Тб2.зДок,Тб2.зДок.Copy());
        Тб.ЧлВозвраты:=Тб.ЧлВозвраты+1;
        If _And(зДок2.УникальныйИдентификатор<>Ид2,_Or(зДок.УникальныйИдентификатор4<>"#",зДок2.УникальныйИдентификатор<>"")) Then
          Тб.ФлОшибкаВозврата:=1;
        EndIf;
        Тб2.Remove(Тб2.CurLine);
      EndDo;
    EndDo;
    
    
    //Проверка не привязанных документов "возврат поставщику"
    КДата:=КонДата+7;
    ТЗ:="зСтатус:=Doc.ВозвратПоставщику.@Status;Condition(зСтатус<>1);зДата:=Doc.ВозвратПоставщику.DocDate;Condition((зДата>=НачДата)And(зДата<КДата));
    |зДок:=Doc.ВозвратПоставщику;"+?(not ФлИсходящиеВсе,"зПр:=Doc.ВозвратПоставщику.Номенклатура.Номенклатура.флПодлежитПрослеживаемости;Condition(зПр=1);")+"
    |зЮЛ:=Doc.ВозвратПоставщику.ЮрЛицо;
    |Condition(зЮЛ=оЮрЛицо);
    |Group зДок;";
    
    З:=Query.Create();
    З.Execute(ТЗ,0);
    ТабВозвраты:=Tab.Create("зДок,Основание");
    aTab:=З.ResultTable;
    aTab.Select();
    While aTab.Next() Do
      зДок:=aTab.зДок;
      зДО:=зДок.ДокОснование;
      ТабВозвраты.AddLine("зДок,Основание",зДок,зДО);
      //Добавляем некоторые возвраты
      Фл:=0;
      If (зДО.Selected()=0)And(зДок.Status()>1) Then
        Фл:=1;
      ElseIf зДО.Selected()<>0 Then
        If зДО.DBName()="ПоступлениеТМЦ" Then
          If (Trim(зДО.УникальныйИдентификатор)<>Trim(зДок.УникальныйИдентификатор))And(Trim(зДок.УникальныйИдентификатор)<>"") Then
            Фл:=1;
          EndIf;
        Else
          Фл:=1;
        EndIf;
      EndIf;
      If not Фл Then
        Continue;
      EndIf;
      Ид2:=Trim(зДок.УникальныйИдентификатор);
      //TODO: Фильтр
      Тб.AddLine("зЗО,зДата,зДок,пДок,Контрагент,Ид2,ЧлВозвраты,ФлОшибкаВозврата",зДО,зДок.DocDate,зДок.Copy(),""+зДок,ObjC.Get(зДок.Контрагент),Ид2,0,0);
    EndDo;
    З:=0;
    
    СпДокументы:=List.Create();
    If not IsEmpty(оЮрЛицо.ПутьДрайвераЭДО) Then
      If спВнешПровайдерЭДО["Инициализирован"]=0 Then
        Box("Драйвер провайдера ЭДО находится в процессе инициализации, попробуйте выполнить эту функцию позднее!",Q_STOP);
        Exit 0;
      ElseIf спВнешПровайдерЭДО["Инициализирован"]<>1 Then
        Box("Невозможно подключение к драйверу ЭДО!",Q_STOP);
        Exit 0;
      EndIf;
      спДрайвер:=спВнешПровайдерЭДО["спДрайвер"];
    
      If IsEmpty(спДрайвер["МодульДрайвера"]) Then
        Box("Драйвер провайдера ЭДО не был инициализирован!",Q_STOP);
        Exit 0;
      EndIf;
    
      //Обновляем статусы исходящих документов
      спДрайвер["ДрайверШифрования"]:=локДрайверПодписи;
      спДрайвер["СД_НачДата"]:=НачДата;
      спДрайвер["СД_КонДата"]:=КонДата;
      спДрайвер["СД_МаксимумСтрокВОтвете"]:=200;
      спДрайвер["СД_ТипДокумента"]:=2;
      спДрайвер["Направление"]:=1;
      спДрайвер["СД_СостояниеДокумента"]:=0;
      спДрайвер["ЮрЛицо"]:=оЮрЛицо;
      Form.StatusText("Получение статусов документов от провайдера ЭДО...");
      Стр:=Trim(ExecuteFunction("DocumentsList",спДрайвер["МодульДрайвера"],спДрайвер));
      спДрайвер["ДрайверШифрования"]:=0;
      If Стр<>"" Then
        Box("Ошибка при загрузке информации о входящих документах: "+Стр+"!",Q_STOP);
        Exit 0;
      EndIf;
      СпДокументы:=спДрайвер["Документы"];
      спДрайвер["Документы"]:=0;
    EndIf;
    
    
    
    Тб.Sort("зЗО,зДата+");//Без упоминания реализаций
    спСтатусыДокументов:=List.Create("ожидает прием","отказана: ожидает ответ получателя","отказана: ожидает наш ответ","принят","отменен","проблема доставки","проблема доставки (неизвестный статус)");
    спИконкиДокументов:=List.Create(279,230,146,247,231,122);
    
    Ном:=0;
    пЗО:=0;
    Тб.Select();
    While Тб.Next() Do
      Ном:=Ном+1;
      Form.StatusText("Заполнение таблицы: "+Ном+" из "+Тб.Size());
      If пЗО<>Тб.зЗО Then
        ТДокументыИсхПолн.AddLine("Локальный,зДок",-1,?(IsEmpty(Тб.зЗО),"   < Без основания >","   "+Тб.зЗО));
        пЗО:=Тб.зЗО;
      EndIf;
      ТДокументыИсхПолн.AddLine("Локальный,зДок,Сумма,зКонтрагент,зСтатус,СтатусЧл,Идентификатор",Тб.зДок,Тб.пДок,Тб.зДок.СуммаВзаиморасчетов,Тб.Контрагент,"",0,Тб.Ид2);
      ТДокументыИсхПолн.тВозвраты:=?(Number(Тб.ЧлВозвраты)=0,"",?(Тб.ФлОшибкаВозврата=1,"НЕ ВЫГРУЖЕНЫ","ОК"));
      If Тб.зДок.УникальныйИдентификатор<>"" Then
        ТДокументыИсхПолн.зСтатус:="В ЭДО не найден";
        ТДокументыИсхПолн.СтатусЧл:=8;
        ТДокументыИсхПолн.Icon(ТДокументыИсхПолн.CurLine,"Иконка",спИконкиДокументов[1]);
      EndIf;
      ЛокСтатус:=Тб.зДок.УникальныйИдентификатор4;
      If ЛокСтатус="%" Then
        ЛокСтатус:=2;
      ElseIf ЛокСтатус="#" Then
        ЛокСтатус:=5;
      Else
        ЛокСтатус:=0;
      EndIf;
      If ЛокСтатус>0 Then
        ТДокументыИсхПолн.зСтатус:="(лок) "+спСтатусыДокументов[ЛокСтатус];
        ТДокументыИсхПолн.СтатусЧл:=ЛокСтатус;
      EndIf;      
    EndDo;  
    
    //Добавляем информацию из ЭДО
    For i:=1 To СпДокументы.Size() Do
      //СпДокумент: Идентификатор,Тип,Статус,Сумма,Комментарий,ПродавецИмя,ПродавецИНН,ПродавецКПП,ПродавецАдрес,ПродавецGLN,ДокНомер,ДокДата,СчФакНомер,СчФакДата,ТСтроки
      //  ТСтроки (могут быть опущены): "Наименование,Артикул,Штрихкод,ОКЕИ,Количество,Цена,Сумма,СтавкаНДС,спМаркиУпаковок,спМаркиЕдиниц,ФлМаркиГотовы"
      СпДокумент:=СпДокументы[i];
      Ид:=СпДокумент["ИдентификаторДокумента"];
      If ТДокументыИсхПолн.FindAndGoto(Ид,,"Идентификатор") Then
        ЧлСтатус:=СпДокумент["Статус"];
        If (ЧлСтатус=4)And(ТДокументыИсхПолн.СтатусЧл=2) Then//СБИС на данный момент отдает неверный статус, если иниицировано аннулирование
          //
        ElseIf ((ЧлСтатус<>1)And(ЧлСтатус<>7))Or(ТДокументыИсхПолн.СтатусЧл=0)Or(ТДокументыИсхПолн.СтатусЧл=8) Then
          ТДокументыИсхПолн.зСтатус:=спСтатусыДокументов[СпДокумент["Статус"]];
          ТДокументыИсхПолн.СтатусЧл:=СпДокумент["Статус"];
        EndIf;
        ТДокументыИсхПолн.СпДокумент:=СпДокумент;
        аИконка:=спИконкиДокументов[СпДокумент["Тип"]];
        аИконка:=?(IsEmpty(аИконка),122,аИконка);
        ТДокументыИсхПолн.Icon(ТДокументыИсхПолн.CurLine,"Иконка",аИконка);
      Else
        //Документ был удален в локальной базе, не показывать, нет смысла
        //ТДокументыИсхПолн.InsertLine(1,"Локальный,зДок,Сумма,зКонтрагент,зСтатус,СтатусЧл,Идентификатор,СпДокумент",
        //  "",СпДокумент["ДокНомер"]+" от "+СпДокумент["ДокДата"],СпДокумент["Сумма"],СпДокумент["ПродавецИмя"],"НЕ НАЙДЕН: "+Ид,СпДокумент["Статус"],Ид,СпДокумент);
        //ТДокументыИсхПолн.Icon(ТДокументыИсхПолн.CurLine,"Иконка",281);
      EndIf;
    EndDo;
    Тб:=0;
  EndIf;//Полное обновление

  //Текущее обновление, если есть сортировка или фильтр, задания не показывать
  оДокументыИсх.Lock();
  Try
    If IsEmpty(СтрКнт) And IsEmpty(СтрСорт) Then
      ТДокументыИсхПолн.CopyTo(оДокументыИсх);
    Else
      ТДокументыИсхПолн.Select();
      While ТДокументыИсхПолн.Next() Do
        If ТДокументыИсхПолн.Локальный=-1 Then
          Continue;
        EndIf;
        If _And(not IsEmpty(СтрКнт),Pos(СтрКнт,Uppercase(ТДокументыИсхПолн.зКонтрагент))=0) Then
          Continue;
        EndIf;
        ТДокументыИсхПолн.CopyTo(оДокументыИсх,ТДокументыИсхПолн.CurLine,1);
      EndDo;
      If СтрСорт<>"" Then
        оДокументыИсх.Sort(СтрСорт);
      EndIf;
    EndIf;
    оДокументыИсх.Column("зДок").ForbidMassLoad:=1;
    Form.оДокументыИсх.InvokeEvent("OnInitLine","IndexFrom,IndexTo",1,оДокументыИсх.Size());
  Finally  
    оДокументыИсх.UnLock();
  EndTry;  
  
  Exit 1;
EndFunction

Function ПростоТак()
EndFunction

Function ОбновитьТаблицы(флФорс=0,ИзФайлов=0)
  оЮрЛицо:=Form.оЮрЛицо.Value;
  оДокументы:=Form.оДокументы.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  
  If оЮрЛицо.Selected()=0 Then
    If флФорс=1 Then
      Box("Необходимо выбрать юр. лицо!",Q_STOP);
    EndIf;
    Exit 0;
  EndIf;
  If ИзФайлов=1 Then
    спТипыДокументов:=List.Create();
    спТипыДокументов["1115131"]:="УПД";
  
    спИконкиДокументов:=List.Create();
    спИконкиДокументов["1115131"]:=279;
    
    Сп:=0;
    If not OpenFileDialog(Сп,"Выберите файлы поступлений УПД в формате xml","Файлы xml (*.xml)|*.xml",2) Then
      Exit 1;
    EndIf;
    ФлОшибки:=0;
    оДокументы.Lock();
    Try
      If оДокументы.Size()>0 Then
        If AskQuestion("Очистить текущий список документов перед загрузкой из файла?",Q_QUESTION+Q_YESNO,R_YES)=R_YES Then
          оДокументы.ClearLines();
        EndIf;
      EndIf;
    
      НачДата2:=0;
      КонДата2:=0;
      For i:=1 To Сп.Size() Do
        Файл:=Сп[i];
        Try
          Стр:=FileToString(Файл,0);
        Except
          Message("Невозможно прочитать файл "+Файл,"!");
          ФлОшибки:=1;
          Continue;
        EndTry;
        If StringTypeStr(Стр)="ANSI" Then
          If _Or(pos("""utf-16",Стр)>0,pos("""UTF-16",Стр)>0) Then
            Стр:=TranslateFrom(Стр,1200);
          ElseIf _Or(pos("""utf-8",Стр)>0,pos(ANSI(Chr($3C,1)+Chr($D0,1)+Chr($A4,1)+Chr($D0,1)+Chr($B0,1)+Chr($D0,1)+Chr($B9,1)+Chr($D0,1)+Chr($BB,1)),Стр)>0) Then
            Стр:=TranslateFrom(Стр,65001);
          EndIf;
        EndIf;
        СтрОшибка:="";
        СпДокумент:=ЗагрузитьДокументУПД(Стр,СтрОшибка);
        //КНД,ПродавецИмя,ПродавецИНН,ПродавецКПП,ПродавецАдрес,ПродавецGLN,ДокНомер,ДокДата,СчФакНомер,СчФакДата,Сумма,Строки
        If IsEmpty(СпДокумент) Then
          Message(СтрОшибка,"!");
          ФлОшибки:=1;
          Continue;
        EndIf;
        аДата:=СпДокумент["ДокДата"];
        If НачДата2=0 Then
          НачДата2:=аДата-7;
        Else
          НачДата2:=Min(аДата-7,НачДата2);
        EndIf;
        If КонДата2=0 Then
          КонДата2:=аДата+7;
        Else
          КонДата2:=Min(аДата+7,КонДата2);
        EndIf;
        
        аТип:=спТипыДокументов[СпДокумент["КНД"]];
        аТип:=?(IsEmpty(аТип),СпДокумент["КНД"],аТип);
        аСтатус:="Из файла";
        If оДокументы.FindAndGoto(СпДокумент["ДокНомер"]+" от "+аДата,,"зДок")>0 Then
          Message("Документ "+СпДокумент["ДокНомер"]+" от "+аДата+" пропущен, так как уже присутствует в таблице!","I");
          Continue;
        EndIf;
        ТСтроки:=СпДокумент["ТСтроки"];
        СтрЗагрузить:="";
        ТСтроки.Select();
        While ТСтроки.Next() Do
          If ТСтроки.ФлМаркиГотовы=0 Then
            СтрЗагрузить:="Марки";
            Break;
          EndIf;
        EndDo;
        
        оДокументы.AddLine("Идентификатор,зКонтрагент,зДок,зТип,зСтатус,СтатусЧл,Загрузить,Сумма,СпДокумент","",СпДокумент["ПродавецИмя"]+", "+СпДокумент["ПродавецИНН"]+"/"+
          СпДокумент["ПродавецКПП"],СпДокумент["ДокНомер"]+" от "+аДата,аТип,аСтатус,0,СтрЗагрузить,СпДокумент["Сумма"],СпДокумент);
        аИконка:=спИконкиДокументов[СпДокумент["КНД"]];
        аИконка:=?(IsEmpty(аИконка),122,аИконка);
        оДокументы.Icon(оДокументы.CurLine,"Иконка",аИконка);
      EndDo;
      
      ТПоступления:=ПолучитьЛокальныеПоступления(НачДата2,Max(?(IsEmpty(КонДата2),Date(),КонДата2),Date()));
      оДокументы.Select();
      While оДокументы.Next() Do
        СпДокумент:=оДокументы.СпДокумент;
        If IsEmpty(СпДокумент) Then
          Continue;
        EndIf;
        пИНН:=СпДокумент["ПродавецИНН"];
        пИНН:=TearStr(пИНН,"/");        
        
        ТПоступления.CurLine:=0;
        If ТПоступления.LocateAndGoto("зНомерВх,зИНН",СпДокумент["ДокНомер"],пИНН)>0 Then //Поиск по вх. номеру и ИНН контрагента
          ОбновитьЛокальноеПоступление(ТПоступления);
        ElseIf ТПоступления.LocateAndGoto("зНомерВх,зДатаВх",СпДокумент["ДокНомер"],СпДокумент["ДокДата"])>0 Then //Поиск по вх. номеру и дате
          ОбновитьЛокальноеПоступление(ТПоступления);
        EndIf;
      EndDo;
    Finally
      оДокументы.UnLock();
    EndTry;
    If ФлОшибки Then
      Box("Некоторые документы не удалось загрузить в список!",Q_WARNING);
    EndIf;
    Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",1,оДокументы.Size());
    
    Form.bPanelClose.SetFocus();
    Exit 1;
  EndIf;
  
  If not ОбновитьЗакладкуИсходящихДокументов() Then
    Exit 0;
  EndIf;
  
  If not IsEmpty(оЮрЛицо.ПутьДрайвераЭДО) Then
    If спВнешПровайдерЭДО["Инициализирован"]=0 Then
      Box("Драйвер провайдера ЭДО находится в процессе инициализации, попробуйте выполнить эту функцию позднее!",Q_STOP);
      Exit 0;
    ElseIf спВнешПровайдерЭДО["Инициализирован"]<>1 Then
      Box("Невозможно подключение к драйверу ЭДО!",Q_STOP);
      Exit 0;
    EndIf;
    спДрайвер:=спВнешПровайдерЭДО["спДрайвер"];
  
    If IsEmpty(спДрайвер["МодульДрайвера"]) Then
      Box("Драйвер провайдера ЭДО не был инициализирован!",Q_STOP);
      Exit 0;
    EndIf;
    
    Form.StatusText("Получение статусов документов от провайдера ЭДО (входящие)...");
    спДрайвер["ДрайверШифрования"]:=локДрайверПодписи;
    спДрайвер["СД_НачДата"]:=НачДата;
    спДрайвер["СД_КонДата"]:=КонДата;
    спДрайвер["СД_МаксимумСтрокВОтвете"]:=200;
    спДрайвер["Направление"]:=0;
    спДрайвер["СД_ТипДокумента"]:=1;
    //TODO: спДрайвер["СД_ТипДокумента"]
    спДрайвер["СД_СостояниеДокумента"]:=0;
    спДрайвер["ЮрЛицо"]:=оЮрЛицо;
    Стр:=Trim(ExecuteFunction("DocumentsList",спДрайвер["МодульДрайвера"],спДрайвер));
    спДрайвер["ДрайверШифрования"]:=0;
    If Стр<>"" Then
      Box("Ошибка при загрузке информации о документах: "+Стр+"!",Q_STOP);
      Exit 0;
    EndIf;
    СпДокументы:=спДрайвер["Документы"];
    спДрайвер["Документы"]:=0;
    спТипыДокументов:=List.Create("Поступление","Реализация","Заявка","Возврат поставщику","Возврат от покупателя","< Неизвестный >");
    спСтатусыДокументов:=List.Create("ожидает прием","отказана: ожидает ответ получателя","отказана: ожидает наш ответ","принят","отменен","ошибка","проблема доставки (неизвестный статус)");
    спИконкиДокументов:=List.Create(279,230,146,247,231,122);
    ТПоступления:=ПолучитьЛокальныеПоступления(НачДата-7,КонДата+7);
    
    ФлОшибки:=0;
    оДокументы.Lock();
    Try
      оДокументы.ClearLines();
      For i:=1 To СпДокументы.Size() Do
        //СпДокумент: Идентификатор,Тип,Статус,Сумма,Комментарий,ПродавецИмя,ПродавецИНН,ПродавецКПП,ПродавецАдрес,ПродавецGLN,ДокНомер,ДокДата,СчФакНомер,СчФакДата,ТСтроки
        //  ТСтроки (могут быть опущены): "Наименование,Артикул,Штрихкод,ОКЕИ,Количество,Цена,Сумма,СтавкаНДС,спМаркиУпаковок,спМаркиЕдиниц,ФлМаркиГотовы"
        СпДокумент:=СпДокументы[i];
        If IsEmpty(СпДокумент["ТСтроки"]) Then
          СтрЗагрузить:="Строки,Марки";
        Else
          СтрЗагрузить:="";
          ТСтроки:=СпДокумент["ТСтроки"];
          ТСтроки.Select();
          While ТСтроки.Next() Do
            If ТСтроки.ФлМаркиГотовы=1 Then
              Continue;
            EndIf;
            СтрЗагрузить:="Марки";
            Break;
          EndDo;
        EndIf;
        пТип:=спТипыДокументов[СпДокумент["Тип"]];
        If IsEmpty(пТип) Then
          пТип:=СпДокумент["Тип"];
        EndIf;
        оДокументы.AddLine("Идентификатор,зКонтрагент,зДок,зТип,зСтатус,СтатусЧл,Загрузить,Сумма,СпДокумент",СпДокумент["Идентификатор"],СпДокумент["ПродавецИмя"]+", "+СпДокумент["ПродавецИНН"]+"/"+
          СпДокумент["ПродавецКПП"],СпДокумент["ДокНомер"]+" от "+СпДокумент["ДокДата"],пТип,спСтатусыДокументов[СпДокумент["Статус"]],СпДокумент["Статус"],СтрЗагрузить,СпДокумент["Сумма"],СпДокумент);
        аИконка:=спИконкиДокументов[СпДокумент["Тип"]];
        аИконка:=?(_And(TypeStr(СпДокумент["Идентификатор"])="LIST",СпДокумент["Идентификатор"]["НеПоддерживается"]=1),89,аИконка);
        аИконка:=?(IsEmpty(аИконка),122,аИконка);
        оДокументы.Icon(оДокументы.CurLine,"Иконка",аИконка);
        
        ТПоступления.CurLine:=0;
        If ТПоступления.LocateAndGoto("зНомерВх,зИНН",СпДокумент["ДокНомер"],СпДокумент["ПродавецИНН"])>0 Then //Поиск по вх. номеру и ИНН контрагента
          ОбновитьЛокальноеПоступление(ТПоступления,спСтатусыДокументов);
        ElseIf ТПоступления.LocateAndGoto("зНомерВхСФ,зИНН",СпДокумент["ДокНомер"],СпДокумент["ПродавецИНН"])>0 Then //Поиск по вх. номеру сч/ф и ИНН контрагента
          ОбновитьЛокальноеПоступление(ТПоступления,спСтатусыДокументов);
        ElseIf ТПоступления.LocateAndGoto("зНомерВх,зДатаВх",СпДокумент["ДокНомер"],СпДокумент["ДокДата"])>0 Then //Поиск по вх. номеру и дате
          ОбновитьЛокальноеПоступление(ТПоступления,спСтатусыДокументов);
        ElseIf ТПоступления.LocateAndGoto("зНомерВхСФ,зДатаВх",СпДокумент["ДокНомер"],СпДокумент["ДокДата"])>0 Then //Поиск по вх. номеру и дате сч/ф
          ОбновитьЛокальноеПоступление(ТПоступления,спСтатусыДокументов);
        EndIf;
      EndDo;
      Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",1,оДокументы.Size());
    Finally
      оДокументы.UnLock();
    EndTry;
    If ФлОшибки Then
      Box("Некоторые документы не удалось загрузить в список!",Q_WARNING);
    EndIf;
    
    Form.bPanelClose.SetFocus();
    Exit 1;
  EndIf;
  
  Box("В юр. лице не настроен провайдер ЭДО, информация будет получена из ГИС МТ, но последний не дает возможности запросить свойства документа, кроме того, в списке будут только принятые или отклоненные документы, "+
    "поэтому, информация по документам будет предоставлена только для справки! Для корректной работы с документами, необходимо настроить провайдера ЭДО или загрузить документы из внешних файлов XML",Q_WARNING);
      
  оТоварнаяГруппа:=SelectObject("Ref.рознТоварныеГруппыГИСМТ",0,0,"Module","SelectForm",,,"Выберите товарную группу ГИС для запроса:");
  If isEmpty(оТоварнаяГруппа) Then
    Exit;
  EndIf;
    
  //Запрос по документам
  //Доп. фильтры: documentType: LP_SHIP_RECEIPT (LP_SHIP_RECEIPT_CSV, LP_SHIP_RECEIPT_XML) -- поступления (не используется)
  //                            LP_RETURN (LP_RETURN_CSV, LP_RETURN_XML) -- возврат в оборот
  //                            LP_ACCEPT_GOODS (LP_ACCEPT_GOODS_CSV, LP_ACCEPT_GOODS_XML) -- принятие поступления
  //                            LP_CANCEL_SHIPMENT -- отмена принятия
  //                            LP_INTRODUCE_OST (LP_INTRODUCE_OST_CSV, LP_INTRODUCE_OST_XML) -- оприходования
  //                            LK_RECEIPT (LK_RECEIPT_CSV, LK_RECEIPT_XML) -- списание марок
  //                            RECEIPT, RECEIPT_RETURN -- розничные чеки
  //                            WRITE_OFF -- списание (только для табака)
  //                            UNIVERSAL_TRANSFER_DOCUMENT -- поступления УПД
  //                            UNIVERSAL_TRANSFER_DOCUMENT_FIX -- поступления УПД, исправление
  //                            UNIVERSAL_CORRECTION_DOCUMENT -- поступления УПД, корректировка
  //                            UNIVERSAL_CORRECTION_DOCUMENT_FIX -- поступления УПД, исправление корректировки
  //                            UNIVERSAL_CANCEL_DOCUMENT -- отказ от УПД
  //limit: (20..10000): всегда 200
  //pg: товарная группа, всегда задана
  //documentStatus: IN_PROGRESS -- проверяется
  //        CHECKED_OK -- обработан
  //        CHECKED_NOT_OK -- обработан с ошибками
  //        PROCESSING_ERROR -- техническая ошибка
  //        ACCEPTED -- принят
  //        CANCELLED -- отменен
  //        WAIT_ACCEPTANCE -- ожидает приёмку
  //        PARSE_ERROR -- обработан с ошибками
  //        WAIT_PARTICIPANT_REGISTRATION -- ожидает регистрации участника в ГИС МТ
  //        WAIT_FOR_CONTINUATION -- ожидает продолжения обработки документа
  Стр2:="/api/v4/true-api/doc/list?dateFrom="+ДатаЗапроса(НачДата)+"&dateTo="+ДатаЗапроса(КонДата)+"&pg="+оТоварнаяГруппа.ВнешнееНаименование+"&limit=200";
  Стр:="";
  СтрОшибка:=глВыполнитьЗапросГИСМТ(локДрайверПодписи,Стр2,Стр);
  If Not IsEmpty(СтрОшибка) Then
    СтрОшибка:=БыстроеФорматированиеJSON(СтрОшибка);
    Тч:=Text.Create();
    Тч.AddString(СтрОшибка);
    Тч.Show("Ошибка получения списка документов",,1);
    Exit;
  EndIf;
  оДокументы.ClearLines();
  ТПоступления:=ПолучитьЛокальныеПоступления(НачДата,КонДата);
  
  спТипыДокументов:=List.Create();
  спТипыДокументов["LP_RETURN"]:="Возврат в оборот";
  спТипыДокументов["LP_RETURN_CSV"]:="Возврат в оборот";
  спТипыДокументов["LP_RETURN_XML"]:="Возврат в оборот";
  спТипыДокументов["LP_ACCEPT_GOODS"]:="Подтверждение";
  спТипыДокументов["LP_ACCEPT_GOODS_CSV"]:="Подтверждение";
  спТипыДокументов["LP_ACCEPT_GOODS_XML"]:="Подтверждение";
  спТипыДокументов["LP_CANCEL_SHIPMENT"]:="Отказ";
  спТипыДокументов["LP_INTRODUCE_OST"]:="Оприходование";
  спТипыДокументов["LP_INTRODUCE_OST_CSV"]:="Оприходование";
  спТипыДокументов["LP_INTRODUCE_OST_XML"]:="Оприходование";
  спТипыДокументов["LK_RECEIPT"]:="Списание";
  спТипыДокументов["LK_RECEIPT_CSV"]:="Списание";
  спТипыДокументов["LK_RECEIPT_XML"]:="Списание";
  спТипыДокументов["WRITE_OFF"]:="Списание";
  спТипыДокументов["RECEIPT"]:="Розн. продажа";
  спТипыДокументов["RECEIPT_RETURN"]:="Розн. возврат";
  спТипыДокументов["UNIVERSAL_TRANSFER_DOCUMENT"]:="УПД";
  спТипыДокументов["UNIVERSAL_TRANSFER_DOCUMENT_FIX"]:="УПД, исправ.";
  спТипыДокументов["UNIVERSAL_CORRECTION_DOCUMENT"]:="УПД коррекц.";
  спТипыДокументов["UNIVERSAL_CORRECTION_DOCUMENT_FIX"]:="УПД коррекц. исправ.";
  спТипыДокументов["UNIVERSAL_CANCEL_DOCUMENT"]:="Отказ от УПД";
  
  спИконкиДокументов:=List.Create();
  спИконкиДокументов["RECEIPT"]:=230;
  спИконкиДокументов["RECEIPT_RETURN"]:=230;
  спИконкиДокументов["UNIVERSAL_TRANSFER_DOCUMENT"]:=279;
  спИконкиДокументов["UNIVERSAL_TRANSFER_DOCUMENT_FIX"]:=279;
  спИконкиДокументов["UNIVERSAL_CORRECTION_DOCUMENT"]:=279;
  спИконкиДокументов["UNIVERSAL_CORRECTION_DOCUMENT_FIX"]:=279;
  спИконкиДокументов["UNIVERSAL_CANCEL_DOCUMENT"]:=279;
  
  спСтатусыДокументов:=List.Create();
  спСтатусыДокументов["IN_PROGRESS"]:="проверяется";
  спСтатусыДокументов["CHECKED_OK"]:="обработан";
  спСтатусыДокументов["CHECKED_NOT_OK"]:="ошибка";
  спСтатусыДокументов["PROCESSING_ERROR"]:="тех. ошибка";
  спСтатусыДокументов["ACCEPTED"]:="принят";
  спСтатусыДокументов["CANCELLED"]:="отменен";
  спСтатусыДокументов["WAIT_ACCEPTANCE"]:="ожидает прием";
  спСтатусыДокументов["PARSE_ERROR"]:="ошибка";
  спСтатусыДокументов["WAIT_PARTICIPANT_REGISTRATION"]:="участник не в ГИС МТ";
  спСтатусыДокументов["WAIT_FOR_CONTINUATION"]:="ожидает обработку";
  
  ФлЧастьСписка:=Pos("],""nextPage"":true}",Стр)>0;
  оДокументы.Lock();
  Try
    TearStr(Стр,"""results"":[");
    While Стр<>"" Do
      Стр2:=ПолучитьЭлементJSON(Стр);
      Сп:=ЗагрузитьМассивJSON(Стр2);
      If IsEmpty(Сп["number"]) Then
        Continue;
      EndIf;
      аДата:=Left(Сп["docDate"],10);//2020-07-02
      аДата:=Date(Mid(аДата,9,2)+"."+Mid(аДата,6,2)+"."+Mid(аДата,1,4));
      аТип:=спТипыДокументов[Сп["type"]];
      аТип:=?(IsEmpty(аТип),Сп["type"],аТип);
      аСтатус:=спСтатусыДокументов[Сп["status"]];
      аСтатус:=?(IsEmpty(аСтатус),Сп["status"],аСтатус);
      оДокументы.AddLine("Идентификатор,зКонтрагент,зДок,зТип,зСтатус,СтатусЧл,Загрузить",Сп["number"],Сп["senderName"]+", "+Сп["senderInn"],Сп["invoiceNumber"]+" от "+аДата,аТип,аСтатус,0,
        "Строки,Марки");
      аИконка:=спИконкиДокументов[Сп["type"]];
      аИконка:=?(IsEmpty(аИконка),122,аИконка);
      оДокументы.Icon(оДокументы.CurLine,"Иконка",аИконка);
      
      ВхНомер:=Сп["invoiceNumber"];
      ВхДата:=аДата;
      ВхИНН:=Сп["senderInn"];
      //Поиск локального
      ТПоступления.CurLine:=0;
      If ТПоступления.LocateAndGoto("зНомерВх,зИНН",ВхНомер,ВхИНН)>0 Then //Поиск по вх. номеру и ИНН контрагента
        ОбновитьЛокальноеПоступление(ТПоступления);
      ElseIf ТПоступления.LocateAndGoto("зНомерВх,зДатаВх",ВхНомер,ВхДата)>0 Then //Поиск по вх. номеру и дате
        ОбновитьЛокальноеПоступление(ТПоступления);
      EndIf;
    EndDo;
    Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",1,оДокументы.Size());
  Finally
    оДокументы.UnLock();
  EndTry;
  If ФлЧастьСписка Then
    Box("В список попали не все документы выбранного периода! Выберите меньший период, чтобы получить полный список!",Q_WARNING);
  EndIf;
  
  Form.bPanelClose.SetFocus();
  Exit 1;
EndFunction

Function ПолучитьСтатусДокументаГИС(тИД,аТоварнаяГруппа="")
  //NOTE: аТоварнаяГруппа не использовать! Списание отправляется на ismp..., а статус документа можно получить только с markirovka...
  If IsEmpty(тИД) Then
    Exit "Неверный GUID документа для получения статуса!";
  EndIf;
  
  аСек:=0;
  While 1 Do
    Form.StatusText("Ожидание ответа ГИС (сек): "+аСек);
    Стр2:="/api/v4/true-api/doc/"+тИД+"/info";
    Стр:="";
    СтрОшибка:=глВыполнитьЗапросГИСМТ(локДрайверПодписи,Стр2,Стр,аТоварнаяГруппа);
    If Not IsEmpty(СтрОшибка) Then
      If (pos("/1.1 404",СтрОшибка)>0)And(аСек<60) Then
        Sleep(2000);
        аСек:=аСек+2;
        Continue;//Документ еще не успел создаться
      EndIf;
      Exit "Ошибка запроса статуса документа: "+СтрОшибка;
    EndIf;
    If ((Pos("IN_PROGRESS",Стр)=0)And(Pos("WAIT_FOR_CONTINUATION",Стр)=0))or(аСек>70) Then
      Exit БыстроеФорматированиеJSON(Стр);
    EndIf;
    Sleep(2000);
    аСек:=аСек+2;
  EndDo;
EndFunction

Function ОчиститьСкобки(СтМарка)//Устарело, больше не передается ГИС
  //(01)04600439000204(21)??????"
  If Length(СтМарка)>21 Then
    If (СтМарка[1]="(")And(СтМарка[4]=")") Then
      СтМарка:=Mid(СтМарка,2,2)+Mid(СтМарка,5);
      If (СтМарка[17]="(")And(СтМарка[20]=")") Then
        СтМарка:=Left(СтМарка,16)+Mid(СтМарка,18,2)+Mid(СтМарка,21);
      EndIf;
    EndIf;
  EndIf;
  Exit СтМарка;
EndFunction

Function ПолучитьСтрокуJSON(Текст,СтрРазд="""")
  //..\".."
  i:=1;
  While i<=Length(Текст) Do
    If Текст[i]="\" Then //\"
      i:=i+1;
    ElseIf Текст[i]=СтрРазд Then
      Break;
    EndIf;
    i:=i+1;
  EndDo;
  Exit Left(Текст,i-1);
EndFunction

Function ЗагрузитьНоменклатуруИМаркиТекущегоДокумента(СпДокумент=0,ФлТихо=0,ByRef Ошибка="",ByRef ФлОбновление=0)
  Ошибка:="";
  If not isEmpty(Form.Control("оДокументы")) Then  
    оДокументы:=Form.оДокументы.Value;
    If оДокументы.SelectedLine=0 Then
      Exit 0;
    EndIf;
  EndIf;
  ФлРезультат:=1;
  Try
    If IsEmpty(локДрайверПодписи["МодульДрайвера"]) Then
      Ошибка:="Драйвер подписи не работает или установлен некорректно! Обратитесь к администратору!";
      Exit 0;
    EndIf;
    
    If _And(IsEmpty(СпДокумент),not isEmpty(Form.Control("оДокументы"))) Then  
      оДокументы.CurLine:=оДокументы.SelectedLine;
      СпДокумент:=оДокументы.СпДокумент;
    EndIf;
    ТбШК:=Tab.Create("Штрихкод,Номенклатура,Коэффициент");
    ТСтроки:=СпДокумент["ТСтроки"];
    ТСтроки.Select();
    While ТСтроки.Next() Do
      If ТСтроки.ФлМаркиГотовы=1 Then
        Continue;
      EndIf;
      зНом:=ТСтроки.Номенклатура;
      If _And(IsEmpty(зНом),ТСтроки.спМаркиЕдиниц.Size()+ТСтроки.спМаркиУпаковок.Size()>0) Then
        If ТСтроки.спМаркиЕдиниц.Size()>0 Then
          СтрМарка:=ТСтроки.спМаркиЕдиниц[1];
        Else
          For i:=1 To ТСтроки.спМаркиУпаковок.Size() Do
            СтрМарка:=ТСтроки.спМаркиУпаковок[i];
            If Left(СтрМарка,2)="01" Then //GTIN
              Break;
            EndIf;
          EndDo;
        EndIf;
        If Left(СтрМарка,2)="01" Then //GTIN
          СтрМарка:=Right(Left(СтрМарка,16),13);
          If ТбШК.FindAndGoto(СтрМарка,,"Штрихкод")=0 Then
            Сп:=Ref.тмцШтрихкоды.Load(0,"~(@Status=0)And(Name=СтрМарка)");
            For i2:=1 To Сп.Size() Do
              зШк:=Сп[i2];
              зН:=зШк.Parent();
              If зН.DBName()<>"тмцНоменклатура" Then
                Continue;
              EndIf;
              зНом:=зН;
              ТбШК.AddLine("Штрихкод,Номенклатура",СтрМарка,зН);
              Break;
            EndDo;
          Else
            зНом:=ТбШК.Номенклатура;
          EndIf;
        EndIf;
      EndIf;
      If IsEmpty(зНом) Then
        //Некоторые строки содержат новую номенклатуру, которую не удалось найти в базе данных
        Continue;
      EndIf;
      
      СпСтар:=ТСтроки.спМаркиЕдиниц.Copy();
      If ТСтроки.спМаркиУпаковок.Size()>0 Then
        //Запрос штучных марок из марок упаковок, марки должны быть без крипточасти
        If IsEmpty(зНом.ГИСМТТоварнаяГруппа) Then
          Ошибка:="Для номенклатуры "+зНом+" ("+зНом.Code+") не выбрана товарная группа ГИС, однако документ содержит марки упаковок!";
          Exit 0;
        EndIf;
        оТоварнаяГруппа:=зНом.ГИСМТТоварнаяГруппа;
      
        Form.StatusText("Запрос марок единиц: "+ТСтроки.Наименование);
        СтрТело:="[";
        For iLoop:=1 To ТСтроки.спМаркиУпаковок.Size() Do
          СтрТело:=СтрТело+?(iLoop>1,",")+""""+EncodeString(глУдалитьКрипточасть(ТСтроки.спМаркиУпаковок[iLoop],оТоварнаяГруппа),"JSON")+"""";
        EndDo;
        СтрТело:=СтрТело+"]";
        СтрОшибка:=глВыполнитьЗапросГИСМТ(локДрайверПодписи,"/api/v3/true-api/cises/aggregated/list?pg="+оТоварнаяГруппа.ВнешнееНаименование,СтрТело,,1);
        If Not IsEmpty(СтрОшибка) Then
          Ошибка:="Ошибка при запросе штучных марок из марки упаковки: "+СтрОшибка+"!";
          Exit 0;
        EndIf;
        СтУпаковка:=ТСтроки.спМаркиУпаковок[1];
        //{
        //"010460043994001221?????\"\"":{
        //"00000046235046T??????":["??","??","??"...],
        //"00000046235046G??????":[],
        //"00000046235046u??????":[],
        //"00000046235046o??????":[],
        //"00000046235046L??????":[],
        //"000000462350469??????":[],
        //"00000046235046A??????":[],
        //"00000046235046i??????":[],
        //"00000046235046T??????":[],
        //"00000046235046R??????":[]},
        //"...":{...}}
        TearStr(СтрТело,_NEWLINE+_NEWLINE);
        aTree:=LoadJSONFromString(СтрТело,0);
        For j:=1 To aTree.Size() Do
          If TypeStr(aTree.ByIndex(j))="TREE.BRANCH" Then
            aBranch:=aTree.ByIndex(j);
            СтУпаковка:=ОчиститьСкобки(aBranch.Name);
            For i:=1 To aBranch.Size() Do
              aBranch2:=aBranch.ByIndex(i);
              If aBranch2.Size()=0 Then
                ТСтроки.спМаркиЕдиниц.Add(aBranch2.Name,СтУпаковка);
              Else
                СтУпаковка2:=ОчиститьСкобки(aBranch2.Name);
                For i2:=1 To aBranch2.Size() Do
                  ТСтроки.спМаркиЕдиниц.Add(aBranch2.ByIndex(i2).Name,СтУпаковка2);
                EndDo;
              EndIf;
              ФлОбновление:=1;
            EndDo;
          EndIf;
        EndDo;
      EndIf;
      
      If СпСтар.Size()>0 Then
        //Запрос марок упаковок из штучных марок, марки должны быть без крипточасти
        If IsEmpty(зНом.ГИСМТТоварнаяГруппа) Then
          Ошибка:="Для номенклатуры "+зНом+" ("+зНом.Code+") не выбрана товарная группа ГИС, однако документ содержит марки штучных единиц!";
          Exit 0;
        EndIf;
        оТоварнаяГруппа:=зНом.ГИСМТТоварнаяГруппа;
        
        Form.StatusText("Запрос марок упаковки: "+ТСтроки.Наименование);
        СтрТело:="{""cis"":"""+EncodeString(глУдалитьКрипточасть(СпСтар[1],оТоварнаяГруппа),"JSON")+"""}";
        СтрОшибка:=глВыполнитьЗапросГИСМТ(локДрайверПодписи,"/api/v3/true-api/cises/history/list",СтрТело,,1);
        If Not IsEmpty(СтрОшибка) Then
          ТСтроки.спМаркиЕдиниц:=СпСтар;
          Ошибка:="Ошибка при запросе марки упаковки: "+СтрОшибка+"!";
          Exit 0;
        EndIf;
        //{"cisAggregation":[{
        //"cis":"00000046247131%??????",
        //"operationType":"AGGREGATION",
        //"operationDate":"2022-02-22T21:11:21.247Z",
        //"packageType":"UNIT",
        //"extendedPackageType":"UNIT",
        //"parent":"(01)04600439000204(21)>l-SZM\""},...]}
        СтДата:=0;
        СтУпаковка:="";
        While Pos("""parent"":",СтрТело)>0 Do
          СтрТип:=СтрТело;
          TearStr(СтрТип,"""operationType"":");
          TearStr(СтрТип,"""");
          СтрТип:=TearStr(СтрТип,"""");
          
          аДата:=СтрТело;
          TearStr(аДата,"""operationDate"":");
          TearStr(аДата,"""");
          аДата:=TearStr(аДата,"""");//2025-06-01T21:51:27.712
          аДата:=Date(Mid(аДата,9,2)+"."+Mid(аДата,6,2)+"."+Left(аДата,4)+" "+Mid(аДата,12,8));
          
          TearStr(СтрТело,"""parent"":");
          TearStr(СтрТело,"""");
          СтрУпаковка:=ПолучитьСтрокуJSON(СтрТело);
          If СтрТип<>"AGGREGATION" Then
            Continue;
          EndIf;      
          If _Or(СтДата=0,аДата>СтДата) Then
            СтДата:=аДата;
            СтУпаковка:=ОчиститьСкобки(DecodeString(СтрУпаковка,"JSON"));
          EndIf;
        EndDo;
        For i:=1 To СпСтар.Size() Do//Первые СпСтар.Size() марок
          СтрМарка:=глУдалитьКрипточасть(ТСтроки.спМаркиЕдиниц[i],оТоварнаяГруппа);
          ТСтроки.спМаркиЕдиниц.Set(i,СтрМарка,СтУпаковка);
        EndDo;
        ТСтроки.спМаркиУпаковок.Add(СтУпаковка);
        ФлОбновление:=1;
      EndIf;
      ТСтроки.ФлМаркиГотовы:=1;
    EndDo;
    
    If not ФлТихо Then
      Box("Запрос марок для выбранной накладной выполнен удачно!",Q_INFORMATION);
    EndIf;
    If not isEmpty(Form.Control("оДокументы")) Then  
      оДокументы.Загрузить:="";
      Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",оДокументы.CurLine,оДокументы.CurLine);
    EndIf;
    Exit 1;
  Finally
    If (not ФлТихо)And(Ошибка<>"") Then
      Box("Невозможно обновить марки в выбранном документе, ошибка: "+Ошибка+"!",Q_STOP);
    EndIf;
  EndTry;
  Exit 0;
EndFunction

//Поддерживаются: ON_NKORSCHFDOPPR, DP_PRIRASXPRIN
Function ВывестиОтчетПоДокументуРасхождения(Стр,ФлВходящий,СозданКонтрагентом)

  Function _Получить(aNode,Путь,Атрибут)
    Result:="";
    Try
      If Left(Путь,1)="." Then
        aNode2:=aNode.Duplicate;
        aNode2.Path:=aNode.Path+Mid(Путь,2);
        If Атрибут="!" Then
          Exit DecodeXMLString(aNode2.Text);
        Else
          Exit ?(Атрибут="",DecodeXMLString(aNode2.Value),DecodeXMLString(aNode2.GetAttributeValue(Атрибут)));
        EndIf;
      ElseIf aNode.Path<>Путь Then
        aNode.Path:=Путь;
      EndIf;
      If Атрибут="!" Then
        Exit DecodeXMLString(aNode.Text);
      Else
        Exit ?(Атрибут="",DecodeXMLString(aNode.Value),DecodeXMLString(aNode.GetAttributeValue(Атрибут)));
      EndIf;
    Except
    EndTry;
  EndFunction
  
  Function _ПолучитьКонтрагента(aNode,СтрПуть)
    Exit CoalesceEx(2,_Получить(aNode,СтрПуть+"<СвЮЛУч>","НаимОрг"),_Получить(aNode,СтрПуть+"<СвОрг><СвОргУч>","НаимОрг"),
      Trim(_Получить(aNode,СтрПуть+"<СвИП><ФИО>","Фамилия")+" "+_Получить(aNode,СтрПуть+"<СвИП><ФИО>","Имя")+" "+_Получить(aNode,СтрПуть+"<СвИП><ФИО>","Отчество")),
      Trim(_Получить(aNode,СтрПуть+"<СвФЛУч>","Фамилия")+" "+_Получить(aNode,СтрПуть+"<СвФЛУч>","Имя")+" "+_Получить(aNode,СтрПуть+"<СвФЛУч>","Отчество")));
  EndFunction   
  
  Function _ПолучитьИНН(aNode,СтрПуть)
    Exit CoalesceEx(2,_Получить(aNode,СтрПуть+"<СвОрг><СвОргУч>","ИННЮЛ"),_Получить(aNode,СтрПуть+"<СвЮЛУч>","ИННЮЛ"),_Получить(aNode,СтрПуть+"<СвФЛУч>","ИННФЛ"),_Получить(aNode,СтрПуть+"<СвФЛУч>","ИННФЛ"),_Получить(aNode,СтрПуть+"<СвИП>","ИННФЛ"));
  EndFunction
  
  Т:=Table.Create();
  Т.SetSourceName("Акт");
  аОб:=XML.Create();
  Стр:=аОб.LoadFromString(Стр);
  If not IsEmpty(Стр) Then
    Message("Ошибки при загрузке файла:"+_NEWLINE+Стр,"!");
    Exit;
  EndIf; 
  aNode:=аОб.Root;
  Файл:=Uppercase(_Получить(aNode,"<Файл>","ИдФайл"));
  If Pos("DP_PRIRASXPRIN",Файл)>0 Then
    пКНД:=_Получить(aNode,"<Файл><Документ>","КНД");
    пНомДата:=_Получить(aNode,"<Файл><Документ><ИдентДокПР>","НомДокПР")+" от "+_Получить(aNode,"<Файл><Документ><ИдентДокПР>","ДатаДокПР");
    aNode.Path:="<Файл><Документ><СодФХЖ1><Продавец><ИдСв>";
    пПродавец:=_ПолучитьКонтрагента(aNode,".");
    пИННКПППродавца:=_ПолучитьИНН(aNode,".");
    aNode.Path:="<Файл><Документ><СодФХЖ1><Покупатель><ИдСв>";
    пПокупатель:=_ПолучитьКонтрагента(aNode,".");
    пИННКПППокупателя:=_ПолучитьИНН(aNode,".");
    If ФлВходящий Then
      пКонтрагент:=пПродавец;
      пИННКПП:=пИННКПППродавца;
      пАдрес:=CoalesceEx(2,_Получить(aNode,"<Файл><Документ><СодФХЖ1><Продавец><Адрес><АдрИнф>","АдрТекст"),_Получить(aNode,"<Файл><Документ><СодФХЖ1><Продавец><Адрес><АдрРФ>","!"));
      пАвтор:=?(СозданКонтрагентом,пКонтрагент,пПокупатель);
    Else
      пКонтрагент:=пПокупатель;
      пИННКПП:=пИННКПППокупателя;
      пАдрес:=CoalesceEx(2,_Получить(aNode,"<Файл><Документ><СодФХЖ1><Покупатель><Адрес><АдрИнф>","АдрТекст"),_Получить(aNode,"<Файл><Документ><СодФХЖ1><Покупатель><Адрес><АдрРФ>","!"));
      пАвтор:=?(СозданКонтрагентом,пПокупатель,пКонтрагент);
    EndIf;
    оЗагол:="УКД № "+_Получить(aNode,"<Файл><Документ><ИдентДокПР>","НомДокПР")+" от "+_Получить(aNode,"<Файл><Документ><ИдентДокПР>","ДатаДокПР");
    Т.CopyByX("v1",1);
    пН:=0;
    aNode.Path:="<Файл><Документ><СодФХЖ2>";
    аСтроки:=aNode.FirstChild();//РезПрием
    зКл:=0;
    зСм:=0;
    While not IsEmpty(аСтроки) Do
      пН:=пН+1;
      пНоменклатура:=_Получить(аСтроки,".<Ценности>","НаимТов");
      пКолВо1:=глФРМЧл(Number(_Получить(аСтроки,".<ПоДокум>","КолТовПрин")));
      пКолВо2:=глФРМЧл(Number(_Получить(аСтроки,".<ПоФакту>","КолТовПрин")));
      пКолВо3:=Number(_Получить(аСтроки,".<ПоФакту>","КолТовПрин"))-Number(_Получить(аСтроки,".<ПоДокум>","КолТовПрин"));
      зКл:=Round(зКл+пКолВо3,6);
      пКолВо3:=глФРМЧл(пКолВо3);
      пСумма1:=глФРМ(Number(_Получить(аСтроки,".<ПоДокум>","СтоимТовНДСПрин")));
      пСумма2:=глФРМ(Number(_Получить(аСтроки,".<ПоФакту>","СтоимТовНДСПрин")));
      пСумма3:=Number(_Получить(аСтроки,".<ПоФакту>","СтоимТовНДСПрин"))-Number(_Получить(аСтроки,".<ПоДокум>","СтоимТовНДСПрин"));
      зСм:=Round(зСм+пСумма3,2);
      пСумма3:=глФРМ(пСумма3);
      пСтавка1:=_Получить(аСтроки,".<ПоДокум>","СтавНДСПрин");
      пСтавка2:=_Получить(аСтроки,".<ПоФакту>","СтавНДСПрин");
      Т.CopyByX("v2",1);
      аСтроки:=аСтроки.Next();
    EndDo;
    пКолВо3:=глФРМЧл(зКл);
    пСумма3:=глФРМ(зСм);
    Т.CopyByX("v3",1);
  ElseIf Pos("ON_NKORSCHFDOPPR",Файл)>0 Then
    пКНД:=_Получить(aNode,"<Файл><Документ>","КНД");
    пНомДата:=_Получить(aNode,"<Файл><Документ><СвКСчФ>","НомерКСчФ")+" от "+_Получить(aNode,"<Файл><Документ><СвКСчФ>","ДатаКСчФ");
    пПродавец:=_ПолучитьКонтрагента(aNode,"<Файл><Документ><СвКСчФ><СвПрод><ИдСв>");
    пПокупатель:=_ПолучитьКонтрагента(aNode,"<Файл><Документ><СвКСчФ><СвПокуп><ИдСв>");

    If ФлВходящий Then
      пКонтрагент:=пПродавец;
      пИННКПП:=_ПолучитьИНН(aNode,"<Файл><Документ><СвКСчФ><СвПрод><ИдСв>");
      пАдрес:=CoalesceEx(2,_Получить(aNode,"<Файл><Документ><СвКСчФ><СвПрод><Адрес><АдрИнф>","АдрТекст"),_Получить(aNode,"<Файл><Документ><СвКСчФ><СвПрод><Адрес><АдрРФ>","!"));
      пАвтор:=?(СозданКонтрагентом,пКонтрагент,пПокупатель);
    Else
      пКонтрагент:=пПокупатель;
      пИННКПП:=_ПолучитьИНН(aNode,"<Файл><Документ><СвКСчФ><СвПокуп><ИдСв>");
      пАдрес:=CoalesceEx(2,_Получить(aNode,"<Файл><Документ><СвКСчФ><СвПокуп><Адрес><АдрИнф>","АдрТекст"),_Получить(aNode,"<Файл><Документ><СвКСчФ><СвПокуп><Адрес><АдрРФ>","!"));
      пАвтор:=?(СозданКонтрагентом,пПокупатель,пКонтрагент);
    EndIf;
    оЗагол:="Корректиров. счет-фактура № "+_Получить(aNode,"<Файл><Документ><СвКСчФ>","НомерКСчФ")+" от "+_Получить(aNode,"<Файл><Документ><СвКСчФ>","ДатаКСчФ");
    Т.CopyByX("v1",1);
    пН:=0;
    aNode.Path:="<Файл><Документ><ТаблКСчФ>";
    аСтроки:=aNode.FirstChild();
    зКл:=0;
    зСм:=0;
    While not IsEmpty(аСтроки) Do
      If аСтроки.Name<>"СведТов" Then
        аСтроки:=аСтроки.Next();
        Continue;
      EndIf;
      пН:=пН+1;
      пНоменклатура:=_Получить(аСтроки,".","НаимТов");
      пКолВо1:=глФРМЧл(Number(_Получить(аСтроки,".","КолТовДо")));
      пКолВо2:=глФРМЧл(Number(_Получить(аСтроки,".","КолТовПосле")));
      пКолВо3:=Number(_Получить(аСтроки,".","КолТовПосле"))-Number(_Получить(аСтроки,".","КолТовДо"));
      зКл:=Round(зКл+пКолВо3,6);
      пКолВо3:=глФРМЧл(пКолВо3);
      пСумма1:=Number(_Получить(аСтроки,".<СтТовБезНДС>","СтоимДоИзм"))+Number(_Получить(аСтроки,".<СумНалДо><СумНДС>",""));
      пСумма2:=Number(_Получить(аСтроки,".<СтТовБезНДС>","СтоимПослеИзм"))+Number(_Получить(аСтроки,".<СумНалПосле><СумНДС>",""));
      пСумма3:=пСумма2-пСумма1;
      зСм:=Round(зСм+пСумма3,2);
      пСумма1:=глФРМ(пСумма1);
      пСумма2:=глФРМ(пСумма2);
      пСумма3:=глФРМ(пСумма3);
      пСтавка1:=_Получить(аСтроки,".","НалСтДо");
      пСтавка2:=_Получить(аСтроки,".","НалСтПосле");
      Т.CopyByX("v2",1);
      аСтроки:=аСтроки.Next();
    EndDo;
    пКолВо3:=глФРМЧл(зКл);
    пСумма3:=глФРМ(зСм);
    Т.CopyByX("v3",1);
  Else
    Message("Неподдерживаемый тип файла!","!");
    Exit;
  EndIf;
  глПечатнаяФормаОтчета(Т,0,оЗагол);
EndFunction

Function ВывестиОтчетПоДокументу()
  оДокументы:=Form.оДокументы.Value;
  If оДокументы.SelectedLine=0 Then
    Exit;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  СпДокумент:=оДокументы.СпДокумент;
  If _Or(IsEmpty(СпДокумент),IsEmpty(СпДокумент["ТСтроки"])) Then
    Ошибка:="";
    If not ЗагрузитьТекущийДокумент(1,Ошибка) Then
      Box("Невозможно загрузить текущий документ ("+Ошибка+")!",Q_STOP);
      Exit;
    EndIf;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  СпДокумент:=оДокументы.СпДокумент;
  
  Т:=Table.Create();
  Т.SetSourceName("Документ");
  оЗагол:="Входящий документ № "+СпДокумент["ДокНомер"]+" от "+СпДокумент["ДокДата"];
  пНомДата:=СпДокумент["ДокНомер"]+" от "+СпДокумент["ДокДата"];
  пНомДатаСФ:=СпДокумент["СчФакНомер"]+" от "+СпДокумент["СчФакДата"];
  пКНД:=СпДокумент["КНД"];
  пКонтрагент:=СпДокумент["ПродавецИмя"];
  пИННКПП:=""+СпДокумент["ПродавецИНН"]+"/"+СпДокумент["ПродавецКПП"];
  пАдрес:=СпДокумент["ПродавецАдрес"];
  пКодGLN:=СпДокумент["ПродавецGLN"];
  пЮЛ:=""+СпДокумент["ПокупательИмя"]+", "+СпДокумент["ПокупательИНН"]+?(not IsEmpty(СпДокумент["ПокупательКПП"]),"","/"+СпДокумент["ПокупательКПП"]);
  пАдресЮЛ:=СпДокумент["ПокупательАдрес"];
  пАдресДоставки:=Trim(СпДокумент["ГрузополучательАдрес"]);
  Т.CopyByX("v1",1);
  
  пН:=0;
  ТСтроки:=СпДокумент["ТСтроки"];
  ТСтроки.Select();
  While ТСтроки.Next() Do
    пН:=пН+1;
    пНоменклатура:=ТСтроки.Наименование;
    пАртикул:=ТСтроки.Артикул;
    пШтрихкод:=ТСтроки.Штрихкод;
    пКолВо:=глФРМЧл(ТСтроки.Количество);
    пЦена:=глФРМ(ТСтроки.Цена);
    пСумма:=глФРМ(ТСтроки.Сумма);
    пСтавкаНДС:=ТСтроки.СтавкаНДС;
    спМарки:=List.Create();
    спМарки.SetByName("ГИСМТ",1);
    спМарки.SetByName("ПоказатьМарки",1);
    спМарки.SetByName("Марки",ТСтроки.спМаркиЕдиниц);
    спМарки.SetByName("Упаковки",ТСтроки.спМаркиУпаковок);
    пМарки:=?(ТСтроки.спМаркиЕдиниц.Size()=0,"",""+ТСтроки.спМаркиЕдиниц.Size()+" шт.")+?(ТСтроки.спМаркиУпаковок.Size()=0,""," "+ТСтроки.спМаркиУпаковок.Size()+" уп.");
    Т.CopyByX("v2",1);
  EndDo;
  глПечатнаяФормаОтчета(Т,0,оЗагол);
EndFunction

Function OnDoubleClick(Таб)
  Result:=0;
  If глРаботаСОсобымиИконкамиТаблицы(Таб) Then
    Exit;
  EndIf;
  if Таб.SelectionMode>1 then
    Exit 1;
  EndIf;  
  Сп:=Таб.Area(Таб.CurCol,Таб.CurLine,Таб.CurCol,Таб.CurLine).Value;
  If TypeStr(Сп)<>"LIST" Then
    Exit 1;
  EndIf;
  If Сп.GetByName("ГИСМТ")=1 Then
    If Сп.GetByName("ПоказатьМарки")=1 Then
      Тч:=Text.Create();
      Тч.AddString("--- Упаковки ---");
      Тч.AddString(Сп.GetByName("Упаковки").ToString(_NEWLINE));
      Тч.AddString("--- Штуки ---");
      Сп2:=Сп.GetByName("Марки");
      For i:=1 To Сп2.Size() Do
        Тч.AddString(Сп2.GetName(i)+_TAB+Сп2[i]);
      EndDo;
      Тч.Show("Марки",,1);
      Exit;
    EndIf;
  EndIf;
  
  If Сп.Size()=1 Then
    OpenObject(Сп.Get(1),0,1);
  Else
    Об:=0;
    If Сп.Select(Об,0,"Выбор объекта")>0 Then
      OpenObject(Об,0,1);
    EndIf;
  EndIf;  
EndFunction

Function ОчиститьТаблицыДокументов()
  Form.оДокументы.Value.ClearLines();
  Form.оДокументыИсх.Value.ClearLines();
EndFunction

Function НайтиИлиСоздатьПоставщика(КодGLN,Наименование,пИНН,пКПП,Адрес)
  аПр:=Ref.кнтКонтрагенты;
  If ?(КодGLN<>"",not аПр.Find("КодТочкиЕГАИС,@IsFolder,@Status,ТипАктива",КодGLN,0,0,1),
    not аПр.Find("~(Left(ИНН,"+Length(пИНН)+")=пИНН)And(@IsFolder=0)And(@Status=0)And(ТипАктива=1)")) Then
    //Создание поставщика
    аПапка:=0;
    If аПр.Find("~(ТипАктива=1)And(@IsFolder=0)And(@Status=0)And(@Folder.Name=""Поставщики"")") Then
      аПапка:=аПр.Folder();
    ElseIf аПр.Find("~(ТипАктива=1)And(@IsFolder=0)And(@Status=0)") Then
      аПапка:=аПр.Folder();
    Else
      аПапка:=Ref.кнтКонтрагенты;
      аПапка.New(1);
      аПапка.Name:="Поставщики";
      аПапка.ТипАктива:=1;
      If not глЗаписать(аПапка) Then
        Exit;
      EndIf;
    EndIf;
    аПр.New();
    аПр.Folder(аПапка);
    аПр.ТипАктива:=1;
    аПр.Name:=Наименование;
    аПр.ПолнНаименование:=Наименование;
    аПр.ВидКонтрагента:=?(Length(пИНН)>10,Enum.ВидыКонтрагентов.ФизЛицо,Enum.ВидыКонтрагентов.ЮрЛицо);
    аПр.ИНН:=пИНН+?(пКПП<>"","/"+пКПП);
    аПр.КодТочкиЕГАИС:=КодGLN;
    аПр.ЮрАдрес:=Адрес;
    аПр.ФактАдрес:=Адрес;
    If not глЗаписать(аПр) Then
      Exit;
    EndIf;
  EndIf;
  Exit аПр;        
EndFunction


Function СозданиеВходящегоПоступления()
  оДокументы:=Form.оДокументы.Value;
  оЮЛ:=Form.оЮрЛицо.Value;
  If оДокументы.SelectedLine=0 Then
    Exit;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  If оДокументы.Локальный=-1 Then
    Exit;
  EndIf;
  СпДокумент:=оДокументы.СпДокумент;
  If _Or(IsEmpty(оДокументы.СпДокумент),IsEmpty(СпДокумент["ТСтроки"])) Then
    Ошибка:="";
    If not ЗагрузитьТекущийДокумент(1,Ошибка) Then
      Box("Невозможно загрузить текущий документ ("+Ошибка+")!",Q_STOP);
      Exit;
    EndIf;
  EndIf;
  Кнт:=НайтиИлиСоздатьПоставщика(Trim(СпДокумент["ПродавецGLN"]),СпДокумент["ПродавецИмя"],СпДокумент["ПродавецИНН"],СпДокумент["ПродавецКПП"],СпДокумент["ПродавецАдрес"]);
  СпДокумент["Поставщик"]:=Кнт;
  
  оДокументы.CurLine:=оДокументы.SelectedLine;
  ФлЗапрос:=0;
  СпДокумент:=оДокументы.СпДокумент;
  ТСтроки:=СпДокумент["ТСтроки"];
  ТСтроки.Select();
  //Начальное заполнение столбцов Номенклатура и Партия, когда возможно
  While ТСтроки.Next() Do
    ТСтроки.Штрихкод:=Trim(ТСтроки.Штрихкод);//Исключить пустой объект
    ТСтроки.Артикул:=Trim(ТСтроки.Артикул);//Исключить пустой объект
    пДата:=СпДокумент["ДокДата"];
    пНомер:=СпДокумент["ДокНомер"];
    //ЕГАИСКодНоменклатуры: Штрихкод
    //ЕГАИСКодСправок: Артикул
    
    аШК:=Ref.тмцШтрихкоды;
    аП:=Ref.тмцПартииТМЦ;
    аП.UseOrder("@CODE-");
    аН:=Ref.тмцНоменклатура;
    аН.UseOrder("@CODE-");
    аПр:=СпДокумент["Поставщик"];
    If _And(ТСтроки.Штрихкод<>"",аП.Find("~(ЕГАИСКодНоменклатуры=ТСтроки.Штрихкод)And(НомерУдостоверения=пНомер)And(Дата=пДата)And(@Status<>1)")) Then
      //Партия и номенклатура
      ТСтроки.Номенклатура:=аП.Parent();
      ТСтроки.Партия:=аП;
    ElseIf _And(ТСтроки.Штрихкод<>"",аП.Find("~(ЕГАИСКодНоменклатуры=ТСтроки.Штрихкод)And(@Status<>1)")) Then
      //Только номенклатура
      ТСтроки.Номенклатура:=аП.Parent();
    ElseIf _And(ТСтроки.Артикул<>"",not IsEmpty(аПр),аН.Find("~(ВнешнийТекстовыйКод=ТСтроки.Артикул)And(сертПроизводитель=аПр)And(@Status<>1)")) Then
      //Только номенклатура
      ТСтроки.Номенклатура:=аН;
    ElseIf _And(ТСтроки.Штрихкод<>"",аШК.Find("~(@Status=0)And(Name=ТСтроки.Штрихкод)")) Then
      If аШК.Parent().DBName()="тмцПартииТМЦ" Then
        аП:=аШК.Parent();
        ТСтроки.Номенклатура:=аП.Parent();
        ТСтроки.Партия:=аП;
      Else
        ТСтроки.Номенклатура:=аШК.Parent();
      EndIf;
    ElseIf _And(ТипДокумента=1,аН.Find("~(Name=ТСтроки.Наименование)And(сертПроизводитель=аПр)And(@Status<>1)")) Then
      ТСтроки.Номенклатура:=аН;
    EndIf;
    If _And(ТСтроки.ФлМаркиГотовы<>1,not IsEmpty(ТСтроки.Номенклатура)) Then
      ФлЗапрос:=1;
    EndIf;
  EndDo;
  If ФлЗапрос Then
    Ошибка:="";
    While not ЗагрузитьНоменклатуруИМаркиТекущегоДокумента(0,1,Ошибка) Do
      аОтв:=AskQuestion("Невозможно загрузить марки текущего документа ("+Ошибка+"). Вы можете игнорировать это сообщение, но в этом случае марки штучных единиц не попадут в базу данных.",Q_WARNING+Q_ABORTRETRYIGNORE);
      If аОтв=R_ABORT Then
        Exit;
      EndIf;
      If аОтв<>R_RETRY Then
        Break;
      EndIf;
    EndDo;
  EndIf;
  
  ФлИзФайла:=IsEmpty(оДокументы.Идентификатор);
  Box("При создании документа поступления из входящего документа УПД будьте предельно вниманительны и сверяйте каждую позицию товара с бумажной накладной! Для позиций, которые не поступали раньше, необходимо будет создать или выбрать элемент номенклатуры.",Q_WARNING);

  aList:=List.Create();
  aList["СпДокумент"]:=СпДокумент;
  aList["локДрайверПодписи"]:=локДрайверПодписи;
  LoadModule(0,"Modules\FreeForms\УчетныеОтделы\Бухгалтерия\Отчетность\ОбработкаЭДОиГИСМТ",aList,0,"Module","СозданиеНовогоПоступления");
  If aList["Ответ"]<>1 Then
    Exit 0;
  EndIf;
  ТСтроки:=aList["ТСтроки"];
  ТСтроки2:=СпДокумент["ТСтроки"];
  ТипДокумента:=aList["ТипДокумента"];
  СпДокументы:=List.Create(Doc.ПоступлениеТМЦ,Doc.ПоступлениеТМЦ,Doc.ПоступлениеПрочее,Doc.РегистрацияОС);
  
  aDoc:=СпДокументы[ТипДокумента+1];
  aDoc.New();
  aDoc.DocDate:=Date();
  aDoc.Автор:=глПользователь;
  aDoc.ЮрЛицо:=оЮЛ;
  глУстановитьНовыйНомер(aDoc);
  aDoc.НомерДокВходящий:=СпДокумент["ДокНомер"];
  aDoc.ДатаДокВходящий:=СпДокумент["ДокДата"];
  aDoc.НомерДокВходящийСФ:=СпДокумент["СчФакНомер"];
  aDoc.ДатаДокВходящийСФ:=СпДокумент["СчФакДата"];
  If ТипДокумента<2 Then
    aDoc.АдресДоставки:=СпДокумент["ПродавецАдрес"];
    aDoc.КодОперации:=Enum.коПоступлениеТМЦ.ПоступлениеТМЦ;
  ElseIf ТипДокумента=3 Then
    aDoc.КодОперации:=Enum.коРегистрацияОС.ПоступлениеОС;
  Else
    aDoc.КодОперации:=Enum.коПоступлениеПрочее.ПоступлениеПрочее;
  EndIf;
  aDoc.УчитыватьВНалоговомУчете:=1;
  aDoc.Контрагент:=Кнт;
  
  bDoc:=Doc.ВозвратПоставщику;
  bDoc.New();
  bDoc.DocDate:=Date();
  bDoc.Автор:=глПользователь;
  bDoc.ЮрЛицо:=оЮЛ;
  глУстановитьНовыйНомер(bDoc);
  bDoc.АдресДоставки:=СпДокумент["ПродавецАдрес"];
  bDoc.КодОперации:=Enum.коВозвратПоставщику.ВозвратТМЦ;
  bDoc.УчитыватьВНалоговомУчете:=1;
  bDoc.Контрагент:=Кнт;
  
  аДог:=Ref.кнтДоговоры;
  If Not аДог.Find("~(@Parent=Кнт)And(ЮрЛицо=оЮЛ)And(@Status=0)") Then
    If Not аДог.Find("~(@Parent=Кнт)And(ЮрЛицо=оЮЛ)") Then
      аДог.New();
      аДог.Name:="Договор по "+оЮЛ;
      аДог.ЮрЛицо:=оЮЛ;
      аДог.Parent(Кнт);
      If not глЗаписать(аДог) Then
        Exit;
      EndIf;
    EndIf;
  EndIf;
  aDoc.Договор:=аДог;
  aDoc.Контрагент:=аДог.Parent();
  глПриИзмененииДоговора(aDoc);
  bDoc.Договор:=аДог;
  bDoc.Контрагент:=аДог.Parent();
  глПриИзмененииДоговора(bDoc);
  
  флОк:=0;
  BeginTransaction();
  Try
    If not глЗаписать(aDoc) Then
      Exit;
    EndIf;
    bDoc.ДокОснование:=aDoc;
  
    If ТипДокумента=2 Then
      aTab:=aDoc.LineParts("Содержание");
    Else
      aTab:=aDoc.LineParts("Номенклатура");
    EndIf;
    bTab:=bDoc.LineParts("Номенклатура");
    //ТСтроки: "зНомГИС,зАртикул,оПроверка,оШтрихкод,Номенклатура,Партия,КоличествоВОсновных,КоличествоВБазовых,Количество,флПроверено,Цена,Сумма,Индекс"
    СтавкаНДС:=?(глСпециальнаяСтавкаУСН(оЮЛ,aDoc.DocDate)=0,Enum.СтавкиНДС.НДС20,?(глСпециальнаяСтавкаУСН(оЮЛ,aDoc.DocDate)=5,Enum.СтавкиНДС.НДС5,Enum.СтавкиНДС.НДС7));
    ТМарки:=Tab.Create("Партия,Ящик,Марка");
    ТМарки2:=Tab.Create("Партия,Ящик,Марка");//Возврат
    ТСтроки.Select();
    While ТСтроки.Next() Do
      Form.StatusText(""+ТСтроки.CurLine+" из "+ТСтроки.Size());
      If ТипДокумента=2 Then
        зКл:=Round(Max(ТСтроки.Количество-ТСтроки.КоличествоВозвраты,0),6);
        If зКл=0 Then
          Continue;
        EndIf;
        If зКл<ТСтроки.Количество Then
          зСм:=Round(ТСтроки.Цена*зКл,2);
        Else
          зСм:=Round(ТСтроки.Сумма,2);
        EndIf;
        aTab.AddLine("Содержание,Количество,Цена,Сумма,СуммаНДС,СтавкаНДС",ТСтроки.зНомГИС,зКл,Round(ТСтроки.Цена,2),зСм,Round(зСм*глКоэффНДС(глСтавкаНДСНоменклатуры(Кнт)),2),глСтавкаНДСНоменклатуры(Кнт));
      ElseIf ТипДокумента=3 Then
        зКл:=Round(Max(ТСтроки.Количество-ТСтроки.КоличествоВозвраты,0),6);
        If зКл=0 Then
          Continue;
        EndIf;
        If зКл<ТСтроки.Количество Then
          зСм:=Round(ТСтроки.Цена*зКл,2);
        Else
          зСм:=Round(ТСтроки.Сумма,2);
        EndIf;
        aTab.AddLine("Номенклатура,Количество,Цена,Сумма,СуммаНДС,СтавкаНДС",ТСтроки.Номенклатура,ТСтроки.Количество,Round(ТСтроки.Цена,2),зСм,
          Round(зСм*глКоэффНДС(глСтавкаНДСНоменклатуры(Кнт,ТСтроки.Номенклатура)),2),глСтавкаНДСНоменклатуры(Кнт,ТСтроки.Номенклатура));
      Else
        aTab.AddLine("Номенклатура,Партия,Количество,Цена,Сумма",ТСтроки.Номенклатура,ТСтроки.Партия,ТСтроки.Количество,Round(ТСтроки.Цена,2),Round(ТСтроки.Сумма,2));
        If Trim(ТСтроки.оШтрихкод)<>"" Then
          Стр:=Trim(ТСтроки.оШтрихкод);
          аШК:=Ref.тмцШтрихкоды;
          If Not аШК.Find("@Parent,@Status,Name",ТСтроки.Номенклатура,0,Стр) Then
            аШК.New();
            аШК.Parent(ТСтроки.Номенклатура);
            аШК.Name:=Стр;
            аШК.Коэффициент:=1;
            аШК.Save(,,ТСтроки.Номенклатура);
          EndIf;
        EndIf;
        If ТипДокумента=0 Then
          If IsEmpty(aTab.Партия) Then
            Дата:=BegOfDay(СпДокумент["ДокДата"]);
            //Создадим партию только для марочного товара
            ТСтроки2.CurLine:=ТСтроки.Индекс;
            If (ТСтроки2.спМаркиУпаковок.Size()>0)Or(ТСтроки2.спМаркиЕдиниц.Size()>0) Then
              аПар:=Ref.тмцПартииТМЦ;
              If not аПар.Find("@Parent,@Status,ЕГАИСКодНоменклатуры,НомерУдостоверения,Дата",ТСтроки.Номенклатура,0,Trim(ТСтроки.оШтрихкод),СпДокумент["ДокНомер"],Дата) Then
                аПар.New();
                аПар.Parent(ТСтроки.Номенклатура);
                аПар.Name:=""+Дата+" ("+СпДокумент["ДокНомер"]+")";
                аПар.НомерУдостоверения:=СпДокумент["ДокНомер"];
                аПар.КСР:=Дата;
                аПар.Дата:=Дата;
                аПар.ЕГАИСКодНоменклатуры:=Trim(ТСтроки.оШтрихкод);
                аПар.ЕГАИСКодСправок:=Trim(ТСтроки.зАртикул);
                аПар.флМарочныйУчет:=1;
                аПар.ЦенаМаксимальнаяПродажная:=ТСтроки.МаксЦена;
                аПар.Поступление:=aDoc;
                If not глЗаписать(аПар) Then
                  Exit;
                EndIf;
              ElseIf _Or(аПар.Поступление<>aDoc,аПар.ЦенаМаксимальнаяПродажная<>ТСтроки.МаксЦена) Then
                аПар.ЦенаМаксимальнаяПродажная:=ТСтроки.МаксЦена;
                аПар.Поступление:=aDoc;
                If not глЗаписать(аПар) Then
                  Exit;
                EndIf;
              EndIf;
              aTab.Партия:=аПар;
            EndIf;
          Else
            аПар:=aTab.Партия;
            If _Or(аПар.Поступление<>aDoc,аПар.ЦенаМаксимальнаяПродажная<>ТСтроки.МаксЦена) Then
              аПар.ЦенаМаксимальнаяПродажная:=ТСтроки.МаксЦена;
              аПар.Поступление:=aDoc;
              If not глЗаписать(аПар) Then
                Exit;
              EndIf;
            EndIf;
          EndIf;
        EndIf;
        aTab.СтавкаНДС:=глСтавкаНДСНоменклатуры(Кнт,ТСтроки.Номенклатура);
      EndIf;
      
      If ТипДокумента<2 Then
        //Ц0:=глПолучитьОсновнуюЦену(ТСтроки.Номенклатура,оМагазин.Склад,aDoc.DocDate);
        //aTab.ЦенаБезСкидки:=?(Ц0=0,ТСтроки.Цена,Ц0);
        //глПересчитатьСтроку(aDoc,aTab,"Количество2@СуммаНДС");
        aTab.ЦенаБезСкидки:=ТСтроки.Цена;
        глПересчитатьСтроку(aDoc,aTab,"Количество2@СуммаНДС");
      EndIf;
      //Создание марок для этой строки
      ТСтроки2.CurLine:=ТСтроки.Индекс;
      If ТипДокумента=0 Then
        If (not IsEmpty(aTab.Партия))And(ТСтроки2.спМаркиУпаковок.Size()>0)And(ТСтроки2.спМаркиЕдиниц.Size()=0) Then
          For i:=1 to ТСтроки2.спМаркиУпаковок.Size() Do
            ТМарки.AddLine("Партия,Ящик,Марка",aTab.Партия,ТСтроки2.спМаркиУпаковок[i],"");
          EndDo;
        ElseIf (not IsEmpty(aTab.Партия))And(ТСтроки2.спМаркиЕдиниц.Size()>0) Then
          For i:=1 to ТСтроки2.спМаркиЕдиниц.Size() Do
            ТМарки.AddLine("Партия,Ящик,Марка",aTab.Партия,Trim(ТСтроки2.спМаркиЕдиниц.GetName(i)),ТСтроки2.спМаркиЕдиниц[i]);
          EndDo;
        EndIf;
      EndIf;
      If ТипДокумента<2 Then
        If ТСтроки.КоличествоВозвраты>0 Then
          If (not IsEmpty(aTab.Партия))And(ТСтроки.спВозвраты.Size()>0) Then
            For i:=1 to ТСтроки.спВозвраты.Size() Do
              ТМарки2.AddLine("Партия,Ящик,Марка",aTab.Партия,"",ТСтроки.спВозвраты[i]);
            EndDo;
          EndIf;
          bTab.AddLine("Номенклатура,Партия,Количество,Цена,Сумма,СтавкаНДС",aTab.Номенклатура,aTab.Партия,ТСтроки.КоличествоВозвраты,aTab.Цена,aTab.Сумма,aTab.СтавкаНДС);
          глПересчитатьСтроку(bDoc,bTab,"Количество2@СуммаНДС");
        EndIf;
      EndIf;
    EndDo;
    aDoc.СуммаВзаиморасчетов:=aTab.Sum("Сумма");
    If not глЗаписать(aDoc) Then
      Exit;
    EndIf;
    bDoc.СуммаВзаиморасчетов:=bTab.Sum("Сумма");
    If bTab.Size()>0 Then
      If not глЗаписать(bDoc) Then
        Exit;
      EndIf;
    EndIf;
    
    If ТипДокумента=0 Then
      //Создать марки для этого поступления, все марки должны иметь флаг 1
      If ТМарки.Size()>0 Then
        If глМаркиЗарегистрироватьДокумент(aDoc,ТМарки,5)<>1 Then
          Exit;
        EndIf;
      EndIf;
      
      If ТМарки2.Size()>0 Then
        If глМаркиЗарегистрироватьДокумент(bDoc,ТМарки2,0)<>1 Then
          Exit;
        EndIf;
      EndIf;
    EndIf;
    
    флОк:=1;
  Finally
    If флОк Then
      CommitTransaction();
    Else
      RollbackTransaction();
    EndIf;
  EndTry;
  оДокументы.зДокЛок:=aDoc.DocNum+" от "+aDoc.DocDate;
  оДокументы.зКонтрагент:=aDoc.Контрагент;
  оДокументы.Локальный:=aDoc;
  If bTab.Size()>0 Then
    If IsEmpty(оДокументы.спВозвраты) Then
      оДокументы.спВозвраты:=List.Create();
    EndIf;
    оДокументы.спВозвраты.Add(bDoc);
    оДокументы.зВзв:=bDoc.DocNum+" от "+bDoc.DocDate;
    LoadModule(0,"Modules\FreeForms\ВнутренниеОбработки\ОбработкиДокументов\ДеревоДокументов",aDoc,0,"Module","Form");
  Else
    OpenObject(aDoc,0,1);
  EndIf;
EndFunction

Function ПроверкаМарокПринятьСканирование(Стр)
  If Trim(Стр)="" Then
    Exit;
  EndIf;
  MainTab:=Form.MainTab.Value;
  ТСтроки:=Param["ТСтроки"];
  аНоменклатура:=Param["Номенклатура"];
  If IsEmpty(аНоменклатура.ГИСМТТоварнаяГруппа) Then
    Box("Для номенклатуры "+аНоменклатура+" ("+аНоменклатура.Code+") не выбрана товарная группа ГИС, однако документ содержит марки!",Q_STOP);
    Exit 0;
  EndIf;
  Стр:=глУдалитьКрипточасть(Стр,аНоменклатура.ГИСМТТоварнаяГруппа);
  aBranch:=MainTab.Find(Стр,1);
  If IsEmpty(aBranch) Then
    Box("Сканируемый штрихкод "+Стр+" не найден в таблице проверки! Убедитесь, что вы сканируете марку, а не штрихкод EAN!",Q_STOP);
    Exit;
  EndIf;
  
  aBranch.IsSelected:=1;
  If IsEmpty(aBranch.Parent) Then
    If aBranch.Icon=ПроверкаИконкаПапкаПроверена Then
      Box("Этот ящик уже проверялся!",Q_INFORMATION);
      Exit;
    ElseIf aBranch.Icon=ПроверкаИконкаПапкаВозврат Then
      ПроверкаСпВозвраты.RemoveValue(aBranch.Value,1);
    EndIf;
  
    //Ящик
    aBranch.Icon:=ПроверкаИконкаПапкаПроверена;
    aBranch.FontStyle:=1;
    aBranch.FontColor:=_CLR_GREEN;
    ПроверкаСпПроверенные.Add(aBranch.Value,,,1);
    Form.IsChanged(1);
    
    aBranch2:=aBranch.FirstChild();
    While not isEmpty(aBranch2) Do
      If aBranch2.Icon=ПроверкаИконкаМаркаВозврат Then
        aBranch2.Icon:=ПроверкаИконкаМарка;
        aBranch2.FontStyle:=0;
        aBranch2.FontColor:=_CLR_WINDOWTEXT;
        ПроверкаСпВозвраты.RemoveValue(aBranch2.Value,1);
      EndIf;
      aBranch2:=aBranch2.Next();
    EndDo;
  Else
    If aBranch.Icon=ПроверкаИконкаМаркаПроверена Then
      Box("Эта марка уже проверялась!",Q_INFORMATION);
      Exit;
    ElseIf aBranch.Icon=ПроверкаИконкаМаркаВозврат Then
      ПроверкаСпВозвраты.RemoveValue(aBranch.Value,1);
    EndIf;
  
    Form.IsChanged(1);
    aBranch.Icon:=ПроверкаИконкаМаркаПроверена;
    aBranch.FontStyle:=1;
    aBranch.FontColor:=_CLR_GREEN;
    ПроверкаСпПроверенные.Add(aBranch.Value,,,1);
  EndIf;
EndFunction

Function ЗагрузитьТекущийДокумент(ФлТихо=0,ByRef Ошибка="")
  оЮрЛицо:=Form.оЮрЛицо.Value;
  оДокументы:=Form.оДокументы.Value;
  If оДокументы.SelectedLine=0 Then
    Exit 0;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  If IsEmpty(оЮрЛицо.ПутьДрайвераЭДО) Then
    Ошибка:="Функция загрузки документа не поддерживается без настроенного драйвера провайдера ЭДО!";
    If not ФлТихо Then
      Box(Ошибка,Q_STOP);
    EndIf;
    Exit 0;
  EndIf;
  спДрайвер:=спВнешПровайдерЭДО["спДрайвер"];
  If IsEmpty(спДрайвер["МодульДрайвера"]) Then
    Ошибка:="Драйвер провайдера ЭДО не был инициализирован!";
    If not ФлТихо Then
      Box(Ошибка,Q_STOP);
    EndIf;
    Exit 0;
  EndIf;
  СпДокумент:=оДокументы.СпДокумент;
  If _Or(IsEmpty(СпДокумент["Идентификатор"]),_And(TypeStr(СпДокумент["Идентификатор"])="LIST",СпДокумент["Идентификатор"]["НеПоддерживается"]=1))  Then
    Ошибка:="Документы данного вида не могут быть загружены в этой обработке!";
    If not ФлТихо Then
      Box(Ошибка,Q_STOP);
    EndIf;
    Exit 0;
  EndIf;
  
  спДрайвер["ДрайверШифрования"]:=локДрайверПодписи;
  спДрайвер["СпДокумент"]:=СпДокумент;
  Стр:=Trim(ExecuteFunction("LoadDocument",спДрайвер["МодульДрайвера"],спДрайвер));
  If Стр<>"" Then
    спДрайвер["ДрайверШифрования"]:=0;
    Ошибка:=Стр;
    Message("Ошибка при загрузке информации о документе: "+Стр+"!","!");
    Exit 0;
  EndIf;
  Стр:=СпДокумент["Содержимое"];
  СтрОшибка:="";
  If ЗагрузитьДокументУПД(Стр,СтрОшибка,СпДокумент)=0 Then
    Message(СтрОшибка,"!");
    Exit 0;
  EndIf;
  //Обновляем некоторые свойства...
  оДокументы.зКонтрагент:=СпДокумент["ПродавецИмя"]+", "+СпДокумент["ПродавецИНН"]+"/"+СпДокумент["ПродавецКПП"];
  оДокументы.зДок:=СпДокумент["ДокНомер"]+" от "+СпДокумент["ДокДата"];
  оДокументы.Сумма:=СпДокумент["Сумма"];
  //зТип,зСтатус,Icon?
  If IsEmpty(СпДокумент["ТСтроки"]) Then
    СтрЗагрузить:="Строки,Марки";
    Exit 0;
  Else
    СтрЗагрузить:="";
    ТСтроки:=СпДокумент["ТСтроки"];
    ТСтроки.Select();
    While ТСтроки.Next() Do
      If ТСтроки.ФлМаркиГотовы=1 Then
        Continue;
      EndIf;
      If ТСтроки.спМаркиУпаковок.Size()+ТСтроки.спМаркиЕдиниц.Size()=0 Then
        Continue;
      EndIf;
      СтрЗагрузить:="Марки";
      Break;
    EndDo;
  EndIf;
  оДокументы.Загрузить:=СтрЗагрузить;
  Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",оДокументы.CurLine,оДокументы.CurLine);
  Exit 1;
EndFunction

Function ОбновитьВидимостьСозданиеАгрегата()
  оТипКода:=Form.оТипКода.Value.SelectedLine;
  If оТипКода=1 Then
    Form.оН.IsDisabled:=0;
    Form.тН.IsDisabled:=0;
    Form.оGS1.IsDisabled:=1;
    Form.тGS1.IsDisabled:=1;
    Form.оСерийныйНомер.IsDisabled:=1;
    Form.тСерийныйНомер.IsDisabled:=1;
  Else
    Form.оН.IsDisabled:=1;
    Form.тН.IsDisabled:=1;
    Form.оGS1.IsDisabled:=0;
    Form.тGS1.IsDisabled:=0;
    Form.оСерийныйНомер.IsDisabled:=0;
    Form.тСерийныйНомер.IsDisabled:=0;
  EndIf;
EndFunction

Function ОбновитьВидимостьСозданиеНовогоПоступления()
  Form.пТипДокумента.Text:=спТипыДокумента[ТипДокумента+1];
  If ТипДокумента=0 Then
    Form.ТСтроки.Value.Column("Номенклатура").isVisible:=1;
    Form.ТСтроки.Value.Column("оШтрихкод").isVisible:=1;
    Form.ТСтроки.Value.Column("Единицы").isVisible:=1;
    Form.ТСтроки.Value.Column("Партия").isVisible:=1;
    Form.ТСтроки.Value.Column("КоличествоВБазовых").isVisible:=1;
    Form.ТСтроки.Value.Column("КоличествоВОсновных").Caption:="Целые";
    Form.ТСтроки.Value.Column("МаксЦена").isVisible:=ФлСтолбикМаксЦены;
    Form.пТипДокумента.FontColor:=_CLR_GREEN;
    Form.пТоварнаяГруппа.IsDisabled:=0;
    Form.пГруппа.IsDisabled:=0;
  ElseIf ТипДокумента=1 Then
    Form.ТСтроки.Value.Column("Номенклатура").isVisible:=1;
    Form.ТСтроки.Value.Column("оШтрихкод").isVisible:=1;
    Form.ТСтроки.Value.Column("Единицы").isVisible:=1;
    Form.ТСтроки.Value.Column("Партия").isVisible:=0;
    Form.ТСтроки.Value.Column("КоличествоВБазовых").isVisible:=1;
    Form.ТСтроки.Value.Column("КоличествоВОсновных").Caption:="Целые";
    Form.ТСтроки.Value.Column("МаксЦена").isVisible:=0;
    Form.пТипДокумента.FontColor:=_CLR_BLUE;
    Form.пТоварнаяГруппа.IsDisabled:=1;
    Form.пГруппа.IsDisabled:=1;
  ElseIf ТипДокумента=3 Then
    Form.ТСтроки.Value.Column("Номенклатура").isVisible:=1;
    Form.ТСтроки.Value.Column("Единицы").isVisible:=1;
    Form.ТСтроки.Value.Column("Партия").isVisible:=0;
    Form.ТСтроки.Value.Column("КоличествоВБазовых").isVisible:=0;
    Form.ТСтроки.Value.Column("КоличествоВОсновных").Caption:="Количество";
    Form.пТипДокумента.FontColor:=_CLR_BLUE;
    Form.пТоварнаяГруппа.IsDisabled:=1;
    Form.пГруппа.IsDisabled:=1;
  Else
    Form.ТСтроки.Value.Column("Номенклатура").isVisible:=0;
    Form.ТСтроки.Value.Column("оШтрихкод").isVisible:=0;
    Form.ТСтроки.Value.Column("Единицы").isVisible:=0;
    Form.ТСтроки.Value.Column("Партия").isVisible:=0;
    Form.ТСтроки.Value.Column("КоличествоВБазовых").isVisible:=0;
    Form.ТСтроки.Value.Column("КоличествоВОсновных").Caption:="Количество";
    Form.ТСтроки.Value.Column("МаксЦена").isVisible:=0;
    Form.пТипДокумента.FontColor:=_CLR_RED;
    Form.пТоварнаяГруппа.IsDisabled:=1;
    Form.пГруппа.IsDisabled:=1;
  EndIf;
EndFunction

Function ИзменитьДокументСозданиеНовогоПоступления(Объект)
  aTab:=СпДокумент["ТСтроки"];
  ФлМарки:=0;
  aTab.Select();
  While aTab.Next() Do
    If aTab.спМаркиЕдиниц.Size()+aTab.спМаркиУпаковок.Size()>0 Then
      ФлМарки:=1;
      Break;
    EndIf;
  EndDo;
  If ФлМарки Then
    Box("Документ содержит марки, он может иметь только тип поступления ГИС МТ!",Q_STOP);
    Exit;
  EndIf;

  спТипыДокумента:=List.Create("Поступление товаров, подлежащих прослеживаемости (ГИС МТ)","Поступление обычных товаров (не ГИС МТ)","Поступление услуг (не номенклатура, нет количественного учета)","Поступление основных средств или материалов");
  aNum:=спТипыДокумента.Select(,Объект);
  If aNum>0 Then
    ТипДокумента:=aNum-1;
    ОбновитьВидимостьСозданиеНовогоПоступления();
  ENdIf;
EndFunction

Function НайтиКоличествоПоШтрихкоду(ТбШК,СтрМарка,аДок)
  Стр:=Right(Left(СтрМарка,16),13);
  If ТбШК.FindAndGoto(Стр,,"Штрихкод")=0 Then
    Сп:=Ref.тмцШтрихкоды.Load(0,"~(@Status=0)And(Name=Стр)");
    For i:=1 To Сп.Size() Do
      зШк:=Сп[i];
      зН:=зШк.Parent();
      If зН.DBName()<>"тмцНоменклатура" Then
        Continue;
      EndIf;
      ТбШК.AddLine("Штрихкод,Номенклатура,Коэффициент",Стр,зН,CoalesceEx(2,зШк.Коэффициент,1));
      Exit 1;
    EndDo;
    Message("Документ %LINK%. Штрихкод марки "+Стр+" не найден в базе данных!","!",аДок);
    Exit 0;
  EndIf;
  Exit 1;
EndFunction            


Function ПринятьВходящийДокумент(ФлНаЭкран=0)

  Function _ДобавитьКонтрагента(ByRef СтрАкт,Тег,зКнт)
    AppendStringToBufferedString(СтрАкт,"<"+Тег+?(зКнт.ОКПО<>""," ОКПО="""+зКнт.ОКПО+"""")+">");
    СтрКПП:=Trim(зКнт.ИНН);
    СтрИНН:=TearStr(СтрКПП,"/");
    If Length(СтрИНН)=10 Then
      AppendStringToBufferedString(СтрАкт,"<ИдСв><СвОрг><СвОргУч ИННЮЛ="""+СтрИНН+""" КПП="""+СтрКПП+""" НаимОрг="""+EncodeXMLString(зКнт.ПолнНаименование)+"""/></СвОрг></ИдСв>");
    Else
      AppendStringToBufferedString(СтрАкт,"<ИдСв><СвИП><СвОргУч ИННФЛ="""+СтрИНН+""" ФИО="""+EncodeXMLString(зКнт.ПолнНаименование)+"""/></СвИП></ИдСв>");
    EndIf;
    //TODO: If _And(зКнт.флИностранныйКонтрагент,зКнт.
    AppendStringToBufferedString(СтрАкт,"<Адрес><АдрИнф АдрТекст="""+EncodeXMLString(зКнт.ЮрАдрес)+""" КодСтр=""643""/></Адрес>");
    If зКнт.ОсновнойСчет.Selected()<>0 Then
      AppendStringToBufferedString(СтрАкт,"<БанкРекв НомерСчета="""+зКнт.ОсновнойСчет.НомерСчета+"""><СвБанк БИК="""+зКнт.ОсновнойСчет.Банк.БИК+""" КорСчет="""+
        зКнт.ОсновнойСчет.Банк.КоррСчет+""" НаимБанк="""+EncodeXMLString(зКнт.ОсновнойСчет.Банк.Name)+"""/></БанкРекв>");
    EndIf;
    AppendStringToBufferedString(СтрАкт,"</"+Тег+">");
    Exit 1;                 
  EndFunction

  оЮрЛицо:=Form.оЮрЛицо.Value;
  оДокументы:=Form.оДокументы.Value;
  If оДокументы.SelectedLine=0 Then
    Exit 0;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  If IsEmpty(оЮрЛицо.ПутьДрайвераЭДО) Then
    Box("Функция принятия документа не поддерживается без настроенного драйвера провайдера ЭДО!",Q_STOP);
    Exit 0;
  EndIf;
  СпДокумент:=оДокументы.СпДокумент;
  If IsEmpty(СпДокумент["Идентификатор"]) Then
    Box("Документы данного вида не могут быть использованы в этой обработке!",Q_STOP);
    Exit 0;
  EndIf;
  спДрайвер:=спВнешПровайдерЭДО["спДрайвер"];
  If IsEmpty(спДрайвер["МодульДрайвера"]) Then
    Box("Драйвер провайдера ЭДО не был инициализирован!",Q_STOP);
    Exit 0;
  EndIf;
  ФлНеПоддерживается:=_And(TypeStr(СпДокумент["Идентификатор"])="LIST",СпДокумент["Идентификатор"]["НеПоддерживается"]=1);
  If (IsEmpty(оДокументы.Локальный))And(not ФлНеПоддерживается) Then
    If AskQuestion("Данное входящее поступление не имеет локального документа. Вы уверены, что хотите принять документ до создания локального?",Q_STOP+Q_YESNO)<>R_YES Then
      Exit 0;
    EndIf;
    ФлНеПоддерживается:=1;
  EndIf;
  
  ТбШК:=Tab.Create("Штрихкод,Номенклатура,Коэффициент");
  СпБлок:=List.Create();
  ФлТовар:=0;
  If not ФлНеПоддерживается Then
    аДок:=оДокументы.Локальный;
    ФлТовар:=аДок.DBName="ПоступлениеТМЦ";
    
    //Необходимо, чтобы получить идентификаторы получателя и отправителя
    If _Or(IsEmpty(СпДокумент),IsEmpty(СпДокумент["ТСтроки"])) Then
      Ошибка:="";
      If not ЗагрузитьТекущийДокумент(1,Ошибка) Then
        Box("Невозможно загрузить текущий документ ("+Ошибка+")!",Q_STOP);
        Exit;
      EndIf;
    EndIf;
    
    аПольз:="";аКомп:="";аДата:="";
    If not аДок.Lock(аПольз,аКомп,аДата) Then
      Box("Документ "+аДок+" открыт на запись. В данный момент с ним работает пользователь "+аПольз+" (компьютер "+аКомп+")! Пожалуйста, закройте документ, чтобы выполнить операцию!",Q_STOP);
      Exit 0;
    EndIf;
    СпБлок.Add(аДок);
  EndIf;

  Try
    If not ФлНеПоддерживается Then
      аДок.Reload();
    EndIf;
    
    If ФлТовар Then
      //ТМаркиВозврата:=Tab.Create("Партия,Марка,Ящик");
      ТМарки:=глМаркиЗагрузитьДокумент(аДок,,1);//Партия,Марка,Ящик
      ТМаркиПринятые:=ТМарки.Copy();
      aTab:=аДок.LineParts("Номенклатура").Copy();
      aTab.AddColumn("КоличествоВозврат",,"Number");
      aTab.AddColumn("СуммаВозврат",,"Number");
      aList:=аДок.LoadLinkedDocuments(1);
      For i:=1 To aList.Size() Do 
        бДок:=aList.Get(i);
        If _Or(бДок.DBName()<>"ВозвратПоставщику",бДок.Status()<2) Then
          Continue;
        EndIf;
        bTab:=бДок.LineParts("Номенклатура");
        bTab.Select();
        While bTab.Next() Do
          aTab.AddLine("Номенклатура,Партия,Количество,КоличествоВозврат,СуммаВозврат",bTab.Номенклатура,bTab.Партия,0,bTab.Количество,bTab.Сумма);
        EndDo;
        ТМарки2:=глМаркиЗагрузитьДокумент(бДок,,1);
        //ТМаркиВозврата.Combine(ТМарки2,"Партия,Марка","ADD");
        ТМаркиПринятые.Combine(ТМарки2,"Партия,Марка","SUB");
        ТМарки2.Combine(ТМарки,"Партия,Марка","SUB");
        If ТМарки2.Size()>0 Then
          Стр:="Документ возврата "+бДок+" содержит маркировку продукции, которая отсутствовала в оригинальном документе (к примеру, "+ТМарки2["Марка",1]+")!";
          Message(Стр,"!");
          Exit 0;
        EndIf;
      EndDo;
      aTab.Group("Номенклатура,Партия,СтавкаНДС","Количество,КоличествоВозврат,Сумма,СуммаВозврат");
    ElseIf _And(not ФлНеПоддерживается,аДок.DBName<>"РегистрацияОС") Then
      aTab:=аДок.LineParts("Содержание").Copy();
      aTab.AddColumn("Количество0",,"Number");
      aTab.AddColumn("Сумма0",,"Number");
      aTab.AddColumn("СодержаниеВрем");
      aTab.Select();
      While aTab.Next() Do
        aTab.СодержаниеВрем:=aTab.Содержание;
      EndDo;
      флДлинаКодаПоля:=Struct.Doc(аДок.DBName()).LineParts("Содержание").Props("Содержание").DataType;
      tearStr(флДлинаКодаПоля,"STRING.");
      флДлинаКодаПоля:=Number(флДлинаКодаПоля);
      
      ТСтроки:=СпДокумент["ТСтроки"];
      ТСтроки.Select();
      While ТСтроки.Next() Do
        пНоменклатура:=Left(ТСтроки.Наименование,флДлинаКодаПоля);
        If aTab.FindAndGoto(пНоменклатура,,"СодержаниеВрем")=0 Then
          aTab.AddLine("Содержание,Количество0,Сумма0",пНоменклатура,ТСтроки.Количество,ТСтроки.Сумма);
        Else
          aTab.Количество0:=ТСтроки.Количество;
          aTab.Сумма0:=ТСтроки.Сумма;
        EndIf;
        aTab.СодержаниеВрем:=0;
      EndDo;
      //aTab.Group("Содержание","Количество,Сумма,Сумма0,Количество0");
      aTab.AddColumn("КоличествоВозврат",,"Number");
      aTab.AddColumn("СуммаВозврат",,"Number");
      aTab.Select();
      While aTab.Next() Do
        aTab.КоличествоВозврат:=Round(aTab.Количество0-aTab.Количество,6);
        aTab.Количество:=aTab.Количество0;
        aTab.СуммаВозврат:=Round(aTab.Сумма0-aTab.Сумма,2);
        aTab.Сумма:=aTab.Сумма0;
      EndDo;
    EndIf;
    
    спДрайвер["Вложения"]:=Tab.Create("Файл,ИмяФайла,Тип,Документ");
    If _And(not ФлНеПоддерживается,аДок.DBName<>"РегистрацияОС",(aTab.Sum("КоличествоВозврат")<>0)Or(aTab.Sum("СуммаВозврат")<>0)) Then
      If not ФлНаЭкран Then
        aList:=List.Create();
        aList.SetByName("Таб",aTab);
        LoadModule(0,"Modules\FreeForms\УчетныеОтделы\Бухгалтерия\Отчетность\ОбработкаЭДОиГИСМТ",aList,0,"Module","ПросмотрРасхождений");
        If aList.GetByName("Ответ")<>1 Then
          Exit 1;
        EndIf;
      EndIf;
      //Создаем ТОРГ-2 (КНД 1175014)
      //DP_PRIRASXPRIN_<ИдентификаторПолучателя>_<ИдентификаторОтправителя>_ГГГГММДД_<ГУИД>
      Тек:=Date();
      пДатаТек:=FormatDate(Тек,"dd.mm.YYYY");
      пВремяТек:=Replace(GetTime(Тек),":",".");
      ИмяАкта:="DP_PRIRASXPRIN"+Chr(1)+"_"+СпДокумент["ПокупательИД"]+"_"+СпДокумент["ПродавецИД"]+"_"+FormatDate(Тек,"YYYYmmdd")+"_"+CreateGUID();
      пЮЛ:=EncodeXMLString(аДок.ЮрЛицо.Контрагент.ПолнНаименование);
      
      //http://www.consultant.ru/document/cons_doc_LAW_337485/a1ad55ada649d194873d807dee56c526637d9052/
      СтрАкт:="<?xml version=""1.0"" encoding=""windows-1251""?>
        |<Файл ИдФайл="""+ИмяАкта+""" ВерсФорм=""5.01"" ВерсПрог=""SF 1.0"">
        |<СвУчДокОбор ИдОтпр="""+СпДокумент["ПокупательИД"]+""" ИдПол="""+СпДокумент["ПродавецИД"]+"""></СвУчДокОбор>
        |<Документ КНД=""1175014"" ПоФактХЖ=""Документ о приемке ценностей и (или) расхождениях, выявленных при их приемке"" НаимДокОпр=""Документ о приемке ценностей и (или) расхождениях, выявленных при их приемке"" ДатаИнфПок="""+пДатаТек+""" ВремИнфПок="""+пВремяТек+""" НаимЭконСубСост="""+пЮЛ+""">
        |<ИдентДокПР ДатаДокПР="""+аДок.ДатаДокВходящий+""" НомДокПР="""+EncodeXMLString(аДок.НомерДокВходящий)+"""/>";
        
      If (аДок.НомерДокИсправление<>"")And(not IsEmpty(аДок.ДатаДокИсправление)) Then
        AppendStringToBufferedString(СтрАкт,"<ИспрДокПР ДатаИспрДокПР="""+аДок.ДатаДокИсправление+""" НомИспрДокПР="""+EncodeXMLString(аДок.НомерДокИсправление)+"""/>");
      EndIf;
      
      //1XXX - для оформления приемки ценностей без сопроводительного документа
      //2XXX - для оформления приемки ценностей с расхождениями с сопроводительными документами по наименованию и (или) количеству, и (или) качеству, и (или) с ценовыми отклонениями
      //3XXX - для оформления расхождений с сопроводительными документами по наименованию и (или) количеству, и (или) качеству, и (или) с ценовыми отклонениями, выявленных при приемке
      //4XXX - для оформления расхождений кроме расхождений с сопроводительными документами по наименованию и (или) количеству, и (или) качеству, и (или) без ценовых отклонений, например, в части сведений о номерах средств идентификации товаров
      AppendStringToBufferedString(СтрАкт,"<СодФХЖ1 ОбстИсп=""3000"">");
      If not _ДобавитьКонтрагента(СтрАкт,"Продавец",аДок.Контрагент) Then
        Exit 0;
      EndIf;
      If not _ДобавитьКонтрагента(СтрАкт,"Покупатель",аДок.ЮрЛицо.Контрагент) Then
        Exit 0;
      EndIf;
      If not _ДобавитьКонтрагента(СтрАкт,"Грузоотправитель",аДок.Контрагент) Then
        Exit 0;
      EndIf;
      If not _ДобавитьКонтрагента(СтрАкт,"Грузополучатель",аДок.ЮрЛицо.Контрагент) Then
        Exit 0;
      EndIf;
      AppendStringToBufferedString(СтрАкт,"<СвОсмГруз><СопрДок ДатаСопрДок="""+аДок.DocDate+""" НаимСопрДок="""+EncodeXMLString(аДок)+""" НомСопрДок="""+EncodeXMLString(аДок.DocNum)+"""/></СвОсмГруз></СодФХЖ1>");
      AppendStringToBufferedString(СтрАкт,"<СодФХЖ2 Заключение=""Перечисленные в документе ценности приняты с недостачей."" СодСоб=""Настоящий Акт составлен комиссией, которая произвела осмотр прибывшего груза и установила: "+
        "доставлен товар по сопроводительному документу "+EncodeXMLString(аДок.НомерДокВходящий)+" от "+EncodeXMLString(аДок.ДатаДокВходящий)+". Перечисленные в документе ценности приняты с недостачей."">");
        
      ФлМарки0:=0;
      aTab.Select();
      While aTab.Next() Do
        If (aTab.КоличествоВозврат=0)And(aTab.СуммаВозврат=0) Then
          Continue;
        EndIf;
        зКл:=Round(aTab.Количество-aTab.КоличествоВозврат,6);
        зСм:=Round(aTab.Сумма-aTab.СуммаВозврат,2);
        СтрДопДок:="/>";
        СтрДопФакт:="/>";
        If ФлТовар Then
          зКл2:=0;
          Стр:="";
          While ТМарки.FindAndGoto(aTab.Партия,,"Партия")>0 Do
            ТМарки.Партия:=0;
            If not НайтиКоличествоПоШтрихкоду(ТбШК,ТМарки.Марка,аДок) Then
              Exit 0;
            EndIf;
            If ТбШК.Коэффициент>1 Then
              AppendStringToBufferedString(Стр,"<НомУпак>"+EncodeXMLString(глУдалитьКрипточасть(ТМарки.Марка,aTab.Номенклатура.ГИСМТТоварнаяГруппа))+"</НомУпак>"+_NEWLINE);
            Else
              AppendStringToBufferedString(Стр,"<КИЗ>"+EncodeXMLString(глУдалитьКрипточасть(ТМарки.Марка,aTab.Номенклатура.ГИСМТТоварнаяГруппа))+"</КИЗ>"+_NEWLINE);
            EndIf;
            зКл2:=зКл2+ТбШК.Коэффициент;
            ФлМарки0:=1;
          EndDo;
          If _And(ТМарки.Size()>0,Round(зКл2,6)<>Round(зКл,6)) Then
            Message("Для документа %LINK% для номенклатуры %LINK% указано принятых марок для количества "+Round(зКл2,6)+", хотя в документе указано количество за минусом возврата "+Round(зКл,6)+"!","!",аДок,aTab.Номенклатура);
            Exit 0;
          EndIf;
          If Стр<>"" Then
            СтрДопДок:="><НомСредИдентТов>"+Стр+"</НомСредИдентТов></ПоДокум>";
          EndIf;
          
          зКл2:=0;
          Стр:="";
          While ТМаркиПринятые.FindAndGoto(aTab.Партия,,"Партия")>0 Do
            ТМаркиПринятые.Партия:=0;
            If not НайтиКоличествоПоШтрихкоду(ТбШК,ТМаркиПринятые.Марка,аДок) Then
              Exit 0;
            EndIf;
            If ТбШК.Коэффициент>1 Then
              AppendStringToBufferedString(Стр,"<НомУпак>"+EncodeXMLString(глУдалитьКрипточасть(ТМаркиПринятые.Марка,aTab.Номенклатура.ГИСМТТоварнаяГруппа))+"</НомУпак>"+_NEWLINE);
            Else
              AppendStringToBufferedString(Стр,"<КИЗ>"+EncodeXMLString(глУдалитьКрипточасть(ТМаркиПринятые.Марка,aTab.Номенклатура.ГИСМТТоварнаяГруппа))+"</КИЗ>"+_NEWLINE);
            EndIf;
            зКл2:=зКл2+ТбШК.Коэффициент;
          EndDo;
          If _And(ТМаркиПринятые.Size()>0,Round(зКл2,6)<>Round(зКл,6)) Then
            Message("Для документа %LINK% для номенклатуры %LINK% указано принятых марок для количества "+Round(зКл2,6)+", хотя в документе указано количество за минусом возврата "+Round(зКл,6)+"!","!",аДок,aTab.Номенклатура);
            Exit 0;
          EndIf;          
          If Стр<>"" Then
            СтрДопФакт:="><НомСредИдентТов>"+Стр+"</НомСредИдентТов></ПоФакту>";
          EndIf;
        EndIf;
        AppendStringToBufferedString(СтрАкт,"<РезПрием НаимЕдИзм=""шт"" ОКЕИ_Тов=""796""><Ценности КодТов="""+EncodeXMLString(aTab.Номенклатура.ВнешнийТекстовыйКод)+
          """ НаимТов="""+EncodeXMLString(aTab.Номенклатура)+""" НомСтрСопрДок="""+aTab.CurLine+"""/>"+
          "<ПоДокум КолТовПрин="""+aTab.Количество+""" СтавНДСПрин="""+СтавкаНДСВСтр(aTab.СтавкаНДС,глУчитыватьНДС(аДок.ЮрЛицо,аДок.DocDate)=0)+""" СтоимТовНДСПрин="""+aTab.Сумма+""""+СтрДопДок+
          "<ПоФакту КолТовПрин="""+зКл+""" СтавНДСПрин="""+СтавкаНДСВСтр(aTab.СтавкаНДС,глУчитыватьНДС(аДок.ЮрЛицо,аДок.DocDate)=0)+""" СтоимТовНДСПрин="""+зСм+""""+СтрДопФакт+
          "<Недостача КолТовРасх="""+aTab.КоличествоВозврат+""" СтоимТовНДСРасх="""+aTab.СуммаВозврат+"""/></РезПрием>");
          //"<ИнфПолРезПрием Значен="...." Идентиф=""Штрихкод""/>
      EndDo;
      //1 - к документу дополнительные сведения не формируются
      //2 - к документу формируются дополнительные сведения об оприходовании ценностей покупателем (в том числе на склад)
      //... (и т.п.)
      //5.01:
      //Подписант="<ЮЛ ИННЮЛ='xxxxxxxxxx' НаимОрг='ООО &quot;xxx&quot;' Должн='бухгалтер'><ФИО Отчество='Ивановна' Имя='Ивана' Фамилия='Иванова'/></ЮЛ>"
      //Подписант="<ИП ИННФЛ='xxxxxxxxxxxx'><ФИО Отчество='Ивановна' Имя='Ивана' Фамилия='Иванова'/></ИП>"
      СтрКПП:=аДок.ЮрЛицо.ИНН;
      СтрИНН:=TearStr(СтрКПП,"/");
      If Trim(СтрКПП)="" Then
        пФИО:=Trim(Replace(Uppercase(аДок.ЮрЛицо.Контрагент.ПолнНаименование),"ПРЕДПРИНИМАТЕЛЬ",""));
        пФИО:=Trim(Replace(пФИО,"ИНДИВИДУАЛЬНЫЙ",""));
        пОргПодписи:="<ФИО Фамилия="""+EncodeXMLString(Capitalize(Trim(TearStr(пФИО," "))))+""" Имя="""+EncodeXMLString(Capitalize(Trim(TearStr(пФИО," "))))+""" Отчество="""+EncodeXMLString(Capitalize(Trim(TearStr(пФИО," "))))+"""/>";
        пОргПодписи:="<Подписант ОснПолн=""Должностные обязанности"" ОблПолн=""2"" Статус=""5""><ИП ИННФЛ="""+СтрИНН+""">"+пОргПодписи+"</ИП></Подписант>";
      Else
        пФИО:=Trim(аДок.ЮрЛицо.GetValue("Глбухгалтер",аДок.DocDate).ПолнНаименование);
        пОргПодписи:="<ФИО Фамилия="""+EncodeXMLString(Capitalize(Trim(TearStr(пФИО," "))))+""" Имя="""+EncodeXMLString(Capitalize(Trim(TearStr(пФИО," "))))+""" Отчество="""+EncodeXMLString(Capitalize(Trim(TearStr(пФИО," "))))+"""/>";
        пОргПодписи:="<Подписант ОснПолн=""Должностные обязанности"" ОблПолн=""2"" Статус=""5""><ЮЛ ИННЮЛ="""+СтрИНН+""" НаимОрг="""+EncodeXMLString(аДок.ЮрЛицо.ПолнНаименование)+""" Должн=""бухгалтер"">"+пОргПодписи+"</ЮЛ></Подписант>";
      EndIf;
      AppendStringToBufferedString(СтрАкт,"</СодФХЖ2><ИнфДопСв>1</ИнфДопСв>"+пОргПодписи+"</Документ></Файл>");
      СтрАкт:=Replace(СтрАкт,Chr(1),?(ФлМарки0,"MARK",""));
      ИмяАкта:=Replace(ИмяАкта,Chr(1),?(ФлМарки0,"MARK",""));
      If ФлНаЭкран Then
        СтрАкт:=ReformatXML(СтрАкт,0);
        Тч:=Text.Create(1);
        Тч.AddString(СтрАкт);
        Тч.Show("Текст УКД к документу "+аДок,"УКД.xml",1);
        Exit 1;
      EndIf;        
      aTab:=спДрайвер["Вложения"];//"Файл,ИмяФайла,Тип,Документ"
      //Тип: 0 -- акт расхождения
      aTab.AddLine("Файл,ИмяФайла,Тип,Документ",TranslateTo(СтрАкт,1251),ИмяАкта+".xml",0,аДок);
    ElseIf ФлНаЭкран Then
      Box("Возврат для документа не обнаружен! Нет акта для вывода на экран!",Q_STOP);
      Exit 0;
    EndIf;

    спДрайвер["ДрайверШифрования"]:=локДрайверПодписи;
    спДрайвер["СпДокумент"]:=СпДокумент;
    If not ФлНеПоддерживается Then
      спДрайвер["ДокументФайла"]:=аДок;
    EndIf;
    спДрайвер["Действие"]:=0;
    Стр:=Trim(ExecuteFunction("UpdateDocument",спДрайвер["МодульДрайвера"],спДрайвер));
    спДрайвер["ДокументФайла"]:=0;
    спДрайвер["Вложения"]:=0;
    If Стр<>"" Then
      спДрайвер["ДрайверШифрования"]:=0;
      Box("Ошибка при выполнении операции: "+Стр+"!",Q_STOP);
      Exit 0;
    EndIf;
    If спДрайвер["Результат"]<>1 Then
      Box("Ошибка при выполнении операции: "+спДрайвер["Ошибка"]+"!",Q_STOP);
      Exit 0;
    EndIf;
    оДокументы.зСтатус:="принят";
    If not ФлНеПоддерживается Then
      Logs.Write("Документ принят: "+аДок+", GUID: "+аДок.УникальныйИдентификатор,аДок,"ЭДО",0);
    EndIf;
    Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",оДокументы.CurLine,оДокументы.CurLine);
    Box("Документ успешно принят!",Q_INFORMATION);
  Finally
    If СпБлок.Size()>0 Then
      MassUnlock(СпБлок);
    EndIf;  
  EndTry;
  Exit 1;
EndFunction

//           Действие: 3 -- Подтвердить отклонение покупателем исходящего
//                     4 -- Отказаться от отклонения покупателем исходящего
//                     12 -- Подтвердить отклонение поставщиком входящего
//                     13 -- Отказаться от отклонения поставщиком входящего
//                     0 -- Подтвердить входящий акт расхождения
//                     1 -- Отклонить входящий акт расхождения
Function ОтветНаОтказОтДокумента(Действие,СпДокумент=0)
  оЮрЛицо:=Form.оЮрЛицо.Value;
  оДокументы:=?((Действие<10)And(Действие>1),Form.оДокументыИсх.Value,Form.оДокументы.Value);
  If оДокументы.SelectedLine=0 Then
    Exit 0;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  If IsEmpty(оЮрЛицо.ПутьДрайвераЭДО) Then
    Box("Функция отклонения документа не поддерживается без настроенного драйвера провайдера ЭДО!",Q_STOP);
    Exit 0;
  EndIf;
  If СпДокумент=0 Then
    СпДокумент:=оДокументы.СпДокумент;
  EndIf;
  If IsEmpty(СпДокумент["Идентификатор"]) Then
    Box("Документы данного вида не могут быть использованы в этой обработке!",Q_STOP);
    Exit 0;
  EndIf;
  спДрайвер:=спВнешПровайдерЭДО["спДрайвер"];
  If IsEmpty(спДрайвер["МодульДрайвера"]) Then
    Box("Драйвер провайдера ЭДО не был инициализирован!",Q_STOP);
    Exit 0;
  EndIf;
  
  зДок:=оДокументы.Локальный;
  СпБлокировка:=List.Create();
  If _And(IsDbObject(зДок),глЕстьРеквизитДокумента("УникальныйИдентификатор4",зДок.DBName())) Then
    аПольз:="";аКомп:="";аДата:="";
    If not зДок.Lock(аПольз,аКомп,аДата) Then
      Box("Документ "+зДок+" открыт на запись. В данный момент с ним работает пользователь "+аПольз+" (компьютер "+аКомп+")! Пожалуйста, закройте документ, чтобы выполнить операцию!",Q_STOP);
      Exit 0;
    EndIf;
    зДок.Reload();
    СпБлокировка.Add(зДок);
    //Также обновить статус возвратов
    aList:=зДок.LoadLinkedDocuments(1);
    For i:=1 To aList.Size() Do 
      бДок:=aList.Get(i);
      If бДок.DBName()<>"ВозвратОтПокупателя" Then
        Continue;
      EndIf;
      If бДок.Status()<2 Then
        Continue;
      EndIf;
      аПольз:="";аКомп:="";аДата:="";
      If not бДок.Lock(аПольз,аКомп,аДата) Then
        Box("Документ "+бДок+" открыт на запись. В данный момент с ним работает пользователь "+аПольз+" (компьютер "+аКомп+")! Пожалуйста, закройте документ, чтобы выгрузить его реализацию в ЕГАИС!",Q_STOP);
        MassUnlock(СпБлокировка);
        Exit 0;
      EndIf;
      бДок.Reload();
      СпБлокировка.Add(бДок);
      If (Действие=1)Or(Действие=3)or(Действие=12) Then
        бДок.УникальныйИдентификатор:="";
      EndIf;
    EndDo;
    зДок.УникальныйИдентификатор4:=?((Действие=1)Or(Действие=3)or(Действие=12),"#","");
  EndIf;
  Try
    спДрайвер["ДрайверШифрования"]:=локДрайверПодписи;
    спДрайвер["Вложения"]:=Tab.Create("Файл,ИмяФайла,Тип,Документ");
    спДрайвер["СпДокумент"]:=СпДокумент;
    спДрайвер["Действие"]:=Действие;
    Стр:=Trim(ExecuteFunction("UpdateDocument",спДрайвер["МодульДрайвера"],спДрайвер));
    If Стр<>"" Then
      спДрайвер["ДрайверШифрования"]:=0;
      Box("Ошибка при выполнении операции: "+Стр+"!",Q_STOP);
      Exit 0;
    EndIf;
    If спДрайвер["Результат"]<>1 Then
      Box("Ошибка при выполнении операции: "+спДрайвер["Ошибка"]+"!",Q_STOP);
      Exit 0;
    EndIf;
    If Действие<2 Then
      оДокументы.зСтатус:=?(Действие=1,"акт отклонен","акт принят");
    Else
      оДокументы.зСтатус:=?((Действие=3)Or(Действие=12),"отменен","отзыв отклонен");
    EndIf;
    зДок:=оДокументы.Локальный;
    If IsDbObject(зДок) Then
      Logs.Write(?(Действие<2,"Акт расхождения ","Отзыв документа ")+?((Действие=0)Or(Действие=3)Or(Действие=12),"подтвержден","отклонен")+": "+зДок+?(Действие>1,", GUID: "+зДок.УникальныйИдентификатор),зДок,"ЭДО",0);
    EndIf;
  Finally
    MassUnlock(СпБлокировка);
  EndTry;
  If (Действие<10)And(Действие>1) Then
    Form.оДокументыИсх.InvokeEvent("OnInitLine","IndexFrom,IndexTo",оДокументы.CurLine,оДокументы.CurLine);
  Else
    Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",оДокументы.CurLine,оДокументы.CurLine);
  EndIf;
  Box("Запрос успешно выполнен!",Q_INFORMATION);
  Exit 1;
EndFunction

//           Действие: 1 -- Отклонить входящий
//                     2 -- Отклонить входящий (метод с подтверждением на стороне поставщика)
//                     3 -- Удалить входящий
//                     10 -- Отклонить исходящий
//                     11 -- Отклонить исходящий (метод с подтверждением на стороне покупателя)
//                     20 -- Удалить исходящий документ
Function ОтклонитьДокумент(Действие)
  оЮрЛицо:=Form.оЮрЛицо.Value;
  оДокументы:=?(Действие<10,Form.оДокументы.Value,Form.оДокументыИсх.Value);
  If оДокументы.SelectedLine=0 Then
    Exit 0;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  If IsEmpty(оЮрЛицо.ПутьДрайвераЭДО) Then
    Box("Функция отклонения документа не поддерживается без настроенного драйвера провайдера ЭДО!",Q_STOP);
    Exit 0;
  EndIf;
  СпДокумент:=оДокументы.СпДокумент;
  If IsEmpty(СпДокумент["Идентификатор"]) Then
    Box("Документы данного вида не могут быть использованы в этой обработке!",Q_STOP);
    Exit 0;
  EndIf;
  спДрайвер:=спВнешПровайдерЭДО["спДрайвер"];
  If IsEmpty(спДрайвер["МодульДрайвера"]) Then
    Box("Драйвер провайдера ЭДО не был инициализирован!",Q_STOP);
    Exit 0;
  EndIf;
  
  зДок:=оДокументы.Локальный;
  СпБлокировка:=List.Create();
  If _And(IsDbObject(зДок),глЕстьРеквизитДокумента("УникальныйИдентификатор4",зДок.DBName())) Then
    аПольз:="";аКомп:="";аДата:="";
    If not зДок.Lock(аПольз,аКомп,аДата) Then
      Box("Документ "+зДок+" открыт на запись. В данный момент с ним работает пользователь "+аПольз+" (компьютер "+аКомп+")! Пожалуйста, закройте документ, чтобы выполнить операцию!",Q_STOP);
      Exit 0;
    EndIf;
    зДок.Reload();
    СпБлокировка.Add(зДок);
    //Также обновить статус возвратов
    aList:=зДок.LoadLinkedDocuments(1);
    For i:=1 To aList.Size() Do 
      бДок:=aList.Get(i);
      If бДок.DBName()<>"ВозвратОтПокупателя" Then
        Continue;
      EndIf;
      If бДок.Status()<2 Then
        Continue;
      EndIf;
      аПольз:="";аКомп:="";аДата:="";
      If not бДок.Lock(аПольз,аКомп,аДата) Then
        Box("Документ "+бДок+" открыт на запись. В данный момент с ним работает пользователь "+аПольз+" (компьютер "+аКомп+")! Пожалуйста, закройте документ, чтобы выгрузить его реализацию в ЕГАИС!",Q_STOP);
        MassUnlock(СпБлокировка);
        Exit 0;
      EndIf;
      бДок.Reload();
      СпБлокировка.Add(бДок);
      бДок.УникальныйИдентификатор:="";
    EndDo;
    зДок.УникальныйИдентификатор4:=?((Действие=1)or(Действие=10)or(Действие=20)or(Действие=3),"#","%");
  EndIf;
  Try
    спДрайвер["ДрайверШифрования"]:=локДрайверПодписи;
    спДрайвер["Вложения"]:=Tab.Create("Файл,ИмяФайла,Тип,Документ");
    спДрайвер["СпДокумент"]:=СпДокумент;
    спДрайвер["Действие"]:=?(Действие=3,20,Действие);
    Стр:=Trim(ExecuteFunction("UpdateDocument",спДрайвер["МодульДрайвера"],спДрайвер));
    If Стр<>"" Then
      спДрайвер["ДрайверШифрования"]:=0;
      Box("Ошибка при выполнении операции: "+Стр+"!",Q_STOP);
      Exit 0;
    EndIf;
    If спДрайвер["Результат"]<>1 Then
      Box("Ошибка при выполнении операции: "+спДрайвер["Ошибка"]+"!",Q_STOP);
      Exit 0;
    EndIf;
    If Действие<10 Then
      оДокументы.зСтатус:=?((Действие=1)Or(Действие=3),"отказана","отказана: ожидает ответ поставщика");
    Else
      оДокументы.зСтатус:=?((Действие=10)or(Действие=20),"отказана","отказана: ожидает ответ покупателя");
    EndIf;
    If IsDbObject(зДок) Then
      For i:=1 To СпБлокировка.Size() Do
        СпБлокировка[i].Save();
      EndDo;
      Logs.Write("Документ отклонен ("+Действие+"): "+зДок+", GUID: "+зДок.УникальныйИдентификатор,зДок,"ЭДО",0);
    EndIf;
  Finally
    MassUnlock(СпБлокировка);
    //If IsDbObject(зДок) Then
    //  зДок.Unlock();
    //EndIf;
  EndTry;
  If Действие<10 Then
    Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",оДокументы.CurLine,оДокументы.CurLine);
  Else
    Form.оДокументыИсх.InvokeEvent("OnInitLine","IndexFrom,IndexTo",оДокументы.CurLine,оДокументы.CurLine);
  EndIf;
  Box("Документ успешно отклонен!",Q_INFORMATION);
  Exit 1;
EndFunction

Function ВывестиДеревоТекущегоДокумента(Идентификатор)
  оЮрЛицо:=Form.оЮрЛицо.Value;
  If IsEmpty(оЮрЛицо.ПутьДрайвераЭДО) Then
    Box("Эта функция не поддерживается без настроенного драйвера провайдера ЭДО!",Q_STOP);
    Exit 0;
  EndIf;
  If IsEmpty(Идентификатор) Then
    Box("Документы данного вида не могут быть использованы в этой обработке!",Q_STOP);
    Exit 0;
  EndIf;
  спДрайвер:=спВнешПровайдерЭДО["спДрайвер"];
  If IsEmpty(спДрайвер["МодульДрайвера"]) Then
    Box("Драйвер провайдера ЭДО не был инициализирован!",Q_STOP);
    Exit 0;
  EndIf;
  
  спДрайвер["ДрайверШифрования"]:=локДрайверПодписи;
  спДрайвер["Идентификатор"]:=Идентификатор;
  Стр:=Trim(ExecuteFunction("LoadAttachments",спДрайвер["МодульДрайвера"],спДрайвер));
  If Стр<>"" Then
    спДрайвер["ДрайверШифрования"]:=0;
    спДрайвер["Документы"]:=0;
    Box("Ошибка при выполнении операции: "+Стр+"!",Q_STOP);
    Exit 0;
  EndIf;
  If спДрайвер["Результат"]<>1 Then
    Box("Некоторые документы не могут быть загружены из-за ошибок!",Q_WARNING);
  EndIf;
  ДДокументы:=спДрайвер["Документы"];
  спДрайвер["Документы"]:=0;
  aList:=List.Create();
  aList["Документы"]:=ДДокументы;
  LoadModule(0,"Modules\FreeForms\УчетныеОтделы\Бухгалтерия\Отчетность\ОбработкаЭДОиГИСМТ",aList,0,"Module","ДеревоДокумента");
  
  Exit 1;
EndFunction

Function ДеревоДокументовСохранитьВФайл(Ветка)
  Function _Сохранить(Ветка,Путь)
    Result:=1;
    If Ветка.Size()>0 Then
      For i:=1 To Ветка.Size() Do
        Result:=_Сохранить(Ветка.ByIndex(i),Путь+?(TypeStr(Ветка)="TREE.BRANCH",Ветка.Name+"\")) And Result;
      EndDo;
      Exit;
    ElseIf Pos("Ошибка загрузки ",Ветка.Name)=1 Then
      Exit;
    ElseIf Str(Ветка.Value)="" Then
      Exit;
    EndIf;
    Файл:=Путь+Ветка.Name;
    Стр:=Str(Ветка.Value);
    Try
      File.CreateDirectory(GetPath(Файл));
      StringToFile(Стр,Файл,0,0);
    Except
      Result:=0;
      Box("Невозможно сохранить файл "+Файл,Q_WARNING);
    EndTry;
  EndFunction
  
  РезКаталог:="";
  If not SelectFolderDialog(РезКаталог,"Выберите каталог для сохранения файлов:") Then
    Exit;
  EndIf;
  Путь:=AddBackSlash(РезКаталог);
  Фл:=_Сохранить(Ветка,Путь);
  If Фл Then
    Box("Сохранение выполнено успешно!",Q_INFORMATION);
  EndIf;
EndFunction

Function ВыгрузитьДокументы(Тб,флПакетная,ФлНаЭкран=0)

  Function _СтандартныйАдрес(пЮрАдр,ИНН,КПП)
    СтрРез:="<Адрес><АдрРФ Индекс=""";
    //Российская Федерация,141607,Московская обл,Клинский р-н,Клин г,,Московская ул,28,,
    TearStr(пЮрАдр,",");
    СтрРез:=СтрРез+TearStr(пЮрАдр,",")+""" КодРегион=""";
    Стр2:=TearStr(пЮрАдр,",");
    Стр:="";
    While Pos(" ",Стр2)>0 Do
      Стр:=?(Стр<>"",Стр+" ","")+TearStr(Стр2," ");
    EndDo;
    СтрРегион:=?(Стр<>"",Стр,"Регион");
    aEl:=Ref.адАдминистративныеДеления;
    If _And(Стр<>"",aEl.Find("Name",Стр)) Then
      СтрРез:=СтрРез+Right("00"+aEl.Code,2);
    ElseIf КПП<>"" Then
      СтрРез:=СтрРез+Left(КПП,2);
    Else
      СтрРез:=СтрРез+Left(ИНН,2);
    EndIf;
    СтрРез:=СтрРез+""" НаимРегион="""+EncodeXMLString(СтрРегион)+""" Город=""";
    TearStr(пЮрАдр,",");
    Стр:=TearStr(пЮрАдр,",");
    СтрРез:=СтрРез+?(IsEmpty(Стр),"Самовывоз",EncodeXMLString(Стр))+""" Улица=""";
    TearStr(пЮрАдр,",");
    Стр:=TearStr(пЮрАдр,",");
    СтрРез:=СтрРез+?(IsEmpty(Стр),".",EncodeXMLString(Стр))+""" Дом=""";
    Стр:=TearStr(пЮрАдр,",");
    СтрРез:=СтрРез+?(IsEmpty(Стр),".",EncodeXMLString(Стр))+"""/></Адрес>";
    Exit СтрРез;
  EndFunction


  оРеализации:=Form.оДокументыИсх.Value;
  оЮрЛицо:=Form.оЮрЛицо.Value;
  спДрайвер:=спВнешПровайдерЭДО["спДрайвер"];
  If IsEmpty(спДрайвер["МодульДрайвера"]) Then
    Box("Драйвер провайдера ЭДО не был инициализирован!",Q_STOP);
    Exit 0;
  EndIf;
  
  ЧлКоличествоВыгруженных:=0;
  ФлБылиДокументы:=0;
  If (флПакетная=1)And(Тб.Size()>1) Then
    Message("Удерживайте Ctrl+S, чтобы остановить выгрузку до ее завершения...","I");
  EndIf;
  
  Тб.Select();
  While Тб.Next() Do
    If IsKeyComboActive("Ctrl+S") Then
      Message("Выгрузка остановлена!","!");
      Break;
    EndIf;
  
    If Тб.Статус=1 Then
      Continue;
    EndIf;
    зДок:=Тб.Документ.Copy();
    
    ТБлокировка:=Tab.Create("зДок");
    Try
      аПольз:="";аКомп:="";аДата:="";
      If not зДок.Lock(аПольз,аКомп,аДата) Then
        If флПакетная=0 Then
          Box("Документ "+зДок+" открыт на запись. В данный момент с ним работает пользователь "+аПольз+" (компьютер "+аКомп+")! Пожалуйста, закройте документ, чтобы выгрузить его в ЕГАИС!",Q_STOP);
        Else
          Message("Документ %LINK% открыт на запись. В данный момент с ним работает пользователь "+аПольз+" (компьютер "+аКомп+")! Пожалуйста, закройте документ, чтобы выгрузить его в ЕГАИС!","!",зДок);
        EndIf;
        Continue;
      EndIf;
      ТБлокировка.AddLine("зДок",зДок);
      зДок.Reload();
      
      If зДок.ЮрЛицо<>оЮрЛицо Then
        Message("В документе %LINK% указано юр. лицо, не совпадающее с текущим рабочим юр. лицом! Документ был изменен!","!",зДок);
        Continue;
      EndIf;
      If IsEmpty(оЮрЛицо.ПутьДрайвераЭДО) Then
        Message("Для юр. лица %LINK% не указан задан драйвер ЭДО! Обратитесь к администратору!","!",оЮрЛицо);
        Continue;
      EndIf;
      If (зДок.УникальныйИдентификатор<>"")And(зДок.УникальныйИдентификатор4<>"#")And(not ФлНаЭкран) Then
        оРеализации.CurLine:=оРеализации.SelectedLine;
        If (флПакетная=1)Or((оРеализации.СтатусЧл<>8)And(оРеализации.СтатусЧл<>5)) Then
          Message("Документ %LINK% уже был отправлен в ЭДО. Для выгрузки такого документа обратитесь к администратору! Документ пропущен!","!",зДок);
          Continue;
        EndIf;
      EndIf;
      
      ТабВозвратов:=Tab.Create("Номенклатура,Партия,Количество,КоличествоСуммы,Сумма");//Таблица возвратов
      ФлЭтоВозврат:=зДок.DBName()="ВозвратПоставщику";
      ФлБезНоменклатуры:=not isEmpty(Struct.Doc(зДок.DBName()).LineParts("Содержание"));
      ФлБылВозврат:=0;
      ТВыгружаемыеМарки:=глМаркиЗагрузитьДокумент(зДок,,1);
      
      //Учитываем возвраты
      If (not ФлЭтоВозврат)and(not ФлБезНоменклатуры) Then
        Фл:=1;
        aList:=зДок.LoadLinkedDocuments(1);
        For i:=1 To aList.Size() Do 
          бДок:=aList.Get(i);
          If бДок.DBName()<>"ВозвратОтПокупателя" Then
            Continue;
          EndIf;
          If бДок.Status()<2 Then
            Continue;
          EndIf;
          аПольз:="";аКомп:="";аДата:="";
          If not бДок.Lock(аПольз,аКомп,аДата) Then
            If флПакетная=0 Then
              Box("Документ "+бДок+" открыт на запись. В данный момент с ним работает пользователь "+аПольз+" (компьютер "+аКомп+")! Пожалуйста, закройте документ, чтобы выгрузить его реализацию в ЕГАИС!",Q_STOP);
            Else
              Message("Документ %LINK% открыт на запись. В данный момент с ним работает пользователь "+аПольз+" (компьютер "+аКомп+")! Пожалуйста, закройте документ, чтобы выгрузить его реализацию в ЕГАИС!","!",бДок);
            EndIf;
            Continue 2;
          EndIf;
          ТБлокировка.AddLine("зДок",бДок);
          //бДок.Reload(); -- не имеет смысла, так как мы будем использовать только движения

          aTab:=бДок.LoadStorage("ОстаткиТМЦ");
          If aTab.Size()=0 Then
            If флПакетная=0 Then
              Box("Документ "+бДок+" имеет некорректные движения. Обратитесь к администратору!",Q_STOP);
            Else
              Message("Документ %LINK% имеет некорректные движения. Обратитесь к администратору!","!",бДок);
            EndIf;
            Continue 2;
          EndIf;
          
          aTab.Select();
          While aTab.Next() Do
            If _And(aTab.Номенклатура.флПодлежитПрослеживаемости,aTab.Номенклатура.ГИСМТТоварнаяГруппа.Selected()<>0,aTab.Партия.Selected()=0) Then
              Message("Для номенклатуры %LINK% ("+aTab.Номенклатура.Code+") не заполнена партия в %LINK%!","!",aTab.Номенклатура,бДок);
              Фл:=0;
            EndIf;
            ТабВозвратов.CurLine:=0;
            If not IsEmpty(aTab.Партия) Then
              If ТабВозвратов.FindAndGoto(aTab.Партия,,"Партия")=0 Then
                ТабВозвратов.AddLine("Количество,Партия,Номенклатура,КоличествоСуммы,Сумма",Min(-aTab.Количество,aTab.Количество),aTab.Партия,aTab.Номенклатура,0,0);
              Else
                ТабВозвратов.Количество:=Round(ТабВозвратов.Количество+Min(-aTab.Количество,aTab.Количество),6);
              EndIf;
            ElseIf ТабВозвратов.LocateAndGoto("Номенклатура,Партия",aTab.Номенклатура,aTab.Партия)=0 Then
              ТабВозвратов.AddLine("Количество,Партия,Номенклатура,КоличествоСуммы,Сумма",Min(-aTab.Количество,aTab.Количество),aTab.Партия,aTab.Номенклатура,0,0);
            Else
              ТабВозвратов.Количество:=Round(ТабВозвратов.Количество+Min(-aTab.Количество,aTab.Количество),6);
            EndIf;
          EndDo;
          
          //ТВыгружаемыеМарки:"Партия,Ящик,Марка"
          //Отнимаем марки возврата, если какие-то марки есть в возврате, но нет в реализации, останавливаемся с ошибкой
          ТМаркиВозврата:=глМаркиЗагрузитьДокумент(бДок,,1);
          ТМаркиВозврата.Combine(aTab,"Партия","AND");//Удалим лишние марки, не имеющие партий в самом документе
          ТМаркиВозврата2:=ТМаркиВозврата.Copy();
          ТМаркиВозврата2.Combine(ТВыгружаемыеМарки,"Партия,Марка","SUB");
          If ТМаркиВозврата2.Size()>0 Then
            If флПакетная=0 Then
              Box("Документ возврата "+бДок+" содержит маркировку продукции, которая отсутствовала в оригинальном документе (к примеру, "+ТМаркиВозврата2["Марка",1]+"!",Q_STOP);
            Else
              Message("Документ возврата %LINK% содержит маркировку продукции, которая отсутствовала в оригинальном документе (к примеру, "+ТМаркиВозврата2["Марка",1]+"!","!",бДок);
            EndIf;
            Continue 2;
          EndIf;
          ТВыгружаемыеМарки.Combine(ТМаркиВозврата,"Партия,Марка","SUB");

          aTab:=бДок.LineParts("Номенклатура").Copy();
          aTab.Group("Номенклатура,Партия","Количество,Сумма");
          //Добавляем суммы возвратов
          aTab.Select();
          While aTab.Next() Do
            ТабВозвратов.CurLine:=0;
            If not IsEmpty(aTab.Партия) Then
              If ТабВозвратов.FindAndGoto(aTab.Партия,,"Партия")=0 Then
                Message("Для номенклатуры %LINK% ("+aTab.Номенклатура.Code+") партия %LINK% не обнаружена в движениях!","!",aTab.Номенклатура,aTab.Партия);
                Фл:=0;
              Else
                ТабВозвратов.Сумма:=Round(ТабВозвратов.Сумма-aTab.Сумма,2);
                ТабВозвратов.КоличествоСуммы:=Round(ТабВозвратов.КоличествоСуммы-aTab.Количество,6);
              EndIf;
            Else
              зКл:=aTab.Количество;
              зСм:=aTab.Сумма;
              аСтр:=0;
              While (зКл>0)And(ТабВозвратов.FindAndGoto(aTab.Номенклатура,аСтр,"Номенклатура")>0) Do
                зКл2:=Min(-(ТабВозвратов.Количество-ТабВозвратов.КоличествоСуммы),зКл);
                If зКл2>0 Then
                  зСм2:=?(зКл=зКл2,зСм,Round(зСм/зКл*зКл2,2));
                  ТабВозвратов.Сумма:=Round(ТабВозвратов.Сумма-зСм2,2);
                  ТабВозвратов.КоличествоСуммы:=Round(ТабВозвратов.КоличествоСуммы-зКл2,6);
                  зСм:=Round(зСм-зСм2,2);
                  зКл:=Round(зКл-зКл2,6);
                  If ТабВозвратов.КоличествоСуммы=0 Then
                    ТабВозвратов.Remove(ТабВозвратов.CurLine);
                    аСтр:=аСтр-1;
                  EndIf;
                EndIf;
                аСтр:=аСтр+1;
              EndDo;
              If зКл>0 Then
                Message("Для номенклатуры %LINK% ("+aTab.Номенклатура.Code+") недостаточно количества в движении для распределения суммы возврата!","!",aTab.Номенклатура);
                Фл:=0;
              EndIf;
            EndIf;
          EndDo;
        EndDo;
        ТабВозвратов.Group("Номенклатура,Партия","Количество,Сумма");
        If not Фл Then
          Message("Документ %LINK% пропущен из-за указанных ошибок!","!",зДок);
          Continue;
        EndIf;
      EndIf;
      If зДок.DBName()="Реализация" Then
        If зДок.Контрагент.ТипАктива=1 Then
          ФлЭтоВозврат:=1;
        EndIf;
      EndIf;
      
      
      ОтправительИд:=спДрайвер["ЭДОНашеЮрЛицо"];
      If IsEmpty(ОтправительИд) Then
        Message("Не задан уникальный код ЭДО для нашего юр. лица %LINK% в установках провайдера ЭДО!","!",зДок.ЮрЛицо);
        Continue;
      EndIf;
      ПолучательИд:="";
      аТип:=спДрайвер["КодыКонтрагентовЭДО"];
      If _Or(IsEmpty(аТип),аТип.ВидСправочника<>Enum.ВидыСправочниковСДопСвойствами.кнтКонтрагенты) Then
        ПолучательИд:=зДок.Контрагент.УникальныйИдентификатор;
      Else
        аЭл:=Ref.общДополнительныеСвойства;
        If аЭл.Find("Элемент,ТипСвойства",зДок.Контрагент,аТип) Then
          ПолучательИд:=Trim(аЭл.Name);
        EndIf;
      EndIf;
      If IsEmpty(ПолучательИд) Then
        Message("В документе %LINK% для контрагента %LINK% ("+зДок.Контрагент.Code+") не задан уникальный код ЭДО получателя!","!",зДок,зДок.Контрагент);
        Continue;
      EndIf;
      ПолучательИд0:=ПолучательИд;
      ПолучательИд:=TearStr(ПолучательИд,"@");
      
      //5.01:
      //http://www.consultant.ru/document/cons_doc_LAW_316356/72c0ce050134c39638806ac35cafbdce970d54ee/
      //5.03:
      //https://www.garant.ru/products/ipo/prime/doc/56898965/
      //ON_NSCHFDOPPR_<Получ>_<Отправ>_GGGGMMDD_<GUID>_N2_N3_N4_N5_N6_N7
      //N2: 1 -- если есть прослеживаемые товары, иначе 0
      //N3: 1 -- если есть маркируемые товары, иначе 0
      //N4: 1 -- если есть алкогольные товары, иначе 0
      //N5: 1 -- если есть табачные товары, иначе 0
      //N6: 1 -- если есть нефтепродукты товары, иначе 0
      //N7: 00 -- двузначное число, которое принимает значение в соответствии со списком в электронной форме, размещенного на официальном сайте Федеральной налоговой службы в информационно-телекоммуникационной сети «Интернет» в виде отдельного файла
      ИдФайл:="ON_NSCHFDOPPR_"+ПолучательИд+"_"+ОтправительИд+"_"+FormatDate(зДок.DocDate,"YYYYmmdd")+"_"+CreateGUID()+"_"+Chr(1)+"ПОЛНОЕИМЯ"+Chr(1);
      Тек:=Date();
      пДатаТек:=FormatDate(Тек,"dd.mm.YYYY");
      пВремяТек:=Replace(GetTime(Тек),":",".");
      пДата:=FormatDate(зДок.DocDate,"dd.mm.YYYY");
      
      //Поставщик
      СтрКПП:=зДок.ЮрЛицо.ИНН;
      СтрИНН:=TearStr(СтрКПП,"/");
      //Грузоотправитель
      оМагазин:=зДок.Склад.Магазин;
      ТабФил:=зДок.ЮрЛицо.LineParts("ОбособленныеПодразделения");
      If ТабФил.FindAndGoto(оМагазин,,"Магазин") Then
        СтрКПП2:=ТабФил.ИНН;
        СтрИНН2:=TearStr(СтрКПП2,"/");
        Адрес2:=ТабФил.ФактАдрес;
      Else
        СтрКПП2:=СтрКПП;
        СтрИНН2:=СтрИНН;
        Адрес2:=зДок.ЮрЛицо.ФактАдрес;
      EndIf;
      //Покупатель,грузополучатель
      СтрКПП3:=зДок.Контрагент.ИНН;
      СтрИНН3:=TearStr(СтрКПП3,"/");
      
      If Trim(СтрКПП)="" Then
        пПоставщик:=Trim(Replace(Uppercase(зДок.ЮрЛицо.Контрагент.ПолнНаименование),"ПРЕДПРИНИМАТЕЛЬ",""));
        пПоставщик:=Trim(Replace(пПоставщик,"ИНДИВИДУАЛЬНЫЙ",""));
        СтрФИО:="<ФИО Фамилия="""+EncodeXMLString(Capitalize(Trim(TearStr(пПоставщик," "))))+""" Имя="""+EncodeXMLString(Capitalize(Trim(TearStr(пПоставщик," "))))+""" Отчество="""+EncodeXMLString(Capitalize(Trim(TearStr(пПоставщик," "))))+"""/>";
        пГрузоотправитель:="<ИдСв><СвИП ИННФЛ="""+СтрИНН2+""">"+СтрФИО+"</СвИП></ИдСв>";
        пПоставщик:="<ИдСв><СвИП ИННФЛ="""+СтрИНН+""">"+СтрФИО+"</СвИП></ИдСв>";
        пОргПодписи:="<ИП ИННФЛ="""+СтрИНН+""">"+СтрФИО+"</ИП>";
      Else
        пГрузоотправитель:="<ИдСв><СвЮЛУч НаимОрг="""+EncodeXMLString(зДок.ЮрЛицо.ПолнНаименование)+""" ИННЮЛ="""+СтрИНН2+""" КПП="""+СтрКПП2+"""/></ИдСв>";
        пПоставщик:="<ИдСв><СвЮЛУч НаимОрг="""+EncodeXMLString(зДок.ЮрЛицо.ПолнНаименование)+""" ИННЮЛ="""+СтрИНН+""" КПП="""+СтрКПП+"""/></ИдСв>";
        пФИО:=Trim(зДок.ЮрЛицо.GetValue("Глбухгалтер",зДок.DocDate).ПолнНаименование);
        СтрФИО:="<ФИО Фамилия="""+EncodeXMLString(Capitalize(Trim(TearStr(пФИО," "))))+""" Имя="""+EncodeXMLString(Capitalize(Trim(TearStr(пФИО," "))))+""" Отчество="""+EncodeXMLString(Capitalize(Trim(TearStr(пФИО," "))))+"""/>";
        пОргПодписи:="<ЮЛ ИННЮЛ="""+СтрИНН+""" Должн=""бухгалтер"" НаимОрг="""+EncodeXMLString(зДок.ЮрЛицо.Контрагент.ПолнНаименование)+""">"+СтрФИО+"</ЮЛ>";
      EndIf;
      If Trim(СтрКПП3)="" Then
        пПокупатель:=Trim(Replace(Uppercase(зДок.Контрагент.ПолнНаименование),"ПРЕДПРИНИМАТЕЛЬ",""));
        пПокупатель:=Trim(Replace(пПокупатель,"ИНДИВИДУАЛЬНЫЙ",""));
        СтрФИО:="<ФИО Фамилия="""+EncodeXMLString(Capitalize(Trim(TearStr(пПокупатель," "))))+""" Имя="""+EncodeXMLString(Capitalize(Trim(TearStr(пПокупатель," "))))+""" Отчество="""+EncodeXMLString(Capitalize(Trim(TearStr(пПокупатель," "))))+"""/>";
        пГрузополучатель:="<ИдСв><СвИП ИННФЛ="""+СтрИНН3+""">"+СтрФИО+"</СвИП></ИдСв>";
        пПокупатель:="<ИдСв><СвИП ИННФЛ="""+СтрИНН3+""">"+СтрФИО+"</СвИП></ИдСв>";
      Else
        пГрузополучатель:="<ИдСв><СвЮЛУч НаимОрг="""+EncodeXMLString(зДок.Контрагент.ПолнНаименование)+""" ИННЮЛ="""+СтрИНН3+""" КПП="""+СтрКПП3+"""/></ИдСв>";
        пПокупатель:="<ИдСв><СвЮЛУч НаимОрг="""+EncodeXMLString(зДок.Контрагент.ПолнНаименование)+""" ИННЮЛ="""+СтрИНН3+""" КПП="""+СтрКПП3+"""/></ИдСв>";
      EndIf;
      
      СтрСокрНаим:=?(Pos("/",зДок.ЮрЛицо.ИНН)=0," СокрНаим="""+EncodeXMLString(зДок.ЮрЛицо.ПолнНаименование)+"""","");
      пПоставщик:="<СвПрод"+?(зДок.ЮрЛицо.ОКПО<>""," ОКПО="""+зДок.ЮрЛицо.ОКПО+"""")+СтрСокрНаим+">"+пПоставщик+_СтандартныйАдрес(зДок.ЮрЛицо.ЮрАдрес,СтрИНН,СтрКПП);
      пГрузоотправитель:="<ГрузОт><ГрузОтпр"+?(зДок.ЮрЛицо.ОКПО<>""," ОКПО="""+зДок.ЮрЛицо.ОКПО+"""")+СтрСокрНаим+">"+пГрузоотправитель+_СтандартныйАдрес(Адрес2,СтрИНН2,СтрКПП2);
      зКнтЮЛ:=зДок.ЮрЛицо.Контрагент;
      If зКнтЮЛ.ОсновнойСчет.Selected()<>0 Then
        СтрСчет:="<БанкРекв НомерСчета="""+зКнтЮЛ.ОсновнойСчет.НомерСчета+"""><СвБанк БИК="""+зКнтЮЛ.ОсновнойСчет.Банк.БИК+""" КорСчет="""+
          зКнтЮЛ.ОсновнойСчет.Банк.КоррСчет+""" НаимБанк="""+EncodeXMLString(зКнтЮЛ.ОсновнойСчет.Банк.Name)+"""/></БанкРекв>";
        пПоставщик:=пПоставщик+СтрСчет;
        пГрузоотправитель:=пГрузоотправитель+СтрСчет;
      EndIf;
      пПоставщик:=пПоставщик+"</СвПрод>";
      пГрузоотправитель:=пГрузоотправитель+"</ГрузОтпр></ГрузОт>";
      
      СтрСокрНаим:=?(зДок.Контрагент.ВидКонтрагента=Enum.ВидыКонтрагентов.ФизЛицо," СокрНаим="""+EncodeXMLString(зДок.Контрагент.ПолнНаименование)+"""","");
      пПокупатель:="<СвПокуп"+?(зДок.Контрагент.ОКПО<>""," ОКПО="""+зДок.Контрагент.ОКПО+"""")+СтрСокрНаим+">"+пПокупатель+_СтандартныйАдрес(зДок.Контрагент.ЮрАдрес,СтрИНН3,СтрКПП3);
      пГрузополучатель:="<ГрузПолуч"+?(зДок.Контрагент.ОКПО<>""," ОКПО="""+зДок.Контрагент.ОКПО+"""")+СтрСокрНаим+">"+пГрузополучатель+_СтандартныйАдрес(зДок.Контрагент.ФактАдрес,СтрИНН3,СтрКПП3);
      зКнт:=зДок.Контрагент;
      If зКнт.ОсновнойСчет.Selected()<>0 Then
        СтрСчет:="<БанкРекв НомерСчета="""+зКнт.ОсновнойСчет.НомерСчета+"""><СвБанк БИК="""+зКнт.ОсновнойСчет.Банк.БИК+""" КорСчет="""+
          зКнт.ОсновнойСчет.Банк.КоррСчет+""" НаимБанк="""+EncodeXMLString(зКнт.ОсновнойСчет.Банк.Name)+"""/></БанкРекв>";
        пПокупатель:=пПокупатель+СтрСчет;
        пГрузополучатель:=пГрузополучатель+СтрСчет;
      EndIf;
      пПокупатель:=пПокупатель+"</СвПокуп>";
      пГрузополучатель:=пГрузополучатель+"</ГрузПолуч>";
      //<ТекстИнф Идентиф=""номер_заказа"" Значен="120EАЕВ11230"/>
      //<ТекстИнф Идентиф=""дата_заказа"" Значен="05.05.2022"/>
      //<ТекстИнф Идентиф=""GLN_поставщика"" Значен="4607185289990"/>
      //<ТекстИнф Идентиф=""GLN_грузоотправителя"" Значен="4607185289853"/>
      
      СтрРез:="<?xml version=""1.0"" encoding=""windows-1251""?>
        |<Файл ИдФайл="""+ИдФайл+""" ВерсФорм=""5.03"" ВерсПрог=""SF 1.0"">
        |<Документ КНД=""1115131"" Функция=""СЧФДОП"" ПоФактХЖ=""Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)"" НаимДокОпр=""Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)""
        |ДатаИнфПр="""+пДатаТек+""" ВремИнфПр="""+пВремяТек+""" НаимЭконСубСост="""+EncodeXMLString(зДок.ЮрЛицо.ПолнНаименование)+""">
        |<СвСчФакт НомерДок="""+зДок.DocNum+""" ДатаДок="""+пДата+""">"+пПоставщик+пГрузоотправитель+пГрузополучатель+"
        |<ДокПодтвОтгрНом РеквНаимДок=""Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)"" РеквНомерДок="""+зДок.DocNum+""" РеквДатаДок="""+пДата+"""/>
        |"+пПокупатель+"<ДенИзм КодОКВ=""643"" НаимОКВ=""Российский рубль"" />
        |<ИнфПолФХЖ1>
        |<ТекстИнф Идентиф=""номер_накладной"" Значен="""+зДок.DocNum+"""/>
        |<ТекстИнф Идентиф=""дата_накладной"" Значен="""+пДата+"""/>
        |</ИнфПолФХЖ1>
        |</СвСчФакт>
        |<ТаблСчФакт>";
        
        
      аВыгруженоСтрок:=0;
      If ФлБезНоменклатуры Then
        ТОст:=зДок.LineParts("Содержание").Copy();
        ТОст.Group("Содержание,СтавкаНДС","Количество,Сумма");
        ТДок:=0;
      Else
        ТДок:=зДок.LineParts("Номенклатура").Copy();
        ТДок.Group("Номенклатура,Партия","Количество,Сумма");
        ТОст:=зДок.LoadStorage("ОстаткиТМЦ");
        ТОст.Group("Номенклатура,Партия","Количество");
      EndIf;
      
      пН:=0;
      пСмНДСИтог:=0;
      пСмИтог:=0;
      пСмБезНДСИтог:=0;
      
      ФлМаркДок:=0;
      ФлПрослежДок:=0;
      ФлАлкогДок:=0;
      ФлТабачДок:=0;
      ФлНефтьДок:=0;
      
      ТбШК:=Tab.Create("Штрихкод,Номенклатура,Коэффициент");
      ТОст.Select();
      While ТОст.Next() Do
        If ФлБезНоменклатуры Then
          пН:=пН+1;
          аСумма:=ТОст.Сумма;
          СтавкаНДС:=?(зДок.ЮрЛицо.УчитыватьНДС=0,Enum.СтавкиНДС.БезНДС,ТОст.СтавкаНДС);
          If (СтавкаНДС=Enum.СтавкиНДС.БезНДС)or(IsEmpty(СтавкаНДС)) Then
            пСтНДС:="без НДС";
          Else
            пСтНДС:=Trim(СтавкаНДС);
          EndIf;
          аКоличество:=ТОст.Количество;
          пСмНДС:=Round(аСумма*глКоэффНДС(СтавкаНДС),2);
          пСмБезНДС:=Round(аСумма-пСмНДС,2);
          пЦ:=Round(пСмБезНДС/аКоличество,2);
          пЦ0:=Round(аСумма/аКоличество,2);
          пГТД:="";
          флТип:=3;//Услуга
          пАкциз:="<Акциз><БезАкциз>без акциза</БезАкциз></Акциз>";
          пСмНДСИтог:=пСмНДСИтог+Round(пСмНДС,2);
          пСмБезНДСИтог:=пСмБезНДСИтог+Round(пСмБезНДС,2);
          пСмИтог:=пСмИтог+Round(аСумма,2);
          
          // АртикулТов=""""
          AppendStringToBufferedString(СтрРез,"
          |<СведТов НомСтр="""+пН+""" НаимТов="""+EncodeXMLString(ТОст.Содержание)+""" ОКЕИ_Тов=""796"" НаимЕдИзм=""шт"" КолТов="""+аКоличество+""" ЦенаТов="""+пЦ+""" СтТовБезНДС="""+пСмБезНДС+""" НалСт="""+пСтНДС+""" СтТовУчНал="""+аСумма+""">
          |"+пГТД+"<ДопСведТов ПрТовРаб="""+флТип+"""></ДопСведТов>
          |"+пАкциз+"<СумНал><СумНал>"+пСмНДС+"</СумНал></СумНал>
          |</СведТов>");
          аВыгруженоСтрок:=аВыгруженоСтрок+1;
          Continue;
        EndIf;
      
        зН:=ТОст.Номенклатура;
        зПрт:=ТОст.Партия;
        
        аКоличество:=ТОст.Количество;
        аСумма:=0;
        //Находим сумму
        аКоличество2:=0;
        While аКоличество2<аКоличество Do
          ТДок.CurLine:=0;
          If _And(not IsEmpty(зПрт),ТДок.FindAndGoto(зПрт,,"Партия")>0) Then
            //
          ElseIf ТДок.FindAndGoto(зН,,"Номенклатура")=0 Then
            Message("Для документа %LINK% для номенклатуры %LINK% ("+зН.Code+") количество в движениях отличается от количества в документе!","!",зДок,зН);
            Continue 3;
          EndIf;
          зКл:=Round(Min(ТДок.Количество,аКоличество-аКоличество2),6);
          If зКл>0 Then
            зСм:=?(зКл=ТДок.Количество,ТДок.Сумма,Round(ТДок.Сумма/ТДок.Количество*зКл,2));
            If зКл=ТДок.Количество Then
              ТДок.Номенклатура:=0;
              ТДок.Партия:=0;
            EndIf;
            аСумма:=Round(аСумма+зСм,2);
            аКоличество2:=Round(аКоличество2+зКл,6);
            ТДок.Сумма:=Round(ТДок.Сумма-зСм,2);
            ТДок.Количество:=Round(ТДок.Количество-зКл,6);
            Break;
          EndIf;
        EndDo;
        
        ТабВозвратов.CurLine:=0;
        If _And(not IsEmpty(зПрт),ТабВозвратов.FindAndGoto(зПрт,,"Партия")>0) Then
          аКоличество:=Round(аКоличество+ТабВозвратов.Количество,6);
          аСумма:=аСумма+ТабВозвратов.Сумма;
          ФлБылВозврат:=1;
          ТабВозвратов.Remove(ТабВозвратов.CurLine);
        ElseIf ТабВозвратов.LocateAndGoto("Номенклатура,Партия",зН,зПрт)>0 Then
          аКоличество:=Round(аКоличество+ТабВозвратов.Количество,6);
          аСумма:=аСумма+ТабВозвратов.Сумма;
          ФлБылВозврат:=1;
          ТабВозвратов.Remove(ТабВозвратов.CurLine);
        EndIf;
        If (аКоличество<0)or(аСумма<0) Then
          Message("Для документа %LINK% в партии %LINK% для номенклатуры %LINK% ("+зН.Code+") количество или сумма в возврате покупателя больше, чем в реализации!","!",зДок,зПрт,зН);
          Continue 2;
        EndIf;
        If Round(аКоличество,6)=0 Then
          Continue;
        EndIf;
        пН:=пН+1;
        СтавкаНДС:=?(глУчитыватьНДС(зДок.ЮрЛицо,зДок.DocDate)=0,Enum.СтавкиНДС.БезНДС,глСтавкаНДСНоменклатуры(зДок.ЮрЛицо,зН,зДок.DocDate));
        If (СтавкаНДС=Enum.СтавкиНДС.БезНДС)or(IsEmpty(СтавкаНДС)) Then
          пСтНДС:="без НДС";
        Else
          пСтНДС:=Trim(СтавкаНДС);
        EndIf;
        
        пСтрана:="";//"Российская Федерация";
        пСтранаКод:="";//"643";
        пГТД:="";
        If зН.сертСтранаПроисхождения.Selected()<>0 Then
          пСтрана:=зН.сертСтранаПроисхождения;
          пСтранаКод:="";
          Try
            пСтранаКод:=Trim(пСтрана.ВнешнийКод);
          Except
          EndTry;
          If Pos("РОССИ",UpperCase(пСтрана))=1 Then
            пСтрана:="";
            пСтранаКод:="";
          EndIf;
          пГТД:=Trim(зН.сертНомерГТД);
        EndIf;
        If _And(ТОст.Партия.Selected()<>0,ТОст.Партия.НомерГТД<>"") Then
          пГТД:=ТОст.Партия.НомерГТД;
        EndIf;
        
        пАкциз:="<Акциз><БезАкциз>без акциза</БезАкциз></Акциз>";
        пАрт:=глНомерБезНулей(зН,0);
        пСмНДС:=Round(аСумма*глКоэффНДС(СтавкаНДС),2);
        пСмБезНДС:=Round(аСумма-пСмНДС,2);
        пСмНДСИтог:=пСмНДСИтог+Round(пСмНДС,2);
        пСмБезНДСИтог:=пСмБезНДСИтог+Round(пСмБезНДС,2);
        пСмИтог:=пСмИтог+Round(аСумма,2);
        пЦ:=Round(пСмБезНДС/аКоличество,2);
        
        If (пСтранаКод<>"")And(пГТД<>"") Then
          пГТД:="<СвТД КодПроисх="""+пСтранаКод+""" НомерТД="""+EncodeXMLString(пГТД)+""" />";
        Else
          пГТД:="";
        EndIf;
        пШК:=глПолучитьШтрихкод(зН,1,,1);
        пШтрихКод:=?(IsEmpty(пШК),"","<ИнфПолФХЖ2 Идентиф=""штрихкод"" Значен="""+пШК+"""/>");
        If _And(зН.флАлкогольнаяПродукция,зН.ГИСМТТоварнаяГруппа.Selected()<>0) Then
          ФлАлкогДок:=1;
        EndIf;
        If _And(зН.ГИСМТТоварнаяГруппа.Selected()<>0,(зН.ГИСМТТоварнаяГруппа.ВнешнееНаименование="tobacco")Or(зН.ГИСМТТоварнаяГруппа.ВнешнееНаименование="otp")) Then
          ФлТабачДок:=1;
        EndIf;
        //If _And(зН.ГИСМТТоварнаяГруппа.Selected()<>0,зН.ГИСМТТоварнаяГруппа.ВнешнееНаименование="?") Then
        //  ФлНефтьДок:=1;
        //EndIf;
        СтрМарки:="";
        СтрМарки2:="";
        If (not зН.флАлкогольнаяПродукция)Or(зН.флПодлежитПрослеживаемости) Then
          зКл:=0;
          While _And(not IsEmpty(зПрт),ТВыгружаемыеМарки.FindAndGoto(зПрт,,"Партия")>0) Do
            If not НайтиКоличествоПоШтрихкоду(ТбШК,ТВыгружаемыеМарки.Марка,зДок) Then
              Exit 0;
            EndIf;
            зКл:=зКл+ТбШК.Коэффициент;
            If ТбШК.Коэффициент>1 Then
              If Right(ТВыгружаемыеМарки.Марка,1)=Chr(29) Then
                //Агрегат транспортной упаковки, пример: 01046006820497391125032121003001098
                AppendStringToBufferedString(СтрМарки2,"<НомСредИдентТов ИдентТрансУпак="""+EncodeXMLString(глУдалитьКрипточасть(ТВыгружаемыеМарки.Марка,зН.ГИСМТТоварнаяГруппа))+""" />"+_NEWLINE);
              Else
                AppendStringToBufferedString(СтрМарки,"<НомУпак>"+EncodeXMLString(глУдалитьКрипточасть(ТВыгружаемыеМарки.Марка,зН.ГИСМТТоварнаяГруппа))+"</НомУпак>"+_NEWLINE);
              EndIf;
            Else
              AppendStringToBufferedString(СтрМарки,"<КИЗ>"+EncodeXMLString(глУдалитьКрипточасть(ТВыгружаемыеМарки.Марка,зН.ГИСМТТоварнаяГруппа))+"</КИЗ>"+_NEWLINE);
            EndIf;
            ТВыгружаемыеМарки.Партия:=0;
          EndDo;
          If (СтрМарки<>"")Or(СтрМарки2<>"") Then
            If Round(зКл,6)<>Round(аКоличество,6) Then
              Message("Для документа %LINK% для номенклатуры %LINK% указано марок для количества "+Round(зКл,6)+", хотя в документе указано количество "+Round(аКоличество,6)+"!","!",зДок,зН);
              Continue 2;
            EndIf;
            СтрМарки:=?(СтрМарки<>"","<НомСредИдентТов>"+СтрМарки+"</НомСредИдентТов>","")+СтрМарки2;
            ФлМаркДок:=1;
          ElseIf зН.ГИСМТТоварнаяГруппа.Selected()<>0 Then
            //см. 7.3. Указание сведений при заполнении информации при объёмно-сортовом разрезе учёта
            //[02][GTIN][37][количество]
            If IsEmpty(пШК) Then
              Message("Не найден штрихкод для маркируемой позиции %LINK%!","!",зН);
              Continue 2;
            EndIf;
            СтрМарки:="<НомСредИдентТов><НомУпак>02"+Right("00000000000000"+пШК,14)+"37"+аКоличество+"</НомУпак></НомСредИдентТов>";
            ФлМаркДок:=1;
          EndIf;
        EndIf;
        //ОКЕИ=796 -- шт
        флТип:=?(зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Услуга,3,1);
        AppendStringToBufferedString(СтрРез,"
        |<СведТов НомСтр="""+пН+""" НаимТов="""+EncodeXMLString(зН)+""" ОКЕИ_Тов=""796"" НаимЕдИзм=""шт"" КолТов="""+аКоличество+""" ЦенаТов="""+пЦ+""" СтТовБезНДС="""+пСмБезНДС+""" НалСт="""+пСтНДС+""" СтТовУчНал="""+аСумма+""">
        |"+пГТД+"<ДопСведТов ПрТовРаб="""+флТип+""" АртикулТов="""+пАрт+""">"+СтрМарки+"</ДопСведТов>
        |"+пАкциз+"<СумНал><СумНал>"+пСмНДС+"</СумНал></СумНал>"+пШтрихКод+"
        |<ИнфПолФХЖ2 Идентиф=""вложенность"" Значен=""1""/>
        |</СведТов>");
        аВыгруженоСтрок:=аВыгруженоСтрок+1;
      EndDo;
      //Имя файла: N2_N3_N4_N5_N6_N7
      ПолноеИмя:=""+ФлПрослежДок+"_"+ФлМаркДок+"_"+ФлАлкогДок+"_"+ФлТабачДок+"_"+ФлНефтьДок+"_00";
      СтрРез:=Replace(СтрРез,Chr(1)+"ПОЛНОЕИМЯ"+Chr(1),ПолноеИмя);
      ИмяФайла:=Replace(ИдФайл,Chr(1)+"ПОЛНОЕИМЯ"+Chr(1),ПолноеИмя)+".xml";
      If аВыгруженоСтрок=0 Then
        Message("Документа %LINK% не содержит ни одной строки для выгрузки (с учетом возвратов)!","!",зДок);
        Continue;
      EndIf;
      
      If ТабВозвратов.Size()>0 Then
        ТабВозвратов.CurLine:=1;
        зН:=ТабВозвратов.Номенклатура;
        Message("Для документа %LINK% для номенклатуры %LINK% ("+зН.Code+") количество в возврате покупателя больше, чем количество в реализации!","!",зДок,зН);
        Continue;
      EndIf;
      If Trim(спДрайвер["Подписант"])<>"" Then
        пОргПодписи:=спДрайвер["Подписант"];
      Else
        пОргПодписи:="<Подписант Должн=""бухгалтер"" СпосПодтПолном=""4"">"+пОргПодписи+"</Подписант>";
      EndIf;
      
      пОсн:="<ОснПер РеквНаимДок=""Реализация"" РеквНомерДок="""+зДок.DocNum+""" РеквДатаДок="""+FormatDate(зДок.DocDate,"dd.mm.YYYY")+""" />";
      If _And(глЕстьРеквизитДокумента("Договор",зДок.DBName()),not IsEmpty(зДок.Договор.НомерДоговора),not IsEmpty(зДок.Договор.ДатаЗаключенияДоговора)) Then
        пОсн:="<ОснПер РеквНаимДок=""Договор"" РеквНомерДок="""+EncodeXMLString(зДок.Договор.НомерДоговора)+""" РеквДатаДок="""+FormatDate(зДок.Договор.ДатаЗаключенияДоговора,"dd.mm.YYYY")+""" />";
      EndIf;
      AppendStringToBufferedString(СтрРез,"
        |<ВсегоОпл СтТовБезНДСВсего="""+пСмБезНДСИтог+""" СтТовУчНалВсего="""+пСмИтог+"""><СумНалВсего><СумНал>"+пСмНДСИтог+"</СумНал></СумНалВсего></ВсегоОпл>
        |</ТаблСчФакт>
        |<СвПродПер><СвПер СодОпер=""Товары переданы"" ДатаПер="""+FormatDate(зДок.DocDate,"dd.mm.YYYY")+""">"+пОсн+"</СвПер></СвПродПер>
        |"+пОргПодписи+"
        |</Документ>
        |</Файл>");
        
        
      If ФлНаЭкран Then
        СтрРез:=ReformatXML(СтрРез,0);
        Тч:=Text.Create(1);
        Тч.AddString(СтрРез);
        Тч.Show("Текст УПД к документу "+зДок,ИмяФайла,1);
        Exit 1;
      EndIf;        
        
      спДрайвер["ДрайверШифрования"]:=локДрайверПодписи;
      спДрайвер["Файл"]:=TranslateTo(СтрРез,1251);
      спДрайвер["ИмяФайла"]:=ИмяФайла;
      спДрайвер["ТипФайла"]:=1;//Продажа
      спДрайвер["ДокументФайла"]:=зДок;
      спДрайвер["СуммаДокумента"]:=пСмИтог;
      спДрайвер["Действие"]:=0;//Выгрузить
      спДрайвер["ПолучательИд"]:=ПолучательИд0;
      спДрайвер["ИдентификаторДокумента"]:="";
      Стр:=Trim(ExecuteFunction("NewDocument",спДрайвер["МодульДрайвера"],спДрайвер));
      спДрайвер["ДрайверШифрования"]:=0;
      спДрайвер["ДокументФайла"]:=0;
      спДрайвер["Файл"]:=0;
      If Trim(спДрайвер["ИдентификаторДокумента"])<>"" Then
        If оРеализации.FindAndGoto(зДок,,"Локальный")>0 Then
          оРеализации.СтатусЧл:=7;
        EndIf;
        зДок.УникальныйИдентификатор:=спДрайвер["ИдентификаторДокумента"];      
        зДок.УникальныйИдентификатор4:="";
        зДок.Save();
        ТБлокировка.Select();
        While ТБлокировка.Next() Do
          зДок2:=ТБлокировка.зДок;
          If зДок2.DBName()="ВозвратОтПокупателя" Then
            зДок2.Reload();
            зДок2.УникальныйИдентификатор:=зДок.УникальныйИдентификатор; 
            зДок2.Save();
          EndIf;
        EndDo;        
      EndIf;
      стрПост:="";
      If ФлБылВозврат Then
        стрПост:=" (-возврат)";
      EndIf;
      If (Стр<>"")Or(спДрайвер["Результат"]<>1) Then
        If (Стр="")And(спДрайвер["Результат"]<>1) Then
          Стр:=спДрайвер["Ошибка"];
        EndIf;
        If оРеализации.FindAndGoto(зДок,,"Локальный")>0 Then
          оРеализации.зСтатус:="ошибка: "+Стр;
        EndIf;
        Logs.Write("Ошибка при отправке документа "+стрПост+": "+зДок+", GUID: "+зДок.УникальныйИдентификатор,зДок,"ЭДО",0);
        If флПакетная=0 Then
          Message("Ошибка при выполнении операции выгрузки: "+Стр+"!","!");
        EndIf;
        Continue;
      EndIf;
      Logs.Write("Отправлен документ"+стрПост+": "+зДок+", GUID: "+зДок.УникальныйИдентификатор,зДок,"ЭДО",0);
      //Обновляем таблицу оРеализации
      If оРеализации.FindAndGoto(зДок,,"Локальный")>0 Then
        оРеализации.зСтатус:="ожидает прием";
        оРеализации.СтатусЧл:=1;
        оРеализации.Icon(оРеализации.CurLine,"Иконка",279);
        оРеализации.Локальный:=зДок;
        оРеализации.СпДокумент:=List.Create();
        оРеализации.СпДокумент["Идентификатор"]:=List.Create();
        Стр:=зДок.УникальныйИдентификатор;
        оРеализации.СпДокумент["Идентификатор"]["Документ"]:=Left(Стр,8)+"-"+Mid(Стр,9,4)+"-"+Mid(Стр,13,4)+"-"+Mid(Стр,17,4)+"-"+Mid(Стр,21,12);
        
        ЧлКоличествоВыгруженных:=ЧлКоличествоВыгруженных+1;
      EndIf;
    Finally
      ТБлокировка.Select();
      While ТБлокировка.Next() Do
        зДок:=ТБлокировка.зДок;
        зДок.Unlock();
      EndDo;
      ТБлокировка:=0;
    EndTry;  
    If флПакетная=0 Then
      Box("Документ успешно выгружен!",Q_INFORMATION);
    EndIf;
    If (флПакетная=1)And(Тб.Size()>1) Then
      Message("  Выгрузили документ %LINK%, ("+Тб.CurLine+" из "+Тб.Size()+")","I",зДок);
    EndIf;    
    ФлБылиДокументы:=1;
  EndDo;//По документам
  Form.оДокументыИсх.InvokeEvent("OnInitLine","IndexFrom,IndexTo",1,оРеализации.Size());
  
  If флПакетная=0 Then
    If not ФлБылиДокументы Then
      Box("Документ не был выгружен!",Q_STOP);
    EndIf;
  Else
    Message("Выгрузка завершена!","I");
  EndIf;
  
  Exit ЧлКоличествоВыгруженных;  
EndFunction

Function ОтправкаРеализаций()
  КонДата:=BegOfDay(Form.КонДата.Value);
  НачДата:=BegOfDay(Form.НачДата.Value);
  оДокументыИсх:=Form.оДокументыИсх.Value;
  оЮрЛицо:=Form.оЮрЛицо.Value;
  
  If not глПользователь.общиеКорректировкаСкладскихОстатков Then
    Box("Вы не имеете полномочий для работы с этой функцией!",Q_STOP);
    Exit;
  EndIf;
  If КонДата<>НачДата Then
    Box("Эта фукция может быть использована только если период выгрузки равен одному дню!",Q_STOP);
    Exit;
  EndIf;
  If IsEmpty(оЮрЛицо.ПутьДрайвераЭДО) Then
    Box("Необходимо настроить подключение к драйверу ЭДО!",Q_STOP);
    Exit;
  EndIf;
  If спВнешПровайдерЭДО["Инициализирован"]=0 Then
    Box("Драйвер провайдера ЭДО находится в процессе инициализации, попробуйте выполнить эту функцию позднее!",Q_STOP);
    Exit;
  ElseIf спВнешПровайдерЭДО["Инициализирован"]<>1 Then
    Box("Невозможно подключение к драйверу ЭДО!",Q_STOP);
    Exit;
  EndIf;
  If AskQuestion("Выгрузить все новые реализации из текущего списка? Вы уверены?",Q_QUESTION+Q_YESNO)<>R_YES Then
    Exit;
  EndIf;
  
  ОстПольз:=0;ОстМашина:=0;
  If not DBLockStringMutex("ОтправкаРеализацийГИС"+оЮрЛицо.Code,ОстПольз,ОстМашина) Then
    Box("Внимание, пользователь "+ОстПольз+" на "+ОстМашина+" уже производит отправку реализаций в ГИСМТ. Дождитесь окончания процесса.",Q_STOP);
    Exit 0;
  EndIf;
  Try
    ЧлВсегоДокументов:=0;
    Тб:=Tab.Create("Документ");
    Тб.AddColumn("Статус",,"Number");
    оДокументыИсх.Select();
    While оДокументыИсх.Next() Do
      If not IsDBObject(оДокументыИсх.Локальный) Then
        Continue;
      EndIf;
      зДок:=оДокументыИсх.Локальный.Copy();
      If зДок.DBName()<>"Реализация" Then
        Continue;
      EndIf;
      ФлВыгружен:=зДок.УникальныйИдентификатор<>"";
      ЛокСтатус:=зДок.УникальныйИдентификатор4;
      If (not ФлВыгружен)or(ЛокСтатус="#") Then //оДокументы.СтатусЧл=8 -- не используется для безопасности
        Тб.AddLine("Документ",зДок);
        ЧлВсегоДокументов:=ЧлВсегоДокументов+1;
      EndIf;
    EndDo;
    If ЧлВсегоДокументов=0 Then
      Box("В выбранном списке отсутствуют реализации, ожидающие выгрузки или выделенные галочками!",Q_WARNING);
      Exit;
    EndIf;
    ЧлВсегоВыгружено:=ВыгрузитьДокументы(Тб,1);
    If ЧлВсегоВыгружено=0 Then
      Box("Не было выгружено ни одного документа!",Q_WARNING);
    EndIf;
  Finally
    DBUnlockStringMutex("ОтправкаРеализацийГИС"+оЮрЛицо.Code);
  EndTry;
EndFunction

спТекущиеПроцессы:=List.Create();
SetMultiThreaded(спТекущиеПроцессы);

