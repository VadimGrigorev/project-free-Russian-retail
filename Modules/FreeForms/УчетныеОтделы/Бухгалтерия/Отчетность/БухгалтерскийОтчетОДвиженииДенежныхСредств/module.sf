//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var ТОДДС Export;//Основная настрока
Var Коэфф Export;
Var оЗнаков Export;
Var ТабЗапросы Export;
Var З Export, ЗКор Export;

Function ПостроитьСписокНастроек(флУмолчание=1)
  Сп:=List.Create();
  Путь:="Temp\Бухгалтерия";
  If not File.DoesPathExist(Путь) Then
    File.CreateDirectory(Путь);
  EndIf;
  Путь:=Путь+"\ОДДС";
  If not File.DoesPathExist(Путь) Then
    File.CreateDirectory(Путь);
  EndIf;
  Путь:=Путь+"\";
  Сп:=File.LoadFileNames(Путь+"*.set");
  If флУмолчание Then
    Сп.Insert(1,"","По умолчанию");
  EndIf;
  For i:=флУмолчание+1 To Сп.Size() Do
    Сп.SetName(i,RemoveExt(Сп.GetName(i)));
  EndDo;
  Exit Сп;
EndFunction

Function лкФРМ(См)
  If См<0 Then
    Стр:=FormatNumber(-См/Коэфф,1,"'",оЗнаков);
    Exit ?(Стр="","","("+Стр+")");
  Else
    Exit FormatNumber(См/Коэфф,1,"'",оЗнаков);
  EndIf;
EndFunction


Function НастройкаПоУмолчанию()

  Function СтандартнаяТаблица()
    //<Слагаемое>{-}<Слагаемое>,...
    //<Слагаемое>: [{Д,К}]<Счет>[@<Субконто1>[@<Субконто2>[@<Субконто3>]]]
    //<Субконто>: Код субконто, либо "", если фильтра нет
    Таб:=Tab.Create("Наименование,Код,Формула,Подгруппа,Описание");
    Таб.AddColumn("флПодитоги",,"Number");
    Таб.AddColumn("зСм",,"Number");
    Таб.AddColumn("зСм2",,"Number");
    Таб.AddColumn("зСм3",,"Number");
    
    Exit Таб;
  EndFunction

  ТОДДС:=СтандартнаяТаблица();
  
  ТОДДС.NewLine();
  ТОДДС.Наименование:="Денежные потоки от текущих операций";
  ТОДДС.Подгруппа:=СтандартнаяТаблица();
  Таб:=ТОДДС.Подгруппа;

  Таб.AddLine("Наименование,Код,Формула,Описание","Поступления - всего","4110","Д50+Д51+Д57-~Д08-~Д58-~Д66-~Д67","");

  Таб.Подгруппа=СтандартнаяТаблица();
  Таб2=Таб.Подгруппа;

  Таб2.AddLine("Наименование,Код,Формула,Описание","От продажи продукции, товаров, работ и услуг","4111","~Д62+~Д60","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Арендных платежей, лицензионных платежей, роялти, комиссионных и иных аналогичных платежей","4112","","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","От перепродажи финансовых вложений","4113","~Д58","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Прочие поступления","4119","Д50+Д51+Д57-~Д08-~Д58-~Д66-~Д67-%4111%-%4112%-%4113%","");
    
  
  Таб.AddLine("Наименование,Код,Формула,Описание","Платежи - всего","4120","-К50-К51-К57-~К08-~К58-~К66-~К67-~К75","");

  Таб.Подгруппа=СтандартнаяТаблица();
  Таб2=Таб.Подгруппа;

  Таб2.AddLine("Наименование,Код,Формула,Описание","Поставщикам (подрядчикам) за сырье, материалы, работы, услуги","4121","-~К62-~К60","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","В связи с оплатой труда работников","4122","-~70","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Процентов по долговым обязательствам","4123","-~67.2-~67.22-~67.4-~67.44-~66.2-~66.22-~66.4-~66.44","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Налога на прибыль организаций","4124","-~К68.4","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Прочие платежи","4129","-К50-К51-К57-~К08-~К58-~К66-~К67-~К75-%4121%-%4122%-%4123%-%4124%","");
    
  Таб.AddLine("Наименование,Код,Формула,Описание","Сальдо денежных потоков от текущих операций","4100","%4110%+%4120%","Разница между суммами, отраженными в строках 4110 и 4120");
  Таб.флПодитоги=1;

  
  
  
  
  ТОДДС.NewLine();
  ТОДДС.Наименование:="Денежные потоки от инвестиционных операций";
  ТОДДС.Подгруппа:=СтандартнаяТаблица();
  Таб:=ТОДДС.Подгруппа;
  
  Таб.AddLine("Наименование,Код,Формула,Описание","Поступления - всего","4210","~Д08+~Д58","");

  Таб.Подгруппа=СтандартнаяТаблица();
  Таб2=Таб.Подгруппа;

  Таб2.AddLine("Наименование,Код,Формула,Описание","От продажи внеоборотных активов (кроме финансовых вложений)","4211","~Д08","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","От продажи акций других организаций (долей участия)","4212","~Д58.1","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","От возврата предоставленных займов, от продажи долговых ценных бумаг (прав требования денежных средств к другим лицам)","4213","~Д58.2","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Дивидендов, процентов по долговым финансовым вложениям и аналогичных поступлений от долевого участия в других организациях","4214","","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Прочие поступления","4219","~Д58-%4212%-%4213%-%4214%","");
    
  Таб.AddLine("Наименование,Код,Формула,Описание","Платежи - всего","4220","-~К08-~К58","");

  Таб.Подгруппа=СтандартнаяТаблица();
  Таб2=Таб.Подгруппа;

  Таб2.AddLine("Наименование,Код,Формула,Описание","В связи с приобретением, созданием, модернизацией, реконструкцией и подготовкой к использованию внеоборотных активов","4221","-~К08","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","В связи с приобретением акций других организаций (долей участия)","4222","-~К58.1","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","В связи с приобретением долговых ценных бумаг (прав требования денежных средств к другим лицам), предоставление займов другим лицам","4223","-~К58.2","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Процентов по долговым обязательствам, включаемым в стоимость инвестиционного актива","4224","","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Прочие платежи","4229","-~К58-%4222%-%4223%-%4224%","");
    
  Таб.AddLine("Наименование,Код,Формула,Описание","Сальдо денежных потоков от инвестиционных операций","4200","%4210%+%4220%","Разница между суммами, отраженными в строках 4210 и 4220");
  Таб.флПодитоги=1;

  
  
  
  
  ТОДДС.NewLine();
  ТОДДС.Наименование:="Денежные потоки от финансовых операций";
  ТОДДС.Подгруппа:=СтандартнаяТаблица();
  Таб:=ТОДДС.Подгруппа;
  
  Таб.AddLine("Наименование,Код,Формула,Описание","Поступления - всего","4310","~Д66+~Д67+~Д75","");

  Таб.Подгруппа=СтандартнаяТаблица();
  Таб2=Таб.Подгруппа;

  Таб2.AddLine("Наименование,Код,Формула,Описание","Получение кредитов и займов","4311","~Д66+~Д67-~Д67.2-~Д67.22-~Д67.4-~Д66.5-~Д67.44-~Д66.2-~Д66.22-~Д66.4-~Д66.44","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Денежных вкладов собственников (участников)","4312","~Д75.1","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","От выпуска акций, увеличения долей участия","4313","~Д75.3","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","От выпуска облигаций, векселей и других долговых ценных бумаг и др.","4314","~Д66.5","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Прочие поступления","4319","~Д66+~Д67+~Д75-%4311%-%4312%-%4313%-%4314%","");
    
  Таб.AddLine("Наименование,Код,Формула,Описание","Платежи - всего","4320","-~К66-~К67-~К75","");

  Таб.Подгруппа=СтандартнаяТаблица();
  Таб2=Таб.Подгруппа;

  Таб2.AddLine("Наименование,Код,Формула,Описание","Собственникам (участникам) в связи с выкупом у них акций (долей участия) организации или их выходом из состава участников","4321","-~К75.1","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","На уплату дивидендов и иных платежей по распределению прибыли в пользу собственников (участников)","4322","-~К75.2","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","В связи с погашением (выкупом) векселей и других долговых ценных бумаг, возврат кредитов и займов","4323","-~К66.5","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Прочие платежи","4329","-~К66-~К67-~К75-%4321%-%4322%-%4323%","");
    
  Таб.AddLine("Наименование,Код,Формула,Описание","Сальдо денежных потоков от финансовых операций","4300","%4310%+%4320%","Разница между суммами, отраженными в строках 4310 и 4320");
  Таб.флПодитоги=1;


  Таб.AddLine("Наименование,Код,Формула,Описание","Сальдо денежных потоков за отчетный период","4400","50,51,57","Сумма данных по строкам 4300, 4200, 4100");//%4300%+%4200%+%4100%
  Таб.флПодитоги=1;
  
  Таб.AddLine("Наименование,Код,Формула,Описание","Остаток денежных средств и денежных эквивалентов на начало отчетного периода","4450","НО50,НО51,НО57","");
  Таб.AddLine("Наименование,Код,Формула,Описание","Остаток денежных средств и денежных эквивалентов на конец отчетного периода","4500","КО50,КО51,КО57","");
  Таб.AddLine("Наименование,Код,Формула,Описание","Величина влияния изменений курса иностранной валюты по отношению к рублю","4490","","");

  Form.оНастройка.Value:="По умолчанию";
EndFunction

Function ЗагрузитьТОДДС()
  If (Uppercase(Form.оНастройка.Value)<>uppercase("По умолчанию")) Then
    Try
      Путь:="Temp\Бухгалтерия\ОДДС\"+Trim(Form.оНастройка.Value)+".set";
      ТОДДС:=ObjectFromFile(Путь);
    Except
      НастройкаПоУмолчанию();
    EndTry;
  Else
    НастройкаПоУмолчанию();
  EndIf;
EndFunction

Function лкНайтиСчет(Счет)
  а:=Ref.бухПланСчетов;
  If not а.Find("Code",Счет) Then
    Exit 0;
  EndIf;
  Exit а;
EndFunction

Function ПериодСтр(НачДата,КонДата)
  If (НачДата=BegOfYear(НачДата))And(КонДата=EndOfYear(КонДата)) Then
    Exit FormatDate(НачДата,"YYYY г.");
  ElseIf (НачДата=BegOfQuarter(НачДата))And(КонДата=EndOfQuarter(КонДата)) Then
    Exit FormatDate(НачДата,"q квартал YYYY г.");
  ElseIf (НачДата=BegOfMonth(НачДата))And(КонДата=EndOfMonth(КонДата)) Then
    Exit FormatDate(НачДата,"MM YYYY г.");
  Else
    Exit "с "+НачДата+" по "+КонДата;
  EndIf;
EndFunction

Function ПолучитьСубконто(стрСуб,ВидСубконто)
  If Trim(стрСуб)="" Then
    Exit GetNothing();
  EndIf;
  If Trim(ВидСубконто.ТипЗначенияЛокальный)="" Then
    а:=Ref.бухЗначенияСубконто;
    If а.Find("@Parent,Code",ВидСубконто,стрСуб) Then
      Exit а;
    EndIf;
    Exit GetNothing();
  EndIf;
  Стр:=Trim(ВидСубконто.ТипЗначенияЛокальный);
  СтрТип:=Uppercase(TearStr(Стр,"."));
  If (СтрТип="ПЕРЕЧИСЛЕНИЕ")or(СтрТип="ENUM") Then
    Try
      Exit Enum.GetByIndex(Стр,Number(стрСуб));
    Except EndTry;
    Exit GetNothing();
  ElseIf (СтрТип="ДОКУМЕНТ")or(СтрТип="DOC") Then
    а:=DB("Doc."+Стр);
    дДата:=TearStr(стрСуб,"#");
    дНомер:=TearStr(стрСуб,"#");
    If а.Find("DocNum,<DocDate,>=DocDate",дНомер,EndOfYear(дДата)+1,BegOfYear(дДата)) Then
      Exit а;
    EndIf;
    Exit GetNothing();
  EndIf;
  
  Стр:=Replace(Uppercase(Trim(ВидСубконто.ТипЗначенияЛокальный)),"СПРАВОЧНИК.","REF.");
  а:=DB(Стр);
  If а.Find("Code",стрСуб) Then
    Exit а;
  EndIf;
  Exit GetNothing();
EndFunction

Function ПолучитьИлиВыполнитьЗапрос(ФлКорреспондирующий,аСчет,Индекс,НДата,КДата,СубНом)
  оЮЛ:=Form.оЮЛ.Value;
  
  If ТабЗапросы.FindAndGoto(Индекс,,"Индекс")=0 Then
    If ФлКорреспондирующий Then
      СпСчета:=List.Create(лкНайтиСчет("50"),лкНайтиСчет("51"),лкНайтиСчет("57"));
    EndIf;
    КДата2:=Min(КДата,Date());
    ТЗ:="Period From НДата to КДата2;
    |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;"+?(ФлКорреспондирующий,"
    |зСч0:=Storage.БухгалтерскиеСчета.Счет;
    |Condition(зСч0 IN СпСчета);
    |зСч:=Storage.БухгалтерскиеСчета.КоррСчет;",
    "зСч:=Storage.БухгалтерскиеСчета.Счет;")+
    "зЗБ:=Storage.БухгалтерскиеСчета.Счет.Забалансовый;
    |зСуб:=Storage.БухгалтерскиеСчета.Субконто"+СубНом+";
    |зНачОст:=BegTotals(Сумма);
    |зРасход:=Expense(Сумма);
    |зПриход:=Income(Сумма);
    |Condition(зЗБ=0);
    |Condition(зСч=аСчет);
    |Condition(зЮЛ=оЮЛ);
    |Group зСуб;";
    З2:=Query.Create();
    З2.Execute(ТЗ);
    ТабЗапросы.AddLine("Индекс,Запрос",Индекс,З2);
  EndIf;
  Exit ТабЗапросы.Запрос;
EndFunction

Function НайтиКодТаблицы(Таб,Тип,аКод,ByRef ФлНайден=0)
  For i:=1 To Таб.Size() Do
    Код:=Таб.Get(i,"Код");
    If Number(Код)=аКод Then
      ФлНайден:=1;
      Exit Таб.Get(i,"зСм"+Тип);
    EndIf;
    
    Таб2:=Таб.Get(i,"Подгруппа");
    If not IsEmpty(Таб2) Then
      ФлНайден:=0;
      См:=НайтиКодТаблицы(Таб2,Тип,аКод,ФлНайден);
      If ФлНайден Then
        Exit См;
      EndIf;
    EndIf;
  EndDo;
EndFunction

Function ВычислитьПоказатель(ByRef зСм,Тип,НДата,КДата,Формула)
  оЮЛ:=Form.оЮЛ.Value;
  
  зСм:=0;
  стрФорм:="";
  While Формула<>"" Do
    Стр:=Формула[1];
    //Переменные: [~]{Д,К,}<Счет.Субсчет> или %Код%
    If Стр="%" Then
      TearStr(Формула,"%");
      стрИмя:=Number(TearStr(Формула,"%"));
      If стрИмя="" Then
        стрФорм:=стрФорм+"0";
        Continue;
      EndIf;
    
      зСм:=НайтиКодТаблицы(ТОДДС,Тип,стрИмя);
      стрФорм:=стрФорм+?(зСм>=0,зСм,"("+зСм+")");
      Continue;
    ElseIf Pos(Стр,"~@ДКНО0123456789")=0 Then
      стрФорм:=стрФорм+?(Стр=",","+",Стр);
      Формула:=Mid(Формула,2);
      Continue;
    EndIf;
    i:=1;
    While i<=Length(Формула) Do
      If Pos(Формула[i],"~@ДКНО0123456789.")=0 Then
        Break;
      EndIf;
      i:=i+1;
    EndDo;
    Стр:=Left(Формула,i-1);
    Формула:=Mid(Формула,i);
    
    ФлКорреспондирующий:=0;
    If Pos("~",Стр)>0 Then
      ФлКорреспондирующий:=1;
      Стр:=Replace(Стр,"~","");
    EndIf;
    
    флЗнак:=1;
    If Pos("-",Стр)>0 Then
      флЗнак:=-1;
      Стр:=Replace(Стр,"-","");
    EndIf;
    
    ФлНО:=0;
    If Pos("НО",Стр)=1 Then
      ФлНО:=1;
      Стр:=Mid(Стр,3);    
    EndIf;
    
    ФлКО:=0;
    If Pos("КО",Стр)=1 Then
      ФлКО:=1;
      Стр:=Mid(Стр,3);
    EndIf;
    
    флДебет:=0;
    If Pos("Д",Стр)=1 Then
      флДебет:=1;
      Стр:=Mid(Стр,2);
    EndIf;
    
    флКредит:=0;
    If Pos("К",Стр)=1 Then
      флКредит:=1;
      Стр:=Mid(Стр,2);
    EndIf;
    
    тСчет:=TearStr(Стр,"@");
    аСчет:=лкНайтиСчет(тСчет);
    If аСчет=0 Then
      Message("Счет "+тСчет+" не найден в конфигурации! Счет пропущен при расчете!","!");
      стрФорм:=стрФорм+"0";
      Continue;
    EndIf;
    
    СмДеб:=0;
    СмКред:=0;
    If Pos("@",Стр)=0 Then
      З2:=?(ФлКорреспондирующий,ЗКор,З);
      З2.First();
      If З2.ResultTable.LocateAndGoto("зСч,@LEVEL",аСчет,1)>0 Then
        If ФлНО Then
          СмДеб:=З2.зНачОст;
        ElseIf ФлКО Then
          СмДеб:=З2.зНачОст+З2.зПриход-З2.зРасход;
        Else
          СмДеб:=З2.зПриход;
          СмКред:=З2.зРасход;
        EndIf;
      EndIf;
    Else
      //<Суб1>@<Суб2>@<Суб3>
      Фл:=0;
      Фл2:=0;
      Фл3:=0;
      Стр2:=Стр;
      If TearStr(Стр2,"@")<>"" Then
        Фл:=1;
      EndIf;
      If TearStr(Стр2,"@")<>"" Then
        Фл2:=1;
      EndIf;
      If TearStr(Стр2,"@")<>"" Then
        Фл3:=1;
      EndIf;
      If Фл+Фл2+Фл3=1 Then
        //Простая расшифровка -- одно субконто
        СубНом:=?(Фл=1,1,?(Фл2=1,2,3));
        Стр2:=Стр;
        If СубНом=1 Then
          Стр2:=TearStr(Стр2,"@");
          аСуб:=ПолучитьСубконто(Стр2,аСчет.ВидСубконто1);
        ElseIf СубНом=2 Then
          TearStr(Стр2,"@");
          Стр2:=TearStr(Стр2,"@");
          аСуб:=ПолучитьСубконто(Стр2,аСчет.ВидСубконто2);
        Else
          TearStr(Стр2,"@");
          TearStr(Стр2,"@");
          Стр2:=TearStr(Стр2,"@");
          аСуб:=ПолучитьСубконто(Стр2,аСчет.ВидСубконто3);
        EndIf;
        
        З2:=ПолучитьИлиВыполнитьЗапрос(ФлКорреспондирующий,аСчет,тСчет+"@0@"+Фл+"@"+Фл2+"@"+Фл3+"@"+ФлКорреспондирующий,НДата,КДата,СубНом);
        If З2=0 Then
          Exit 0;
        EndIf;
        З2.First();
        If З2.ResultTable.LocateAndGoto("зСуб,@LEVEL",аСуб,1)>0 Then
          СмДеб:=З2.зПриход;
          СмКред:=З2.зРасход;
        EndIf;
      Else
        //Сложная расшифровка -- несколько субконто
        If ФлКорреспондирующий Then
          СпСчета:=List.Create(лкНайтиСчет("50"),лкНайтиСчет("51"),лкНайтиСчет("57"));
        EndIf;
        Стр2:=Стр;
        аСуб:=ПолучитьСубконто(TearStr(Стр2,"@"),аСчет.ВидСубконто1);
        аСуб2:=ПолучитьСубконто(TearStr(Стр2,"@"),аСчет.ВидСубконто2);
        аСуб3:=ПолучитьСубконто(TearStr(Стр2,"@"),аСчет.ВидСубконто3);
        КДата2:=Min(КДата,Date());
        ТЗ:="Period From НДата to КДата2;
        |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;"+?(ФлКорреспондирующий,"
        |зСч0:=Storage.БухгалтерскиеСчета.Счет;
        |Condition(зСч0 IN СпСчета);
        |зСч:=Storage.БухгалтерскиеСчета.КоррСчет;",
        "зСч:=Storage.БухгалтерскиеСчета.Счет;")+
        "зЗБ:=Storage.БухгалтерскиеСчета.Счет.Забалансовый;
        |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
        |зСуб2:=Storage.БухгалтерскиеСчета.Субконто2;
        |зСуб3:=Storage.БухгалтерскиеСчета.Субконто3;
        |зНачОст:=BegTotals(Сумма);
        |зРасход:=Expense(Сумма);
        |зПриход:=Income(Сумма);
        |Condition(зЗБ=0);
        |Condition(зСч=аСчет);
        |Condition(зЮЛ=оЮЛ);"+
        ?(Фл=1,"Condition(зСуб1=аСуб);","")+
        ?(Фл2=1,"Condition(зСуб2=аСуб2);","")+
        ?(Фл3=1,"Condition(зСуб3=аСуб3);","");
        З2:=Query.Create();
        З2.Execute(ТЗ);
        СмДеб:=З2.зПриход;
        СмКред:=З2.зРасход;
      EndIf;
    EndIf;

    См:=СмДеб-СмКред;
    If флДебет=1 Then
      См:=СмДеб;
    ElseIf флКредит=1 Then
      См:=СмКред;
    EndIf;
    См:=флЗнак*См;
    стрФорм:=стрФорм+?(См>=0,См,"("+См+")");
  EndDo;
  
  Try
    зСм:=Eval(стрФорм);
  Except
    Message("Внимание! Внутренняя ошибка при вычислении формулы: "+стрФорм+"!","!");
    Exit 0;
  EndTry;
  
  Exit 1;
EndFunction


Function ЗаполнитьДанныеЗаПериод(НДата,КДата,Тип)
  оЮЛ:=Form.оЮЛ.Value;
  
  If КДата<DBVar.НачалоПериодаБазы Then
    Exit 1;
  EndIf;
  ТабЗапросы:=Tab.Create("Индекс,Запрос");//<Счет>@0@{1,0}@{1,0}@{1,0}
                                          //или <Счет>@1@<Суб1>@<Суб2>@<Суб3>
  
  //Основной запрос
  КДата2:=Min(КДата,Date());
  ТЗ:="Period From НДата to КДата2;
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |зСч:=Storage.БухгалтерскиеСчета.Счет;
  |зЗБ:=Storage.БухгалтерскиеСчета.Счет.Забалансовый;
  |зНачОст:=BegTotals(Сумма);
  |зРасход:=Expense(Сумма);
  |зПриход:=Income(Сумма);
  |Condition(зЗБ=0);
  |Condition(зЮЛ=оЮЛ);
  |Group зСч with folders;";
  З:=Query.Create();
  З.Execute(ТЗ);

  //Основной запрос 50,51,57
  СпСчета:=List.Create(лкНайтиСчет("50"),лкНайтиСчет("51"),лкНайтиСчет("57"));
  КДата2:=Min(КДата,Date());
  ТЗ:="Period From НДата to КДата2;
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |зСч0:=Storage.БухгалтерскиеСчета.Счет;
  |Condition(зСч0 IN СпСчета);
  |зСч:=Storage.БухгалтерскиеСчета.КоррСчет;
  |зЗБ:=Storage.БухгалтерскиеСчета.Счет.Забалансовый;
  |//зНачОст:=BegTotals(Сумма);
  |зРасход:=Expense(Сумма);
  |зПриход:=Income(Сумма);
  |Condition(зЗБ=0);
  |Condition(зЮЛ=оЮЛ);
  |Group зСч with folders;";
  ЗКор:=Query.Create();
  ЗКор.Execute(ТЗ);
  
  //Расчет
  ТОДДС.Select();
  While ТОДДС.Next() Do
    Таб:=ТОДДС.Подгруппа;
    аСтр:=0;
    Таб.Select();
    While Таб.Next() Do
      аСтр:=аСтр+1;
      Таб2:=Таб.Подгруппа;
      If not IsEmpty(Таб2) Then
        аСтр2:=0;
        Таб2.Select();
        While Таб2.Next() Do
          аСтр2:=аСтр2+1;
          См:=0;
          If not ВычислитьПоказатель(См,Тип,НДата,КДата,Таб2.Формула) Then
            Exit 0;
          EndIf;
          Таб2.Set(аСтр2,"зСм"+Тип,См);
        EndDo;
      EndIf;
      
      См:=0;
      If not ВычислитьПоказатель(См,Тип,НДата,КДата,Таб.Формула) Then
        Exit 0;
      EndIf;
      Таб.Set(аСтр,"зСм"+Тип,См);
    EndDo;
  EndDo;
  
  Exit 1;
EndFunction


Function OnExecute(СпУстановки)
  оЮЛ:=Form.оЮЛ.Value;
  оСуммы:=Form.оСуммы.Value.SelectedLine();
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оЗнаков:=Form.оЗнаков.Value;
  
  If оЮЛ.Selected()=0 Then
    Box("Выберите юридическое лицо!",Q_STOP);
    Exit;
  EndIf;

  ЗагрузитьТОДДС();
  
  пПериод:=ПериодСтр(НачДата,КонДата);
  пДата:=FormatDate(КонДата,"YYYYmmdd");
  пГод:=GetYear(КонДата);
  пМесяц:=FormatDate(КонДата,"mm");
  пЧисло:=FormatDate(КонДата,"dd");
  пОрганизация:="Организация "+Trim(оЮЛ.ПолнНаименование);
  пВидДеятельности:="Вид экономической деятельности "+Trim(оЮЛ.ОсновнойВидДеятельности);
  пИНН:=Trim(оЮЛ.ИНН);
  пИНН:=TearStr(пИНН,"/");
  пОКПО:=Trim(оЮЛ.ОКПО);
  пОКОПФ:=Trim(оЮЛ.ОКОПФ);
  пОКФС:=Trim(оЮЛ.ОКФС);
  пОКВЭД:="";
  пФС:=Trim(оЮЛ.ФормаСобственности);
  пОПФ:=Trim(оЮЛ.ОргПравФорма);
  пАдрес:=глПредставлениеАдреса(оЮЛ.ЮрАдрес);
  пПериод1:="За "+пПериод;
  НачДата2:=AddMonth(BegOfDay(НачДата),-12);
  КонДата2:=AddMonth(BegOfDay(КонДата),-12);
  If (BegOfMonth(НачДата)=BegOfDay(НачДата))And(EndOfMonth(КонДата)=BegOfDay(КонДата)) Then
    НачДата2:=BegOfMonth(НачДата2);
    КонДата2:=EndOfMonth(КонДата2);//TODO: не совсем верно
  ElseIf (BegOfQuarter(НачДата)=BegOfDay(НачДата))And(EndOfQuarter(КонДата)=BegOfDay(КонДата)) Then
    НачДата2:=BegOfQuarter(НачДата2);
    КонДата2:=EndOfQuarter(КонДата2);//TODO: не совсем верно
  EndIf;
  пПериод2:="За "+ПериодСтр(НачДата2,КонДата2);
  
  Коэфф:=1;
  пОКЕИ:="383"; 
  пЕдиница:="руб.";
  If оСуммы=2 Then
    Коэфф:=1000;
    пЕдиница:="тыс. руб.";
    пОКЕИ:="384";
  ElseIf оСуммы=3 Then
    Коэфф:=1000000;
    пЕдиница:="млн. руб.";
    пОКЕИ:="385";
  EndIf;
  
  
  //Очистка сумм
  ТОДДС.Select();
  While ТОДДС.Next() Do
    ТОДДС.зСм:=0;
    ТОДДС.зСм2:=0;
    Таб:=ТОДДС.Подгруппа;
    Таб.Select();
    While Таб.Next() Do
      Таб.зСм:=0;
      Таб.зСм2:=0;
      Таб2:=Таб.Подгруппа;
      If IsEmpty(Таб2) Then
        Continue;
      EndIf;
      Таб2.Select();
      While Таб2.Next() Do
        Таб2.зСм:=0;
        Таб2.зСм2:=0;
      EndDo;
    EndDo;
  EndDo;
  

  If not ЗаполнитьДанныеЗаПериод(НачДата,КонДата,"") Then
    Exit;
  EndIf;
  If not ЗаполнитьДанныеЗаПериод(НачДата2,КонДата2,"2") Then
    Exit;
  EndIf;
  
  
  //Вывод
  аСтр:=0;
  аНомРаздела:=0;
  Т:=Table.Create();  
  Т.CopyByX("v1",1);
  ТОДДС.Select();
  While ТОДДС.Next() Do
    аСтр:=аСтр+1;
    If аСтр>2 Then
      Т.PageBreaks.Add();
      Т.CopyByX("v9",1);
    ElseIf аСтр>1 Then
      Т.PageBreaks.Add();
      Т.CopyByX("v7",1);
    EndIf;
    Таб:=ТОДДС.Подгруппа;
    
    пРаздел:=ТОДДС.Наименование;
    Т.CopyByX("v10",1);
    
    Таб.Select();
    While Таб.Next() Do
      пКод:=Таб.Код;
      пСм:=лкФРМ(Таб.зСм);
      пСм2:=лкФРМ(Таб.зСм2);
      If Таб.флПодитоги=1 Then
        пПодитог:=Таб.Наименование;
        Т.CopyByX("v4",1);
      Else
        пПоказатель:=Таб.Наименование;
        Т.CopyByX("v2",1);
      EndIf;
      
      Таб2:=Таб.Подгруппа;
      If IsEmpty(Таб2) Then
        Continue;
      EndIf;
      If Таб2.Size()=0 Then
        Continue;
      EndIf;
      Т.CopyByX("v3",1);
      
      Таб2.Select();
      While Таб2.Next() Do
        пРасшифровка:=Таб2.Наименование;
        пКод:=Таб2.Код;
        пСм:=лкФРМ(Таб2.зСм);
        пСм2:=лкФРМ(Таб2.зСм2);
        Т.CopyByX("v5",1);
      EndDo;
    EndDo;
  EndDo;
  
  Т.CopyByX("v8",1);
  глПечатнаяФормаОтчета(Т,Param,"Бухгалтерский отчет о движении денежных средств");
EndFunction
