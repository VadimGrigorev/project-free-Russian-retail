//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var локДрайверПодписи Export;

//URL: https://честныйзнак.рф/upload/docs/True_API.html

Function БыстроеФорматированиеJSON(Стр)
  If _Or(pos("HTTP/",Стр)=1,pos(_NEWLINE+"HTTP/1.1",Стр)>0) Then
    Стр2:=TearStr(Стр,_NEWLINE+_NEWLINE);
    If Стр="" Then
      Exit Стр2;
    EndIf;
  EndIf;
  Стр:=Replace(Replace(Стр,"{""","{"+_NEWLINE+""""),",""",","+_NEWLINE+"""");
  Exit Стр;
EndFunction

Function ОбновитьДрайверПодписи()
  оМагазин:=Form.оМагазин.Value;
  локДрайверПодписи:=глЗагрузитьДрайверПодписи(Form.оМагазин.Value);
  ФлОк:=0;
  СтрОтвет:="";
  Try
    If IsEmpty(локДрайверПодписи["МодульДрайвера"]) Then
      СтрОтвет:="<Невозможно загрузить драйвер>";
      Exit;
    EndIf;
    If оМагазин.СертификатПодписи="" Then
      СтрОтвет:="<Для магазина не выбран сертификат обмена>";
      Exit;
    EndIf;
    локДрайверПодписи["Идентификатор"]:=оМагазин.СертификатПодписи;
    Стр:=Trim(ExecuteFunction("CheckCertificate",локДрайверПодписи["МодульДрайвера"],локДрайверПодписи));
    If Стр<>"" Then
      СтрОтвет:="<Ошибка: "+Стр+">";
      Exit;
    EndIf;
    If локДрайверПодписи["Найден"]<>1 Then
      СтрОтвет:="<Сертификат отсутствует на текущей машине!>";
      Exit;
    EndIf;
    ФлОк:=1;
    СтрОтвет:=локДрайверПодписи["ИмяСертификата"];
    If локДрайверПодписи["Рабочий"]<>1 Then
      Box("Сертификат, закрепленный за выбранным магазином, истек или является нерабочим! Обработка обмена не будет работать корректно!",Q_STOP);
    ElseIf GetPeriod(Date(),локДрайверПодписи["ДатаОкончания"],4)<1209600 Then //14 days
      Box("Сертификат, закрепленный за выбранным магазином, истекает "+локДрайверПодписи["ДатаОкончания"]+" (менее чем через 2 недели)! Заменяйте сертификат вовремя, чтобы избежать простоя!",Q_WARNING);
    EndIf;
  Finally
    Form.пТекущийСертификат.Value:=СтрОтвет;
  EndTry
  If not ФлОк Then
    Box("Невозможно загрузить драйвер подписи или требуемый сертификат не установлен на этой машине! Обработка обмена не будет работать корректно!",Q_STOP);
  EndIf;
EndFunction

Function ДатаЗапроса(аДата)
  //Даты: yyyy-MM-ddTHH:mm:ss.SSS’Z
  Exit EncodeString(FormatDate(аДата,"YYYY-mm-dd""T""hh:tt:ss.ppp")+"Z","PE");
EndFunction


Function ПолучитьЭлементJSON(ByRef Текст,От="{")
  //{..{..}..},{..{..}..},
  i:=1;
  While _And(i<=Length(Текст),Текст[i]<>От) Do
    i:=i+1;
  EndDo;
  i0:=i+1;
  Уровень:=1;
  While i<Length(Текст) Do
    i:=i+1;
    If _Or(Текст[i]="[",Текст[i]="{") Then
      Уровень:=Уровень+1;
    ElseIf _Or(Текст[i]="]",Текст[i]="}") Then
      Уровень:=Уровень-1;
      If Уровень=0 Then
        Break;
      EndIf;
    ElseIf Текст[i]="""" Then //TODO: '
      While i<Length(Текст) Do
        i:=i+1;
        If Текст[i]="\" Then //\"
          i:=i+1;
        ElseIf Текст[i]="""" Then
          i:=i+1;
          Break;
        EndIf;
      EndDo;
    EndIf;
  EndDo;
  Result:=Mid(Текст,i0,i-i0-1);
  Текст:=Mid(Текст,i+1);
EndFunction

Function ЗагрузитьМассивJSON(Стр)
  //"Name":Value,...
  //Value: "..\"..?", ?, [...]
  aList:=List.Create();
  While Стр<>"" Do
    TearStr(Стр,"""");
    Имя:=TearStr(Стр,"""");
    TearStr(Стр,":");
    Стр:=Trim(Стр);
    If Length(Стр)=0 Then
      aList[Имя]:="";
      Break;
    EndIf;
    If Стр[1]="""" Then
      TearStr(Стр,"""");
      i:=0;
      While i<Length(Стр) Do
        i:=i+1;
        If Стр[i]="\" Then
          i:=i+1;
        ElseIf Стр[i]="""" Then
          Break;
        EndIf;
      EndDo;
      Знач:=Left(Стр,i-1);
      Стр:=Mid(Стр,i+1);
      Знач:=DecodeString(Знач,"JSON");
      TearStr(Стр,",");
    ElseIf Стр[1]="[" Then
      Знач:=ПолучитьЭлементJSON(Стр,"[");
      TearStr(Стр,",");
    Else
      Знач:=Trim(TearStr(Стр,","));
      If _And(Знач<>"",Знач[1]>="0",Знач[1]<="9") Then
        Знач:=Number(Знач);
      EndIf;
    EndIf;
    aList[Имя]:=Знач;
  EndDo;
  Exit aList;
EndFunction

Function ЗагрузитьПеременные(Стр)
  Сп:=List.Create();
  While Pos("=",Стр)>0 Do
    TearStr(Стр," ");
    Имя:=Trim(TearStr(Стр,"="));
    TearStr(Стр,"""");
    Значение:=TearStr(Стр,"""");
    Сп[Имя]:=DecodeXMLString(Значение);
  EndDo;
  Exit Сп;
EndFunction


Function ЗагрузитьДокументУПД(Файл,Стр)
  оМагазин:=Form.оМагазин.Value;
  оЮЛ:=оМагазин.ЮрЛицо;
  ИННЮЛ:=оЮЛ.ИНН;
  ИННЮЛ:=TearStr(ИННЮЛ,"/");

  //Результат: КНД,ПродавецИмя,ПродавецИНН,ПродавецКПП,ПродавецАдрес,ПродавецGLN,ДокНомер,ДокДата,СчФакНомер,СчФакДата,ТСтроки
  СпДокумент:=List.Create();
  Стр:=ReformatXML(Стр,0b100011);
  While 1 Do
    //Формат: <Заголовок><Файл ИдФайл="..." ВерсФорм="..." ВерсПрог="...">
    If Pos("<?",Стр)<10 Then
      TearStr(Стр,"?>");
    EndIf;
    iNum:=Pos("<Файл",Стр);
    If (iNum=0)Or(iNum>10) Then
      Break;
    EndIf;
    TearStr(Стр,"<");
    Сп:=ЗагрузитьПеременные(TearStr(Стр,">"));
    If IsEmpty(Сп["ИдФайл"]) Then
      Break;
    EndIf;
    СпДокумент["ИдФайл"]:=Сп["ИдФайл"];
    TearStr(Стр,"<СвУчДокОбор");
    If Стр="" Then
      Break;
    EndIf;
    TearStr(Стр,"<Документ");
    If Стр="" Then
      Break;
    EndIf;
    Сп:=ЗагрузитьПеременные(TearStr(Стр,">"));
    СпДокумент["КНД"]:=Сп["КНД"];
    СпДокумент["ПоФактХЖ"]:=Сп["ПоФактХЖ"];
    СпДокумент["ДокДата"]:=Date(Сп["ДатаИнфПр"]+" "+Replace(Сп["ВремИнфПр"],".",":"));
    Стр0:=Стр;
    
    //Заголовок
    TearStr(Стр,"<СвСчФакт");
    If Стр="" Then
      Break;
    EndIf;
    Сп:=ЗагрузитьПеременные(TearStr(Стр,">"));
    СпДокумент["СчФакНомер"]:=Сп["НомерСчФ"];
    СпДокумент["СчФакДата"]:=Date(Сп["ДатаСчФ"]);
    
    Стр1:=Стр;
    TearStr(Стр1,"<ИспрСчФ");
    Сп:=ЗагрузитьПеременные(TearStr(Стр1,"</ИспрСчФ>"));
    If not IsEmpty(Date(Сп["ДефДатаИспрСчФ"])) Then
      СпДокумент["СчФакИсправлениеНомер"]:=Сп["ДефНомИспрСчФ"];
      СпДокумент["СчФакИсправлениеДата"]:=Date(Сп["ДефДатаИспрСчФ"]);
    EndIf;
    
    //Продавец
    Стр1:=Стр;
    TearStr(Стр1,"<СвПрод");
    Стр1:=TearStr(Стр1,"</СвПрод>");
    If Pos("<СвЮЛУч",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвЮЛУч");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвЮЛУч>"));
      СпДокумент["ПродавецИмя"]:=Сп["НаимОрг"];
      СпДокумент["ПродавецИНН"]:=Сп["ИННЮЛ"];
      СпДокумент["ПродавецКПП"]:=Сп["КПП"];
    ElseIf Pos("<СвФЛУч",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвФЛУч");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвФЛУч>"));
      СпДокумент["ПродавецИмя"]:=Сп["ФИО"];
      СпДокумент["ПродавецИНН"]:=Сп["ИННФЛ"];
      СпДокумент["ПродавецКПП"]:="";
    ElseIf Pos("<СвИП",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвИП");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвИП>"));
      СпДокумент["ПродавецИмя"]:=Сп["ФИО"];
      СпДокумент["ПродавецИНН"]:=Сп["ИННФЛ"];
      СпДокумент["ПродавецКПП"]:="";
    Else
      Break;
    EndIf;
    If Pos("<Адрес",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<Адрес");
      Стр2:=TearStr(Стр2,"</Адрес>");
      TearStr(Стр2,"<АдрРФ");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</АдрРФ>"));
      //<АдрРФ Индекс="..." КодРегион="..." Город="..." Улица="..." Дом="..."/>
      СпДокумент["ПродавецАдрес"]:=Сп["Индекс"]+","+Сп["Район"]+","+Сп["Город"]+","+Сп["НаселПункт"]+","+Сп["Улица"]+","+Сп["Дом"]+","+Сп["Корпус"];
    EndIf;
    
    //Покупатель
    Стр1:=Стр;
    TearStr(Стр1,"<СвПокуп");
    Стр1:=TearStr(Стр1,"</СвПокуп>");
    If Pos("<СвЮЛУч",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвЮЛУч");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвЮЛУч>"));
      If ИННЮЛ<>Сп["ИННЮЛ"] Then
        Message("Документ "+Файл+" предназначен для другого юр. лица (ИНН: "+Сп["ИННЮЛ"]+")!","!");
        Exit 0;
      EndIf;
    ElseIf Pos("<СвФЛУч",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвФЛУч");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвФЛУч>"));
      If ИННЮЛ<>Сп["ИННФЛ"] Then
        Message("Документ "+Файл+" предназначен для другого юр. лица (ИНН: "+Сп["ИННФЛ"]+")!","!");
        Exit 0;
      EndIf;
    ElseIf Pos("<СвИП",Стр1)>0 Then
      Стр2:=Стр1;
      TearStr(Стр2,"<СвИП");
      Сп:=ЗагрузитьПеременные(TearStr(Стр2,"</СвИП>"));
      If ИННЮЛ<>Сп["ИННФЛ"] Then
        Message("Документ "+Файл+" предназначен для другого юр. лица (ИНН: "+Сп["ИННФЛ"]+")!","!");
        Exit 0;
      EndIf;
    Else
      Break;
    EndIf;
    
    Стр1:=Стр;
    TearStr(Стр1,"<ДокПодтвОтгр");
    If Стр1="" Then
      Break;
    EndIf;
    Сп:=ЗагрузитьПеременные(TearStr(Стр1,"</ДокПодтвОтгр>"));
    СпДокумент["ДокНомер"]:=Сп["НомДокОтгр"];
    СпДокумент["ДокДата"]:=Date(Сп["ДатаДокОтгр"]);
    
    Стр1:=Стр;
    TearStr(Стр1,"<ИнфПолФХЖ1");
    If Стр1<>"" Then
      Стр1:=TearStr(Стр1,"</ИнфПолФХЖ1>");
      While Pos("<ТекстИнф",Стр1)>0 Do
        TearStr(Стр1,"<ТекстИнф");
        Сп:=ЗагрузитьПеременные(TearStr(Стр1,"</ТекстИнф>"));
        If Сп["Идентиф"]="номер_накладной" Then
          СпДокумент["ДокНомер"]:=Сп["Значен"];
        ElseIf Сп["Идентиф"]="дата_накладной" Then
          СпДокумент["ДокДата"]:=Date(Сп["Значен"]);
        ElseIf Сп["Идентиф"]="GLN_поставщика" Then
          СпДокумент["ПродавецGLN"]:=Сп["Значен"];
        EndIf;
      EndDo;
    EndIf;
    
    //Товары
    ТСтроки:=Tab.Create("Наименование,Артикул,Штрихкод,Количество,Цена,Сумма,СтавкаНДС,спМаркиУпаковок,спМаркиЕдиниц");
    СпДокумент["ТСтроки"]:=ТСтроки;
    Стр:=Стр0;
    TearStr(Стр,"<ТаблСчФакт");
    Стр:=TearStr(Стр,"</ТаблСчФакт>");
    If Стр="" Then
      Break;
    EndIf;
    While Pos("<СведТов",Стр)>0 Do
      TearStr(Стр,"<СведТов");
      Стр1:=TearStr(Стр,"</СведТов>");
      Стр2:=TearStr(Стр1,">");
      Сп:=ЗагрузитьПеременные(Стр2);
      Наименование:=Сп["НаимТов"];
      Количество:=Number(Сп["КолТов"]);
      Сумма:=Number(Сп["СтТовУчНал"]);
      Цена:=Round(Сумма/Количество,2);
      СтавкаНДС:=Сп["НалСт"];
      If (СтавкаНДС="20%")Or(СтавкаНДС="20/120") Then
        СтавкаНДС:=Enum.СтавкиНДС.НДС20;
      ElseIf (СтавкаНДС="18%")Or(СтавкаНДС="18/118") Then
        СтавкаНДС:=Enum.СтавкиНДС.НДС18;
      ElseIf (СтавкаНДС="10%")Or(СтавкаНДС="10/110") Then
        СтавкаНДС:=Enum.СтавкиНДС.НДС10;
      ElseIf СтавкаНДС="0%" Then
        СтавкаНДС:=Enum.СтавкиНДС.НДС0;
      ElseIf СтавкаНДС="без НДС" Then
        СтавкаНДС:=Enum.СтавкиНДС.БезНДС;
      Else
        //"НДС исчисляется налоговым агентом"
        СтавкаНДС:=Enum.СтавкиНДС.НДС20;
      EndIf;
      //Штрихкод,МаркиУпаковок,МаркиЕдиниц
      СпМаркиУпаковок:=List.Create();
      СпМаркиЕдиниц:=List.Create();
      Артикул:="";
      Стр2:=Стр1;
      TearStr(Стр2,"<ДопСведТов");
      If Стр2<>"" Then
        Сп:=ЗагрузитьПеременные(TearStr(Стр2,">"));
        Артикул:=Сп["АртикулТов"];
        Стр2:=TearStr(Стр1,"</ДопСведТов>");
        TearStr(Стр2,"<НомСредИдентТов>");
        Стр2:=TearStr(Стр2,"</НомСредИдентТов>");
        If Pos("<КИЗ>",Стр2)>0 Then
          //СпМаркиЕдиниц
          While Стр2<>"" Do
            TearStr(Стр2,"<КИЗ>");
            Стр3:=DecodeXMLString(Trim(TearStr(Стр2,"</КИЗ>")));
            If Стр3<>"" Then
              СпМаркиЕдиниц.Add(Стр3);
            EndIf;
          EndDo;
        ElseIf Pos("<НомУпак>",Стр2)>0 Then
          //СпМаркиУпаковок
          While Стр2<>"" Do
            TearStr(Стр2,"<НомУпак>");
            Стр3:=DecodeXMLString(Trim(TearStr(Стр2,"</НомУпак>")));
            If Стр3<>"" Then
              СпМаркиУпаковок.Add(Стр3);
            EndIf;
          EndDo;
        EndIf;
      EndIf;
      Штрихкод:="";
      While Стр1<>"" Do
        TearStr(Стр1,"<ИнфПолФХЖ2");
        Сп:=ЗагрузитьПеременные(TearStr(Стр1,"</ИнфПолФХЖ2>"));
        If Сп["Идентиф"]="штрихкод" Then
          Штрихкод:=Сп["Значен"];
        ElseIf Сп["Идентиф"]="вложенность" Then
          Чл:=Number(Сп["Значен"]);
          Количество:=Количество*?(Чл=0,1,Чл);
        EndIf;
      EndDo;
      ТСтроки.AddLine("Наименование,Артикул,Штрихкод,Количество,Цена,Сумма,СтавкаНДС,спМаркиУпаковок,спМаркиЕдиниц",Наименование,Артикул,Штрихкод,Количество,Цена,Сумма,СтавкаНДС,СпМаркиУпаковок,СпМаркиЕдиниц);
    EndDo;//По строкам
    Exit СпДокумент;
  EndDo;  
  Message("Документ "+Файл+" имеет неверный формат!","!");
  Exit 0;
EndFunction

Function ОбновитьТаблицы(флФорс=0,ИзФайлов=0)
  оМагазин:=Form.оМагазин.Value;
  оТоварнаяГруппа:=Form.оТоварнаяГруппа.Value;
  оДокументы:=Form.оДокументы.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  
  If оМагазин.Selected()=0 Then
    If флФорс=1 Then
      Box("Необходимо выбрать магазин!",Q_STOP);
    EndIf;
    Exit 0;
  EndIf;
  If ИзФайлов=1 Then
    спТипыДокументов:=List.Create();
    спТипыДокументов["1115131"]:="УПД";
  
    спИконкиДокументов:=List.Create();
    спИконкиДокументов["1115131"]:=279;
    
    Сп:=0;
    If not OpenFileDialog(Сп,"Выберите файлы поступлений УПД в формате xml","Файлы xml (*.xml)|*.xml",2) Then
      Exit;
    EndIf;
    ФлОшибки:=0;
    оДокументы.Lock();
    Try
      For i:=1 To Сп.Size() Do
        Файл:=Сп[i];
        Try
          Стр:=FileToString(Файл,0);
        Except
          Message("Невозможно прочитать файл "+Файл,"!");
          ФлОшибки:=1;
          Continue;
        EndTry;
        If StringTypeStr(Стр)="ANSI" Then
          If _Or(pos("""utf-16",Стр)>0,pos("""UTF-16",Стр)>0) Then
            Стр:=TranslateFrom(Стр,1200);
          ElseIf _Or(pos("""utf-8",Стр)>0,pos(ANSI(Chr($3C,1)+Chr($D0,1)+Chr($A4,1)+Chr($D0,1)+Chr($B0,1)+Chr($D0,1)+Chr($B9,1)+Chr($D0,1)+Chr($BB,1)),Стр)>0) Then
            Стр:=TranslateFrom(Стр,65001);
          EndIf;
        EndIf;
        СпДокумент:=ЗагрузитьДокументУПД(Файл,Стр);
        //КНД,ПродавецИмя,ПродавецИНН,ПродавецКПП,ПродавецАдрес,ПродавецGLN,ДокНомер,ДокДата,СчФакНомер,СчФакДата,Строки
        If IsEmpty(СпДокумент) Then
          ФлОшибки:=1;
          Continue;
        EndIf;
        аДата:=СпДокумент["ДокДата"];
        аТип:=спТипыДокументов[СпДокумент["КНД"]];
        аТип:=?(IsEmpty(аТип),СпДокумент["КНД"],аТип);
        аСтатус:="Из файла";
        If оДокументы.FindAndGoto(СпДокумент["ДокНомер"]+" от "+аДата,,"зДок")>0 Then
          Message("Документ "+СпДокумент["ДокНомер"]+" от "+аДата+" пропущен, так как уже присутствует в таблице!","I");
          Continue;
        EndIf;
        
        оДокументы.AddLine("Идентификатор,зКонтрагент,зДок,зТип,зСтатус,СпДокумент",СпДокумент["ДокНомер"],СпДокумент["ПродавецИмя"]+", "+СпДокумент["ПродавецИНН"]+"/"+
          СпДокумент["ПродавецКПП"],СпДокумент["ДокНомер"]+" от "+аДата,аТип,аСтатус,СпДокумент);
        аИконка:=спИконкиДокументов[СпДокумент["КНД"]];
        аИконка:=?(IsEmpty(аИконка),122,аИконка);
        оДокументы.Icon(оДокументы.CurLine,"Иконка",аИконка);
      EndDo;
    Finally
      оДокументы.UnLock();
    EndTry;
    If ФлОшибки Then
      Box("Некоторые документы не удалось загрузить в список!",Q_WARNING);
    EndIf;
    
    Form.bPanelClose.SetFocus();
    Exit 1;
  EndIf;
  
  //If оТоварнаяГруппа.Selected()=0 Then
  //  If флФорс=1 Then
  //    Box("Необходимо выбрать товарную группу!",Q_STOP);
  //  EndIf;
  //  Exit 0;
  //EndIf;
  //If IsEmpty(Form.пТекущийСертификат.Value) Then
  //  If флФорс=1 Then
  //    Box("Для магазина не выбран текущий сертификат!",Q_STOP);
  //  EndIf;
  //  Exit 0;
  //EndIf;
  
  //Запрос по документам
  //Доп. фильтры: documentType: LP_SHIP_RECEIPT (LP_SHIP_RECEIPT_CSV, LP_SHIP_RECEIPT_XML) -- поступления (не используется)
  //                            LP_RETURN (LP_RETURN_CSV, LP_RETURN_XML) -- возврат в оборот
  //                            LP_ACCEPT_GOODS (LP_ACCEPT_GOODS_CSV, LP_ACCEPT_GOODS_XML) -- принятие поступления
  //                            LP_CANCEL_SHIPMENT -- отмена принятия
  //                            LP_INTRODUCE_OST (LP_INTRODUCE_OST_CSV, LP_INTRODUCE_OST_XML) -- оприходования
  //                            LK_RECEIPT (LK_RECEIPT_CSV, LK_RECEIPT_XML) -- списание марок
  //                            RECEIPT, RECEIPT_RETURN -- розничные чеки
  //                            WRITE_OFF -- списание (только для табака)
  //                            UNIVERSAL_TRANSFER_DOCUMENT -- поступления УПД
  //                            UNIVERSAL_TRANSFER_DOCUMENT_FIX -- поступления УПД, исправление
  //                            UNIVERSAL_CORRECTION_DOCUMENT -- поступления УПД, корректировка
  //                            UNIVERSAL_CORRECTION_DOCUMENT_FIX -- поступления УПД, исправление корректировки
  //                            UNIVERSAL_CANCEL_DOCUMENT -- отказ от УПД
  //limit: (20..10000): всегда 200
  //pg: товарная группа, всегда задана
  //documentStatus: IN_PROGRESS -- проверяется
  //        CHECKED_OK -- обработан
  //        CHECKED_NOT_OK -- обработан с ошибками
  //        PROCESSING_ERROR -- техническая ошибка
  //        ACCEPTED -- принят
  //        CANCELLED -- отменен
  //        WAIT_ACCEPTANCE -- ожидает приёмку
  //        PARSE_ERROR -- обработан с ошибками
  //        WAIT_PARTICIPANT_REGISTRATION -- ожидает регистрации участника в ГИС МТ
  //        WAIT_FOR_CONTINUATION -- ожидает продолжения обработки документа
  Стр2:="/api/v4/true-api/doc/list?dateFrom="+ДатаЗапроса(НачДата)+"&dateTo="+ДатаЗапроса(КонДата)+"&pg="+оТоварнаяГруппа.ВнешнееНаименование+"&limit=200";
  Стр:="";
  СтрОшибка:=ВыполнитьЗапросГИСМТ(локДрайверПодписи,Стр2,Стр,0);
  If Not IsEmpty(СтрОшибка) Then
    СтрОшибка:=БыстроеФорматированиеJSON(СтрОшибка);
    Тч:=Text.Create();
    Тч.AddString(СтрОшибка);
    Тч.Show("Ошибка получения списка документов",,1);
    Exit;
  EndIf;
  оДокументы.ClearLines();

  КДата:=КонДата+1;
  спТип:=List.Create(Enum.коПоступлениеТМЦ.ПоступлениеТМЦ,Enum.коПоступлениеТМЦ.ВнутреннееПеремещение);  
  ТЗ:="зСтатус:=Doc.ПоступлениеТМЦ.@Status;Condition(зСтатус>1);зДата:=Doc.ПоступлениеТМЦ.DocDate;Condition((зДата>=НачДата)And(зДата<КДата));
  |зДок:=Doc.ПоступлениеТМЦ;
  |зКО:=Doc.ПоступлениеТМЦ.КодОперации;
  |Condition(зКО IN спТип);  
  |зГИС:=Doc.ПоступлениеТМЦ.Номенклатура.Номенклатура.флПодлежитПрослеживаемости;
  |Condition(зГИС=1);
  |зМагазин:=Doc.ПоступлениеТМЦ.Склад.Магазин;
  |Condition(зМагазин=оМагазин);
  |зЮЛ:=Doc.ПоступлениеТМЦ.ЮрЛицо;
  |Condition(зЮЛ=оМагазин.ЮрЛицо);
  |Group зДок;";
  
  З:=Query.Create();
  aTab:=З.Execute(ТЗ,0);

  спТипыДокументов:=List.Create();
  спТипыДокументов["LP_RETURN"]:="Возврат в оборот";
  спТипыДокументов["LP_RETURN_CSV"]:="Возврат в оборот";
  спТипыДокументов["LP_RETURN_XML"]:="Возврат в оборот";
  спТипыДокументов["LP_ACCEPT_GOODS"]:="Подтверждение";
  спТипыДокументов["LP_ACCEPT_GOODS_CSV"]:="Подтверждение";
  спТипыДокументов["LP_ACCEPT_GOODS_XML"]:="Подтверждение";
  спТипыДокументов["LP_CANCEL_SHIPMENT"]:="Отказ";
  спТипыДокументов["LP_INTRODUCE_OST"]:="Оприходование";
  спТипыДокументов["LP_INTRODUCE_OST_CSV"]:="Оприходование";
  спТипыДокументов["LP_INTRODUCE_OST_XML"]:="Оприходование";
  спТипыДокументов["LK_RECEIPT"]:="Списание";
  спТипыДокументов["LK_RECEIPT_CSV"]:="Списание";
  спТипыДокументов["LK_RECEIPT_XML"]:="Списание";
  спТипыДокументов["WRITE_OFF"]:="Списание";
  спТипыДокументов["RECEIPT"]:="Розн. продажа";
  спТипыДокументов["RECEIPT_RETURN"]:="Розн. возврат";
  спТипыДокументов["UNIVERSAL_TRANSFER_DOCUMENT"]:="УПД";
  спТипыДокументов["UNIVERSAL_TRANSFER_DOCUMENT_FIX"]:="УПД, исправ.";
  спТипыДокументов["UNIVERSAL_CORRECTION_DOCUMENT"]:="УПД коррекц.";
  спТипыДокументов["UNIVERSAL_CORRECTION_DOCUMENT_FIX"]:="УПД коррекц. исправ.";
  спТипыДокументов["UNIVERSAL_CANCEL_DOCUMENT"]:="Отказ от УПД";
  
  спИконкиДокументов:=List.Create();
  спИконкиДокументов["RECEIPT"]:=271;
  спИконкиДокументов["RECEIPT_RETURN"]:=271;
  спИконкиДокументов["UNIVERSAL_TRANSFER_DOCUMENT"]:=279;
  спИконкиДокументов["UNIVERSAL_TRANSFER_DOCUMENT_FIX"]:=279;
  спИконкиДокументов["UNIVERSAL_CORRECTION_DOCUMENT"]:=279;
  спИконкиДокументов["UNIVERSAL_CORRECTION_DOCUMENT_FIX"]:=279;
  спИконкиДокументов["UNIVERSAL_CANCEL_DOCUMENT"]:=279;
  
  спСтатусыДокументов:=List.Create();
  спСтатусыДокументов["IN_PROGRESS"]:="проверяется";
  спСтатусыДокументов["CHECKED_OK"]:="обработан";
  спСтатусыДокументов["CHECKED_NOT_OK"]:="ошибка";
  спСтатусыДокументов["PROCESSING_ERROR"]:="тех. ошибка";
  спСтатусыДокументов["ACCEPTED"]:="принят";
  спСтатусыДокументов["CANCELLED"]:="отменен";
  спСтатусыДокументов["WAIT_ACCEPTANCE"]:="ожидает прием";
  спСтатусыДокументов["PARSE_ERROR"]:="ош. формата";
  спСтатусыДокументов["WAIT_PARTICIPANT_REGISTRATION"]:="участник не в ГИС МТ";
  спСтатусыДокументов["WAIT_FOR_CONTINUATION"]:="ожидает обработку";
  
  ФлЧастьСписка:=Pos("],""nextPage"":true}",Стр)>0;
  оДокументы.Lock();
  Try
    TearStr(Стр,"""results"":[");
    While Стр<>"" Do
      Стр2:=ПолучитьЭлементJSON(Стр);
      Сп:=ЗагрузитьМассивJSON(Стр2);
      If IsEmpty(Сп["number"]) Then
        Continue;
      EndIf;
      аДата:=Left(Сп["docDate"],10);//2020-07-02
      аДата:=Date(Mid(аДата,9,2)+"."+Mid(аДата,6,2)+"."+Mid(аДата,1,4));
      аТип:=спТипыДокументов[Сп["type"]];
      аТип:=?(IsEmpty(аТип),Сп["type"],аТип);
      аСтатус:=спСтатусыДокументов[Сп["status"]];
      аСтатус:=?(IsEmpty(аСтатус),Сп["status"],аСтатус);
      оДокументы.AddLine("Идентификатор,зКонтрагент,зДок,зТип,зСтатус",Сп["number"],Сп["senderName"]+", "+Сп["senderInn"],Сп["invoiceNumber"]+" от "+аДата,аТип,аСтатус);
      аИконка:=спИконкиДокументов[Сп["type"]];
      аИконка:=?(IsEmpty(аИконка),122,аИконка);
      оДокументы.Icon(оДокументы.CurLine,"Иконка",аИконка);
      
      //TODO: поиск локального
      
    EndDo;
    Form.оДокументы.InvokeEvent("OnInitLine","IndexFrom,IndexTo",1,оДокументы.Size());
  Finally
    оДокументы.UnLock();
  EndTry;
  If ФлЧастьСписка Then
    Box("В список попали не все документы выбранного периода! Выберите меньший период, чтобы получить полный список!",Q_WARNING);
  EndIf;
  
  Form.bPanelClose.SetFocus();
  Exit 1;
EndFunction

Function ЗагрузитьТекущийДокумент(ФлТихо=0,ByRef Ошибка="")
  //TODO
  Ошибка:="Функция пока не реализована";
  Exit 0;
EndFunction

Function ВывестиОтчетПоДокументу()
  оДокументы:=Form.оДокументы.Value;
  If оДокументы.SelectedLine=0 Then
    Exit;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  If IsEmpty(оДокументы.Идентификатор) Then
    Exit;
  EndIf;
  СпДокумент:=оДокументы.СпДокумент;
  If IsEmpty(СпДокумент) Then
    Ошибка:="";
    If not ЗагрузитьТекущийДокумент(1,Ошибка) Then
      Box("Невозможно загрузить текущий документ ("+Ошибка+")!",Q_STOP);
      Exit;
    EndIf;
  EndIf;
  оДокументы.CurLine:=оДокументы.SelectedLine;
  СпДокумент:=оДокументы.СпДокумент;
  
  Т:=Table.Create();
  Т.SetSourceName("Документ");
  оЗагол:="Входящий документ № "+СпДокумент["ДокНомер"]+" от "+СпДокумент["ДокДата"];
  пНомДата:=СпДокумент["ДокНомер"]+" от "+СпДокумент["ДокДата"];
  пНомДатаСФ:=СпДокумент["СчФакНомер"]+" от "+СпДокумент["СчФакДата"];
  пКНД:=СпДокумент["КНД"];
  пКонтрагент:=СпДокумент["ПродавецИмя"];
  пИННКПП:=СпДокумент["ПродавецИНН"]+"/"+СпДокумент["ПродавецКПП"];
  пАдрес:=СпДокумент["ПродавецАдрес"];
  пКодGLN:=СпДокумент["ПродавецGLN"];
  Т.CopyByX("v1",1);
  
  пН:=0;
  ТСтроки:=СпДокумент["ТСтроки"];
  ТСтроки.Select();
  While ТСтроки.Next() Do
    пН:=пН+1;
    пНоменклатура:=ТСтроки.Наименование;
    пАртикул:=ТСтроки.Артикул;
    пШтрихкод:=ТСтроки.Штрихкод;
    пКолВо:=глФРМЧл(ТСтроки.Количество);
    пЦена:=глФРМ(ТСтроки.Цена);
    пСумма:=глФРМ(ТСтроки.Сумма);
    пСтавкаНДС:=ТСтроки.СтавкаНДС;
    спМарки:=List.Create();
    спМарки.SetByName("ГИСМТ",1);
    спМарки.SetByName("ПоказатьМарки",1);
    спМарки.SetByName("Марки",ТСтроки.спМаркиЕдиниц);
    спМарки.SetByName("Упаковки",ТСтроки.спМаркиУпаковок);
    пМарки:=?(ТСтроки.спМаркиЕдиниц.Size()=0,"",""+ТСтроки.спМаркиЕдиниц.Size()+" шт.")+?(ТСтроки.спМаркиУпаковок.Size()=0,""," "+ТСтроки.спМаркиУпаковок.Size()+" уп.");
    Т.CopyByX("v2",1);
  EndDo;
  глПечатнаяФормаОтчета(Т,0,оЗагол);
EndFunction

Function СозданиеВходящегоПоступления()
  //TODO
EndFunction

Function ПринятьВходящийДокумент()
  //TODO
EndFunction

Function OnDoubleClick(Таб)
  Result:=0;
  If глРаботаСОсобымиИконкамиТаблицы(Таб) Then
    Exit;
  EndIf;
  if Таб.SelectionMode>1 then
    Exit 1;
  EndIf;  
  Сп:=Таб.Area(Таб.CurCol,Таб.CurLine,Таб.CurCol,Таб.CurLine).Value;
  If TypeStr(Сп)<>"LIST" Then
    Exit 1;
  EndIf;
  If Сп.GetByName("ГИСМТ")=1 Then
    If Сп.GetByName("ПоказатьМарки")=1 Then
      Тч:=Text.Create();
      Тч.AddString("--- Упаковки ---");
      Тч.AddString(Сп.GetByName("Упаковки").ToString(_NEWLINE));
      Тч.AddString("--- Штуки ---");
      Тч.AddString(Сп.GetByName("Марки").ToString(_NEWLINE));
      Тч.Show("Марки",,1);
      Exit;
    EndIf;
  EndIf;
  
  If Сп.Size()=1 Then
    OpenObject(Сп.Get(1),0,1);
  Else
    Об:=0;
    If Сп.Select(Об,0,"Выбор объекта")>0 Then
      OpenObject(Об,0,1);
    EndIf;
  EndIf;  
EndFunction

Function ОчиститьВходящиеПоступления()
  //
EndFunction
