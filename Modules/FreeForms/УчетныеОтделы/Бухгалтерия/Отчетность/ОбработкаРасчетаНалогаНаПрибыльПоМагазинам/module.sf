//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var ТабЗапросы Export;
Var З Export;
Var ПапкаВыгрузки Export;
Var СмПрибыль Export, СмУбыток Export, СмПрибыль2 Export, СмУбыток2 Export;

Function лкНайтиСчет(Счет)
  а:=Ref.бухПланСчетов;
  If not а.Find("Code",Счет) Then
    Exit 0;
  EndIf;
  Exit а;
EndFunction

Function ПолучитьСубконто(стрСуб,ВидСубконто)
  If Trim(стрСуб)="" Then
    Exit GetNothing();
  EndIf;
  If Trim(ВидСубконто.ТипЗначенияЛокальный)="" Then
    а:=Ref.бухЗначенияСубконто;
    If а.Find("@Parent,Code",ВидСубконто,стрСуб) Then
      Exit а;
    EndIf;
    Exit GetNothing();
  EndIf;
  Стр:=Trim(ВидСубконто.ТипЗначенияЛокальный);
  СтрТип:=Uppercase(TearStr(Стр,"."));
  If (СтрТип="ПЕРЕЧИСЛЕНИЕ")or(СтрТип="ENUM") Then
    Try
      Exit Enum.GetByIndex(Стр,Number(стрСуб));
    Except EndTry;
    Exit GetNothing();
  ElseIf (СтрТип="ДОКУМЕНТ")or(СтрТип="DOC") Then
    а:=DB("Doc."+Стр);
    дДата:=TearStr(стрСуб,"#");
    дНомер:=TearStr(стрСуб,"#");
    If а.Find("DocNum,<DocDate,>=DocDate",дНомер,EndOfYear(дДата)+1,BegOfYear(дДата)) Then
      Exit а;
    EndIf;
    Exit GetNothing();
  EndIf;
  
  Стр:=Replace(Uppercase(Trim(ВидСубконто.ТипЗначенияЛокальный)),"СПРАВОЧНИК.","REF.");
  а:=DB(Стр);
  If а.Find("Code",стрСуб) Then
    Exit а;
  EndIf;
  Exit GetNothing();
EndFunction

Function ПолучитьИлиВыполнитьЗапрос(аСчет,Индекс,СубНом)
  оЮЛ:=Form.оЮЛ.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  
  If ТабЗапросы.FindAndGoto(Индекс,,"Индекс")=0 Then
    ТЗ:="Period From НачДата to КонДата;
    |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
    |зСч:=Storage.БухгалтерскиеСчета.Счет;
    |зЗБ:=Storage.БухгалтерскиеСчета.Счет.Забалансовый;
    |зСуб:=Storage.БухгалтерскиеСчета.Субконто"+СубНом+";
    |зНачОст:=BegTotals(Сумма);
    |зРасход:=Expense(Сумма);
    |зПриход:=Income(Сумма);
    |Condition(зЗБ=0);
    |Condition(зСч=аСчет);
    |Condition(зЮЛ=оЮЛ);
    |Group зСуб;";
    З2:=Query.Create();
    З2.Execute(ТЗ);
    ТабЗапросы.AddLine("Индекс,Запрос",Индекс,З2);
  EndIf;
  Exit ТабЗапросы.Запрос;
EndFunction

Function ВычислитьФормулу(ByRef зСм,Формула)
  оЮЛ:=Form.оЮЛ.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  
  зСм:=0;
  стрФорм:="";
  While Формула<>"" Do
    Стр:=Формула[1];
    //Переменные: [{Д,К,НО,КО}]<Счет.Субсчет>[@<Суб1>[@<Суб2>[@<Суб3>]]]
    If Pos(Стр,"@ДКНО0123456789")=0 Then
      стрФорм:=стрФорм+?(Стр=",","+",Стр);
      Формула:=Mid(Формула,2);
      Continue;
    EndIf;
    i:=1;
    While i<=Length(Формула) Do
      If Pos(Формула[i],"@ДКНО0123456789.")=0 Then
        Break;
      EndIf;
      i:=i+1;
    EndDo;
    Стр:=Left(Формула,i-1);
    Формула:=Mid(Формула,i);
    
    флЗнак:=1;
    If Pos("-",Стр)>0 Then
      флЗнак:=-1;
      Стр:=Replace(Стр,"-","");
    EndIf;
    
    ФлНО:=0;
    If Pos("НО",Стр)=1 Then
      ФлНО:=1;
      Стр:=Mid(Стр,3);    
    EndIf;
    
    ФлКО:=0;
    If Pos("КО",Стр)=1 Then
      ФлКО:=1;
      Стр:=Mid(Стр,3);
    EndIf;
    
    флДебет:=0;
    If Pos("Д",Стр)=1 Then
      флДебет:=1;
      Стр:=Mid(Стр,2);
    EndIf;
    
    флКредит:=0;
    If Pos("К",Стр)=1 Then
      флКредит:=1;
      Стр:=Mid(Стр,2);
    EndIf;
    
    тСчет:=TearStr(Стр,"@");
    аСчет:=лкНайтиСчет(тСчет);
    If аСчет=0 Then
      Message("Счет "+тСчет+" не найден в конфигурации!","!");
      Exit 0;
    EndIf;
    
    СмДеб:=0;
    СмКред:=0;
    If Pos("@",Стр)=0 Then
      З.First();
      If З.ResultTable.LocateAndGoto("зСч,@LEVEL",аСчет,1)>0 Then
        If ФлНО Then
          СмДеб:=З.зНачОст;
        ElseIf ФлКО Then
          СмДеб:=З.зНачОст+З.зПриход-З.зРасход;
        Else
          СмДеб:=З.зПриход;
          СмКред:=З.зРасход;
        EndIf;
      EndIf;
    Else
      //<Суб1>@<Суб2>@<Суб3>
      Фл:=0;
      Фл2:=0;
      Фл3:=0;
      Стр2:=Стр;
      If TearStr(Стр2,"@")<>"" Then
        Фл:=1;
      EndIf;
      If TearStr(Стр2,"@")<>"" Then
        Фл2:=1;
      EndIf;
      If TearStr(Стр2,"@")<>"" Then
        Фл3:=1;
      EndIf;
      If Фл+Фл2+Фл3=1 Then
        //Простая расшифровка -- одно субконто
        СубНом:=?(Фл=1,1,?(Фл2=1,2,3));
        Стр2:=Стр;
        If СубНом=1 Then
          Стр2:=TearStr(Стр2,"@");
          аСуб:=ПолучитьСубконто(Стр2,аСчет.ВидСубконто1);
        ElseIf СубНом=2 Then
          TearStr(Стр2,"@");
          Стр2:=TearStr(Стр2,"@");
          аСуб:=ПолучитьСубконто(Стр2,аСчет.ВидСубконто2);
        Else
          TearStr(Стр2,"@");
          TearStr(Стр2,"@");
          Стр2:=TearStr(Стр2,"@");
          аСуб:=ПолучитьСубконто(Стр2,аСчет.ВидСубконто3);
        EndIf;
        
        З2:=ПолучитьИлиВыполнитьЗапрос(аСчет,тСчет+"@0@"+Фл+"@"+Фл2+"@"+Фл3,СубНом);
        If З2=0 Then
          Exit 0;
        EndIf;
        З2.First();
        If З2.ResultTable.LocateAndGoto("зСуб,@LEVEL",аСуб,1)>0 Then
          СмДеб:=З2.зПриход;
          СмКред:=З2.зРасход;
        EndIf;
      Else
        //Сложная расшифровка -- несколько субконто
        Стр2:=Стр;
        аСуб:=ПолучитьСубконто(TearStr(Стр2,"@"),аСчет.ВидСубконто1);
        аСуб2:=ПолучитьСубконто(TearStr(Стр2,"@"),аСчет.ВидСубконто2);
        аСуб3:=ПолучитьСубконто(TearStr(Стр2,"@"),аСчет.ВидСубконто3);
        ТЗ:="Period From НачДата to КонДата;
        |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
        |зСч:=Storage.БухгалтерскиеСчета.Счет;
        |зЗБ:=Storage.БухгалтерскиеСчета.Счет.Забалансовый;
        |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
        |зСуб2:=Storage.БухгалтерскиеСчета.Субконто2;
        |зСуб3:=Storage.БухгалтерскиеСчета.Субконто3;
        |зНачОст:=BegTotals(Сумма);
        |зРасход:=Expense(Сумма);
        |зПриход:=Income(Сумма);
        |Condition(зЗБ=0);
        |Condition(зСч=аСчет);
        |Condition(зЮЛ=оЮЛ);"+
        ?(Фл=1,"Condition(зСуб1=аСуб);","")+
        ?(Фл2=1,"Condition(зСуб2=аСуб2);","")+
        ?(Фл3=1,"Condition(зСуб3=аСуб3);","");
        З2:=Query.Create();
        З2.Execute(ТЗ);
        СмДеб:=З2.зПриход;
        СмКред:=З2.зРасход;
      EndIf;
    EndIf;

    См:=СмДеб-СмКред;
    If флДебет=1 Then
      См:=СмДеб;
    ElseIf флКредит=1 Then
      См:=СмКред;
    EndIf;
    См:=флЗнак*См;
    стрФорм:=стрФорм+?(См>=0,См,"("+См+")");
  EndDo;
  
  Try
    зСм:=Eval(стрФорм);
  Except
    Message("Внимание! Внутренняя ошибка при вычислении формулы: "+стрФорм+"!","!");
    Exit 0;
  EndTry;
  
  Exit 1;
EndFunction

Function СоздатьФайл(Кф,КПП,ФлМагазин,ByRef СмОтриц=0,аМагазин=0)
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оЮЛ:=Form.оЮЛ.Value;
  оМес:=Form.оМес.Value;
  пИННКПП:=оЮЛ.ИНН;
  пИННКПП:=TearStr(пИННКПП,"/")+КПП;
  
  аДата:=Date();
  //NO_PRIB_<ПолучательФайлаНалогКод>_<ПолучательФайла2НалогКод>_<ИНН><КПП>_<GGGGMMDD>_<GUID>
  ИмяФайла:=?(not ФлМагазин,"ГОЛОВНОЙ_","")+"NO_PRIB_"+Form.оКодНал.Value+"_"+Form.оКодНал.Value+"_"+пИННКПП+"_"+FormatDate(НачДата,"YYYYmmdd")+CreateGUID();

  //Код периода:
  //21 - 1 квартал
  //31 - полугодие
  //33 - девять месяцев
  //34 - год
  //35 - один месяц               //35 по 46 для ежемесячных платежей
  //36 - два месяца
  //37 - три месяца
  //38 - четыре месяца
  //39 - пять месяцев
  //40 - шесть месяцев
  //41 - семь месяцев
  //42 - восемь месяцев
  //43 - девять месяцев
  //44 - десять месяцев
  //45 - одиннадцать месяцев
  //46 - год
  //50 - последний налоговый период при реорганизации (ликвидации) организации
  КодПер:="";
  If (not оМес)And(BegOfQuarter(НачДата)=НачДата)And(EndOfQuarter(НачДата)=КонДата) Then
    КодПер:=21;
  ElseIf (Not оМес)And((GetMonth(НачДата)=1)Or(GetMonth(НачДата)=7))And((GetMonth(КонДата)=6)Or(GetMonth(КонДата)=12))And(GetYear(НачДата)=GetYear(КонДата)) Then //1,7
    КодПер:=31;
  ElseIf (Not оМес)And(EndOfMonth(AddMonth(НачДата,8))=КонДата)And(BegOfMonth(НачДата)=НачДата) Then
    КодПер:=33;
  ElseIf (Not оМес)And(BegOfYear(НачДата)=НачДата)And(EndOfYear(НачДата)=КонДата) Then
    КодПер:=34;
  ElseIf (оМес)And(BegOfMonth(НачДата)=НачДата)And(EndOfMonth(НачДата)=КонДата) Then
    КодПер:=35;
  ElseIf (оМес)And(EndOfMonth(AddMonth(НачДата,1))=КонДата)And(BegOfMonth(НачДата)=НачДата) Then
    КодПер:=36;
  ElseIf (оМес)And(EndOfMonth(AddMonth(НачДата,2))=КонДата)And(BegOfMonth(НачДата)=НачДата) Then
    КодПер:=37;
  ElseIf (оМес)And(EndOfMonth(AddMonth(НачДата,3))=КонДата)And(BegOfMonth(НачДата)=НачДата) Then
    КодПер:=38;
  ElseIf (оМес)And(EndOfMonth(AddMonth(НачДата,4))=КонДата)And(BegOfMonth(НачДата)=НачДата) Then
    КодПер:=39;
  ElseIf (оМес)And(EndOfMonth(AddMonth(НачДата,5))=КонДата)And(BegOfMonth(НачДата)=НачДата) Then
    КодПер:=40;
  ElseIf (оМес)And(EndOfMonth(AddMonth(НачДата,6))=КонДата)And(BegOfMonth(НачДата)=НачДата) Then
    КодПер:=41;
  ElseIf (оМес)And(EndOfMonth(AddMonth(НачДата,7))=КонДата)And(BegOfMonth(НачДата)=НачДата) Then
    КодПер:=42;
  ElseIf (оМес)And(EndOfMonth(AddMonth(НачДата,8))=КонДата)And(BegOfMonth(НачДата)=НачДата) Then
    КодПер:=43;
  ElseIf (оМес)And(EndOfMonth(AddMonth(НачДата,9))=КонДата)And(BegOfMonth(НачДата)=НачДата) Then
    КодПер:=44;
  ElseIf (оМес)And(EndOfMonth(AddMonth(НачДата,10))=КонДата)And(BegOfMonth(НачДата)=НачДата) Then
    КодПер:=45;
  ElseIf (оМес)And(EndOfMonth(AddMonth(НачДата,11))=КонДата)And(BegOfMonth(НачДата)=НачДата) Then
    КодПер:=46;
  EndIf;
  If IsEmpty(КодПер) Then
    Raise "Выбранный период не может использоваться (ни один из кодов периода не удовлетворяет выбранному периоду)";
  EndIf;
  
  //Код места
  //213 - по месту учета в качестве крупнейшего налогоплательщика
  //214 - по месту нахождения российской организации, не являющейся крупнейшим налогоплательщиком
  //215 - по месту нахождения правопреемника, не являющегося крупнейшим налогоплательщиком
  //216 - по месту учета правопреемника, являющегося крупнейшим налогоплательщиком
  //220 - по месту нахождения обособленного подразделения российской организации
  //223 - по месту нахождения (учета) российской организации при представлении декларации по закрытому обособленному подразделению
  //231 - по месту нахождения налогового агента - организации  
  
  пКППЮЛ:=оЮЛ.ИНН;
  пИННЮЛ:=TearStr(пКППЮЛ,"/");
  пФИО:=оЮЛ.GetValue("Руководитель",НачДата).ПолнНаименование;
  СтрФИО:="<ФИО Фамилия="""+EncodeXMLString(Capitalize(Trim(TearStr(пФИО," "))))+""" Имя="""+EncodeXMLString(Capitalize(Trim(TearStr(пФИО," "))))+""" Отчество="""+EncodeXMLString(Capitalize(Trim(TearStr(пФИО," "))))+"""/>";
  
  СмПрибыль0:=Round((СмПрибыль-СмУбыток+СмПрибыль2-СмУбыток2-Form.оУбытки.Value)*Кф);
  СмПрибыль1:=СмПрибыль0;
  If (Form.оБезОтриц.Value=1)And(СмПрибыль1<0) Then
    СмОтриц:=Round(СмОтриц-СмПрибыль1);
    СмПрибыль1:=0;
  EndIf;  
  СмПрибыльР:=Round(СмПрибыль1*Form.оПроцРегион.Value/100);
  СмПрибыльФ:=Round(СмПрибыль1*Form.оПроцФедер.Value/100);  
  СмПрибыльР0:=Round(СмПрибыль0*Form.оПроцРегион.Value/100);
  СмПрибыльФ0:=Round(СмПрибыль0*Form.оПроцФедер.Value/100);  
  
  Стр:="<?xml version=""1.0"" encoding=""windows-1251"" ?>
  |<Файл ИдФайл="""+EncodeXMLString(ИмяФайла)+""" ВерсПрог=""sf"" ВерсФорм=""5.11"">"+
  "<Документ КНД=""1151006"" ДатаДок="""+аДата+""" Период="""+КодПер+""" ОтчетГод="""+GetYear(НачДата)+""" КодНО="""+Form.оКодНал.Value+""" НомКорр="""+Form.оНомКорр.Value+""" ПоМесту=""214"">"+
  "<СвНП Тлф="""+EncodeXMLString(оЮЛ.Телефоны)+"""><НПЮЛ НаимОрг="""+EncodeXMLString(""+оЮЛ.ПолнНаименование+?(not IsEmpty(аМагазин),", "+аМагазин.НазваниеМагазина))+""" ИННЮЛ="""+пИННЮЛ+""" КПП="""+КПП+"""></НПЮЛ></СвНП>"+
  "<Подписант ПрПодп=""1"">"+СтрФИО+"</Подписант><Прибыль><НалПУ>";
  
  //НалПУАв (авансовые платежи - обычный), НалПУМес (ежемесячные авансовые платежи), НалПУПроц (проценты и дивиденды) -- один из способов оплаты прибыли
  If оМес Then
    //TODO: АвПлат1, АвПлат2
    Стр:=Стр+"<НалПУМес ОКТМО="""+Form.оОКТМО.Value+"""><ФедБдж КБК=""18210101011011000110"" АвПлат1=""0"" АвПлат2=""0"" АвПлат3="""+СмПрибыльФ+""" />"+
      "<СубБдж КБК=""18210101012021000110"" АвПлат1=""0"" АвПлат2=""0"" АвПлат3="""+СмПрибыльР+""" /></НалПУМес></НалПУ>";
  Else
    Стр:=Стр+"<НалПУАв ОКТМО="""+Form.оОКТМО.Value+"""><ФедБдж КБК=""18210101011011000110"" НалПУ="""+СмПрибыльФ+"""/><СубБдж КБК=""18210101012021000110"" НалПУ="""+СмПрибыльР+"""/></НалПУАв></НалПУ>";
  EndIf;
  
  Стр:=Стр+"<РасчНал ТипНП=""1"" ДохРеал="""+Round(СмПрибыль*Кф)+""" ДохВнереал="""+Round(СмПрибыль2*Кф)+""" РасхУмРеал="""+Round(СмУбыток*Кф)+""" РасхВнереал="""+Round(СмУбыток2*Кф)+""" "+
    "ПрибУб="""+Round((СмПрибыль-СмУбыток+СмПрибыль2-СмУбыток2)*Кф)+""" НалБаза="""+Round((СмПрибыль-СмУбыток+СмПрибыль2-СмУбыток2)*Кф)+""" "+
    "НалБазаИсч="""+СмПрибыль0+""" СтавНалВсего="""+(Form.оПроцРегион.Value+Form.оПроцФедер.Value)+""" СтавНалФБ="""+Form.оПроцФедер.Value+""" "+
    "СтавНалСуб="""+Form.оПроцРегион.Value+""" НалИсчисл="""+Round(СмПрибыльР0+СмПрибыльФ0)+""" НалИсчислФБ="""+СмПрибыльФ0+""" НалИсчислСуб="""+СмПрибыльР0+""" "+
    "НалУменФБ="""+Round(СмПрибыльФ0-СмПрибыльФ)+""" НалУменСуб="""+Round(СмПрибыльР0-СмПрибыльР)+""">"+ //АвНачисл="53170" АвНачислФБ="5317" АвНачислСуб="47853" ...  АвПлатМес="13058" АвПлатМесФБ="1306" АвПлатМесСуб="11752"
    "<ДохРеалВнеРеал ТипНП=""1""><ДохРеал ВырРеалИтог="""+Round(СмПрибыль*Кф)+"""><ВырРеал ВырРеалВс="""+Round(СмПрибыль*Кф)+""" ВырРеалТовПок="""+Round(СмПрибыль*Кф)+""" /></ДохРеал>"+
    "<ДохВнеРеал ВнеРеалДохВс="""+Round(СмПрибыль2*Кф)+""" /></ДохРеалВнеРеал>"+
    "<РасхРеалВнеРеал ТипНП=""1""><РасхРеал РасхПризнИтого="""+Round(СмУбыток2*Кф)+""">"+
    "<ПрямРасхТорг ПрямРасхТоргВс="""+Round(СмУбыток*Кф)+""" РеалПокТов="""+Round(СмУбыток*Кф)+""" />"+
    "<КосвРасх КосвРасхВс=""0"" /></РасхРеал>"+
    //"<СумАморт МетодНачАморт=""1"" /><РасхВнеРеал РасхВнеРеалВс=""?"" />"+
    "</РасхРеалВнеРеал></РасчНал>";
  
  Стр:=Стр+"</Прибыль></Документ></Файл>";
  
  ИмяФайла:=ПапкаВыгрузки+ИмяФайла+".xml";
  Try
    StringToFile(Стр,ИмяФайла,1251);
  Except
    Raise "Невозможно сохрать файл: "+ИмяФайла;
  EndTry;
EndFunction


Function OnExecute(СпУстановки)
  оЮЛ:=Form.оЮЛ.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  
  If оЮЛ.Selected()=0 Then
    Box("Выберите юридическое лицо!",Q_STOP);
    Exit;
  EndIf;

  aList:=List.Create("Вывод печатной формы","Выгрузка файлов XML");
  ИмяЗнач:="";
  If aList.Select(ИмяЗнач,1)=0 Then
    Exit;
  EndIf;
  
  If ИмяЗнач="Вывод печатной формы" Then
    Box("Этот режим в данный момент не поддерживается!",Q_STOP);
    Exit;
  EndIf;
  
  ПапкаВыгрузки:="";
  If not SelectFolderDialog(ПапкаВыгрузки,"Выберите каталог для выгрузки:") Then
    Exit 1;
  EndIf;
  ПапкаВыгрузки:=AddBackSlash(ПапкаВыгрузки);
  
  //Найти все суммы К90.1.1-Д90.2.1 в разрезе КПП для пропорционального деления суммы прибыли
  оСч:=List.Create(глНайтиСчет("90.2"));
  оСч2:=List.Create(глНайтиСчет("90.1"));
  КонДата2:=BegOfDay(КонДата)+1;
  НачДата2:=BegOfDay(НачДата);
  аСтроки:=TempDB.Create("зСм:Number.20.2,зМагазин:DB,зКПП:STRING.9,зДок:DOC");
  аСтроки.LoadFrom("Storage.БухгалтерскиеСчета","-Сумма->зСм,@LINK->зДок","@DATE>=НачДата2","@Date<КонДата2","ЮрЛицо=оЮЛ","Счет IN оСч","@EXPENSE=0");
  аСтроки.LoadFrom("Storage.БухгалтерскиеСчета","Сумма->зСм,@LINK->зДок","@DATE>=НачДата2","@Date<КонДата2","ЮрЛицо=оЮЛ","Счет IN оСч2","@EXPENSE=1");
  аСтроки.Remove("not IsType(зДок,Doc.Реализация,Doc.ВозвратОтПокупателя)");
  аСтроки.Update("","зДок..DOC.ВозвратОтПокупателя.Магазин->зМагазин","IsType(зДок,Doc.ВозвратОтПокупателя)");
  аСтроки.Update("","зДок..DOC.Реализация.Магазин->зМагазин","IsType(зДок,Doc.Реализация)");
  аСтроки.Update("","зМагазин..Ref.рознМагазины.КПП->зКПП");
  аСтроки.Group("зКПП","зСм");
  ТабМагазины:=Tab.Create();
  аСтроки.CopyTo(ТабМагазины);
  
  //Основной запрос
  ТЗ:="Period From НачДата to КонДата;
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |зСч:=Storage.БухгалтерскиеСчета.Счет;
  |зЗБ:=Storage.БухгалтерскиеСчета.Счет.Забалансовый;
  |зНачОст:=BegTotals(Сумма);
  |зРасход:=Expense(Сумма);
  |зПриход:=Income(Сумма);
  |Condition(зЗБ=0);
  |Condition(зЮЛ=оЮЛ);
  |Group зСч with folders;";
  З:=Query.Create();
  З.Execute(ТЗ);

  ТабЗапросы:=Tab.Create("Индекс,Запрос");//<Счет>@0@{1,0}@{1,0}@{1,0}
                                          //или <Счет>@1@<Суб1>@<Суб2>@<Суб3>
  СмПрибыль:=0;
  СмУбыток:=0;
  СмПрибыль2:=0;
  СмУбыток2:=0;
  СмПрошлыйУбыток:=Form.оУбытки.Value;
  If not ВычислитьФормулу(СмПрибыль,Form.оДоходыРеал.Value) Then
    Exit;
  EndIf;
  If not ВычислитьФормулу(СмУбыток,Form.оРасходыРеал.Value) Then
    Exit;
  EndIf;
  If not ВычислитьФормулу(СмПрибыль2,Form.оДоходыНеРеал.Value) Then
    Exit;
  EndIf;
  If not ВычислитьФормулу(СмУбыток2,Form.оРасходыНеРеал.Value) Then
    Exit;
  EndIf;
  Message("Доходы от реализаций:    "+глФРМ(СмПрибыль,""));
  Message("Расходы реализаций:      "+глФРМ(СмУбыток,""));
  Message("Доходы вне реализаций:   "+глФРМ(СмПрибыль2,""));
  Message("Расходы вне реализаций:  "+глФРМ(СмУбыток2,""));
  Message("Прибыль:                 "+глФРМ(СмПрибыль+СмПрибыль2-СмУбыток-СмУбыток2,""));
  Message("Прош. убытки:            "+глФРМ(СмПрошлыйУбыток,""));
  СмИтого:=ТабМагазины.Sum("зСм");
  If Round(СмИтого,2)<=0 Then
    Message("По данному юр. лицу отсутствуют продажи в разрезе магазинов! Будет создан только общий файл выгрузки по юр. лицу!","!");
  EndIf;
  КПП:=оЮЛ.ИНН;
  TearStr(КПП,"/");
  СмОтриц:=0;
  If (Round(СмИтого,2)>0)And(ТабМагазины.Size()>1) Then
    ТабМагазины.Select();
    While ТабМагазины.Next() Do
      If (IsEmpty(ТабМагазины.зКПП))And(Round(ТабМагазины.зСм,2)<>0) Then
        Message("В базе присутствуют магазины без указания КПП, выгрузка остановлена!","!");
      EndIf;
      аМагазин:=Ref.рознМагазины;
      If not аМагазин.Find("КПП",ТабМагазины.зКПП) Then
        Raise "Не найден магазин с КПП "+ТабМагазины.зКПП+"! Внутренняя ошибка!";
      EndIf;
      СоздатьФайл(ТабМагазины.зСм/СмИтого,ТабМагазины.зКПП,1,СмОтриц,аМагазин);
    EndDo;
  EndIf;
  СоздатьФайл(1,КПП,0);
  If СмОтриц<>0 Then
    Message("В прибыли не показана сумма "+глФРМ(СмОтриц)+", сложенная из магазинов с отрицательной прибылью!","!");
  EndIf;
  
  Box("Выгрузка произведена успешно!",Q_INFORMATION);
EndFunction