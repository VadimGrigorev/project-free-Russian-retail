//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var ФлБылиОшибки Export;
Var ТипНом Export;
Var Путь Export;

Var спОстНач Export;      //Остатки на начало периода, к которым будут приведены реальные остатки
Var спОстКон Export;      //Остатки на конец периода, к которым будут приведены реальные остатки
Var ТЛицЮЛ Export;
Var ТПечДата Export;

Var глТекСтрока Export;
Var глТекСтраница Export;
Var глВсегоСтраниц Export;
Var ТМаг Export;          //Таблицы "итого" по магазинам

Var аСтроки Export, спМагазины Export, ТПроизводители Export, ТПоставщики Export, аКонтрагенты Export;
Var пДиректор Export, пБухгалтер Export;

Var ВсегоДал0 Export, ВсегоДал1 Export, ВсегоДал2 Export, ВсегоДал3 Export, ВсегоДал4 Export, ВсегоДал5 Export, 
    ВсегоДал6 Export, ВсегоДал8 Export, ВсегоДал9 Export, ВсегоДал10 Export, ВсегоДал11 Export,
    НомерРаздела Export, СквНом Export;    


Function ЗагрузитьУмолчанияАП()
  тАПКоды:=Form.тАПКоды.Value;
  
  Стр:="Спирт-сырец этиловый из пищевого сырья@010|Спирт этиловый ректификованный из пищевого сырья@020|Спирты этиловые из пищевого сырья прочие@0201"+
  "|Спирт этиловый ректификованный из непищевого растительного сырья@025|Спирт этиловый из ЭАФ@030|Спирт этиловый из головной фракции этилового спирта@031"+
  "|Спирт этиловый синтетический@040|Спирт этиловый технический синтетический@0401|Спирт этиловый абсолютированный@050|Спирт этиловый абсолютированный из пищевого сырья@0501"+
  "|Спирт этиловый абсолютированный технический@0502|Спирт этиловый технический гидролизный@0503|Другие спирты за исключением денатурированных (гидролизный, технический и другие)@060"+
  "|Спирт этиловый денатурированный из пищевого сырья@070|Биоэтанол из пищевого сырья@071|Спирт этиловый денатурированный из непищевого сырья@080"+
  "|Биоэтанол из непищевого сырья@081|Фракция головная этилового спирта@090|Головная фракция этилового спирта@0901|Фракция головных и промежуточных примесей этилового спирта@091"+
  "|Промежуточная фракция этилового спирта из пищевого сырья@092|Спирт этиловый по фармакопейным статьям@100|Фармацевтическая субстанция спирта этилового (этанол)@101"+
  "|Спиртосодержащие лекарственные препараты (средства) для медицинского применения@102|Спиртосодержащие лекарственные препараты (средства) для ветеринарного применения@103"+
  "|Спиртосодержащие медицинские изделия@104|Коньячный дистиллят@110|Дистиллят винный для бренди (дистиллят коньячный)@1101|Дистиллят винный для бренди выдержанный@1102"+
  "|Дистиллят винный для бренди молодой@1103|Дистилляты винные для бренди прочие@1104|Дистиллят коньячный полного цикла производства@1105|Кальвадосный дистиллят@120"+
  "|Дистилляты яблочные@1201|Дистиллят яблочный выдержанный (кальвадосный)@1202|Дистиллят яблочный молодой для яблочного бренди@1203|Дистилляты кальвадосные прочие@1204"+
  "|Винный дистиллят@130|Дистилляты винные@1301|Дистиллят винный ректификованный@1302|Дистилляты винные прочие@1303|Дистилляты винные полного цикла производства@1304"+
  "|Дистиллят винный полного цикла производства ректификованный с объемной долей спирта более 86%@1305|Дистилляты винные полного цикла производства прочие@1306"+
  "|Спирт этиловый питьевой@140|Виноградный дистиллят@150|Дистиллят виноградного происхождения@1501|Дистиллят виноградного происхождения ректификованный@1502"+
  "|Дистиллят виноградного происхождения прочие@1503|Дистилляты виноградные полного цикла производства@1504|Дистиллят виноградный полного цикла производства ректификованный с объемной долей спирта более 86%@1505"+
  "|Дистилляты виноградные полного цикла производства прочие@1506|Плодовый дистиллят@160|Фруктовый (плодовый) дистиллят@161|Дистилляты фруктовые@1611"+
  "|Дистиллят фруктовый ректификованный@1612|Дистилляты фруктовые прочие@1613|Висковый дистиллят@170|Дистиллят виски@1701|Зерновой дистиллят@180|Дистиллят зерновой@1801"+
  "|Дистиллят ромовый@190|Дистилляты прочие полного цикла производства@1901|Дистилляты прочие@1902|Дистиллят медовый@1903|Дистилляты прочие@1904|Водка@200"+
  "|Водка с защищенным наименованием места происхождения товара@2001|Водка особая@2002|Водка особая с защищенным наименованием места происхождения товара@2003"+
  "|Водки прочие@2004|Ликероводочные изделия с содержанием этилового спирта до 25% включительно@211|Ликеро-водочные изделия с содержанием этилового спирта до 25% включительно (до 01.01.2013)@2111"+
  "|Пунши@2112|Пунши прочие@2113|Наливки@2114|Напитки десертные@2115|Ликероводочные изделия с содержанием этилового спирта свыше 25%@212|Крем@2121"+
  "|Пунш с ромом@2122|Аперитивы@2123|Коктейли@2124|Бальзамы@2125|Ликероводочные изделия прочие@2126|Настойки@2127|Настойка горькая@2128|Настойка полусладкая@2129"+
  "|Настойка сладкая@21210|Настойки прочие@21211|Джины прочие@28010|Бренди фруктовый@28011|Бренди фруктовый коллекционный@28012|Напиток спиртной из зернового сырья@28013"+
  "|Прочие напитки спиртные@28014|Спиртные напитки прочие@28015|Коньячные спирты@300|Кальвадосные спирты@310|Виноматериалы@320|Виноматериалы виноградные@321"+
  "|Виноматериалы виноградные столовые@3211|Виноматериалы виноградные ликерные@3212|Виноматериалы фруктовые (плодовые)@322|Виноматериалы фруктовые столовые@3221"+
  "|Виноматериалы фруктовые сброженные@3222|Специальные виноматериалы виноградные@323|Виноматериалы виноградные специальные@3231|Виноматериалы виноградные прочие@3232"+
  "|Специальные виноматериалы фруктовые (плодовые)@324|Виноматериалы фруктовые специальные@3241|Виноматериалы фруктовые прочие@3242|Соки спиртованные@330|Морсы спиртованные@3301"+
  "|Соки сброженно-спиртованные@331|Дистилляты@340|Фруктовое сусло@341|Сусла фруктовые@3411|Медовое сусло@342|Сусло медовое@3421|Пивное сусло@343|Сусло пивное@3431|Виноградное сусло@344"+
  "|Сусло виноградное@3441|Спиртованное виноградное сусло (мистель)@345|Сусло виноградное спиртованное (мистель)@3451|Сусло фруктовое спиртованное@346|Сусло фруктовое сброженное@3461"+
  "|Сусло фруктовое сброженно-спиртованное@3462|Сусла фруктовые прочие@3463|Другая спиртосодержащая пищевая продукция@350|Настои спиртованные@3501|Спирт ароматный@3502"+
  "|Продукция спиртосодержащая пищевая прочая@3503|Вина натуральные@400|Вино (виноградное)@401|Вино@4011|Вино с защищенным географическим указанием или с защищенным наименованием места происхождения@402"+
  "|Вино (виноградное столовое)@403|Вино столовое@4031|Вино молодое@4032|Вино (под пленкой)@4033|Вино сортовое@4034|Вино тихое@4035|Вина столовые прочие@4036|Херес@4037"+
  "|Вино с защищенным географическим указанием@404|Вино с защищенным наименованием места происхождения@405|Вино коллекционное виноградное@406|Вино выдержанное@4061|Вино коллекционное@4062"+
  "|Вина (за исключением натуральных, игристых и шампанских)@410|Ликерное вино@411|Кагор@4111|Мадера@4112|Портвейн@4113|Вина крепленые прочие@4114|Ликерное вино с защищенным географическим указанием@412"+
  "|Вино ликерное с защищенным географическим указанием@4121|Ликерное вино с защищенным наименованием места происхождения@413|Вино ликерное с защищенным наименованием места происхождения товара@4131"+
  "|Вино столовое с защищенным географическим указанием@414|Вино столовое с защищенным наименованием места происхождения@415|Вино столовое с защищенным наименованием места происхождения товара@4151"+
  "|Вино (столовое) коллекционное@416|Вина плодовые@420|Фруктовое (плодовое) вино@421|Вино фруктовое ликерное@4211|Фрукты в вине (фрукты в вине фруктовом)@4212|Вино фруктовое столовое@4213"+
  "|Вино фруктовое газированное@4214|Вино фруктовое газированное жемчужное@4215|Вино фруктовое крепленое@4216|Вино фруктовое крепленое ароматизированное@4217"+
  "|Вино фруктовое крепленое специальной технологии@4218|Вино фруктовое игристое@4219|Вино фруктовое игристое жемчужное@42110|Вина фруктовые игристые прочие@42111"+
  "|Вино коллекционное фруктовое@422|Вино фруктовое коллекционное@4221|Вино специальное с защищенным географическим указанием@430|Вино специальное с защищенным географическим указанием. (для производителей респ.Крым и г.Севастополь)@4301"+
  "|Вино специальное с защищенным географическим указанием@4302|Вино специальное с защищенным наименованием места происхождения@431|Вино специальное с защищенным наименованием места происхождения товара. (для производителей респ.Крым и г.Севастополь)@4311"+
  "|Вино специальное с защищенным наименованием места происхождения@4312|Вина ликерные прочие@4313|Вино ароматизированное виноградное@432|Вермут@4321|Вина прочие ароматизированные, в том числе из свежего винограда@4322"+
  "|Вино игристое@440|Вино игристое высокого качества@4401|Вина игристые жемчужные@4402|Вино игристое с защищенным географическим указанием@441|Вино игристое виноградное шампанское с защищенным географическим указанием@4411"+
  "|Вино игристое виноградное шампанское с защищенным наименованием места происхождения товара@4422|Вина игристые с защищенным наименованием места происхождения@442|Вино игристое с защищенным наименованием места происхождения товара@4421"+
  "|Вино игристое коллекционное@443|Вина шампанские@450|Вино игристое виноградное шампанское@4501|Вина шампанские с защищенным географическим указанием@451|Вина шампанские с защищенным наименованием места происхождения@452"+
  "|Вина шампанские коллекционные@453|Вино шампанское коллекционное@4531|Другие вина@460|Винный напиток, произведенный без добавления этилового спирта@461"+
  "|Винные напитки виноградные, произведенные без добавления этилового спирта без насыщения двуокисью углерода@4611|Вино газированное@4612|Вина газированные, в том числе из свежего винограда@4613"+
  "|Вино газированное жемчужное@4614|Вина газированные прочие@4615|Винные напитки виноградные, произведенные без добавления этилового спирта с насыщением двуокисью углерода@4616"+
  "|Напитки винные фруктовые, произведенные без добавления этилового спирта@4617|Напиток винный газированный@4618|Напиток винный газированный жемчужный@4619|Напитки винные фруктовые ароматизированные@46110"+
  "|Напитки винные фруктовые газированные@46111|Винный напиток, произведенный с добавлением этилового спирта@462|Винные напитки виноградные, произведенные с добавлением этилового спирта без насыщения двуокисью углерода@4621"+
  "|Винные напитки виноградные, произведенные с добавлением этилового спирта с насыщением двуокисью углерода@4622|Напитки винные фруктовые, произведенные с добавлением этилового спирта@4623"+
  "|Напиток винный крепкий (из дистиллята коньячного)@4624|Напиток винный ароматизированный@4625|Напиток виноградный крепкий@4626|Напитки виноградосодержащие из виноградного сырья ароматизированные@4627"+
  "|Напиток фруктовый крепкий@4628|Напитки винные фруктовые прочие@4629|Коктейли винные@46210|Парфюмерно-косметическая продукция@481|Товары бытовой химии@482|Спиртосодержащие растворы@483"+
  "|Другая спиртосодержащая непищевая продукция@484|Продукция спиртосодержащая непищевая прочая@4841|Денатурированная спиртосодержащая непищевая продукция@485|Продукция денатурированная спиртосодержащая непищевая@4851"+
  "|Пиво с содержанием объемной доли этилового спирта свыше 0,5% и до 8,6% включительно@500|Пиво с содержанием объемной доли этилового спирта свыше 8,6%@510|Напитки, изготавливаемые на основе пива (напитки пивные)@520"+
  "|Напиток алкогольный медовый@530|Напиток алкогольный медовый газированный@531|Напиток алкогольный медовый крепленый@532|Напиток алкогольный медовый десертный@533|Напиток алкогольный медовый нектар@534"+
  "|Напиток алкогольный медовый столовый@535|Напитки алкогольные медовые за исключением медовухи прочие@536|Напиток медовый крепкий@537|Винодельческая продукция прочая@538"+
  "|Ликеры@21212|Ликер крепкий@21213|Ликер десертный@21214|Ликер эмульсионный@21215|Ликер яичный@21216|Ликеры прочие@21217|Коньяк и арманьяк, реализуемые в бутылках@229|Коньяк@2291|Напиток крепкий из дистиллята винного для бренди (дистиллята коньячного) (коньяк)@2292"+
  "|Коньяки, реализуемые в бутылках@230|Коньяки обработанные, предназначенные для отгрузки с целью розлива на других предприятиях или промпереработки@231|Бренди@232|Бренди высокого качества@2321|Бренди высокого качества выдержанный@2322"+
  "|Бренди высокого качества старый@2323|Бренди высокого качества очень старый@2324|Бренди высокого качества коллекционный@2325|Бренди высокого качества с защищенным географическим указанием@2326|Бренди прочие@2327|Коньяк с защищенным географическим указанием@233"+
  "|Напиток крепкий из дистиллята винного для бренди (дистиллята коньячного) с защищенным географическим указанием (национальный коньяк)@2331|Коньяк с защищенным наименованием места происхождения@234|Коньяк с защищенным наименованием места происхождения товара@2341"+
  "|Коньяк коллекционный@235|Коньяк особый@2351|Ромы@236|Виски@237|Напитки коньячные с содержанием этилового спирта до 25% включительно@238|Напитки коньячные с содержанием этилового спирта свыше 25%@239|Напитки коньячные, бренди с содержанием этилового спирта до 25% включительно@241"+
  "|Напитки коньячные, бренди с содержанием этилового спирта свыше 25%@242|Напитки винные с содержанием этилового спирта до 25% включительно@250|Напитки винные с содержанием этилового спирта свыше 25%@251|Кальвадосы@252|Кальвадосы Российские@2521"+
  "|Напиток крепкий из дистиллята яблочного выдержанного (кальвадосного) (кальвадос)@2522|Кальвадосы прочие@2523|Слабоалкогольная продукция@260|Напитки слабоалкогольные@2601|Напитки слабоалкогольные прочие@2602|Напитки алкогольные медовые за исключением медовухи@2603"+
  "|Напиток слабоалкогольный спиртованный@2604|Напитки слабоалкогольные прочие@2605|Сидр фруктовый@2606|Сидр фруктовый ароматизированный@2607|Напитки слабоалкогольные брожения прочие@2608|Сидр@261|Сидр ароматизированный@2611|Пуаре@262|Медовуха@263"+
  "|Другие спиртные напитки с содержанием этилового спирта до 25% включительно@270|Другие спиртные напитки с содержанием этилового спирта свыше 25%@280|Водка виноградная@2801|Водка виноградная с защищенным географическим указанием@2802|Водка виноградная с защищенным наименованием места происхождения товара@2803"+
  "|Водки фруктовые (плодовые)@2804|Водки виноградные прочие@2805|Водка медовая@2806 |Джины@2807|Джин дистиллированный@2808|Джин сухой@2809";
  
  While Стр<>"" Do
    КодАП:=TearStr(Стр,"|");
    Описание:=TearStr(КодАП,"@");
    If тАПКоды.Find(КодАП,,"КодАП")=0 Then
      тАПКоды.AddLine("КодАП,Описание",КодАП,Описание);
    EndIf;
  EndDo;
EndFunction


Function СоздатьТаблицуЛицензий()
  Таб:=Tab.Create("Номер,Орган,НачДата,КонДата,РеквНачДата,Эл");
  Таб.AddColumn("ГлобИД",,"Number");
  Exit Таб;
EndFunction

Function ДатаДокумента(зДок)
  Вид:=зДок.DBName();
  If Pos(Вид+",","ПоступлениеТМЦ,")=0 Then
    Exit BegOfDay(зДок.DocDate);
  EndIf;
  Стр:=зДок.ДатаДокВходящий;
  If IsEmpty(Стр)=1 Then
    Message("Не задана входящая дата документа %LINK%, будет использована дата документа в нашей базе!","!",зДок);
    Стр:=BegOfDay(зДок.DocDate);
  Else  
    Стр:=BegOfDay(Стр);
  EndIf;
  Exit Стр;
EndFunction

Function НомерДокумента(зДок)
  Вид:=зДок.DBName();
  If Pos(Вид+",","ПоступлениеТМЦ,")=0 Then
    Exit зДок.DocNum;
  EndIf;
  Стр:=Trim(зДок.НомерДокВходящий);
  If Стр="" Then
    Message("Не задан входящий номер документа %LINK%, будет использован номер документа в нашей базе!","!",зДок);
    Стр:=Trim(зДок.DocNum);
  EndIf;
  Exit Стр;
EndFunction




Function ПолучитьТаблицуЛицензий(зК,НачДата,КонДата,ByRef ГлобИД)
  Таб:=СоздатьТаблицуЛицензий();
  
  а:=Ref.кнтЛицензииКонтрагентов;
  aList:=а.Load(0,"@Parent,@Status",зК,0);
  For i:=1 To aList.Size() Do
    а:=aList.Get(i);
    If (а.ТипЛицензии<>Enum.кнтТипыЛицензий.АлкогольнаяРозничная)And(а.ТипЛицензии<>Enum.кнтТипыЛицензий.АлкогольнаяОптовая)And
      (а.ТипЛицензии<>Enum.кнтТипыЛицензий.АлкогольнаяПроизводство) Then
      Continue;
    EndIf;
    
    //Также добавим лицензии просроченные не более 2х месяцев назад
    If (а.ДатаНачалаДействияЛицензии>КонДата)Or(а.ДатаОкончанияДействияЛицензии+60<НачДата) Then
      Continue;
    EndIf;
    
    Таб.AddLine("ГлобИД,Номер,Орган,НачДата,КонДата,РеквНачДата,Эл",ГлобИД,Trim(а.Name),Trim(а.ОрганВыдавшийЛицензию),а.ДатаНачалаДействияЛицензии,а.ДатаОкончанияДействияЛицензии,а.ДатаВыдачиЛицензии,а.Copy());
    ГлобИД:=ГлобИД+1;
  EndDo;
  Таб.Sort("РеквНачДата+");
  
  Exit Таб;
EndFunction

Function СоздатьТаблицу();
  T:=Tab.Create("КодАП,зПрИННКПП");
  For i:=0 to 11 Do
    T.AddColumn("зДал"+i,,"Number");
  EndDo;
  Exit T;
EndFunction


Function ДобавитьТипДекларации(Т)
  If Form.оОтчетность.Value.SelectedLine=1 Then
    Т.AddString("<Первичная />");
  Else
    If Form.оНомКорр.Value<=0 Then
      Message("Внимание! Неверный номер корректировки для корр. декларации!","!!");
      флБылиОшибки:=1;
    EndIf;
    Т.AddString("<Корректирующая НомерКорр="""+Form.оНомКорр.Value+""" />");
  EndIf;
EndFunction


Function СоздатьШапкуТаблицы()
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  НомМесяца:=GetMonth(EndOfQuarter(КонДата));
  ЦифраКвартала:=?(НомМесяца=12,0,НомМесяца);
  оЮЛ:=Form.оЮЛ.Value;
  оЛицензия:=ТипНом=7;
  ФлЗагружатьКонечныеОстатки:=Form.ФлЗагружатьКонечныеОстатки.Value;
  оКодВидаДеятельности:=Form.оКодВидаДеятельности.Value;
  оТелОрг:=Form.оТелОрг.Value;
  оПочтаОрг:=Form.оПочтаОрг.Value;  
  
  Form.StatusText("Создание шапки...");
  Т:=Text.Create();
  Т.AddString("<?xml version=""1.0"" encoding=""windows-1251"" ?>");
  Т.AddString("<Файл ДатаДок="""+FormatDate(CurDate(),"dd.mm.YYYY")+""" ВерсФорм=""4.4"" НаимПрог=""SF Розница 1.0"">");
  
  Т.AddString("<ФормаОтч НомФорм=""3"+ТипНом+""" ПризПериодОтч="""+ЦифраКвартала+""" ГодПериодОтч="""+GetYear(КонДата)+""">");//ПризФОтч=""4"" 
  ДобавитьТипДекларации(Т);
  Т.AddString("</ФормаОтч><Справочники>");
  
  аИНН:=Replace(оЮЛ.ИНН,"\","/");
  аКПП:="";
  If Pos("/",аИНН)>0 Then
    аКПП:=аИНН;
    аИНН:=Left(TearStr(аКПП,"/"),10);
    аКПП:=Left(аКПП,9);
  EndIf;
  
  ТПроизводители.Select();
  While ТПроизводители.Next() Do
    зК:=ТПроизводители.зПр;
    аИНН:=ТПроизводители.зПрИННКПП;
    If Left(аИНН,1)="!" Then
      Код:=Mid(аИНН,2);
      зК:=Ref.кнтКонтрагенты;
      If not зК.Find("Code",Код) Then
        Raise "Не найден контрагент с кодом "+Код+"! Внутренняя ошибка!";
      EndIf;
      аИНН:=Trim(зК.ИНН);
    Else
      аИНН:=?(Left(аИНН,1)="!","",аИНН);
      аКПП:="";
      If Pos("/",аИНН)>0 Then
        аКПП:=аИНН;
        аИНН:=Left(TearStr(аКПП,"/"),10);
        аКПП:=Left(аКПП,9);
      EndIf;
    EndIf;
    If ТипНом=8 Then
      Т.AddString("<ПроизводителиИмпортеры ИДПроизвИмп="""+ТПроизводители.CurLine+""" П000000000004="""+EncodeXMLString(зК.ПолнНаименование)+""">"+
        ?(Trim(аКПП)="","<ФЛ П000000000005="""+Trim(аИНН)+"""></ФЛ>","<ЮЛ П000000000005="""+Trim(аИНН)+""" П000000000006="""+Trim(аКПП)+"""></ЮЛ>")+"</ПроизводителиИмпортеры>");
    ElseIf зК.флИностранныйКонтрагент=1 Then
      Т.AddString("<ПроизводителиИмпортеры ИДПроизвИмп="""+ТПроизводители.CurLine+""" П000000000004="""+EncodeXMLString(зК.ПолнНаименование)+""" П000000000005="""+Trim(аИНН)+""" />");
    Else
      Т.AddString("<ПроизводителиИмпортеры ИДПроизвИмп="""+ТПроизводители.CurLine+""" П000000000004="""+EncodeXMLString(зК.ПолнНаименование)+""" П000000000005="""+Trim(аИНН)+""" П000000000006="""+Trim(аКПП)+""" />");
    EndIf;
  EndDo;
  ТПоставщики.Select();
  While ТПоставщики.Next() Do
    зК:=ТПоставщики.зПоставщик;
    аИНН:=зК.ИНН;
    аКПП:="";
    If Pos("/",аИНН)>0 Then
      аКПП:=аИНН;
      аИНН:=Left(TearStr(аКПП,"/"),10);
      аКПП:=Left(аКПП,9);
    EndIf;
    Т.AddString("<Поставщики ИдПостав="""+(ТПоставщики.CurLine+ТПроизводители.Size())+""" П000000000007="""+EncodeXMLString(зК.ПолнНаименование)+""">"+
      ?(Trim(аКПП)="","<ФЛ П000000000009="""+Trim(аИНН)+"""></ФЛ>","<ЮЛ П000000000009="""+Trim(аИНН)+""" П000000000010="""+Trim(аКПП)+"""></ЮЛ>")+"</Поставщики>");
  EndDo;
  
  Т.AddString("</Справочники><Документ>");
  Т.AddString("<Организация>");
  Т.AddString("<Реквизиты Наим="""+EncodeXMLString(оЮЛ.Контрагент.ПолнНаименование)+""" ТелОрг="""+EncodeXMLString(оТелОрг)+""" EmailОтпр="""+EncodeXMLString(оПочтаОрг)+""">");              
  Т.AddString("<АдрОрг>");
  Т.AddString("<КодСтраны>643</КодСтраны>");

  Стр:=Trim(оЮЛ.ЮрАдрес);
  СтрИндекс:=Trim(TearStr(Стр,","));
  If (Left(СтрИндекс,1)>"9")Or(Left(СтрИндекс,1)<"0") Then
    СтрИндекс:=Trim(TearStr(Стр,","));
  EndIf;
  
  аИНН:=оЮЛ.ИНН;
  аКПП:="";
  If Pos("/",аИНН)>0 Then
    аКПП:=аИНН;
    аИНН:=Left(TearStr(аКПП,"/"),10);
    аКПП:=Left(аКПП,9);
  EndIf;
  
  оКодРегиона:=Left(аИНН,2);
  If аКПП<>"" Then
    оКодРегиона:=Left(аКПП,2);
  EndIf;
  TearStr(Стр,",");
  
  Т.AddString("<Индекс>"+Trim(СтрИндекс)+"</Индекс>");
  Т.AddString("<КодРегион>"+Trim(оКодРегиона)+"</КодРегион>");
  оРайон:=Trim(TearStr(Стр,","));
  Т.AddString("<Район>"+EncodeXMLString(оРайон)+"</Район>");
  оГород:=Trim(TearStr(Стр,","));
  Т.AddString("<Город>"+EncodeXMLString(оГород)+"</Город>");
  Т.AddString("<НаселПункт />");
  TearStr(Стр,",");
  оУлица:=Trim(TearStr(Стр,","));
  Т.AddString("<Улица>"+EncodeXMLString(оУлица)+"</Улица>");
  оДом:=Trim(TearStr(Стр,","));
  Т.AddString("<Дом>"+EncodeXMLString(оДом)+"</Дом>");
  оКорпус:=Trim(TearStr(Стр,","));
  Т.AddString("<Корпус>"+EncodeXMLString(оКорпус)+"</Корпус>");
  Т.AddString("<Литера />");
  оКварт:=Trim(TearStr(Стр,","));
  Т.AddString("<Кварт>"+EncodeXMLString(оКварт)+"</Кварт>");
  Т.AddString("</АдрОрг>");
  If Trim(аКПП)="" Then
    Т.AddString("<ФЛ ИННФЛ="""+Trim(аИНН)+""" />");
  Else
    Т.AddString("<ЮЛ ИННЮЛ="""+Trim(аИНН)+""" КППЮЛ="""+Trim(аКПП)+""" />");
  EndIf;
  Т.AddString("</Реквизиты>");
    
  Т.AddString("<ОтветЛицо>");
  Т.AddString("<Руководитель>");
  оРук:=Trim(оЮЛ.GetValue("Руководитель",КонДата).ПолнНаименование);
  Т.AddString("<Фамилия>"+TearStr(оРук," ")+"</Фамилия>");
  Т.AddString("<Имя>"+TearStr(оРук," ")+"</Имя>");
  Т.AddString("<Отчество>"+TearStr(оРук," ")+"</Отчество>");
  Т.AddString("</Руководитель>");
  Т.AddString("<Главбух>");
  оБух:=Trim(оЮЛ.GetValue("ГлБухгалтер",КонДата).ПолнНаименование);
  Т.AddString("<Фамилия>"+TearStr(оБух," ")+"</Фамилия>");
  Т.AddString("<Имя>"+TearStr(оБух," ")+"</Имя>");
  Т.AddString("<Отчество>"+TearStr(оБух," ")+"</Отчество>");
  Т.AddString("</Главбух>");
  Т.AddString("</ОтветЛицо>");
    
  If ТипНом=7 Then
    Т.AddString("<Деятельность>");
    If оЛицензия=0 Then
      Т.AddString("<Нелицензируемая ВидДеят="""+Trim(оКодВидаДеятельности)+""" />");
    Else
      If ТЛицЮЛ.Size()=0 Then
        Message("Внимание! Установлена галка ""требуется лицензия"", однако, ни одной лицензии не найдено!","!");
        Т.AddString("<Лицензируемая />");
      Else
        Т.AddString("<Лицензируемая>");
        ТЛицЮЛ.Select();
        While ТЛицЮЛ.Next() Do
          If ТЛицЮЛ.ГлобИД>0 Then
            Стр:=ТЛицЮЛ.Номер;//Серия Номер ...
            Т.AddString("<Лицензия><ВидДеят>"+Trim(оКодВидаДеятельности)+"</ВидДеят><СерНомЛиц>"+Trim(Стр)+"</СерНомЛиц><ДатаНачЛиц>"+FormatDate(ТЛицЮЛ.НачДата,"dd.mm.YYYY")+
              "</ДатаНачЛиц><ДатаОконЛиц>"+FormatDate(ТЛицЮЛ.КонДата,"dd.mm.YYYY")+"</ДатаОконЛиц></Лицензия>");
          EndIf;
        EndDo;
        Т.AddString("</Лицензируемая>");
      EndIf;
    EndIf;
    Т.AddString("</Деятельность>");
  EndIf;
  Т.AddString("</Организация>");
  
  Exit Т;
EndFunction
  


Function ВыгрузитьОдинМагазин(Т,ТОсн,зМагазин2)
  оЮЛ:=Form.оЮЛ.Value;
  
  пИмяСекции:=оЮЛ.Контрагент.ПолнНаименование;
  пИмя:=пИмяСекции;
  пДоб:="";
  аКПП:=зМагазин2.КПП;
  аАдрес:=зМагазин2.ФактАдрес;
  пИмяСекции:=пИмяСекции+", "+зМагазин2;
  пИмя:=зМагазин2;
  
  оКодРегиона:=Left(оЮЛ.ИНН,2);
  If аКПП<>"" Then
    оКодРегиона:=Left(аКПП,2);
  EndIf;
  
  Стр:=Trim(аАдрес);
  СтрИндекс:=Trim(TearStr(Стр,","));
  If (Left(СтрИндекс,1)>"9")Or(Left(СтрИндекс,1)<"0") Then
    СтрИндекс:=Trim(TearStr(Стр,","));
  EndIf;
  TearStr(Стр,",");
  оРайон:=Trim(TearStr(Стр,","));
  оГород:=Trim(TearStr(Стр,","));
  TearStr(Стр,",");
  оУлица:=Trim(TearStr(Стр,","));
  оДом:=Trim(TearStr(Стр,","));
  оКорпус:=Trim(TearStr(Стр,","));
  оКварт:=Trim(TearStr(Стр,","));

  Т.AddString("<ОбъемОборота Наим="""+EncodeXMLString(пИмя)+""""+?(аКПП<>""," КППЮЛ="""+Trim(аКПП)+""">",">"));
  Т.AddString("<АдрОрг>");
  Т.AddString("<КодСтраны>643</КодСтраны>");
  Т.AddString("<Индекс>"+Trim(СтрИндекс)+"</Индекс>");
  Т.AddString("<КодРегион>"+Trim(оКодРегиона)+"</КодРегион>");
  Т.AddString("<Район>"+EncodeXMLString(оРайон)+"</Район>");
  Т.AddString("<Город>"+EncodeXMLString(оГород)+"</Город>");
  Т.AddString("<НаселПункт />");
  Т.AddString("<Улица>"+EncodeXMLString(оУлица)+"</Улица>");
  Т.AddString("<Дом>"+EncodeXMLString(оДом)+"</Дом>");
  Т.AddString("<Корпус>"+EncodeXMLString(оКорпус)+"</Корпус>");
  Т.AddString("<Литера />");
  Т.AddString("<Кварт>"+EncodeXMLString(оКварт)+"</Кварт>");
  Т.AddString("</АдрОрг>");
  
  ТОсн.Sort("КодАП+,зПрИННКПП+");
  зКод0:="";
  БылиОшибки:=0;
  НомОборот:=1;
  НомПроизводитель:=1;
  ТОсн.Select();
  While ТОсн.Next() Do
    зКод:=ТОсн.КодАП;
    
    зДл0:=ТОсн.зДал0;
    зДл1:=ТОсн.зДал1;
    зДл2:=ТОсн.зДал2;
    зДл3:=ТОсн.зДал3;
    зДл4:=ТОсн.зДал4;
    зДл5:=ТОсн.зДал5;
    зДл6:=ТОсн.зДал6;
    зДл8:=ТОсн.зДал8;
    зДл9:=ТОсн.зДал9;
    зДл10:=ТОсн.зДал10;
    зДл11:=ТОсн.зДал11;

    If Round(зДл0+зДл1+зДл2+зДл3+зДл4+зДл5+зДл6+зДл8+зДл9+зДл10+зДл11,6)=0 Then
      Continue;
    EndIf;
    
    аНом:=ТПроизводители.FindAndGoto(ТОсн.зПрИННКПП,,"зПрИННКПП");
    If аНом=0 Then
      Message("Не найден производитель с ID: "+ТОсн.зПрИННКПП+" для магазина %LINK%, обратитесь к разработчику!","!",зМагазин2);
      Exit 0;
    EndIf;  
    зПр:=ТПроизводители.зПр;
    пПроизводитель:=зПр;
    Form.StatusText("Выгрузка "+зПр+" "+зКод+"...");

    пИНН:=Replace(зПр.ИНН,"\","/");
    пКПП:="";
    If Pos("/",пИНН)>0 Then
      пКПП:=пИНН;
      пИНН:=Left(TearStr(пКПП,"/"),10);
      пКПП:=Left(пКПП,9);
    EndIf;
        
    If зКод0<>зКод Then
      If НомОборот>1 Then
        Т.AddString("</Оборот>");
      EndIf;
      Т.AddString("<Оборот ПN="""+НомОборот+""" П000000000003="""+Trim(зКод)+""">");
      НомОборот:=НомОборот+1;
      НомПроизводитель:=1;
      зКод0:=зКод;
    EndIf;
    
    //Теги Возврат должны следовать за тегами Поставка
    зКод:=ТОсн.КодАП;
    Т.AddString("<СведПроизвИмпортер ПN="""+НомПроизводитель+""" ИдПроизвИмп="""+ТПроизводители.CurLine+""">");
    зПост:=0;
    НомПост:=1;
    ИдПост:=0;
    ТВозвраты:=Tab.Create("зДата,зДок,зДал");
    аСтроки.Select("зПоставщик+,зДата+,зДок+","(зМагазин=зМагазин2)And(:КодАП=зКод)And(:зПрИННКПП=ТОсн.зПрИННКПП)");
    While аСтроки.Next() Do
      зПоставщик:=аСтроки.зПоставщик;
      If зПост<>зПоставщик Then
        If зПост<>0 Then
          ТВозвраты.Select();
          While ТВозвраты.Next() Do
            зДок:=ТВозвраты.зДок;
            пГТД:="";//TODO
            Т.AddString("<Возврат П000000000013="""+FormatDate(ТВозвраты.зДата,"dd.mm.YYYY")+""" П000000000014="""+зДок.DocNum+""" П000000000015="""+пГТД+""" П000000000016="""+
              FormatNumber(Abs(ТВозвраты.зДал),0,"",5)+"""></Возврат>");
          EndDo;
          Т.AddString("</Поставщик>");
          ТВозвраты:=Tab.Create("зДата,зДок,зДал");
        EndIf;
        аНом:=ТПоставщики.FindAndGoto(зПоставщик,,"зПоставщик");
        If аНом=0 Then
          Message("Не найден поставщик: "+зПоставщик+", обратитесь к разработчику!","!");
          Exit 0;
        EndIf;
        зПост:=зПоставщик;
        ИдПост:=ТПроизводители.Size()+ТПоставщики.CurLine;
        Т.AddString("<Поставщик ПN="""+НомПост+""" ИдПоставщика="""+ИдПост+""">");
        НомПост:=НомПост+1;
      EndIf;
      If аСтроки.зДал<0 Then
        ТВозвраты.AddLine("зДата,зДок,зДал",аСтроки.зДата,аСтроки.зДок,аСтроки.зДал);
      Else
        зДок:=аСтроки.зДок;
        пГТД:="";//TODO
        Т.AddString("<Поставка П000000000013="""+FormatDate(аСтроки.зДата,"dd.mm.YYYY")+""" П000000000014="""+зДок.DocNum+""" П000000000015="""+пГТД+""" П000000000016="""+
          FormatNumber(Abs(аСтроки.зДал),0,"",5)+"""></Поставка>");
      EndIf;
    EndDo;
    If зПост<>0 Then
      ТВозвраты.Select();
      While ТВозвраты.Next() Do
        зДок:=ТВозвраты.зДок;
        пГТД:="";//TODO
        Т.AddString("<Возврат П000000000013="""+FormatDate(ТВозвраты.зДата,"dd.mm.YYYY")+""" П000000000014="""+зДок.DocNum+""" П000000000015="""+пГТД+""" П000000000016="""+
          FormatNumber(Abs(ТВозвраты.зДал),0,"",5)+"""></Возврат>");
      EndDo;
      Т.AddString("</Поставщик>");
    EndIf;
      
    //                                                          Декл. 8                 Декл. 7
    //Остаток на начало отчетного периода                       П100000000006           П100000000006
    //Поступление (закупки) от организаций - производителей     П100000000007           П100000000007
    //Поступление (закупки) от организаций оптовой торговли     П100000000008           П100000000008
    //Поступление (закупки) по импорту                          П100000000009
    //Поступление (закупки) итого                               П100000000010           П100000000009
    //Поступление (возврат от покупателей)                      П100000000011           П100000000010
    //Прочие поступления                                        П100000000012           П100000000011
    //Поступление (перемещение внутри одной организации)        П100000000013           П100000000012
    //Поступление всего                                         П100000000014           П100000000013
    //Расход (объем розничной продажи)                          П100000000015           П100000000014
    //Прочий расход                                             П100000000016           П100000000015
    //Возврат поставщику                                        П100000000017           П100000000016
    //Расход (перемещение внутри одной организации)             П100000000018           П100000000017
    //Расход всего                                              П100000000019           П100000000018
    //Остаток на конец отчетного периода                        П100000000020           П100000000019
    //В том числе остаток продукции, маркированной                                      П100000000020
    //  федеральными специальными и (или) акцизными марками, 
    //  требования к которым утрачивают силу
    If ТипНом=8 Then
      Т.AddString("<Движение ПN=""1"" П100000000006="""+FormatNumber(зДл0,0,"",5)+""""+
        " П100000000007="""+FormatNumber(зДл1,0,"",5)+""""+
        " П100000000008="""+FormatNumber(зДл2,0,"",5)+""""+
        " П100000000009="""+FormatNumber(0,0,"",5)+""""+
        " П100000000010="""+FormatNumber(зДл1+зДл2,0,"",5)+""""+
        " П100000000011="""+FormatNumber(зДл3,0,"",5)+""""+
        " П100000000012="""+FormatNumber(зДл5,0,"",5)+""""+
        " П100000000013="""+FormatNumber(зДл4,0,"",5)+""""+
        " П100000000014="""+FormatNumber(зДл1+зДл2+зДл3+зДл4+зДл5,0,"",5)+""""+
        " П100000000015="""+FormatNumber(зДл6,0,"",5)+""""+
        " П100000000016="""+FormatNumber(зДл10,0,"",5)+""""+
        " П100000000017="""+FormatNumber(зДл8,0,"",5)+""""+
        " П100000000018="""+FormatNumber(зДл9,0,"",5)+""""+
        " П100000000019="""+FormatNumber(зДл6+зДл8+зДл9+зДл10,0,"",5)+""""+
        " П100000000020="""+FormatNumber(зДл11,0,"",5)+"""></Движение>");
    Else
      Т.AddString("<Движение ПN=""1"" П100000000006="""+FormatNumber(зДл0,0,"",5)+""""+
        " П100000000007="""+FormatNumber(зДл1,0,"",5)+""""+
        " П100000000008="""+FormatNumber(зДл2,0,"",5)+""""+
        " П100000000009="""+FormatNumber(зДл1+зДл2,0,"",5)+""""+
        " П100000000010="""+FormatNumber(зДл3,0,"",5)+""""+
        " П100000000011="""+FormatNumber(зДл5,0,"",5)+""""+
        " П100000000012="""+FormatNumber(зДл4,0,"",5)+""""+
        " П100000000013="""+FormatNumber(зДл1+зДл2+зДл3+зДл4+зДл5,0,"",5)+""""+
        " П100000000014="""+FormatNumber(зДл6,0,"",5)+""""+
        " П100000000015="""+FormatNumber(зДл10,0,"",5)+""""+
        " П100000000016="""+FormatNumber(зДл8,0,"",5)+""""+
        " П100000000017="""+FormatNumber(зДл9,0,"",5)+""""+
        " П100000000018="""+FormatNumber(зДл6+зДл8+зДл9+зДл10,0,"",5)+""""+
        " П100000000019="""+FormatNumber(зДл11,0,"",5)+""""+
        " П100000000020="""+FormatNumber(0,0,"",5)+"""></Движение>");
    EndIf;
    НомПроизводитель:=НомПроизводитель+1;
    Т.AddString("</СведПроизвИмпортер>");
  EndDo;
  If НомОборот>1 Then
    Т.AddString("</Оборот>");
  EndIf;
  Т.AddString("</ОбъемОборота>");
  
  Exit 1-БылиОшибки;
EndFunction


Function РазделитьПечФорму(Фл,ИмяСекции,ФлНеВыводить=0)
  If Фл>0 Then
    глТекСтрока:=глТекСтрока+Фл;
    If глТекСтрока>=Form.оСтрСтр.Value Then
      глТекСтрока:=0;
      глТекСтраница:=глТекСтраница+1;
      глВсегоСтраниц:=глВсегоСтраниц+1;
      If (глТекСтраница>=Form.оСтраниц.Value)And(Form.оСтраниц.Value>0) Then
        глТекСтраница:=0;
        
        ТПечДата.Printing.ScaleMode:=3;
        ТПечДата.Printing.Fields.Left:=0.5;
        ТПечДата.Printing.Fields.Right:=1.5;
        ТПечДата.Printing.Fields.Up:=0.5;
        ТПечДата.Printing.Fields.Down:=0.5;
        глПечатнаяФормаОтчета(ТПечДата,0,"Форма "+ТипНом+", данные",1);
        
        //Новая таблица
        ТПечДата:=Table.Create();
        ТПечДата.SetSourceName("Ф3_"+ТипНом);
      Else
        ТПечДата.PageBreaks.Add();
      EndIf;
      пСтраница:="Стр. "+(глВсегоСтраниц);
      //пРаздел:="Раздел "+НомерРаздела;
      //ТПечДата.CopyByX("v"+ИмяСекции+"_1|h"+ИмяСекции,1);
      ТПечДата.CopyByX("v"+ИмяСекции+"|h"+ИмяСекции,1);
    EndIf;
  EndIf;
  
  If (Фл=0)And(глТекСтрока+глТекСтраница>0) Then
    If флБылиОшибки=0 Then
      пТипИтого:="ИТОГО";
      пДал0:=FormatNumber(ВсегоДал0,0,"",5);
      пДал1:=FormatNumber(ВсегоДал1,0,"",5);
      пДал2:=FormatNumber(ВсегоДал2,0,"",5);
      пДалИ0:=FormatNumber(ВсегоДал1+ВсегоДал2,0,"",5);
      пДал3:=FormatNumber(ВсегоДал3,0,"",5);
      пДал4:=FormatNumber(ВсегоДал4,0,"",5);
      пДалПр:=FormatNumber(ВсегоДал1+ВсегоДал2+ВсегоДал3+ВсегоДал4+ВсегоДал5,0,"",5);
      пДал5:=FormatNumber(ВсегоДал5,0,"",5);
      пДал6:=FormatNumber(ВсегоДал6,0,"",5);
      пДал8:=FormatNumber(ВсегоДал8,0,"",5);
      пДал9:=FormatNumber(ВсегоДал9,0,"",5);
      пДал10:=FormatNumber(ВсегоДал10,0,"",5);
      пДалРс:=FormatNumber(ВсегоДал6+ВсегоДал8+ВсегоДал9+ВсегоДал10,0,"",5);
      пДал11:=FormatNumber(ВсегоДал11,0,"",5);
      пДл:=FormatNumber(ВсегоДал0,0,"",5);
      
      ТПечДата.CopyByX("v"+ИмяСекции+"_5|h"+ИмяСекции,1);
      //ТПечДата.Options.FixedLine:=ТПечДата.Height();
      ТПечДата.Printing.ScaleMode:=3;
      ТПечДата.Printing.Fields.Left:=0.5;
      ТПечДата.Printing.Fields.Right:=1.5;
      ТПечДата.Printing.Fields.Up:=0.5;
      ТПечДата.Printing.Fields.Down:=0.5;
      If ФлНеВыводить=0 Then
        глПечатнаяФормаОтчета(ТПечДата,0,"Форма "+ТипНом+", данные",1);
      EndIf;
    EndIf;
  EndIf;
EndFunction

Function ПечФормаОстаткиОдинМагазин(ТОсн,зМагазин)
  оЮЛ:=Form.оЮЛ.Value;
  тАПКоды:=Form.тАПКоды.Value;

  пИмя:=Trim(оЮЛ.Контрагент.ПолнНаименование)+", "+Trim(зМагазин);
  аКПП:=Replace(оЮЛ.ИНН,"\","/");
  аИНН:=TearStr(аКПП,"/");
  If зМагазин.КПП<>"" Then
    аКПП:=зМагазин.КПП;
  EndIf;
  пРаздел:="Сведения по обособленному подразделению (с указанием ИНН, КПП и адреса) / по объекту торговли индивидуального предпринимателя (с указанием адреса):"+_NEWLINE+
    "Магазин "+зМагазин+?(аКПП<>""," ИНН/КПП: "+аИНН+"/"+аКПП)+" Адрес: "+зМагазин.ФактАдрес;
  ТПечДата.CopyByX("v1_4|h1",1);
  
  ТОсн.Sort("КодАП+,зПрИННКПП+");
  аДл0:=0;аДл1:=0;аДл2:=0;аДл3:=0;аДл4:=0;аДл5:=0;аДл6:=0;аДл8:=0;аДл9:=0;аДл10:=0;аДл11:=0;
  бДл0:=0;бДл1:=0;бДл2:=0;бДл3:=0;бДл4:=0;бДл5:=0;бДл6:=0;бДл8:=0;бДл9:=0;бДл10:=0;бДл11:=0;
  зКод0:="";
  ТОсн.Select();
  While ТОсн.Next() Do
    зКод:=ТОсн.КодАП;
    If Round(ТОсн.зДал0+ТОсн.зДал1+ТОсн.зДал2+ТОсн.зДал3+ТОсн.зДал4+ТОсн.зДал5+ТОсн.зДал6+ТОсн.зДал8+ТОсн.зДал9+ТОсн.зДал10+ТОсн.зДал11,6)=0 Then
      Continue;
    EndIf;
    
    аНом:=ТПроизводители.FindAndGoto(ТОсн.зПрИННКПП,,"зПрИННКПП");
    If аНом=0 Then
      Message("Не найден производитель с ID: "+ТОсн.зПрИННКПП+", обратитесь к разработчику!","!");
      Exit 0;
    EndIf;  
    зПр:=ТПроизводители.зПр;

    If зКод0<>зКод Then
      If (зКод0<>"")And(Round(аДл0+аДл1+аДл2+аДл3+аДл4+аДл5+аДл6+аДл8+аДл9+аДл10+аДл11,6)<>0) Then
        пТипИтого:="Итого по коду "+зКод0;
        пДал0:=FormatNumber(аДл0,0,"",5);
        пДал1:=FormatNumber(аДл1,0,"",5);
        пДал2:=FormatNumber(аДл2,0,"",5);
        пДалИ0:=FormatNumber(аДл1+аДл2,0,"",5);
        пДал3:=FormatNumber(аДл3,0,"",5);
        пДал4:=FormatNumber(аДл4,0,"",5);
        пДалПр:=FormatNumber(аДл1+аДл2+аДл3+аДл4+аДл5,0,"",5);
        пДал5:=FormatNumber(аДл5,0,"",5);
        пДал6:=FormatNumber(аДл6,0,"",5);
        пДал8:=FormatNumber(аДл8,0,"",5);
        пДал9:=FormatNumber(аДл9,0,"",5);
        пДал10:=FormatNumber(аДл10,0,"",5);
        пДалРс:=FormatNumber(аДл6+аДл8+аДл9+аДл10,0,"",5);
        пДал11:=FormatNumber(аДл11,0,"",5);
        
        ТПечДата.CopyByX("v1_5|h1",1);
        РазделитьПечФорму(1,1);
        
        бДл0:=бДл0+аДл0;
        бДл1:=бДл1+аДл1;
        бДл2:=бДл2+аДл2;
        бДл3:=бДл3+аДл3;
        бДл4:=бДл4+аДл4;
        бДл5:=бДл5+аДл5;
        бДл6:=бДл6+аДл6;
        бДл8:=бДл8+аДл8;
        бДл9:=бДл9+аДл9;
        бДл10:=бДл10+аДл10;
        бДл11:=бДл11+аДл11;
      EndIf;
    
      зКод0:=зКод;
      аДл0:=0;аДл1:=0;аДл2:=0;аДл3:=0;аДл4:=0;аДл5:=0;аДл6:=0;аДл8:=0;аДл9:=0;аДл10:=0;аДл11:=0;
    EndIf;
    
    зДал0:=Round(ТОсн.зДал0,5);
    зДал1:=Round(ТОсн.зДал1,5);
    зДал2:=Round(ТОсн.зДал2,5);
    зДал3:=Round(ТОсн.зДал3,5);
    зДал4:=Round(ТОсн.зДал4,5);
    зДал5:=Round(ТОсн.зДал5,5);
    зДал6:=Round(ТОсн.зДал6,5);
    зДал8:=Round(ТОсн.зДал8,5);
    зДал9:=Round(ТОсн.зДал9,5);
    зДал10:=Round(ТОсн.зДал10,5);
    зДал11:=Round(ТОсн.зДал11,5);
    
    If Round(зДал0+зДал1+зДал2+зДал3+зДал4+зДал5+зДал6+зДал8+зДал9+зДал10+зДал11,6)=0 Then
      Continue;
    EndIf;
          
    аДл0:=аДл0+зДал0;
    аДл1:=аДл1+зДал1;
    аДл2:=аДл2+зДал2;
    аДл3:=аДл3+зДал3;
    аДл4:=аДл4+зДал4;
    аДл5:=аДл5+зДал5;
    аДл6:=аДл6+зДал6;
    аДл8:=аДл8+зДал8;
    аДл9:=аДл9+зДал9;
    аДл10:=аДл10+зДал10;
    аДл11:=аДл11+зДал11;
    
    пДал0:=FormatNumber(зДал0,0,"",5);
    пДал1:=FormatNumber(зДал1,0,"",5);
    пДал2:=FormatNumber(зДал2,0,"",5);
    пДалИ0:=FormatNumber(зДал1+зДал2,0,"",5);
    пДал3:=FormatNumber(зДал3,0,"",5);
    пДал4:=FormatNumber(зДал4,0,"",5);
    пДалПр:=FormatNumber(зДал1+зДал2+зДал3+зДал4+зДал5,0,"",5);
    пДал5:=FormatNumber(зДал5,0,"",5);
    пДал6:=FormatNumber(зДал6,0,"",5);
    пДал8:=FormatNumber(зДал8,0,"",5);
    пДал9:=FormatNumber(зДал9,0,"",5);
    пДал10:=FormatNumber(зДал10,0,"",5);
    пДалРс:=FormatNumber(зДал6+зДал8+зДал9+зДал10,0,"",5);
    пДал11:=FormatNumber(зДал11,0,"",5);

    СквНом:=СквНом+1;
    пН:=СквНом;
    If тАПКоды.FindAndGoto(""+зКод,,"КодАП")=0 Then
      Message("Внимание! Коду "+зКод+" не сопоставлен текстовый вид в классификаторе кодом АП! Создание отчета остановлено!","!");
      Exit 0;
    EndIf;
    пВид:=тАПКоды.Описание;
    пКод:=зКод;
    пПр:=Trim(зПр.ПолнНаименование);
    пИННПр:=Trim(Replace(зПр.ИНН,"\","/"));
    пКПППр:="";
    If Pos("/",пИННПр)>0 Then
      пКПППр:=пИННПр;
      пИННПр:=Left(TearStr(пКПППр,"/"),10);
      пКПППр:=Left(пКПППр,9);
    EndIf;
    
    ТПечДата.CopyByX("v1_3|h1",1);
    РазделитьПечФорму(1,1);
  EndDo;//По кодам ТМЦ

  
  If зКод<>"" Then
    If Round(аДл0+аДл1+аДл2+аДл3+аДл4+аДл5+аДл6+аДл8+аДл9+аДл10+аДл11,6)<>0 Then
      пТипИтого:="Итого по коду "+зКод0;
      пДал0:=FormatNumber(аДл0,0,"",5);
      пДал1:=FormatNumber(аДл1,0,"",5);
      пДал2:=FormatNumber(аДл2,0,"",5);
      пДалИ0:=FormatNumber(аДл1+аДл2,0,"",5);
      пДал3:=FormatNumber(аДл3,0,"",5);
      пДал4:=FormatNumber(аДл4,0,"",5);
      пДалПр:=FormatNumber(аДл1+аДл2+аДл3+аДл4+аДл5,0,"",5);
      пДал5:=FormatNumber(аДл5,0,"",5);
      пДал6:=FormatNumber(аДл6,0,"",5);
      пДал8:=FormatNumber(аДл8,0,"",5);
      пДал9:=FormatNumber(аДл9,0,"",5);
      пДал10:=FormatNumber(аДл10,0,"",5);
      пДалРс:=FormatNumber(аДл6+аДл8+аДл9+аДл10,0,"",5);
      пДал11:=FormatNumber(аДл11,0,"",5);
      
      ТПечДата.CopyByX("v1_5|h1",1);
      РазделитьПечФорму(1,1);
      
      бДл0:=бДл0+аДл0;
      бДл1:=бДл1+аДл1;
      бДл2:=бДл2+аДл2;
      бДл3:=бДл3+аДл3;
      бДл4:=бДл4+аДл4;
      бДл5:=бДл5+аДл5;
      бДл6:=бДл6+аДл6;
      бДл8:=бДл8+аДл8;
      бДл9:=бДл9+аДл9;
      бДл10:=бДл10+аДл10;
      бДл11:=бДл11+аДл11;
    EndIf;
  EndIf;
  
  ВсегоДал0:=ВсегоДал0+бДл0;
  ВсегоДал1:=ВсегоДал1+бДл1;
  ВсегоДал2:=ВсегоДал2+бДл2;
  ВсегоДал3:=ВсегоДал3+бДл3;
  ВсегоДал4:=ВсегоДал4+бДл4;
  ВсегоДал5:=ВсегоДал5+бДл5;
  ВсегоДал6:=ВсегоДал6+бДл6;
  ВсегоДал8:=ВсегоДал8+бДл8;
  ВсегоДал9:=ВсегоДал9+бДл9;
  ВсегоДал10:=ВсегоДал10+бДл10;
  ВсегоДал11:=ВсегоДал11+бДл11;
    
  пТипИтого:="ИТОГО по обособленному подразделению";
  пДал0:=FormatNumber(бДл0,0,"",5);
  пДал1:=FormatNumber(бДл1,0,"",5);
  пДал2:=FormatNumber(бДл2,0,"",5);
  пДалИ0:=FormatNumber(бДл1+бДл2,0,"",5);
  пДал3:=FormatNumber(бДл3,0,"",5);
  пДал4:=FormatNumber(бДл4,0,"",5);
  пДалПр:=FormatNumber(бДл1+бДл2+бДл3+бДл4+бДл5,0,"",5);
  пДал5:=FormatNumber(бДл5,0,"",5);
  пДал6:=FormatNumber(бДл6,0,"",5);
  пДал8:=FormatNumber(бДл8,0,"",5);
  пДал9:=FormatNumber(бДл9,0,"",5);
  пДал10:=FormatNumber(бДл10,0,"",5);
  пДалРс:=FormatNumber(бДл6+бДл8+бДл9+бДл10,0,"",5);
  пДал11:=FormatNumber(бДл11,0,"",5);
  ТПечДата.CopyByX("v1_5|h1",1);
  РазделитьПечФорму(1,1);
  Exit 1;
EndFunction

Function ПечФормаДвиженияОдинМагазин(зМагазин,ФлЗакуп)
  оЮЛ:=Form.оЮЛ.Value;
  тАПКоды:=Form.тАПКоды.Value;

  пИмя:=Trim(оЮЛ.Контрагент.ПолнНаименование)+", "+Trim(зМагазин);
  аКПП:=Replace(оЮЛ.ИНН,"\","/");
  аИНН:=TearStr(аКПП,"/");
  If зМагазин.КПП<>"" Then
    аКПП:=зМагазин.КПП;
  EndIf;
  пРаздел:="Сведения по обособленному подразделению (с указанием ИНН, КПП и адреса) / по объекту торговли индивидуального предпринимателя (с указанием адреса):"+_NEWLINE+
    "Магазин "+зМагазин+?(аКПП<>""," ИНН/КПП: "+аИНН+"/"+аКПП)+" Адрес: "+зМагазин.ФактАдрес;
  ТПечДата.CopyByX("v2_4|h2",1);
  
  
  iNum:=0;
  iTotal:=аСтроки.Size("(:зМагазин=зМагазин)And(зДал"+?(ФлЗакуп,">","<")+"0)");
  аСтроки.Select("КодАП+,зПрИННКПП+,зПоставщик+,зДата+,зДок+","(:зМагазин=зМагазин)And(зДал"+?(ФлЗакуп,">","<")+"0)");
  
  зПр:="";
  зКод:="";
  зДл0:=0;
  зДл1:=0;
  зК:=0;
  While аСтроки.Next() Do
    iNum:=iNum+1;
    if iNum%100=0 Then
      Form.StatusText("Выгрузка "+iNum+" из "+iTotal+"...");
    EndIf;  
    
    If зКод<>аСтроки.КодАП Then
      зПрИННКПП:=0;
      If (зКод<>"")And(зДл0<>0) Then
        пТипИтого:="Итого по коду "+зКод;
        пДл:=FormatNumber(зДл0,0,"",5);
        ТПечДата.CopyByX("v2_5|h2",1);
        РазделитьПечФорму(1,2);
        зДл1:=зДл1+зДл0;
        зДл0:=0;
      EndIf;
      зКод:=аСтроки.КодАП;
    EndIf;  

    пКод:=зКод;
        
    If ТПроизводители.FindAndGoto(аСтроки.зПрИННКПП,,"зПрИННКПП")=0 Then
      Message("Внутренняя ошибка по производителю: "+аСтроки.зПрИННКПП+"!","!!");
      Exit 0;
    EndIf;
    зПр:=ТПроизводители.зПр;
    пПр:=зПр.ПолнНаименование;
    пКПППр:=Trim(Replace(зПр.ИНН,"\","/"));
    пИННПр:=TearStr(пКПППр,"/");
    
    If ТПоставщики.FindAndGoto(аСтроки.зПоставщик,,"зПоставщик")=0 Then
      Message("Не найден поставщик: "+аСтроки.зПоставщик+", обратитесь к разработчику!","!");
      Exit 0;
    EndIf;
    зК:=ТПоставщики.зПоставщик;
    If зК.DBName()="кнтКонтрагенты" Then
      пК:=зК.ПолнНаименование;
      пКПП:=Trim(Replace(зК.ИНН,"\","/"));
      пИНН:=TearStr(пКПП,"/");
    Else
      пК:=оЮЛ.Контрагент.ПолнНаименование;
      пКПП:=Trim(Replace(зК.ИНН,"\","/"));
      пИНН:=TearStr(пКПП,"/");
      пКПП:=?(зМагазин.КПП<>"",зМагазин.КПП,пКПП);
    EndIf;
      
    //Документы
    зДок:=аСтроки.зДок;
    зДл:=Abs(аСтроки.зДал);
    зДл0:=зДл0+Round(зДл,5);
    
    //TODO
    пВидДеятельсности:="";
    пНоменГТД:="";
    СквНом:=СквНом+1;
    пН:=СквНом;
              
    пДата:=ДатаДокумента(зДок);
    пНомер:=НомерДокумента(зДок);
    пДл:=FormatNumber(зДл,0,"",5);
    If тАПКоды.FindAndGoto(""+зКод,,"КодАП")=0 Then
      Message("Внимание! Коду "+зКод+" не сопоставлен текстовый вид в классификаторе кодом АП! Создание отчета остановлено!","!");
      Exit 0;
    EndIf;
    пВид:=тАПКоды.Описание;
              
    ТПечДата.CopyByX("v2_3|h2",1);
    РазделитьПечФорму(1,2);
  EndDo;
  If зДл0<>0 Then
    пТипИтого:="Итого по коду "+зКод;
    пДл:=FormatNumber(зДл0,0,"",5);
    ТПечДата.CopyByX("v2_5|h2",1);
    РазделитьПечФорму(1,2);
    зДл1:=зДл1+зДл0;
  EndIf;
  
  ВсегоДал0:=ВсегоДал0+зДл1;
  пТипИтого:="ИТОГО по обособленному подразделению";
  пДл:=FormatNumber(зДл1,0,"",5);
  ТПечДата.CopyByX("v2_5|h2",1);
  РазделитьПечФорму(1,2);
  Exit 1;
EndFunction


Function ЗагрузитьСохраненныеОстатки(зМагазин,Дата,ТипНом,ФлПоказыватьОшибки=1)
  Тб:=Tab.Create("зАПКод,зПрКод,зДл,зПр,зПрИННКПП");
  Путь2:="Temp\Декларации\"+зМагазин.Code+"\";
  If Not File.CreateDirectory(Путь2) Then
    Message("Загрузка сохраненных остатков: невозможно создать папку "+Путь2+"!","!");
    Exit Тб;
  EndIf;
  Дата:=BegOfQuarter(Дата);
  Имя:=Путь2+"Декларация_"+ТипНом+"_"+Дата+".txt";
  Try
    Тб2:=ObjectFromFile(Имя);
  Except
    Message("Загрузка сохраненных остатков: невозможно прочитать сохраненные остатки для магазина %LINK%!","!",зМагазин);
    Message("  Для магазина будут использованы реальные начальные (конечные) остатки для текущего периода!","!");
    Exit Тб;  
  EndTry;
  Тб2.Sort("зАПКод,зПрКод");
  
  //Загрузка поставщиков из их кодов
  Тб2.AddColumn("зПр");
  Тб2.AddColumn("зПрИННКПП");

  //Оптимизация для ускорения загрузки
  cList:=List.Create();
  Тб2.CopyTo(cList,,,"зПрКод");
  If cList.Size()>0 Then
    bList:=Ref.кнтКонтрагенты.LoadEx(0,2,"ИНН,флИностранныйКонтрагент","->Code",cList);
  Else
    bList:=List.Create();
  EndIf;
  ТВрем:=Tab.Create("зКод,зПр,зПрИННКПП");
  bList.CopyTo(ТВрем,1,bList.Size(),"зПр");
  bList:=0;
  ТВрем.Select();
  While ТВрем.Next() Do
    ТВрем.зКод:=ТВрем.зПр.Code;
    ТВрем.зПрИННКПП:=?(ТВрем.зПр.флИностранныйКонтрагент=1,"!"+ТВрем.зПр.Code,Replace(ТВрем.зПр.ИНН,"\","/"));
  EndDo;
  ТВрем.Sort("зКод+");

  Тб2.Select();
  While Тб2.Next() Do
    If not ТВрем.FindAndGoto(Тб2.зПрКод,,"зКод",1) Then
      Message("В базе не найден поставщик с кодом "+Тб2.зПрКод+"!","!");
      Message("Загрузка сохраенных остатков для магазина %LINK% остановлена! Будут использованы реальные начальные остатки!","!",зМагазин);
      Exit Тб;  
    EndIf;
    Тб2.зПр:=ТВрем.зПр;
    Тб2.зПрИННКПП:=ТВрем.зПрИННКПП;
    If ТПроизводители.FindAndGoto(ТВрем.зПрИННКПП,,"зПрИННКПП")=0 Then
      ТПроизводители.AddLine("зПр,зПрИННКПП",ТВрем.зПр,ТВрем.зПрИННКПП);//TODO: AddLineSorted
    EndIf;  
  EndDo;
  Тб2.Sort("зАПКод,зПрИННКПП");  
  
  Exit Тб2;
EndFunction








Function OnExecute(СпУстановки)
  оЮЛ:=Form.оЮЛ.Value;
  оТипОтчета:=Form.оТипОтчета.Value.SelectedLine();
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оМг:=Form.оМг.Value;
  оСк:=Form.оСк.Value;
  оН:=Form.оН.Value;
  оП:=Form.оП.Value;
  оТелОрг:=Form.оТелОрг.Value;
  оПочтаОрг:=Form.оПочтаОрг.Value;
  ФлЗагружатьКонечныеОстатки:=Form.ФлЗагружатьКонечныеОстатки.Value;
  Form.кнРезультаты3.isDisabled:=1;
  
  If _OR(IsEmpty(оТелОрг),IsEmpty(оПочтаОрг)) Then
    Box("Отсутствуют контактные данные организации! Заполните телефон и e-mail и повторите попытку",Q_STOP);
    Exit;
  EndIf;
  
  If оЮЛ.Selected()=0 Then
    Box("Необходимо выбрать юридическое лицо!",Q_STOP);
    Exit;
  EndIf;
  
  ТипНом:=Number(Form.оТипОтчета.Value.Get(оТипОтчета));
  РезКаталог:="";
  If not SelectFolderDialog(РезКаталог,"Выберите каталог для выгрузки:") Then
    Exit;
  EndIf;
  Путь:=AddBackSlash(Trim(РезКаталог));
  ФлБылиОшибки:=0;
  
  ТЗ:="Period From НачДата to КонДата;
  |зЮЛ:=Storage.ОстаткиТМЦ.ЮрЛицо;
  |Condition(зЮЛ=оЮЛ);
  |ФлАлко:=Storage.ОстаткиТМЦ.Номенклатура.флАлкогольнаяПродукция;
  |Condition(ФлАлко=1);
  |зН:=Storage.ОстаткиТМЦ.Номенклатура;
  |зСк:=Storage.ОстаткиТМЦ.Склад;
  |Condition(зСк IN оСк.Get(1));
  |Condition(зСк NOT IN оСк.Get(2));
  |зНТип:=Storage.ОстаткиТМЦ.Номенклатура.ЕГАИСКодАП;
  |зК0Пр:=Income(Количество);
  |зК0Рс:=Expense(Количество);
  |Condition(зН IN оН.Get(1));
  |Condition(зН NOT IN оН.Get(2));
  |Group зНТип,зН;";
  
  З:=Query.Create();
  З.Execute(ТЗ,2);
  
  
  While З.Next(1) Do
    If Number(Trim(З.зНТип))>0 Then
      Continue;
    EndIf;
    While З.Next(2) Do
      Message("Для ТМЦ %LINK% ("+З.зН.Code+") неверно указан или не указан код АП ЕГАИС!","!!",З.зН);
    EndDo;
  EndDo;

  оЛицензия:=ТипНом=7;
  ГлобИД:=1;
  
  ТЗ:="Period From НачДата to КонДата;
  |зЮЛ:=Storage.ОстаткиТМЦ.ЮрЛицо;
  |Condition(зЮЛ=оЮЛ);
  |ФлАлко:=Storage.ОстаткиТМЦ.Номенклатура.флАлкогольнаяПродукция;
  |Condition(ФлАлко=1);  
  |зН:=Storage.ОстаткиТМЦ.Номенклатура;
  |зСк:=Storage.ОстаткиТМЦ.Склад;
  |Condition(зСк IN оСк.Get(1));
  |Condition(зСк NOT IN оСк.Get(2));
  |зМагазин:=Storage.ОстаткиТМЦ.Склад.Магазин;
  |Condition(зМагазин IN оМг.Get(1));
  |Condition(зМагазин NOT IN оМг.Get(2));
  |зПартия:=Storage.ОстаткиТМЦ.Партия;
  |зМарки:=Storage.ОстаткиТМЦ.Партия.флМарочныйУчет;
  |Condition(зМарки="+?(ТипНом=7,"1","0")+");
  |зК0НО:=BegTotals(Количество);
  |зК0Пр:=Income(Количество);
  |зК0Рс:=Expense(Количество);
  |Condition(зН IN оН.Get(1));
  |Condition(зН NOT IN оН.Get(2));"+
  ?(Form.оОдинМагазин.Value.Selected()<>0,"Group зЮЛ,зН,зПартия;","Group зМагазин,зН,зПартия;");
  
  З2:=Query.Create();
  З2.Execute(ТЗ,2);
    
  ТЛицЮЛ:=ПолучитьТаблицуЛицензий(оЮЛ.Контрагент,НачДата,КонДата,ГлобИД);
  If ТЛицЮЛ.Size()=0 Then
    Message("ВНИМАНИЕ! У юр. лица отсутствуют алкогольные лицензии!","I");
  EndIf;
  If IsEmpty(ТЛицЮЛ) Then
    ТЛицЮЛ:=СоздатьТаблицуЛицензий();
  EndIf;
  
  
//Начало Работы//Начало Работы//Начало Работы//Начало Работы//Начало Работы//Начало Работы//Начало Работы//Начало Работы//Начало Работы
//Начало Работы//Начало Работы//Начало Работы//Начало Работы//Начало Работы//Начало Работы//Начало Работы//Начало Работы//Начало Работы
//Начало Работы//Начало Работы//Начало Работы//Начало Работы//Начало Работы//Начало Работы//Начало Работы//Начало Работы//Начало Работы
  
  З.First();
  флБылиОшибки:=0;
  СквНом:=0;
  
  Form.StatusText("Подготовка к запросу...");
  
  КонДата2:=BegOfDay(КонДата)+1;
  НачДата2:=BegOfDay(НачДата);
  аСтроки:=TempDB.Create("зДал:Number.20.7,зН:Ref.тмцНоменклатура,зПартия:Ref.тмцПартииТМЦ,зМагазин:DB,КодАП:STRING.10,зПр:DB,зПрИННКПП:STRING.20,зПоставщик:DB,зТип:Number.2,зДок:DOC,зДата:Date");
  Form.StatusText("Выполнение запроса...");
  аСтроки.LoadFrom("Storage.ОстаткиТМЦ","Количество*?(@EXPENSE=0,1,-1)*Номенклатура.ОбъемЛитров/10->зДал,Номенклатура->зН,Склад.Магазин->зМагазин,Партия->зПартия,@LINK->зДок",
    "@DATE>=НачДата2","@Date<КонДата2","Партия.флМарочныйУчет="+?(ТипНом=7,"1","0"),"ЮрЛицо=оЮЛ","Склад IN оСк.Get(1)","Склад NOT IN оСк.Get(2)",
    "Склад.Магазин IN оМг.Get(1)","Склад.Магазин NOT IN оМг.Get(2)","Номенклатура IN оН.Get(1)","Номенклатура NOT IN оН.Get(2)","Номенклатура.флАлкогольнаяПродукция=1");
    
  If Form.оОдинМагазин.Value.Selected()<>0 Then
    аМагазин:=Form.оОдинМагазин.Value;
    аСтроки.Update("","аМагазин->зМагазин");
  EndIf;  
    
  Form.StatusText("Очистка таблицы запроса...");
  //Удаляем лишние документы
  аСтроки.Remove("not IsType(зДок,Doc.ПоступлениеТМЦ,Doc.Реализация,Doc.ВозвратПоставщику,Doc.ВозвратОтПокупателя,Doc.ПеремещениеТМЦ,Doc.РегистрацияТМЦ,Doc.Сторнирование,Doc.КомплектацияТовара)");
  //Удаляем неверные сторнирования из таблицы
  аСтроки.Update("","зДок..DOC.Сторнирование.ДокОснование->зДок",
    "(IsType(зДок,Doc.Сторнирование))And(зДок..DOC.Сторнирование.КодОперации=Enum.коСторнирование.СторнированиеВзаиморасчетов)"+
    "And(BegOfDay(зДок..DOC.Сторнирование.ДокОснование..Doc.ПоступлениеТМЦ.DocDate)>=НачДата)"+
    "And(BegOfDay(зДок..DOC.Сторнирование.ДокОснование..Doc.ПоступлениеТМЦ.DocDate)<=КонДата)And(зДок..DOC.Сторнирование.ДокОснование..Doc.ПоступлениеТМЦ.@Status>1)");
  аСтроки.Remove("IsType(зДок,Doc.Сторнирование)");
  
  If Form.оОдинМагазин.Value.Selected()<>0 Then
    //Удаляем перемещения, где Склад.Магазин в оМг и СкладПолучатель.Магазин в оМг
    аСтроки.Remove("(IsType(зДок,Doc.ПеремещениеТМЦ))And(зДок..Doc.ПеремещениеТМЦ.Склад.Магазин IN оМг.Get(1))And(зДок..Doc.ПеремещениеТМЦ.СкладПолучатель.Магазин IN оМг.Get(1))"+
      "And(зДок..Doc.ПеремещениеТМЦ.Склад.Магазин NOT IN оМг.Get(2))And(зДок..Doc.ПеремещениеТМЦ.СкладПолучатель.Магазин NOT IN оМг.Get(2))"+
      "And(зДок..Doc.ПеремещениеТМЦ.Склад IN оСк.Get(1))And(зДок..Doc.ПеремещениеТМЦ.Склад NOT IN оСк.Get(2))And(зДок..Doc.ПеремещениеТМЦ.СкладПолучатель IN оСк.Get(1))And(зДок..Doc.ПеремещениеТМЦ.СкладПолучатель NOT IN оСк.Get(2))");
  Else
    //Удаляем перемещения, где Склад.Магазин=СкладПолучатель.Магазин
    аСтроки.Remove("(IsType(зДок,Doc.ПеремещениеТМЦ))And(зДок..Doc.ПеремещениеТМЦ.Склад.Магазин=зДок..Doc.ПеремещениеТМЦ.СкладПолучатель.Магазин)And"+
      "(зДок..Doc.ПеремещениеТМЦ.Склад IN оСк.Get(1))And(зДок..Doc.ПеремещениеТМЦ.Склад NOT IN оСк.Get(2))And(зДок..Doc.ПеремещениеТМЦ.СкладПолучатель IN оСк.Get(1))And(зДок..Doc.ПеремещениеТМЦ.СкладПолучатель NOT IN оСк.Get(2))");
  EndIf;
  
  Form.StatusText("Подготовка возвратов...");
  //Отнимаем возвраты от покупателя (вычерки) от реализаций
  //Возврат считается вычерком, если он в одном и том же периоде, что и его реализация, и это не ВозвратСторнирование
  аСтроки.Update("","зДок..DOC.ВозвратОтПокупателя.ДокОснование->зДок",
    "(IsType(зДок,Doc.ВозвратОтПокупателя))And(зДок..DOC.ВозвратОтПокупателя.КодОперации<>Enum.коВозвратОтПокупателя.ВозвратСторнирование)"+
    "And(BegOfDay(зДок..DOC.ВозвратОтПокупателя.ДокОснование..Doc.Реализация.DocDate)>=НачДата)"+
    "And(BegOfDay(зДок..DOC.ВозвратОтПокупателя.ДокОснование..Doc.Реализация.DocDate)<=КонДата)And(зДок..DOC.ВозвратОтПокупателя.ДокОснование..Doc.Реализация.@Status>1)");
        
  Form.StatusText("Заполнение контрагентов и удаление лишних строк...");
  //Заполняем зПоставщик
  аСтроки.Update("Doc.Реализация:зДок","Контрагент->зПоставщик,DocDate->зДата");
  аСтроки.Update("Doc.ВозвратПоставщику:зДок","Контрагент->зПоставщик,DocDate->зДата");
  аСтроки.Update("Doc.ВозвратОтПокупателя:зДок","Контрагент->зПоставщик,DocDate->зДата");
  аСтроки.Update("Doc.ПоступлениеТМЦ:зДок","Контрагент->зПоставщик,DocDate->зДата");
  аСтроки.Update("Doc.ПеремещениеТМЦ:зДок","Магазин->зПоставщик,DocDate->зДата");
  аСтроки.Update("Doc.РегистрацияТМЦ:зДок","Магазин->зПоставщик,DocDate->зДата");
  аСтроки.Update("Doc.КомплектацияТовара:зДок","Магазин.ДоговорРозничногоПокупателя.@Parent->зПоставщик,DocDate->зДата");
    
  //Заполняем КодАП
  Form.StatusText("Заполнение кодов АП...");
  аСтроки.Update("","зН.ЕГАИСКодАП->КодАП");
  аСтроки.Update("","зПартия.ЕГАИСКодАП->КодАП","Trim(зПартия.ЕГАИСКодАП)<>""""");
  
  аСтроки.Select("","КодАП=""""");
  While аСтроки.Next() Do
    Message("Для номенклатуры %LINK% не указан код алкогольной продукции!","!",аСтроки.Get("зН"));
    флБылиОшибки:=1;
  EndDo;
  
  Form.StatusText("Проверка партий и заполнение производителей...");
  //Выводим все документы без партий
  If аСтроки.Size("(isEmpty(зПартия))And(зДал<>0)")>0 Then
    аСтроки.Group("зПартия,зН,зДок","зДал");
    аСтроки.Select("","(isEmpty(зПартия))And(зДал<>0)");
    While аСтроки.Next() Do
      Message("Для документа %LINK% для номенклатуры %LINK% ("+аСтроки.Get("зН").Code+") не указана партия ТМЦ!","!",аСтроки.Get("зДок"),аСтроки.Get("зН"));
      флБылиОшибки:=1;
    EndDo;
    Exit;
  EndIf;
    
  //Заполняем зПр
  //аСтроки.Update("","зН.сертПроизводитель->зПр");
  аСтроки.Update("","зПартия.Производитель->зПр");//,"not isEmpty(зПартия.Производитель)"
  аСтроки.Select("","(isEmpty(зПр))And(зДал<>0)");
  While аСтроки.Next() Do
    Message("Для документа %LINK% для номенклатуры %LINK% ("+аСтроки.Get("зН").Code+") не указан производитель ТМЦ!","!",аСтроки.Get("зДок"),аСтроки.Get("зН"));
    флБылиОшибки:=1;
  EndDo;
  //К сожалению, в справочнике могут быть несколько производителей с одинаковым ИНН/КПП, такая выгрузка будет вызывать ошибку, нам необходимо преобразовать зПр->зПрИННКПП
  Стр:="!";
  аСтроки.Update("","Replace(зПр..Ref.кнтКонтрагенты.ИНН,""\"",""/"")->зПрИННКПП");
  аСтроки.Update("","Стр||зПр..Ref.кнтКонтрагенты.Code->зПрИННКПП","зПр..Ref.кнтКонтрагенты.флИностранныйКонтрагент=1");
  аПроизводители:=TempDB.Create("зПр:DB,зПрИННКПП:STRING.20,зДал:Number.20.7");
  аПроизводители.LoadFrom(аСтроки,"зПр->зПр,зПрИННКПП->зПрИННКПП,зДал->зДал");
  аПроизводители.Group("зПр,зПрИННКПП","зДал");
  
  аПроизводители.Select("","(зПрИННКПП="""")And(зДал<>0)");
  While аПроизводители.Next() Do
    If not IsEmpty(аПроизводители.зПр) Then
      Message("Для производителя %LINK% ("+аПроизводители.зПр.Code+") не указаны ИНН/КПП!","!",аПроизводители.зПр);
    EndIf;
    флБылиОшибки:=1;
  EndDo;
  
  ТПроизводители:=Tab.Create();
  аПроизводители.Unload(ТПроизводители,,"(not IsEmpty(зПр))And(зДал<>0)"); //зДал<>0
  ТПроизводители.Group("зПрИННКПП","зПр:FIRST");
  MassLoadObjects(ТПроизводители);
  ТПроизводители.Sort("зПр");
  аПроизводители:=0;
  
  спМагазины:=List.Create();
  аМагазины:=TempDB.Create("зМагазин:DB");
  аМагазины.LoadFrom(аСтроки,"зМагазин->зМагазин");
  аМагазины.Group("зМагазин");
  аМагазины.Unload(спМагазины,"зМагазин");

  
  Form.StatusText("Заполнение типа и группировка...");
  //Заполняем зТип:
  //0 (остаток на начало)
  //1 (закупки от производителей)
  //2 (закупки от опта)
  //3 (возврат продукции)
  //4 (перемещение внутри организации, приход)
  //5 (прочие поступления) - в т.ч. Оприходования ТМЦ
  //6 (продажи в розницу)
  //8 (возврат поставщикам)
  //9 (перемещение внутри организации, расход)
  //10 (прочий расход) - в т.ч. Списания ТМЦ
  //11 (остаток на конец)
    
  //РегистрацияТМЦ//РегистрацияТМЦ//РегистрацияТМЦ//РегистрацияТМЦ//РегистрацияТМЦ
  аСтроки.Update("Doc.РегистрацияТМЦ:зДок","10->зТип","зДок..DOC.РегистрацияТМЦ.КодОперации=Enum.коРегистрацияТМЦ.СписаниеТМЦ");
  аСтроки.Update("Doc.РегистрацияТМЦ:зДок","5->зТип","зДок..DOC.РегистрацияТМЦ.КодОперации=Enum.коРегистрацияТМЦ.ОприходованиеТМЦ");
  
  //ПоступлениеТМЦ//ПоступлениеТМЦ//ПоступлениеТМЦ//ПоступлениеТМЦ//ПоступлениеТМЦ
  //Поступление: 1,2,3 или 4
  аСтроки.Update("Doc.ПоступлениеТМЦ:зДок","?((зПоставщик..Ref.кнтКонтрагенты.ТипАктива=0)or(зПоставщик..Ref.кнтКонтрагенты.ТипАктива>3),3,0)->зТип");
  If (оП.Get(1).Size()>0)And(оП.Get(2).Size()>0) Then
    аСтроки.Update("Doc.ПоступлениеТМЦ:зДок","2->зТип","(зПоставщик IN оП.Get(1))And(зПоставщик NOT IN оП.Get(2))And(not isEmpty(зПоставщик))And(зТип=0)");
  ElseIf оП.Get(1).Size()>0 Then
    аСтроки.Update("Doc.ПоступлениеТМЦ:зДок","2->зТип","(зПоставщик IN оП.Get(1))And(not isEmpty(зПоставщик))And(зТип=0)");
  ElseIf оП.Get(2).Size()>0 Then
    аСтроки.Update("Doc.ПоступлениеТМЦ:зДок","2->зТип","(зПоставщик NOT IN оП.Get(2))And(not isEmpty(зПоставщик))And(зТип=0)");
  EndIf;
  аСтроки.Update("Doc.ПоступлениеТМЦ:зДок","1->зТип","зТип=0");
  //Внутри организации
  аСтроки.Update("Doc.ПоступлениеТМЦ:зДок","4->зТип","(зПоставщик..Ref.кнтКонтрагенты.ВидКонтрагента=Enum.ВидыКонтрагентов.СвоеЮрЛицо)And(зПоставщик..Ref.кнтКонтрагенты.СвоеЮрЛицо=ЮрЛицо)");
  
  //Возврат//Возврат//Возврат//Возврат//Возврат//Возврат//Возврат//Возврат//Возврат
  //ВозвратОтПокупателя: 3, ВозвратПоставщику: 8
  аСтроки.Update("Doc.ВозвратОтПокупателя:зДок","3->зТип");
  аСтроки.Update("Doc.ВозвратПоставщику:зДок","8->зТип");
  
  //Реализация//Реализация//Реализация//Реализация//Реализация//Реализация//Реализация
  //Поступление: 6,8 или 9
  аСтроки.Update("Doc.Реализация:зДок","6->зТип","зДок..DOC.Реализация.КодОперации=Enum.коРеализация.РеализацияРозничная");
  аСтроки.Update("Doc.Реализация:зДок","?(зПоставщик..Ref.кнтКонтрагенты.ТипАктива=0,6,0)->зТип","зТип=0");
  аСтроки.Update("Doc.Реализация:зДок","8->зТип","зТип=0");
  //Внутри организации
  аСтроки.Update("Doc.Реализация:зДок","9->зТип","(зПоставщик..Ref.кнтКонтрагенты.ВидКонтрагента=Enum.ВидыКонтрагентов.СвоеЮрЛицо)And(зПоставщик..Ref.кнтКонтрагенты.СвоеЮрЛицо=ЮрЛицо)");

  //Комплектация//Комплектация//Комплектация//Комплектация//Комплектация//Комплектация
  аСтроки.Update("Doc.КомплектацияТовара:зДок","6->зТип","зДал<0");
  аСтроки.Update("Doc.КомплектацияТовара:зДок","3->зТип","зДал>0");//Не должно быть, приходящий товар не алкогольный
    
  //ПеремещениеТМЦ//ПеремещениеТМЦ//ПеремещениеТМЦ//ПеремещениеТМЦ//ПеремещениеТМЦ
  //Поступление: 4,9
  аСтроки.Update("Doc.ПеремещениеТМЦ:зДок","4->зТип","зДал>0");
  аСтроки.Update("Doc.ПеремещениеТМЦ:зДок","9->зТип","зДал<0");
  
  аСтроки.Select("","зТип=0");
  While аСтроки.Next() Do
    Message("Для документа %LINK% внутренняя ошибка, не указан зТип, обратитесь к разработчику!","!",аСтроки.зДок);
    флБылиОшибки:=1;
  EndDo;
  
  //Проверяем на наличие отрицательных реализаций/поступлений (возврат больше реализации)
  аСтроки2:=TempDB.Create("зДал:Number.20.7,зМагазин:DB,КодАП:STRING.10,зПр:DB,зПрИННКПП:STRING.20,зПоставщик:DB,зДок:DOC,зДата:Date");
  аСтроки2.LoadFrom(аСтроки,"зДал->зДал,зМагазин->зМагазин,КодАП->КодАП,зПрИННКПП->зПрИННКПП,зДок->зДок,зПоставщик->зПоставщик,зДата->зДата");
  аСтроки2.Group("зМагазин,КодАП,зПрИННКПП,зПоставщик,зДата,зДок","зДал");
  аСтроки2.Remove("зДал=0");
  If аСтроки2.Size("(IsType(зДок,Doc.Реализация))And(зДал>0)")>0 Then
    аСтроки2.Select("","(IsType(зДок,Doc.Реализация))And(зДал>0)");
    While аСтроки2.Next() Do
      Message("Для документа %LINK% для кода АП "+аСтроки2.КодАП+" количество в возврате больше на "+аСтроки2.зДал+", чем количество в реализации!","!",аСтроки2.зДок);
      флБылиОшибки:=1;
    EndDo;
  EndIf;  
  If аСтроки2.Size("(IsType(зДок,Doc.ПоступлениеТМЦ))And(зДал<0)")>0 Then
    аСтроки2.Select("","(IsType(зДок,Doc.ПоступлениеТМЦ))And(зДал<0)");
    While аСтроки2.Next() Do
      Message("Для документа %LINK% для кода АП "+аСтроки2.КодАП+" количество в возврате больше на "+(-аСтроки2.зДал)+", чем количество в поступлении!","!",аСтроки2.зДок);
      флБылиОшибки:=1;
    EndDo;
  EndIf;
  
  Form.StatusText("Загрузка таблиц...");
  аСтроки2:=TempDB.Create("зДал:Number.20.7,зМагазин:DB,КодАП:STRING.10,зПрИННКПП:STRING.20,зТип:Number.2");
  аСтроки2.LoadFrom(аСтроки,"зДал->зДал,зМагазин->зМагазин,КодАП->КодАП,зПрИННКПП->зПрИННКПП,зТип->зТип");
  //Меняем знак расхода на положительный для вывода в отчет
  аСтроки2.Update("","-зДал->зДал","зТип>5");  
  аСтроки2.Group("зМагазин,КодАП,зПрИННКПП,зТип","зДал");
  
  ТМаг:=Tab.Create("зМагазин,Таб");
  For i:=1 To спМагазины.Size() Do
    зМагазин2:=спМагазины[i];
    ТМаг.AddLine("зМагазин",зМагазин2);
    ТМаг.Таб:=СоздатьТаблицу();
    аСтроки2.Select("","зМагазин=зМагазин2");
    While аСтроки2.Next() Do
      Таб:=ТМаг.Таб;
      Таб.AddLine("КодАП,зПрИННКПП",аСтроки2.КодАП,аСтроки2.зПрИННКПП);
      Таб.Set(Таб.CurLine,"зДал"+аСтроки2.зТип,Таб.Get(Таб.CurLine,"зДал"+аСтроки2.зТип)+аСтроки2.зДал);
    EndDo;  
  EndDo;
  
  //аСтроки -- будет использоваться для хранения документов выгрузки, только поступления и возвраты постащику
  аСтроки.Remove("(зТип=3)Or(зТип=4)Or(зТип=5)Or(зТип=6)Or(зТип=9)Or(зТип=10)");
  //аСтроки.Update("","-зДал->зДал","зТип>5");  
  аСтроки.Group("зМагазин,КодАП,зПрИННКПП,зПоставщик,зДата,зДок","зДал");
  аСтроки.Remove("зДал=0");

  аПоставщики:=TempDB.Create("зПоставщик:DB");
  аПоставщики.LoadFrom(аСтроки,"зПоставщик->зПоставщик");
  аПоставщики.Group("зПоставщик");
  ТПоставщики:=Tab.Create();
  аПоставщики.Unload(ТПоставщики,,"not IsEmpty(зПоставщик)");
  MassLoadObjects(ТПоставщики);
  ТПоставщики.Sort("зПоставщик");
  аПоставщики:=0;

  Message("Загрузка начальных (и/или конечных) остатков...");
  ФлНачальныеОстаткиЗагружены:=0;
  спОстНач:=List.Create();  
  спОстКон:=List.Create();
  For i:=1 To спМагазины.Size() Do
    спОстНач[спМагазины[i].Code]:=ЗагрузитьСохраненныеОстатки(спМагазины[i],НачДата-1,ТипНом,1);
    If ФлЗагружатьКонечныеОстатки Then
      спОстКон[спМагазины[i].Code]:=ЗагрузитьСохраненныеОстатки(спМагазины[i],НачДата,ТипНом,1);
    EndIf;
    ФлНачальныеОстаткиЗагружены:=ФлНачальныеОстаткиЗагружены Or(спОстНач[спМагазины[i].Code].Size()>0);
  EndDo;  
  Ф:=File.Create();
  Ф.FindOpen("Temp\Декларации\*.*");
  While Ф.FindNextFile()<>"" Do
    Путь2:="Temp\Декларации\"+Ф.FileName;
    If not Ф.IsDirectory(Путь2) Then
      Continue;
    EndIf;
    Form.StatusText("Загрузка остатков "+Ф.FileName);
    аМаг:=Ref.рознМагазины;
    If not аМаг.FindEx(2,"ЮрЛицо","Code",Ф.FileName) Then
      Continue;
    EndIf;
    If аМаг.ЮрЛицо<>оЮЛ Then
      Continue;
    EndIf;
    If Form.оОдинМагазин.Value.Selected()<>0 Then
      If аМаг<>Form.оОдинМагазин.Value Then
        Continue;
      EndIf;
    Else
      If _And(оМг[1].Size()>0,Not оМг[1].Contains(аМаг)) Then
        Continue;
      EndIf;
      If _And(оМг[2].Size()>0,оМг[2].Contains(аМаг)) Then
        Continue;
      EndIf;
    EndIf;
    
    спОстНач[аМаг.Code]:=ЗагрузитьСохраненныеОстатки(аМаг,НачДата-1,ТипНом,1);
    If ФлЗагружатьКонечныеОстатки Then
      спОстКон[аМаг.Code]:=ЗагрузитьСохраненныеОстатки(аМаг,НачДата,ТипНом,1);
    EndIf;
    ФлНачальныеОстаткиЗагружены:=ФлНачальныеОстаткиЗагружены Or(спОстНач[аМаг.Code].Size()>0);
  EndDo;
  
  If ФлНачальныеОстаткиЗагружены Then
    Message("Во временном каталоге обнаружены начальные остатки для некоторых магазинов, для всех магазинов, для которых отсутствуют файлы начальных остатков, начальный остаток будет равен нулю!","I");
  EndIf;
  
  //Заполнение Дал0, Дал11
  While З2.Next(1) Do
    If Form.оОдинМагазин.Value.Selected()<>0 Then
      зМагазин:=Form.оОдинМагазин.Value;
    Else
      зМагазин:=З2.зМагазин;
    EndIf;
    //Загрузить остатки?
    If IsEmpty(спОстНач[зМагазин.Code]) Then
      спОстНач[зМагазин.Code]:=ЗагрузитьСохраненныеОстатки(зМагазин,НачДата-1,ТипНом,1);
      If ФлЗагружатьКонечныеОстатки Then
        спОстКон[зМагазин.Code]:=ЗагрузитьСохраненныеОстатки(зМагазин,НачДата,ТипНом,1);
      EndIf;
    EndIf;
    Form.StatusText("Расчет остатков "+зМагазин);
    
    If ТМаг.FindAndGoto(зМагазин,,"зМагазин")=0 Then
      спМагазины.Add(зМагазин);
      ТМаг.AddLine("зМагазин",зМагазин);
      ТМаг.Таб:=СоздатьТаблицу();
    EndIf;
    
    While З2.Next(2) Do
      зН:=З2.зН;
      ТабТМЦ:=Tab.Create("зПрИННКПП,КодАП");
      ТабТМЦ.AddColumn("Дал0",,"Number");
      ТабТМЦ.AddColumn("Дал11",,"Number");
      
      While З2.Next(3) Do
        Дал0:=З2.зК0НО*зН.ОбъемЛитров/10;
        Дал11:=(З2.зК0НО+З2.зК0Пр-З2.зК0Рс)*зН.ОбъемЛитров/10;
        If (Round(Дал0,5)=0)And(Round(Дал11,5)=0)And(Round(З2.зК0Пр,5)=0)And(Round(З2.зК0Рс,5)=0) Then
          Continue;
        EndIf;
        зПартия:=З2.зПартия;
        If isEmpty(зПартия) Then
          Message("Для номенклатуры %LINK% ("+зН.Code+") существует пустая партия в магазине %LINK%, нач. количество: "+Round(Дал0,5)+", кон. количество: "+Round(Дал11,5)+"! Вместо нее будет подставлена самая свежая партия!","!",зН,зМагазин);
          зПартия:=Ref.тмцПартииТМЦ;
          зПартия.UseOrder("Code-");
          if not зПартия.Find("@Parent,@Status",зН,0) Then
            зПартия:=GetNothing("Ref.тмцПартииТМЦ");
          EndIf;
        EndIf;
        //зП:=зН.сертПроизводитель;
        зП:=зПартия.Производитель;
        КодАП:=Trim(зН.ЕГАИСКодАП);
        КодАП:=?(Trim(зПартия.ЕГАИСКодАП)="",КодАП,Trim(зПартия.ЕГАИСКодАП));
        зПрИННКПП:="";
        If isEmpty(зП) Then
          Message("Для номенклатуры %LINK% ("+зН.Code+") для партии %LINK% не задан производитель (магазин: %LINK%, нач. количество: "+Round(Дал0,5)+", кон. количество: "+Round(Дал11,5)+")!","!",зН,зПартия,зМагазин);
          флБылиОшибки:=1;
        Else
          зПрИННКПП:=?(зП.флИностранныйКонтрагент=1,"!"+зП.Code,Replace(зП.ИНН,"\","/"));
          If зПрИННКПП="" Then
            Message("Для производителя %LINK% ("+зП.Code+") не заданы ИНН/КПП!","!",зП);
            флБылиОшибки:=1;
          EndIf;
          If ТПроизводители.FindAndGoto(зПрИННКПП,,"зПрИННКПП")=0 Then
            ТПроизводители.AddLine("зПр,зПрИННКПП",зП,зПрИННКПП);
          EndIf;  
        EndIf;
        If КодАП="" Then
          Message("Для номенклатуры %LINK% ("+зН.Code+") для партии %LINK% не задан код АП (магазин: %LINK%, нач. количество: "+Round(Дал0,5)+", кон. количество: "+Round(Дал11,5)+")!","!",зН,зПартия,зМагазин);
          флБылиОшибки:=1;
        EndIf;
        If ФлНачальныеОстаткиЗагружены Then
          ТабТМЦ.AddLine("зПрИННКПП,КодАП,Дал0,Дал11",зПрИННКПП,КодАП,0,Дал11);
        Else
          ТабТМЦ.AddLine("зПрИННКПП,КодАП,Дал0,Дал11",зПрИННКПП,КодАП,Дал0,Дал11);
        EndIf;
      EndDo;
      
      If ТабТМЦ.Size()=0 Then
        Continue;
      EndIf;
      ТабТМЦ.Group("зПрИННКПП,КодАП","Дал0,Дал11");
      
      ТабТМЦ.Select();
      While ТабТМЦ.Next() Do
        ТМаг.Таб.AddLine("КодАП,зПрИННКПП,зДал0,зДал11",ТабТМЦ.КодАП,ТабТМЦ.зПрИННКПП,ТабТМЦ.Дал0,ТабТМЦ.Дал11);
      EndDo;  
    EndDo;
    
    Таб2:=спОстНач[зМагазин.Code];
    If not IsEmpty(Таб2) Then
      ТМаг.Таб.Fill(0,,,"зДал0");
      Таб2.Select();
      While Таб2.Next() Do
        ТМаг.Таб.CurLine:=0;
        If ТМаг.Таб.LocateAndGoto("зПрИННКПП,КодАП",Таб2.зПрИННКПП,Таб2.зАПКод)=0 Then
          ТМаг.Таб.AddLine("зПрИННКПП,КодАП,зДал0,зДал11",Таб2.зПрИННКПП,Таб2.зАПКод,0,0);
        EndIf;
        ТМаг.Таб.зДал0:=Round(ТМаг.Таб.зДал0+Таб2.зДл,6);
      EndDo;
      aNum:=спОстНач.Find(зМагазин.Code);
      If aNum>0 Then
        спОстНач.Check(aNum,1);
      EndIf;
    EndIf;
    
    Таб2:=спОстКон[зМагазин.Code];
    If (not IsEmpty(Таб2))And(ФлЗагружатьКонечныеОстатки) Then
      Message("Внимание! Для магазина "+зМагазин+" будут использованы сохраненные конечные остатки, а не реальные!","I");
      ТМаг.Таб.Fill(0,,,"зДал11");
      Таб2.Select();
      While Таб2.Next() Do
        ТМаг.Таб.CurLine:=0;
        If ТМаг.Таб.LocateAndGoto("зПрИННКПП,КодАП",Таб2.зПрИННКПП,Таб2.зАПКод)=0 Then
          ТМаг.Таб.AddLine("зПрИННКПП,КодАП,зДал0,зДал11",Таб2.зПрИННКПП,Таб2.зАПКод,0,0);
        EndIf;
        ТМаг.Таб.зДал11:=Round(ТМаг.Таб.зДал11+Таб2.зДл,6);
      EndDo;
      aNum:=спОстКон.Find(зМагазин.Code);
      If aNum>0 Then
        спОстКон.Check(aNum,1);
      EndIf;
    EndIf;    
  EndDo;//По магазинам
  
  If Form.оОдинМагазин.Value.Selected()=0 Then
    For i:=1 To спОстНач.Size() Do
      If спОстНач.Check(i)<>1 Then
        зМагазин:=Ref.рознМагазины;
        If not зМагазин.FindEx(2,"ЮрЛицо","Code",спОстНач.GetName(i)) Then
          Continue;
        EndIf;
        If ТМаг.FindAndGoto(зМагазин,,"зМагазин")=0 Then
          спМагазины.Add(зМагазин);
          ТМаг.AddLine("зМагазин",зМагазин);
          ТМаг.Таб:=СоздатьТаблицу();
        EndIf;
      
        Таб2:=спОстНач[i];
        Таб2.Select();
        While Таб2.Next() Do
          ТМаг.Таб.CurLine:=0;
          If ТМаг.Таб.LocateAndGoto("зПрИННКПП,КодАП",Таб2.зПрИННКПП,Таб2.зАПКод)=0 Then
            ТМаг.Таб.AddLine("зПрИННКПП,КодАП,зДал0,зДал11",Таб2.зПрИННКПП,Таб2.зАПКод,0,0);
          EndIf;
          ТМаг.Таб.зДал0:=Round(ТМаг.Таб.зДал0+Таб2.зДл,6);
        EndDo;
      EndIf;
    EndDo;
    
    If ФлЗагружатьКонечныеОстатки Then
      For i:=1 To спОстКон.Size() Do
        If спОстКон.Check(i)<>1 Then
          зМагазин:=Ref.рознМагазины;
          If not зМагазин.FindEx(2,"ЮрЛицо","Code",спОстКон.GetName(i)) Then
            Continue;
          EndIf;
          If ТМаг.FindAndGoto(зМагазин,,"зМагазин")=0 Then
            спМагазины.Add(зМагазин);
            ТМаг.AddLine("зМагазин",зМагазин);
            ТМаг.Таб:=СоздатьТаблицу();
          EndIf;
        
          Таб2:=спОстКон[i];
          Таб2.Select();
          While Таб2.Next() Do
            ТМаг.Таб.CurLine:=0;
            If ТМаг.Таб.LocateAndGoto("зПрИННКПП,КодАП",Таб2.зПрИННКПП,Таб2.зАПКод)=0 Then
              ТМаг.Таб.AddLine("зПрИННКПП,КодАП,зДал0,зДал11",Таб2.зПрИННКПП,Таб2.зАПКод,0,0);
            EndIf;
            ТМаг.Таб.зДал11:=Round(ТМаг.Таб.зДал11+Таб2.зДл,6);
          EndDo;
        EndIf;
      EndDo;
    EndIf;
  EndIf;
  
  ТМаг.Select();
  While ТМаг.Next() Do
    ТМаг.Таб.Group("КодАП,зПрИННКПП","зДал0,зДал1,зДал2,зДал3,зДал4,зДал5,зДал6,зДал8,зДал9,зДал10,зДал11");
  EndDo;
  
  //Пересчет и исправление остатков
  Form.StatusText("Вычисление и исправление остатков...");
  ТМаг.Select();
  While ТМаг.Next() Do
    зМагазин:=ТМаг.зМагазин;
    Таб:=ТМаг.Таб;
  
    //Загрузка начальных остатков
    ТНач:=0;
    If not IsEmpty(спОстНач[зМагазин.Code]) Then
      ТНач:=спОстНач[зМагазин.Code];
      If ТНач.Size()=0 Then
        ТНач:=0;
      EndIf;
    EndIf;
  
    If ТНач<>0 Then
      Таб.Select();
      While Таб.Next() Do
        //Начальные остатки
        ТНач.CurLine:=0;
        If ТНач.LocateAndGoto("зАПКод,зПрИННКПП",Таб.КодАП,Таб.зПрИННКПП,1)>0 Then
          Таб.зДал0:=ТНач.зДл;
          ТНач.Remove(ТНач.CurLine);
        EndIf;
      EndDo;
      ТНач.Select();
      While ТНач.Next() Do
        Таб.AddLine("КодАП,зПрИННКПП,зДал0,зДал11",ТНач.зАПКод,ТНач.зПрИННКПП,ТНач.зДл,0);
      EndDo;
    EndIf;
    
    Таб.Select();
    While Таб.Next() Do
      //Исправление отрицательных начальных и конечных остатков
      If Round(Таб.зДал0,6)<0 Then
        Таб.зДал0:=0;
      EndIf;
      If Round(Таб.зДал11,6)<0 Then
        Таб.зДал11:=0;
      EndIf;
      //Пересчет 5 и 10
      зДал11:=Таб.зДал0+Таб.зДал1+Таб.зДал2+Таб.зДал3+Таб.зДал4-Таб.зДал6-Таб.зДал8-Таб.зДал9;
      Разница:=Round(Таб.зДал11-зДал11,6);
      Таб.зДал5:=Max(Разница,0);
      Таб.зДал10:=-Min(Разница,0);
    EndDo;
  EndDo;
  
  //Сохранение новых остатков
  If EndOfQuarter(КонДата)=КонДата Then
    Form.StatusText("Сохранение файлов остатков на конец периода для использования в следующем периоде...");
    ТМаг.Select();
    While ТМаг.Next() Do
      Дата2:=BegOfQuarter(НачДата);
      Путь2:="Temp\Декларации\"+ТМаг.зМагазин.Code+"\";
      Файл2:=Путь2+"Декларация_"+ТипНом+"_"+Дата2+".txt";;
      If File.DoesFileExist(Файл2) Then
        If AskQuestion("Заменить сохраненные ранее остатки для магазина "+ТМаг.зМагазин+" на текущие, вы уверены?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
          Message("Для магазина %LINK% на "+КонДата+" будут сохранены остатки, вычисленные ранее, текущие будут проигнорированы!",,ТМаг.зМагазин);
          Continue;
        EndIf;
      EndIf;
      Message("Для магазина %LINK% на "+КонДата+" будут сохранены текущие остатки для использования в следующем периоде!",,ТМаг.зМагазин);
      Таб:=ТМаг.Таб;
      Тб:=Tab.Create("зАПКод,зПрКод,зДл");
      Таб.Select();
      While Таб.Next() Do
        If Round(Таб.зДал11,6)<>0 Then
          If ТПроизводители.FindAndGoto(Таб.зПрИННКПП,,"зПрИННКПП")=0 Then
            Raise "Не найден производитель с ИНН "+Таб.зПрИННКПП+"! Обратитесь к разработчику!";
          EndIf;
          Тб.AddLine("зАПКод,зПрКод,зДл",Таб.КодАП,ТПроизводители.зПр.Code,Таб.зДал11);
        EndIf;
      EndDo;
      
      If Not File.CreateDirectory(Путь2) Then
        Message("Сохранение деклараций текущего периода: невозможно создать папку "+Путь2+"!","!");
      Else
        Try
          ObjectToFile(Тб,Файл2);
        Except
          Message("Сохранение деклараций текущего периода: невозможно сохранить для магазина %LINK%!","!",зМагазин);
        EndTry;
      EndIf;
    EndDo;
  EndIf;

      
  Form.StatusText("Создание справочников...");
  Т:=СоздатьШапкуТаблицы();
  Form.StatusText("Выгрузка и создание отчета...");

  ТМаг.Select();
  While ТМаг.Next() Do
    If not ВыгрузитьОдинМагазин(Т,ТМаг.Таб,ТМаг.зМагазин) Then
      флБылиОшибки:=1;
    EndIf;
  EndDo;
    
  
  If флБылиОшибки=1 Then
    Box("В выгрузке обнаружены ошибки (см. лог выгрузки)! Исправьте эти ошибки и произведите выгрузку вновь. Файл выгрузки не будет "+
      "сформирован, пока все ошибки не будут исправлены!",Q_STOP);
    Exit;
  EndIf;
  
  Т.AddString("</Документ>");
  Т.AddString("</Файл>");

  аИНН:=Replace(оЮЛ.ИНН,"\","/");
  аКПП:="";
  If Pos("/",аИНН)>0 Then
    аКПП:=аИНН;
    аИНН:=Left(TearStr(аКПП,"/"),10);
    аКПП:=Left(аКПП,9);
  EndIf;
  
  НомМесяца:=GetMonth(EndOfQuarter(КонДата));
  ЦифраКвартала:=?(НомМесяца=12,"00",Right("0"+Str(НомМесяца),2));
  ЦифраГода:=Right(Trim(GetYear(КонДата)),1);
  
  //аКПП
  If ТипНом=7 Then
    ИмяФайла:=UpperCase("07_"+аИНН+"_"+ЦифраКвартала+ЦифраГода+"_"+FormatDate(CurDate(),"ddmmYYYY")+"_"+CreateGUID()+".xml");
  ElseIf ТипНом=8 Then
    ИмяФайла:=UpperCase("08_"+аИНН+"_"+ЦифраКвартала+ЦифраГода+"_"+FormatDate(CurDate(),"ddmmYYYY")+"_"+CreateGUID()+".xml");
  EndIf;
  Т.Save(Путь+ИмяФайла);
  
  Form.кнРезультаты3.isDisabled:=0;
  Box("Выгрузка произведена успешно!",Q_INFORMATION);
  Message("Выгрузка произведена успешно!","I");
EndFunction


Function ВывестиПечФорму()
  оТипОтчета:=Form.оТипОтчета.Value.SelectedLine();
  ТипНом:=Number(Form.оТипОтчета.Value.Get(оТипОтчета));
  оЮЛ:=Form.оЮЛ.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);

  глТекСтрока:=0;
  глТекСтраница:=0;
  глВсегоСтраниц:=3;
  
  ТПечДата:=Table.Create();
  ТПечДата.SetSourceName("Ф3_"+ТипНом);
  ТПечДата.CopyByX("v1_1|h1",1);
  пСтраница:="Стр. 3";
  ТПечДата.CopyByX("v1_2|h1",1);
  
  ВсегоДал0:=0;
  ВсегоДал1:=0;
  ВсегоДал2:=0;
  ВсегоДал3:=0;
  ВсегоДал4:=0;
  ВсегоДал5:=0;
  ВсегоДал6:=0;
  ВсегоДал8:=0;
  ВсегоДал9:=0;
  ВсегоДал10:=0;
  ВсегоДал11:=0;
  НомерРаздела:="";
  
  ТМаг.Select();
  While ТМаг.Next() Do
    If not ПечФормаОстаткиОдинМагазин(ТМаг.Таб,ТМаг.зМагазин) Then
      флБылиОшибки:=1;
    EndIf;
  EndDo;
  РазделитьПечФорму(0,1);
  
  глТекСтрока:=0;
  глВсегоСтраниц:=глВсегоСтраниц+1;
  ТПечДата:=Table.Create();
  ТПечДата.SetSourceName("Ф3_"+ТипНом);
  пСтраница:="Стр. "+(глВсегоСтраниц);
  пРаздел:="Раздел II";
  НомерРаздела:="II";
  пТипОбъема:="Объем закупленной продукции";
  ТПечДата.CopyByX("v2_1|h2",1);
  ТПечДата.CopyByX("v2_2|h2",1);
  
  ВсегоДал0:=0;
  ТМаг.Select();
  While ТМаг.Next() Do
    If not ПечФормаДвиженияОдинМагазин(ТМаг.зМагазин,1) Then
      флБылиОшибки:=1;
    EndIf;
  EndDo;
  
  РазделитьПечФорму(0,2);
  
  глТекСтрока:=0;
  глВсегоСтраниц:=глВсегоСтраниц+1;
  ТПечДата:=Table.Create();
  ТПечДата.SetSourceName("Ф3_"+ТипНом);
  пСтраница:="Стр. "+(глВсегоСтраниц);
  пРаздел:="Раздел III";
  НомерРаздела:="III";
  пТипОбъема:="Объем возвращенной поставщику продукции";
  ТПечДата.CopyByX("v2_1|h2",1);
  ТПечДата.CopyByX("v2_2|h2",1);
  
  ВсегоДал0:=0;
  ТМаг.Select();
  While ТМаг.Next() Do
    If not ПечФормаДвиженияОдинМагазин(ТМаг.зМагазин,0) Then
      флБылиОшибки:=1;
    EndIf;
  EndDo;
  
  РазделитьПечФорму(0,2,1);
  ТПечДата.CopyByX("v2_6|h2",1);
  глПечатнаяФормаОтчета(ТПечДата,0,"Форма "+ТипНом+", данные",1);

  //Страница заголовок
  ТПечФ:=Table.Create();
  ТПечФ.SetSourceName("Ф1");
  
  аИНН:=Trim(Replace(оЮЛ.ИНН,"\","/"));
  аКПП:="";
  If Pos("/",аИНН)>0 Then
    аКПП:=аИНН;
    аИНН:=Left(TearStr(аКПП,"/"),10);
    аКПП:=Left(аКПП,9);
  EndIf;
  
  оКодРегиона:=Left(аИНН,2);
  If аКПП<>"" Then
    оКодРегиона:=Left(аКПП,2);
  EndIf;
  
  Стр:=Trim(оЮЛ.ЮрАдрес);
  СтрИндекс:=Trim(TearStr(Стр,","));
  If (Left(СтрИндекс,1)>"9")Or(Left(СтрИндекс,1)<"0") Then
    СтрИндекс:=Trim(TearStr(Стр,","));
  EndIf;
  пИнд1:=Mid(СтрИндекс,1,1);
  пИнд2:=Mid(СтрИндекс,2,1);
  пИнд3:=Mid(СтрИндекс,3,1);
  пИнд4:=Mid(СтрИндекс,4,1);
  пИнд5:=Mid(СтрИндекс,5,1);
  пИнд6:=Mid(СтрИндекс,6,1);
  пДатаДень:=GetDay(CurDate());
  пДатаМесяц:=LowerCase(FormatDate(CurDate(),"MM"));
  пДатаГод:=GetYear(CurDate());

  пЮЛПолное:=Trim(оЮЛ.ПолнНаименование);
  пПриложение:="Приложение № "+ТипНом;
  If ТипНом=7 Then
    пВидДекларации:="об объеме розничной продажи алкогольной (за исключением пива и пивных напитков, сидра, пуаре и медовухи) и спиртосодержащей продукции";
  ElseIf ТипНом=8 Then
    пВидДекларации:="об объеме розничной продажи пива и пивных напитков, сидра, пуаре и медовухи";
  EndIf;
  пДиректор:=Trim(оЮЛ.GetValue("Руководитель",КонДата).ПолнНаименование);
  пБухгалтер:=Trim(оЮЛ.GetValue("ГлБухгалтер",КонДата).ПолнНаименование);
    
  аИНН:=Right("000000000000"+аИНН,12);
  пИНН1:=Mid(аИНН,1,1);пИНН2:=Mid(аИНН,2,1);пИНН3:=Mid(аИНН,3,1);пИНН4:=Mid(аИНН,4,1);пИНН5:=Mid(аИНН,5,1);
  пИНН6:=Mid(аИНН,6,1);пИНН7:=Mid(аИНН,7,1);пИНН8:=Mid(аИНН,8,1);пИНН9:=Mid(аИНН,9,1);пИНН10:=Mid(аИНН,10,1);
  пИНН11:=Mid(аИНН,11,1);пИНН12:=Mid(аИНН,12,1);
  
  пКПП1:=Mid(аКПП,1,1);пКПП2:=Mid(аКПП,2,1);пКПП3:=Mid(аКПП,3,1);пКПП4:=Mid(аКПП,4,1);пКПП5:=Mid(аКПП,5,1);
  пКПП6:=Mid(аКПП,6,1);пКПП7:=Mid(аКПП,7,1);пКПП8:=Mid(аКПП,8,1);пКПП9:=Mid(аКПП,9,1);
  
  //1,2,3   4,5,6   7,8,9   10,11,12
  флНом:=Trunc((GetMonth(КонДата)+2)/3);
  пКв1:=?(флНом=1,"V","");пКв2:=?(флНом=2,"V","");пКв3:=?(флНом=3,"V","");пКв4:=?(флНом=4,"V","");
  пГод:=Trim(GetYear(КонДата));
  пГ1:=Mid(пГод,1,1);пГ2:=Mid(пГод,2,1);пГ3:=Mid(пГод,3,1);пГ4:=Mid(пГод,4,1);
  
  пКР1:=Mid(оКодРегиона,1,1);пКР2:=Mid(оКодРегиона,2,1);

  Стр:=Trim(оЮЛ.ЮрАдрес);
  СтрИндекс:=Trim(TearStr(Стр,","));
  If (Left(СтрИндекс,1)>"9")Or(Left(СтрИндекс,1)<"0") Then
    СтрИндекс:=Trim(TearStr(Стр,","));
  EndIf;
  TearStr(Стр,",");
  пРайон:=Trim(TearStr(Стр,","));
  пГород:=Trim(TearStr(Стр,","));
  TearStr(Стр,",");
  пУлица:=Trim(TearStr(Стр,","));
  пДом:=Trim(TearStr(Стр,","));
  пКорпус:=Trim(TearStr(Стр,","));
  пКварт:=Trim(TearStr(Стр,","));
  пТелефоны:=Trim(оЮЛ.Телефоны);

  пСтр1:="0";пСтр2:="0";пСтр3:="0";пСтр4:="0";
  пСтр:=Str(глВсегоСтраниц);
  Дл:=Length(пСтр);
  пСтр4:=?(Дл>0,Mid(пСтр,Дл,1),"0");пСтр4:=?(пСтр4="","0",пСтр4);
  пСтр3:=?(Дл-1>0,Mid(пСтр,Дл-1,1),"0");пСтр3:=?(пСтр3="","0",пСтр3);
  пСтр2:=?(Дл-2>0,Mid(пСтр,Дл-2,1),"0");пСтр2:=?(пСтр2="","0",пСтр2);
  пСтр1:=?(Дл-3>0,Mid(пСтр,Дл-3,1),"0");пСтр1:=?(пСтр1="","0",пСтр1);
  ТПечФ.CopyByX("v1",1);
  
  ТПечФ.PageBreaks.Add();
  ТПечФ.SetSourceName("Ф2");
  ТПечФ.CopyByX("v1",1);
  //ТЛицЮЛ.Select();
  //While ТЛицЮЛ.Next() Do
  //  If ТЛицЮЛ.ГлобИД>0 Then
  //    пСерия:=Trim(ТЛицЮЛ.Эл.лицСерия);
  //    пНомер:=Trim(ТЛицЮЛ.Эл.лицНомер);
  //    пДатаНач:=Trim(ТЛицЮЛ.Эл.ДатаНачалаДействияЛицензии);
  //    пКонДата:=Trim(ТЛицЮЛ.Эл.ДатаОкончанияДействияЛицензии);
  //    ТПечФ.CopyByX("v2",1);
  //  EndIf;
  //EndDo;
  
  ТПечФ.CopyByX("v4",1);
  Стр:=Trim(оЮЛ.ЮрАдрес);
  СтрИндекс:=Trim(TearStr(Стр,","));
  If (Left(СтрИндекс,1)>"9")Or(Left(СтрИндекс,1)<"0") Then
    СтрИндекс:=Trim(TearStr(Стр,","));
  EndIf;
  TearStr(Стр,",");
  пРайон:=Trim(TearStr(Стр,","));
  пГород:=Trim(TearStr(Стр,","));
  TearStr(Стр,",");
  пУлица:=Trim(TearStr(Стр,","));
  пДом:=Trim(TearStr(Стр,","));
  пКорпус:=Trim(TearStr(Стр,","));
  пКварт:=Trim(TearStr(Стр,","));
  ТПечФ.CopyByX("v3",1);//Мин 6.
  For i:=1 To ТМаг.Size() Do
    ТМаг.CurLine:=i;
    зМагазин:=ТМаг.зМагазин;
    пАдрес:=зМагазин.ФактАдрес;
    Стр:=Trim(пАдрес);
    СтрИндекс:=Trim(TearStr(Стр,","));
    If (Left(СтрИндекс,1)>"9")Or(Left(СтрИндекс,1)<"0") Then
      СтрИндекс:=Trim(TearStr(Стр,","));
    EndIf;
      
    аКПП:=зМагазин.КПП;
    оКодРегиона:=Left(аИНН,2);
    If аКПП<>"" Then
      оКодРегиона:=Left(аКПП,2);
    EndIf;
    пКР1:=Mid(оКодРегиона,1,1);пКР2:=Mid(оКодРегиона,2,1);
    пКПП1:=Mid(аКПП,1,1);пКПП2:=Mid(аКПП,2,1);пКПП3:=Mid(аКПП,3,1);пКПП4:=Mid(аКПП,4,1);пКПП5:=Mid(аКПП,5,1);
    пКПП6:=Mid(аКПП,6,1);пКПП7:=Mid(аКПП,7,1);пКПП8:=Mid(аКПП,8,1);пКПП9:=Mid(аКПП,9,1);
      
    TearStr(Стр,",");
    пРайон:=Trim(TearStr(Стр,","));
    пГород:=Trim(TearStr(Стр,","));
    TearStr(Стр,",");
    пУлица:=Trim(TearStr(Стр,","));
    пДом:=Trim(TearStr(Стр,","));
    пКорпус:=Trim(TearStr(Стр,","));
    пКварт:=Trim(TearStr(Стр,","));
    ТПечФ.CopyByX("v3",1);
  EndDo;
  i2:=ТМаг.Size();
  пРайон:="";пГород:="";пУлица:="";пДом:="";пКорпус:="";пКварт:="";
  пКПП1:="";пКПП2:="";пКПП3:="";пКПП4:="";пКПП5:="";пКПП6:="";пКПП7:="";пКПП8:="";пКПП9:="";
  пИнд1:="";пИнд2:="";пИнд3:="";пИнд4:="";пИнд5:="";пИнд6:="";
  пКР1:="";пКР2:="";
  For i:=i2 To 6 Do
    ТПечФ.CopyByX("v3",1);
  EndDo;
  ТПечФ.CopyByX("v5",1);
  глПечатнаяФормаОтчета(ТПечФ,0,"Форма "+ТипНом);
  
  
  Box("Всего требуется напечатать "+глВсегоСтраниц+" страниц печатной формы (учитывая заглавные страницы)!",Q_INFORMATION);
EndFunction

