//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var ТБаланс Export;//Основная настрока
Var Коэфф Export;
Var оЗнаков Export;
Var ТабЗапросы Export;
Var З Export;

Function ПостроитьСписокНастроек(флУмолчание=1)
  Сп:=List.Create();
  Путь:="Temp\Бухгалтерия";
  If not File.DoesPathExist(Путь) Then
    File.CreateDirectory(Путь);
  EndIf;
  Путь:=Путь+"\ПрибылиИУбытки";
  If not File.DoesPathExist(Путь) Then
    File.CreateDirectory(Путь);
  EndIf;
  Путь:=Путь+"\";
  Сп:=File.LoadFileNames(Путь+"*.set");
  If флУмолчание Then
    Сп.Insert(1,"","По умолчанию");
  EndIf;
  For i:=флУмолчание+1 To Сп.Size() Do
    Сп.SetName(i,RemoveExt(Сп.GetName(i)));
  EndDo;
  Exit Сп;
EndFunction

Function лкФРМ(См)
  If См<0 Then
    Стр:=FormatNumber(-См/Коэфф,1,"'",оЗнаков);
    Exit ?(Стр="","","("+Стр+")");
  Else
    Exit FormatNumber(См/Коэфф,1,"'",оЗнаков);
  EndIf;
EndFunction


Function НастройкаПоУмолчанию()

  Function СтандартнаяТаблица()
    //<Слагаемое>{-}<Слагаемое>,...
    //<Слагаемое>: [{Д,К}]<Счет>[@<Субконто1>[@<Субконто2>[@<Субконто3>]]]
    //<Субконто>: Код субконто, либо "", если фильтра нет
    Таб:=Tab.Create("Наименование,Код,Формула,Подгруппа,Описание");
    Таб.AddColumn("флПодитоги",,"Number");
    Таб.AddColumn("зСм",,"Number");
    Таб.AddColumn("зСм2",,"Number");
    Таб.AddColumn("зСм3",,"Number");
    
    Exit Таб;
  EndFunction

  ТБаланс:=СтандартнаяТаблица();
  
  ТБаланс.NewLine();
  ТБаланс.Наименование:="ОСНОВНОЕ";
  ТБаланс.Подгруппа:=СтандартнаяТаблица();
  Таб:=ТБаланс.Подгруппа;

  Таб.AddLine("Наименование,Код,Формула,Описание","Выручка","2110","К90.1.1,К90.1.2,-90.3","Суммарный оборот по кредиту счета 90 ""Продажи"" субсчет ""Выручка"";
    |минус обороты по дебету счета 90 субсчета:
    |- ""Налог на добавленную стоимость"";
    |- ""Акцизы""
    |");

  Таб.Подгруппа=СтандартнаяТаблица();
  Таб2=Таб.Подгруппа;

  Таб2.AddLine("Наименование,Код,Формула,Описание","Оптовая торговля","2111","К90.1.1,К90.1.2,-90.3","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Услуги","2112","","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Реализация ОС","2113","","");
    
  Таб.AddLine("Наименование,Код,Формула,Описание","Себестоимость продаж","2120","90.2.1","Суммарный оборот по дебету счета 90 ""Продажи"" субсчет ""Себестоимость продаж"" в корреспонденции со счетами:
    |- 20 ""Основное производство"";
    |- 21 ""Полуфабрикаты собственного производства"";
    |- 23 ""Вспомогательные производства"";
    |- 29 ""Обслуживающие производства и хозяйства"";
    |- 40 ""Выпуск продукции (работ, услуг)"";
    |- 41 ""Товары"";
    |- 43 ""Готовая продукция"";
    |- 45 ""Товары отгруженные""
    |");

  Таб.Подгруппа=СтандартнаяТаблица();
  Таб2=Таб.Подгруппа;

  Таб2.AddLine("Наименование,Код,Формула,Описание","Оптовая торговля","2121","90.2.1","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Реализация ОС","2122","","");
    
  Таб.AddLine("Наименование,Код,Формула,Описание","Валовая прибыль (убыток)","2100","%2110%-%2120%","Разница между суммами, отраженными в строках 2110 и 2120");
  Таб.флПодитоги=1;

  
  Таб.AddLine("Наименование,Код,Формула,Описание","Коммерческие расходы","2210","90.7.1,90.7.2","Суммарный оборот по дебету счета 90 ""Продажи"" субсчет ""Себестоимость продаж"" в корреспонденции со счетом 44 ""Расходы на продажу""");
  Таб.AddLine("Наименование,Код,Формула,Описание","Управленческие расходы","2220","90.8.1,90.8.2","Суммарный оборот по дебету счета 90 ""Продажи"" субсчет ""Себестоимость продаж"" в корреспонденции со счетом 26 ""Общехозяйственные расходы""");

  Таб.AddLine("Наименование,Код,Формула,Описание","Прибыль (убыток) от продаж","2200","%2100%-%2210%-%2220%","Разница между суммами, отраженными в строках 2110 и 2120");
  Таб.флПодитоги=1;
  
  
  Таб.AddLine("Наименование,Код,Формула,Описание","Доходы от участия в других организациях","2310","К91.1","Суммарный оборот по кредиту счета 91 ""Прочие доходы и расходы"" "+
    "субсчет ""Прочие доходы"" в корреспонденции со счетом 76 ""Расчеты с разными дебиторами и кредиторами"" субсчет ""Расчеты по причитающимся дивидендам и другим доходам""");

  Таб.AddLine("Наименование,Код,Формула,Описание","Проценты к получению","2320","","Суммарный оборот по кредиту счета 91 ""Прочие доходы и расходы"" субсчет ""Прочие доходы"" в корреспонденции со счетами учета начисленных процентов:
    |- по ценным бумагам;
    |- по выданным займам;
    |- за использование банком свободных денежных средств, находящихся на счете организации и т. п. 
    |");
  Таб.AddLine("Наименование,Код,Формула,Описание","Проценты к уплате","2330","Д91.2","Суммарный оборот по дебету счета 91 ""Прочие доходы и расходы"" субсчет ""Прочие расходы"" в корреспонденции со счетами учета:
    |- процентов к уплате по выпущенным ценным бумагам;
    |- полученным кредитам и займам
    |");
  
  Таб.AddLine("Наименование,Код,Формула,Описание","Прочие доходы","2340","","Суммарный оборот по кредиту счета 91 ""Прочие доходы и расходы"" субсчет ""Прочие доходы"" за минусом:
    |- данных по строкам 2310 и 2320;
    |- оборотов по дебету счета 91 субсчет ""Прочие расходы"" в части НДС (в корреспонденции со счетом 68 субсчет ""Расчеты по НДС"")
    |");
  
  Таб.Подгруппа=СтандартнаяТаблица();
  Таб2=Таб.Подгруппа;

  Таб2.AddLine("Наименование,Код,Формула,Описание","По актам сверки + излишки","2341","","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Премии поставщиков","2342","","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Страх. возмещ. ущерба","2343","","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Продажа векселя","2344","","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Прочие доходы","2345","","");
    
    
  Таб.AddLine("Наименование,Код,Формула,Описание","Прочие расходы","2350","","Суммарный оборот по дебету счета 91 ""Прочие доходы и расходы"" субсчет ""Прочие расходы"" за минусом:
    |- данных по строке 2330;
    |- оборотов по дебету счета 91 субсчет ""Прочие расходы"" в части НДС (в корреспонденции со счетом 68 субсчет ""Расчеты по НДС"")
    |");
  
  Таб.Подгруппа=СтандартнаяТаблица();
  Таб2=Таб.Подгруппа;

  Таб2.AddLine("Наименование,Код,Формула,Описание","Премии покупателям","2351","","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Услуги банка","2352","","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Покупка векселя","2353","","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Не принимаемые в целях налогообложения","2354","","");
  Таб2.AddLine("Наименование,Код,Формула,Описание","Прочие расходы","2355","","");
    
  
  Таб.AddLine("Наименование,Код,Формула,Описание","Прибыль (убыток) до налогообложения","2300","%2200%+%2310%+%2320%+%2340%-%2330%-%2350%","Сумма данных по строкам 2200, 2310, 2320, 2340 за минусом данных по строкам 2330 и 2350");
  Таб.флПодитоги=1;
  
  
  Сч=глНайтиСчет("99.1");
  Суб=глНайтиСубконтоПоИмени(Сч.ВидСубконто1,"Налог на прибыль");
  Таб.AddLine("Наименование,Код,Формула,Описание","Текущий налог на прибыль","2410","99.1@"+Суб.Code+"@@","Разница между суммарными оборотами по дебету и кредиту счета 68 ""Расчеты по налогам и сборам"" субсчет ""Расчеты по текущему налогу на прибыль"" в корреспонденции со счетами:
    |- 09 ""Отложенные налоговые активы"";
    |- 77 ""Отложенные налоговые обязательства"";
    |- 99 ""Прибыли и убытки"" субсчет ""Условный расход (условный доход) по налогу на прибыль"";
    |- 99 ""Прибыли и убытки"" субсчет ""Постоянные налоговые обязательства (активы)""
    |");
  
  Таб.Подгруппа=СтандартнаяТаблица();
  Таб2=Таб.Подгруппа;

  Таб2.AddLine("Наименование,Код,Формула,Описание","Постоянные налоговые обязательства (активы)","2421","","");
  
  Таб.AddLine("Наименование,Код,Формула,Описание","Изменение отложенных налоговых обязательств","2430","","Разница между суммарными оборотами по кредиту и дебету счета 77 ""Отложенные налоговые обязательства"" в "+
    "корреспонденции со счетом 68 ""Расчеты по налогам и сборам"" субсчет ""Расчеты по текущему налогу на прибыль""");
  
  Таб.AddLine("Наименование,Код,Формула,Описание","Изменение отложенных налоговых активов","2450","","Разница между суммарными оборотами по дебету и кредиту счета 09 ""Отложенные налоговые активы"" в корреспонденции "+
    "со счетом 68 ""Расчеты по налогам и сборам"" субсчет ""Расчеты по текущему налогу на прибыль""");
  
  Таб.AddLine("Наименование,Код,Формула,Описание","Прочее","2460","","Обороты по счету 99 ""Прибыли и убытки"", не отраженные в предыдущих строках");
  
  
  Таб.AddLine("Наименование,Код,Формула,Описание","Чистая прибыль (убыток)","2400","%2300%+%2430%+%2450%-%2410%+%2460%","Строка 2300 + (-) строка 2430 + (-) строка 2450 - строка 2410 + (-) строка 2460");
  Таб.флПодитоги=1;
  
  ТБаланс.NewLine();
  ТБаланс.Наименование="СПРАВОЧНО";
  ТБаланс.Подгруппа=СтандартнаяТаблица();
  Таб=ТБаланс.Подгруппа;
  
  Таб.AddLine("Наименование,Код,Формула,Описание","Результат от переоценки внеоборотных активов, не включаемый в чистую прибыль (убыток) периода","2510","","Обороты по дебету и кредиту счетов 83 ""Добавочный капитал"" в корреспонденции со счетами 01 и 04");
  
  Таб.AddLine("Наименование,Код,Формула,Описание","Результат от прочих операций, не включаемый в чистую прибыль (убыток) периода","2520","","Обороты по счетам учета капитала (без учета переоценки внеоборотных активов)");
  
  Таб.AddLine("Наименование,Код,Формула,Описание","Совокупный финансовый результат периода","2500","%2400%+%2510%+%2520%","Сумма данных по строкам 2400, 2510, 2520");
  Таб.флПодитоги=1;
  
  Таб.AddLine("Наименование,Код,Формула,Описание","Базовая прибыль (убыток) на акцию","2900","","Порядок расчета определен в разделе II Методических рекомендаций, утвержденных приказом Минфина России от 21 марта 2000 г. № 29н");
  Таб.AddLine("Наименование,Код,Формула,Описание","Разводненная прибыль (убыток) на акцию","2910","","Порядок расчета определен в разделе III Методических рекомендаций, утвержденных приказом Минфина России от 21 марта 2000 г. № 29н");
  
  Form.оНастройка.Value:="По умолчанию";
EndFunction

Function ЗагрузитьТБаланс()
  If (Uppercase(Form.оНастройка.Value)<>uppercase("По умолчанию")) Then
    Try
      Путь:="Temp\Бухгалтерия\ПрибылиИУбытки\"+Trim(Form.оНастройка.Value)+".set";
      ТБаланс:=ObjectFromFile(Путь);
    Except
      НастройкаПоУмолчанию();
    EndTry;
  Else
    НастройкаПоУмолчанию();
  EndIf;
EndFunction

Function лкНайтиСчет(Счет)
  а:=Ref.бухПланСчетов;
  If not а.Find("Code",Счет) Then
    Exit 0;
  EndIf;
  Exit а;
EndFunction

Function ПериодСтр(НачДата,КонДата)
  If (НачДата=BegOfMonth(НачДата))And(КонДата=EndOfMonth(КонДата)) Then
    Exit FormatDate(НачДата,"MM YYYY г.");
  ElseIf (НачДата=BegOfMonth(НачДата))And(КонДата=EndOfMonth(КонДата)) Then
    Exit FormatDate(НачДата,"q квартал YYYY г.");
  ElseIf (НачДата=BegOfYear(НачДата))And(КонДата=EndOfYear(КонДата)) Then
    Exit FormatDate(НачДата,"YYYY г.");
  Else
    Exit "с "+НачДата+" по "+КонДата;
  EndIf;
EndFunction

Function ПолучитьСубконто(стрСуб,ВидСубконто)
  If Trim(стрСуб)="" Then
    Exit GetNothing();
  EndIf;
  If Trim(ВидСубконто.ТипЗначенияЛокальный)="" Then
    а:=Ref.бухЗначенияСубконто;
    If а.Find("@Parent,Code",ВидСубконто,стрСуб) Then
      Exit а;
    EndIf;
    Exit GetNothing();
  EndIf;
  Стр:=Trim(ВидСубконто.ТипЗначенияЛокальный);
  СтрТип:=Uppercase(TearStr(Стр,"."));
  If (СтрТип="ПЕРЕЧИСЛЕНИЕ")or(СтрТип="ENUM") Then
    Try
      Exit Enum.GetByIndex(Стр,Number(стрСуб));
    Except EndTry;
    Exit GetNothing();
  ElseIf (СтрТип="ДОКУМЕНТ")or(СтрТип="DOC") Then
    а:=DB("Doc."+Стр);
    дДата:=TearStr(стрСуб,"#");
    дНомер:=TearStr(стрСуб,"#");
    If а.Find("DocNum,<DocDate,>=DocDate",дНомер,EndOfYear(дДата)+1,BegOfYear(дДата)) Then
      Exit а;
    EndIf;
    Exit GetNothing();
  EndIf;
  
  Стр:=Replace(Uppercase(Trim(ВидСубконто.ТипЗначенияЛокальный)),"СПРАВОЧНИК.","REF.");
  а:=DB(Стр);
  If а.Find("Code",стрСуб) Then
    Exit а;
  EndIf;
  Exit GetNothing();
EndFunction

Function ПолучитьИлиВыполнитьЗапрос(аСчет,Индекс,НДата,КДата,СубНом)
  оЮЛ:=Form.оЮЛ.Value;
  
  If ТабЗапросы.FindAndGoto(Индекс,,"Индекс")=0 Then
    КДата2:=Min(КДата,Date());
    ТЗ:="Period From НДата to КДата2;
    |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
    |зСч:=Storage.БухгалтерскиеСчета.Счет;
    |зЗБ:=Storage.БухгалтерскиеСчета.Счет.Забалансовый;
    |зСуб:=Storage.БухгалтерскиеСчета.Субконто"+СубНом+";
    |зНачОст:=BegTotals(Сумма);
    |зРасход:=Expense(Сумма);
    |зПриход:=Income(Сумма);
    |Condition(зЗБ=0);
    |Condition(зСч=аСчет);
    |Condition(зЮЛ=оЮЛ);
    |Group зСуб;";
    З2:=Query.Create();
    З2.Execute(ТЗ);
    ТабЗапросы.AddLine("Индекс,Запрос",Индекс,З2);
  EndIf;
  Exit ТабЗапросы.Запрос;
EndFunction

Function ВычислитьПоказатель(ByRef зСм,Тип,НДата,КДата,Формула)
  оЮЛ:=Form.оЮЛ.Value;
  
  См0:=0;
  зСм:=0;
  If Pos("%",Формула)>0 Then
    //Формула подитогов
    стрФорм:="";
    While Формула<>"" Do
      стрФорм:=стрФорм+TearStr(Формула,"%");
      стрИмя:=Number(TearStr(Формула,"%"));
      If стрИмя="" Then
        Continue;
      EndIf;
      
      Фл:=0;
      For i:=1 To ТБаланс.Size() Do
        Код:=ТБаланс.Get(i,"Код");
        If Number(Код)=стрИмя Then
          Фл:=1;
          Чл:=ТБаланс.Get(i,"зСм"+Тип);
          Чл:=?(Чл>=0,Чл,"("+Чл+")");
          стрФорм:=стрФорм+Чл;
          Break;
        EndIf;
        
        Таб:=ТБаланс.Get(i,"Подгруппа");
        For i2:=1 To Таб.Size() Do
          Код:=Таб.Get(i2,"Код");
          If Number(Код)=стрИмя Then
            Чл:=Таб.Get(i2,"зСм"+Тип);
            Чл:=?(Чл>=0,Чл,"("+Чл+")");
            стрФорм:=стрФорм+Чл;
            Фл:=1;
            Break;
          EndIf;
        EndDo;
        
        If Фл Then
          Break;
        EndIf;
      EndDo;
      If not Фл Then
        стрФорм:=стрФорм+"0";
      EndIf;
    EndDo;
    
    Try
      зСм:=Eval(стрФорм);
    Except
      Message("Внимание! Внутренняя ошибка при вычислении формулы подитогов: "+стрФорм+"!","!");
      Exit 0;
    EndTry;
    
    Exit 1;
  EndIf;
  
  While Формула<>"" Do
    Стр:=TearStr(Формула,",");
    флЗнак:=1;
    If Pos("-",Стр)>0 Then
      флЗнак:=-1;
      Стр:=Replace(Стр,"-","");
    EndIf;
    
    флДебет:=0;
    If Pos("Д",Стр)=1 Then
      флДебет:=1;
      Стр:=Mid(Стр,2);
    EndIf;
    
    флКредит:=0;
    If Pos("К",Стр)=1 Then
      флКредит:=1;
      Стр:=Mid(Стр,2);
    EndIf;
    
    чОперация:=0;
    флОперация:=0;
    If Pos("*",Стр)>0 Then
      чОперация:=Стр;
      Стр:=TearStr(чОперация,"*");
      чОперация:=Number(чОперация);
      флОперация:=1;
    ElseIf Pos("/",Стр)>0 Then
      чОперация:=Стр;
      Стр:=TearStr(чОперация,"/");
      чОперация:=Number(чОперация);
      флОперация:=2;
    EndIf;

    
    тСчет:=TearStr(Стр,"@");
    аСчет:=лкНайтиСчет(тСчет);
    If аСчет=0 Then
      Message("Счет "+тСчет+" не найден в конфигурации! Счет пропущен при расчете!","!");
      Continue;
    EndIf;
    
    СмДеб:=0;
    СмКред:=0;
    If Pos("@",Стр)=0 Then
      З.First();
      If З.ResultTable.LocateAndGoto("зСч,@LEVEL",аСчет,1)=0 Then
        Continue;
      EndIf;
      СмДеб:=З.зПриход;
      СмКред:=З.зРасход;
    Else
      //<Суб1>@<Суб2>@<Суб3>
      Фл:=0;
      Фл2:=0;
      Фл3:=0;
      Стр2:=Стр;
      If TearStr(Стр2,"@")<>"" Then
        Фл:=1;
      EndIf;
      If TearStr(Стр2,"@")<>"" Then
        Фл2:=1;
      EndIf;
      If TearStr(Стр2,"@")<>"" Then
        Фл3:=1;
      EndIf;
      If Фл+Фл2+Фл3=1 Then
        //Простая расшифровка -- одно субконто
        СубНом:=?(Фл=1,1,?(Фл2=1,2,3));
        Стр2:=Стр;
        If СубНом=1 Then
          Стр2:=TearStr(Стр2,"@");
          аСуб:=ПолучитьСубконто(Стр2,аСчет.ВидСубконто1);
        ElseIf СубНом=2 Then
          TearStr(Стр2,"@");
          Стр2:=TearStr(Стр2,"@");
          аСуб:=ПолучитьСубконто(Стр2,аСчет.ВидСубконто2);
        Else
          TearStr(Стр2,"@");
          TearStr(Стр2,"@");
          Стр2:=TearStr(Стр2,"@");
          аСуб:=ПолучитьСубконто(Стр2,аСчет.ВидСубконто3);
        EndIf;
        
        З2:=ПолучитьИлиВыполнитьЗапрос(аСчет,тСчет+"@0@"+Фл+"@"+Фл2+"@"+Фл3,НДата,КДата,СубНом);
        If З2=0 Then
          Exit 0;
        EndIf;
        З2.First();
        If З2.ResultTable.LocateAndGoto("зСуб,@LEVEL",аСуб,1)>0 Then
          СмДеб:=З2.зПриход;
          СмКред:=З2.зРасход;
        EndIf;
      Else
        //Сложная расшифровка -- несколько субконто
        Стр2:=Стр;
        аСуб:=ПолучитьСубконто(TearStr(Стр2,"@"),аСчет.ВидСубконто1);
        аСуб2:=ПолучитьСубконто(TearStr(Стр2,"@"),аСчет.ВидСубконто2);
        аСуб3:=ПолучитьСубконто(TearStr(Стр2,"@"),аСчет.ВидСубконто3);
        КДата2:=Min(КДата,Date());
        ТЗ:="Period From НДата to КДата2;
        |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
        |зСч:=Storage.БухгалтерскиеСчета.Счет;
        |зЗБ:=Storage.БухгалтерскиеСчета.Счет.Забалансовый;
        |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
        |зСуб2:=Storage.БухгалтерскиеСчета.Субконто2;
        |зСуб3:=Storage.БухгалтерскиеСчета.Субконто3;
        |зНачОст:=BegTotals(Сумма);
        |зРасход:=Expense(Сумма);
        |зПриход:=Income(Сумма);
        |Condition(зЗБ=0);
        |Condition(зСч=аСчет);
        |Condition(зЮЛ=оЮЛ);"+
        ?(Фл=1,"Condition(зСуб1=аСуб);","")+
        ?(Фл2=1,"Condition(зСуб2=аСуб2);","")+
        ?(Фл3=1,"Condition(зСуб3=аСуб3);","");
        З2:=Query.Create();
        З2.Execute(ТЗ);
        СмДеб:=З2.зПриход;
        СмКред:=З2.зРасход;
      EndIf;
    EndIf;

    См:=СмДеб-СмКред;
    If флДебет=1 Then
      См:=СмДеб;
    ElseIf флКредит=1 Then
      См:=СмКред;
    EndIf;
    
    If флОперация=1 Then
      См:=См*чОперация;
    ElseIf флОперация=2 Then
      См:=См/чОперация;
    EndIf;
    См0:=См0+флЗнак*См;
  EndDo;
  
  зСм:=См0;
  Exit 1;
EndFunction


Function ЗаполнитьДанныеЗаПериод(НДата,КДата,Тип)
  оЮЛ:=Form.оЮЛ.Value;
  
  If КДата<DBVar.НачалоПериодаБазы Then
    Exit 1;
  EndIf;
  ТабЗапросы:=Tab.Create("Индекс,Запрос");//<Счет>@0@{1,0}@{1,0}@{1,0}
                                          //или <Счет>@1@<Суб1>@<Суб2>@<Суб3>
  
  //Основной запрос
  КДата2:=Min(КДата,Date());
  ТЗ:="Period From НДата to КДата2;
  |зЮЛ:=Storage.БухгалтерскиеСчета.ЮрЛицо;
  |зСч:=Storage.БухгалтерскиеСчета.Счет;
  |зЗБ:=Storage.БухгалтерскиеСчета.Счет.Забалансовый;
  |зНачОст:=BegTotals(Сумма);
  |зРасход:=Expense(Сумма);
  |зПриход:=Income(Сумма);
  |Condition(зЗБ=0);
  |Condition(зЮЛ=оЮЛ);
  |Group зСч with folders;";
  З:=Query.Create();
  З.Execute(ТЗ);

  //Расчет
  ТБаланс.Select();
  While ТБаланс.Next() Do
    Таб:=ТБаланс.Подгруппа;
    аСтр:=0;
    Таб.Select();
    While Таб.Next() Do
      аСтр:=аСтр+1;
      См:=0;
      If not ВычислитьПоказатель(См,Тип,НДата,КДата,Таб.Формула) Then
        Exit 0;
      EndIf;
      Таб.Set(аСтр,"зСм"+Тип,См);
      Таб2:=Таб.Подгруппа;
      If IsEmpty(Таб2) Then
        Continue;
      EndIf;
      аСтр2:=0;
      Таб2.Select();
      While Таб2.Next() Do
        аСтр2:=аСтр2+1;
        См:=0;
        If not ВычислитьПоказатель(См,Тип,НДата,КДата,Таб2.Формула) Then
          Exit 0;
        EndIf;
        Таб2.Set(аСтр2,"зСм"+Тип,См);
      EndDo;
    EndDo;
  EndDo;
  
  Exit 1;
EndFunction


Function OnExecute(СпУстановки)
  оЮЛ:=Form.оЮЛ.Value;
  оСуммы:=Form.оСуммы.Value.SelectedLine();
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оЗнаков:=Form.оЗнаков.Value;
  
  If оЮЛ.Selected()=0 Then
    Box("Выберите юридическое лицо!",Q_STOP);
    Exit;
  EndIf;

  ЗагрузитьТБаланс();
  
  пПериод:=ПериодСтр(НачДата,КонДата);
  пДата:=FormatDate(КонДата,"YYYYmmdd");
  пГод:=GetYear(КонДата);
  пМесяц:=FormatDate(КонДата,"mm");
  пЧисло:=FormatDate(КонДата,"dd");
  пОрганизация:="Организация "+Trim(оЮЛ.ПолнНаименование);
  пВидДеятельности:="Вид экономической деятельности "+Trim(оЮЛ.ОсновнойВидДеятельности);
  пИНН:=Trim(оЮЛ.ИНН);
  пИНН:=TearStr(пИНН,"/");
  пОКПО:=Trim(оЮЛ.ОКПО);
  пОКОПФ:=Trim(оЮЛ.ОКОПФ);
  пОКФС:=Trim(оЮЛ.ОКФС);
  пОКВЭД:="";
  пФС:=Trim(оЮЛ.ФормаСобственности);
  пОПФ:=Trim(оЮЛ.ОргПравФорма);
  пАдрес:=глПредставлениеАдреса(оЮЛ.ЮрАдрес);
  пПериод1:="За "+пПериод;
  НачДата2:=AddMonth(BegOfDay(НачДата),-12);
  КонДата2:=AddMonth(BegOfDay(КонДата),-12);
  If (BegOfMonth(НачДата)=BegOfDay(НачДата))And(EndOfMonth(КонДата)=BegOfDay(КонДата)) Then
    НачДата2:=BegOfMonth(НачДата2);
    КонДата2:=EndOfMonth(КонДата2);//TODO: не совсем верно
  ElseIf (BegOfQuarter(НачДата)=BegOfDay(НачДата))And(EndOfQuarter(КонДата)=BegOfDay(КонДата)) Then
    НачДата2:=BegOfQuarter(НачДата2);
    КонДата2:=EndOfQuarter(КонДата2);//TODO: не совсем верно
  EndIf;
  пПериод2:="За "+ПериодСтр(НачДата2,КонДата2);
  
  Коэфф:=1;
  пОКЕИ:="383"; 
  пЕдиница:="руб.";
  If оСуммы=2 Then
    Коэфф:=1000;
    пЕдиница:="тыс. руб.";
    пОКЕИ:="384";
  ElseIf оСуммы=3 Then
    Коэфф:=1000000;
    пЕдиница:="млн. руб.";
    пОКЕИ:="385";
  EndIf;
  
  
  //Очистка сумм
  ТБаланс.Select();
  While ТБаланс.Next() Do
    ТБаланс.зСм:=0;
    ТБаланс.зСм2:=0;
    Таб:=ТБаланс.Подгруппа;
    Таб.Select();
    While Таб.Next() Do
      Таб.зСм:=0;
      Таб.зСм2:=0;
      Таб2:=Таб.Подгруппа;
      If IsEmpty(Таб2) Then
        Continue;
      EndIf;
      Таб2.Select();
      While Таб2.Next() Do
        Таб2.зСм:=0;
        Таб2.зСм2:=0;
      EndDo;
    EndDo;
  EndDo;
  

  If not ЗаполнитьДанныеЗаПериод(НачДата,КонДата,"") Then
    Exit;
  EndIf;
  If not ЗаполнитьДанныеЗаПериод(НачДата2,КонДата2,"2") Then
    Exit;
  EndIf;
  
  
  //Вывод
  аСтр:=0;
  аНомРаздела:=0;
  Т:=Table.Create();  
  Т.CopyByX("v1",1);
  ТБаланс.Select();
  While ТБаланс.Next() Do
    аСтр:=аСтр+1;
    If аСтр>1 Then
      Т.PageBreaks.Add();
      Т.CopyByX("v7",1);
    EndIf;
    Таб:=ТБаланс.Подгруппа;
    
    Таб.Select();
    While Таб.Next() Do
      пКод:=Таб.Код;
      пСм:=лкФРМ(Таб.зСм);
      пСм2:=лкФРМ(Таб.зСм2);
      If Таб.флПодитоги=1 Then
        пПодитог:=Таб.Наименование;
        Т.CopyByX("v4",1);
      Else
        пПоказатель:=Таб.Наименование;
        Т.CopyByX("v2",1);
      EndIf;
      
      Таб2:=Таб.Подгруппа;
      If IsEmpty(Таб2) Then
        Continue;
      EndIf;
      If Таб2.Size()=0 Then
        Continue;
      EndIf;
      Т.CopyByX("v3",1);
      
      Таб2.Select();
      While Таб2.Next() Do
        пРасшифровка:=Таб2.Наименование;
        пКод:=Таб2.Код;
        пСм:=лкФРМ(Таб2.зСм);
        пСм2:=лкФРМ(Таб2.зСм2);
        Т.CopyByX("v5",1);
      EndDo;
    EndDo;
  EndDo;
  
  Т.CopyByX("v8",1);
  глПечатнаяФормаОтчета(Т,Param,"Бухгалтерский отчет о прибылях и убытках");
EndFunction



