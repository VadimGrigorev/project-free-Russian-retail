//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
var ФлОшибки Export;
var ТЛог Export;
var ТДок Export;
var ДНач Export;
Var НачПериод Export;
var КонПериод Export;
var ТОстатки Export;
var Приход1 Export;
var Расход1 Export;
var ПриходКв Export;
var РасходКв Export;



Function ВыбраныОсобыеФильтры()
  оК:=Form.оК.Value;
  Exit _Or(оК.Get(1).Size()>0,оК.Get(2).Size()>0);
EndFunction

Function ДобавитьВИтогиОбычныйДокумент(зДок,зДокОплаты,ДатаОтображения,ТИтоги,См)
  If _Or(Form.оПоДокументамОплаты.Value=1,ТИтоги.FindAndGoto(зДок,,"ПервичныйДок")=0) Then
    ТИтоги.AddLine("ФлАванс,Дата,Сумма,ДокОплаты,ПервичныйДок",0,ДатаОтображения,См,зДокОплаты,зДок);
  Else
    ТИтоги.Сумма:=ТИтоги.Сумма+См;
    ТИтоги.ДокОплаты:=зДокОплаты;
  EndIf;
EndFunction

Function ДобавитьВЛогОшибок(пДок,пТекст,ФлДоходы)
  пДокР:=пДок;
  пТип:=?(ФлДоходы=1,"Доходы","Расходы");
  ТЛог.CopyByX("v2",1);
  ФлОшибки:=1;
EndFunction


Function ДобавитьВЛогДокументов(пДок,См,пДата,пТекст,ФлДоходы)
  пДокР:=пДок;
  пТип:=?(ФлДоходы=1,"Доходы","Расходы");
  пМесяц:=FormatDate(пДата,"MM YYYY г.");
  пСумма:=глФРМ(См);
  ТДок.CopyByX("v2",1);
EndFunction

Function ДокументИсключение(д)
  If д.DBName()="ПодотчетнаяОперация" Then
    If д.КодОперации=Enum.коПодотчетнаяОперация.Прочее Then
      Exit 1;
    EndIf;
  EndIf;
  Exit 0;
EndFunction

Function ДобавитьДокументКДате(пДата,дОриг,дОп)
  If (дОп<>0)And(дОриг<>0) Then
    Вид:=дОп.DBName();
    If Вид="КорректировкаДолга" Then
      Вид:="Корректировка";
    ElseIf Вид="ВыпискаБанкаПриход" Then
      Вид:="Выписка";
    ElseIf Вид="ВыпискаБанкаРасход" Then
      Вид:="Выписка";
    EndIf;
    пДата:=Вид+" № "+дОп.DocNum+" от "+пДата;
  EndIf;
  Exit пДата;
EndFunction

Function ПериодСтр(НачДата,КонДата)
  If (НачДата=BegOfMonth(НачДата))And(КонДата=EndOfMonth(КонДата)) Then
    Exit FormatDate(НачДата,"MM YYYY г.");
  ElseIf (НачДата=BegOfMonth(НачДата))And(КонДата=EndOfMonth(КонДата)) Then
    Exit FormatDate(НачДата,"q квартал YYYY г.");
  ElseIf (НачДата=BegOfYear(НачДата))And(КонДата=EndOfYear(КонДата)) Then
    Exit FormatDate(НачДата,"YYYY г.");
  Else
    Exit "с "+НачДата+" по "+КонДата;
  EndIf;
EndFunction

Function ПолучитьСодержание(д,флАванс)
  оКомм:=Form.оКомм.Value;
  
  пСодержание:=""+д;
  If флАванс=1 Then
    пСодержание:=пСодержание+" (аванс)";
  ElseIf флАванс=2 Then
    пСодержание:=пСодержание+" (зачтенный аванс)";
  EndIf;
  If _And(not isEmpty(д),глЕстьРеквизитДокумента("Контрагент",д.DBName())) Then
    If д.Контрагент.Selected()<>0 Then
      пСодержание:=пСодержание+_NEWLINE+Trim(д.Контрагент.ПолнНаименование)+?((оКомм=0)And(not IsEmpty(д.Комментарий)),", "+Trim(д.Комментарий));
    Else
      If оКомм=0 Then
        пСодержание:=пСодержание+_NEWLINE+Trim(д.Комментарий);
      EndIf;
    EndIf;
  ElseIf not isEmpty(д) Then
    If оКомм=0 Then
      пСодержание:=пСодержание+_NEWLINE+Trim(д.Комментарий);
    EndIf;
  EndIf;
  Exit пСодержание;
EndFunction

Function ДобавитьРасходныйДокумент(ТИтоги,ТИтоги2,Тд,ДокОплаты,ByRef аИндекс,Сумма,ФлПост,ФлЗнак,зСмОстаток=0)
  While (аИндекс<=Тд.Size())And(Сумма>0) Do
    Тд.CurLine:=аИндекс;
    См3:=Min(Тд.зСмОплатить,Сумма);
    Тд.зСмОплатить:=Тд.зСмОплатить-См3;
    зСмОстаток:=зСмОстаток-См3;
    Сумма:=Сумма-См3;
    
    Фл:=0;
    зДок:=Тд.зДок;
    If (зДок=0)And(ДокОплаты=0) Then
      ДатаОплаты:=BegOfMonth(Form.НачДата.Value-365);
    Else
      ДатаОплаты:=?(ДокОплаты=0,зДок.DocDate,ДокОплаты.DocDate);
    EndIf;  
    If Фл=0 Then
      //Обычные документы
      If (ФлПост=1)And(зДок<>0) Then
        If зДок.DBName()="ПоступлениеТМЦ" Then
          См4:=Max(Тд.зСмНужноИспользовать,Тд.зСмМожноИспользовать);
          If См4<См3 Then
            ДобавитьВЛогДокументов(зДок,См4,ДатаОплаты,"Только "+глФРМ(См4)+" из "+глФРМ(См3)+" попало в расходы, так как "+
              "не вся закупленная продукция была реализована!",ФлЗнак);
          EndIf;
  
          См3:=Min(См3,См4);
          Тд.зСмНужноИспользовать:=Max(0,Тд.зСмНужноИспользовать-См3);
          Тд.зСмМожноИспользовать:=Max(0,Тд.зСмМожноИспользовать-См3);
        EndIf;
      EndIf;
      
      
      If См3>0 Then
        If зДок=0 Then
          ДобавитьВИтогиОбычныйДокумент(зДок,ДокОплаты,ДНач-1,ТИтоги,См3);
          ДобавитьВЛогДокументов(ДокОплаты,См3,ДатаОплаты,"Был добавлен, как "+?(ТИтоги.Сумма=Тд.зСм,"полностью","частично")+" закрытый документ за пределами вычисления (в таблице показан документ оплаты)",ФлЗнак);
        Else
          ДобавитьВИтогиОбычныйДокумент(зДок,ДокОплаты,?(ДокОплаты=0,BegOfDay(зДок.DocDate),BegOfDay(ДокОплаты.DocDate)),ТИтоги,См3);
          ДобавитьВЛогДокументов(зДок,См3,ДатаОплаты,"Был добавлен, как "+?(ТИтоги.Сумма=Тд.зСм,"полностью","частично")+" оплаченный документ, оплата: "+ДокОплаты,ФлЗнак);
        EndIf;
      EndIf;
    EndIf;
    
    If Тд.зСмОплатить=0 Then
      аИндекс:=аИндекс+1;
    EndIf;
  EndDo;
  
  Exit зСмОстаток;
EndFunction

//ТИтоги -- текущая книга
//ТИтоги2 -- противоположная книга
Function ВычислитьИДобавитьВТаблицу(З,ТИтоги,ТИтоги2,Взв,ФлЗнак)
  оБезРеал:=Form.оБезРеал.Value;

  Тд:=Tab.Create("зДок,зДП");
  Тд.AddColumn("зСм",,"Number");
  Тд.AddColumn("зСмОплатить",,"Number");
  Тд.AddColumn("зСмМожноИспользовать",,"Number");//За любой период
  Тд.AddColumn("зСмНужноИспользовать",,"Number");//Только за текущий период
  
  ТдОплаты:=Tab.Create("зДок,зДП");
  ТдОплаты.AddColumn("зСм",,"Number");
  ТдОплаты.AddColumn("зСмОстаток",,"Number");
  ТдОплаты.AddColumn("зСмАванс",,"Number");
  
  ФлПокупатель:=ФлЗнак=1;
  Пост:="ПоступлениеТМЦ";
  
  If ФлЗнак*З.зСмНО>0 Then
    Тд.AddLine("зДок,зСм,зДП,зСмОплатить",0,ФлЗнак*З.зСмНО,ДНач-1,ФлЗнак*З.зСмНО);
  ElseIf ФлЗнак*З.зСмНО<0 Then
    ТдОплаты.AddLine("зДок,зСм,зДП,зСмОстаток",0,-ФлЗнак*З.зСмНО,ДНач-1,-ФлЗнак*З.зСмНО);
  EndIf;
  
  зК:=З.зК;
  While З.Next(3) Do
    зДок:=З.Документ;
    If isEmpty(зДок) Then
      Continue;
    EndIf;
    Form.StatusText("Расчет: "+зК+" ("+BegOfDay(зДок.DocDate)+")");
    См0:=(З.зСмП-З.зСмР)*ФлЗнак;
    пДата:=BegOfDay(зДок.DocDate);
    If См0>0 Then
      Тд.AddLine("зДок,зСм,зДП,зСмОплатить",зДок,См0,пДата,См0);
      If (not ФлПокупатель)And(оБезРеал=0) Then
        If зДок.DBName()=Пост Then
          //Для поступлений товара (ТМЦ) имеется дополнительное условие для включение в книгу расходов:
          //Товар из этого поступления должен уйти со склада (реализациями, списаниями или каким-то другим образом)
          //Чтобы исключить перемещения м/у виртуальными складами из расходов, движение ТМЦ будет браться в разрезе ТМЦ и филиалов, а не ТМЦ и складов
          См:=0;
          См2:=0;
          зФилКод:=""+зДок.Склад.Магазин.Code+"@";
          aTab:=зДок.LineParts("Номенклатура");
          aTab.Select();
          While aTab.Next() Do
            If ((aTab.Номенклатура.ВидНоменклатуры<>Enum.ВидыНоменклатуры.Тара)Or(aTab.СтавкаНДС<>Enum.СтавкиНДС.БезНДС))And(aTab.Количество>0) Then
              Индекс:=зФилКод+aTab.Номенклатура.Code;
              If ТОстатки.FindAndGoto(Индекс,,"Индекс")>0 Then
                Кл:=Min(ТОстатки.зК,aTab.Количество);
                ТОстатки.зК:=ТОстатки.зК-Кл;
                См:=См+Round(aTab.Сумма/aTab.Количество*Кл,2);
                
                If ТОстатки.зК<ТОстатки.зКЭтотПериод Then
                  Кл:=Min(ТОстатки.зКЭтотПериод-ТОстатки.зК,aTab.Количество);
                  ТОстатки.зКЭтотПериод:=ТОстатки.зКЭтотПериод-Кл;
                  См2:=См2+Round(aTab.Сумма/aTab.Количество*Кл,2);
                EndIf;
              EndIf;
            EndIf;
          EndDo;
          Тд.зСмМожноИспользовать:=См;
          Тд.зСмНужноИспользовать:=См2;
        EndIf;
      EndIf;
      
    ElseIf См0<0 Then
      ТдОплаты.AddLine("зДок,зСм,зДП,зСмОстаток",зДок,-См0,пДата,-См0);
    EndIf;
  EndDo;
  
  //Отнимаем возвраты
  i:=0;
  While i<ТдОплаты.Size() Do
    i:=i+1;
    ТдОплаты.CurLine:=i;
    Form.StatusText("Расчет: "+зК+" (Оплаты "+i+"/"+ТдОплаты.Size()+")");
    Вид:="";
    If ТдОплаты.зДок<>0 Then
      Вид:=ТдОплаты.зДок.DBName();
    EndIf;
    If Вид=Взв Then
      зРл:=ТдОплаты.зДок.ДокОснование;
      If Тд.FindAndGoto(зРл,,"зДок")>0 Then
        См1:=Min(ТдОплаты.зСмОстаток,Тд.зСмОплатить);
        Тд.зСмОплатить:=Тд.зСмОплатить-См1;
        ТдОплаты.зСмОстаток:=ТдОплаты.зСмОстаток-См1;
        If ТдОплаты.зСмОстаток=0 Then
          ТдОплаты.Remove(i);
          i:=i-1;
        EndIf;
      EndIf;
    EndIf;
  EndDo;
  
  //Посчитываем сальдо на начало периода без авансов, таблица Тб
  Form.StatusText("Расчет: "+зК+" (Сальдо)");
  аОплата:=1;
  СмСальдо:=0;
  Тд.Select();
  While Тд.Next() Do
    If Тд.зДП>=НачПериод Then
      Break;
    EndIf;
    If Тд.зСмОплатить=0 Then
      Continue;
    EndIf;
    While (аОплата<=ТдОплаты.Size())And(Тд.зСмОплатить>0) Do
      ТдОплаты.CurLine:=аОплата;
      If ТдОплаты.зДП>=НачПериод Then
        аОплата:=ТдОплаты.Size()+1;
        Break;
      EndIf;
      См1:=Min(ТдОплаты.зСмОстаток,Тд.зСмОплатить);
      Тд.зСмОплатить:=Тд.зСмОплатить-См1;
      If _And(not ФлПокупатель,оБезРеал=0,Тд.зДок<>0) Then
        If Тд.зДок.DBName()=Пост Then
          If Тд.зСмНужноИспользовать>0 Then
            См2:=Min(См1,Тд.зСмНужноИспользовать);
            If См2>0 Then
              ДобавитьВИтогиОбычныйДокумент(Тд.зДок,ТдОплаты.зДок,КонПериод,ТИтоги,См2);
              Тд.зСмНужноИспользовать:=Max(0,Тд.зСмНужноИспользовать-См2);
              Тд.зСмМожноИспользовать:=Max(0,Тд.зСмМожноИспользовать-См2);
              ДатаОплаты:=?(isEmpty(ТдОплаты.зДок),Тд.зДок.DocDate,ТдОплаты.зДок.DocDate);
              ДобавитьВЛогДокументов(Тд.зДок,См2,ДатаОплаты,"Поступление из прошлого периода было отражено в этом периоде после того, как произошел расход товара. Отраженная сумма "+
                глФРМ(См2)+" из "+глФРМ(Тд.зСм)+"!",ФлЗнак);
            EndIf;
          EndIf;
        EndIf;
      EndIf;
      ТдОплаты.зСмОстаток:=ТдОплаты.зСмОстаток-См1;
      If ТдОплаты.зСмОстаток=0 Then
        аОплата:=аОплата+1;
      EndIf;
    EndDo;
    СмСальдо:=СмСальдо+Тд.зСмОплатить;
  EndDo;
  
  //Книга доходов: всегда показывать авансы
  //Книга расходов: никогда не показывать авансы, никогда не показывать зачтенные авансы
  
  //Посчитываем сальдо на начало периода (с авансами), таблица ТдОплаты
  //Копируем в результат закрытые авансы
  Form.StatusText("Расчет: "+зК+" (Авансы)");
  аОплата:=1;
  ТдОплаты.Select();
  While ТдОплаты.Next() Do
    If ТдОплаты.зДП>=НачПериод Then
      Break;
    EndIf;
    If ТдОплаты.зСмОстаток=0 Then
      Continue;
    EndIf;
    If (СмСальдо-ТдОплаты.зСмОстаток<0)And(ФлПокупатель=1) Then
      См1:=Min(ТдОплаты.зСмОстаток-СмСальдо,ТдОплаты.зСмОстаток);
      См2:=См1;
      ПервичныйДок:=0;
      While (аОплата<=Тд.Size())And(См2>0) Do
        Тд.CurLine:=аОплата;
        См3:=Min(Тд.зСмОплатить,См2);
        Тд.зСмОплатить:=Тд.зСмОплатить-См3;
        ТдОплаты.зСмОстаток:=ТдОплаты.зСмОстаток-См3;
        См2:=См2-См3;
        If См3>0 Then
          ПервичныйДок:=Тд.зДок;
        EndIf;
        If Тд.зСмОплатить=0 Then
          аОплата:=аОплата+1;
        EndIf;
      EndDo;
      См2:=См1-См2;
      If См2>0 Then
        If ТдОплаты.зДок=0 Then
          ДобавитьВЛогОшибок(GetNothing(),"Контрагент "+З.зД.Parent()+" ("+З.зД.Parent().Code+") договор "+З.зД+" закрытый аванс выходит за пределы формирования отчета (или базы)!",1);
          Message("Контрагент %LINK% ("+З.зД.Parent().Code+") договор %LINK% закрытый аванс выходит за пределы формирования отчета (или базы)!","!",З.зД.Parent(),З.зД);
        Else
          ТИтоги2.AddLine("ФлАванс,Дата,Сумма,ДокОплаты,ПервичныйДок",2,BegOfDay(ПервичныйДок.DocDate),См2,ТдОплаты.зДок,ПервичныйДок);
          ДобавитьВЛогДокументов(ТдОплаты.зДок,См2,ТдОплаты.зДок.DocDate,"Добавлен, как закрытый аванс с суммой "+глФРМ(См2),ФлЗнак);
        EndIf;
      EndIf;
    EndIf;
    СмСальдо:=СмСальдо-ТдОплаты.зСмОстаток;
    ТдОплаты.зСмОстаток:=0;
  EndDo;
  //СмСальдо -- полное сальдо на начало периода
  
  //Добавляем расходные документы, пока не закроем аванс на начало месяца
  //Внимание: аОплата используется из прошлого цикла
  СмИтогоОстатокДолга:=Тд.Sum("зСмОплатить");
  While (СмСальдо<0)And(СмИтогоОстатокДолга>0) Do
    См2:=Min(-СмСальдо,СмИтогоОстатокДолга);
    СмИтогоОстатокДолга:=СмИтогоОстатокДолга-См2;
    СмСальдо:=СмСальдо+См2;

    ДобавитьРасходныйДокумент(ТИтоги,ТИтоги2,Тд,0,аОплата,См2,(ФлПокупатель=0)And(оБезРеал=0),ФлЗнак);
  EndDo;
  
  
  //Добавляем остатки расходных документов, пока есть, что оплачивать
  //Внимание: аОплата используется из прошлого цикла
  ТдОплаты.Select();
  While ТдОплаты.Next() Do
    If ТдОплаты.зДП<НачПериод Then
      Continue;
    EndIf;
    If ТдОплаты.зСмОстаток=0 Then
      Continue;
    EndIf;
    Form.StatusText("Расчет: "+зК+" (Оплаты-2 "+ТдОплаты.CurLine+"/"+ТдОплаты.Size()+")");
    
    См2:=Min(ТдОплаты.зСмОстаток,СмИтогоОстатокДолга);
    СмИтогоОстатокДолга:=СмИтогоОстатокДолга-См2;
    ТдОплаты.зСмОстаток:=ДобавитьРасходныйДокумент(ТИтоги,ТИтоги2,Тд,ТдОплаты.зДок,аОплата,См2,(ФлПокупатель=0)And(оБезРеал=0),ФлЗнак,ТдОплаты.зСмОстаток);

    If (СмИтогоОстатокДолга=0)And(ТдОплаты.зСмОстаток>0) Then
      //Добавляем как аванс
      If ФлПокупатель=1 Then
        ТИтоги.AddLine("ФлАванс,Дата,Сумма,ДокОплаты,ПервичныйДок",1,BegOfDay(ТдОплаты.зДок.DocDate),ТдОплаты.зСмОстаток,ТдОплаты.зДок,0);
        ДобавитьВЛогДокументов(ТдОплаты.зДок,ТдОплаты.зСмОстаток,ТдОплаты.зДок.DocDate,"Добавлен, как аванс с суммой "+глФРМ(ТдОплаты.зСмОстаток),ФлЗнак);
      EndIf;
      Continue;
    EndIf;
  EndDo;
  
  ТдОплаты:=0;
  Тд:=0;
EndFunction


Function ВывестиДиапазон(Т,ТИтогиПлюс,ТИтогиМинус,ByRef Приход0,ByRef Расход0,пН)
  нДата:=0;
  нДата2:=0;
  ТИтогиПлюс.Select();
  While ТИтогиПлюс.Next() Do
    нДата:=?(нДата=0,ТИтогиПлюс.Дата,Min(ТИтогиПлюс.Дата,нДата));
    нДата2:=?(нДата2=0,ТИтогиПлюс.Дата,Max(ТИтогиПлюс.Дата,нДата2));
  EndDo;
  ТИтогиМинус.Select();
  While ТИтогиМинус.Next() Do
    нДата:=?(нДата=0,ТИтогиМинус.Дата,Min(ТИтогиМинус.Дата,нДата));
    нДата2:=?(нДата2=0,ТИтогиМинус.Дата,Max(ТИтогиМинус.Дата,нДата2));
  EndDo;
  
  While нДата<=нДата2 Do
    аПлюс:=1;аМинус:=1;
    While аПлюс<=ТИтогиПлюс.Size() Do
      ТИтогиПлюс.CurLine:=аПлюс;
      пДок2:=ТИтогиПлюс.ДокОплаты;
      пДата:=ТИтогиПлюс.Дата;
      If пДата<>нДата Then
        аПлюс:=аПлюс+1;
        Continue;
      EndIf;
      пДата:=ДобавитьДокументКДате(пДата,ТИтогиПлюс.ПервичныйДок,ТИтогиПлюс.ДокОплаты);
      
      If Round(ТИтогиПлюс.Сумма,2)<>0 Then
        д:=ТИтогиПлюс.ПервичныйДок;
        If д=0 Then
          д:=ТИтогиПлюс.ДокОплаты;
        EndIf;
        If _And(not IsEmpty(д),глЕстьРеквизитДокумента("УчитыватьВНалоговомУчете",д.DBName())) Then
          If _And(д.УчитыватьВНалоговомУчете=0,not ДокументИсключение(д),ТИтогиПлюс.ФлАванс=0) Then
            ДобавитьВЛогОшибок(д,"Документ исключен из книги доходов или расходов (не стоит галка ""учитывать в книге"") (1)!",1);
            аПлюс:=аПлюс+1;
            Continue;
          EndIf;
        EndIf;
        пДок:=д;
        пН:=пН+1;
        пСодержание:=ПолучитьСодержание(д,ТИтогиПлюс.флАванс);
        Приход0:=Приход0+ТИтогиПлюс.Сумма;
        
        пПриход:=глФРМ(ТИтогиПлюс.Сумма);
        пРасход:="";
        Т.CopyByX("v2",1);
        Form.StatusText(Т.Height());
      EndIf;
      аПлюс:=аПлюс+1;
    EndDo;
    
    While аМинус<=ТИтогиМинус.Size() Do
      ТИтогиМинус.CurLine:=аМинус;
      пДок2:=ТИтогиМинус.ДокОплаты;
      пДата:=ТИтогиМинус.Дата;
      If (пДата<>нДата)Or(ТИтогиМинус.флАванс=2) Then //Зачтенные авансы не показывать, они учтены в общей сумме доходов
        аМинус:=аМинус+1;
        Continue;
      EndIf;
      пДата:=ДобавитьДокументКДате(пДата,ТИтогиМинус.ПервичныйДок,ТИтогиМинус.ДокОплаты);
      
      If Round(ТИтогиМинус.Сумма,2)<>0 Then
        д:=ТИтогиМинус.ПервичныйДок;
        If д=0 Then
          д:=ТИтогиМинус.ДокОплаты;
        EndIf;
        If _And(not IsEmpty(д),глЕстьРеквизитДокумента("УчитыватьВНалоговомУчете",д.DBName())) Then
          If _And(д.УчитыватьВНалоговомУчете=0,not ДокументИсключение(д),ТИтогиМинус.ФлАванс=0) Then
            ДобавитьВЛогОшибок(д,"Документ исключен из книги доходов или расходов (не стоит галка ""учитывать в книге"") (2)!",1);
            аМинус:=аМинус+1;
            Continue;
          EndIf;
        EndIf;
        пДок:=д;
        пН:=пН+1;
        пСодержание:=ПолучитьСодержание(д,ТИтогиМинус.флАванс);
        Расход0:=Расход0+ТИтогиМинус.Сумма;
        
        пПриход:="";
        пРасход:=глФРМ(ТИтогиМинус.Сумма);
        Т.CopyByX("v2",1);
        Form.StatusText(Т.Height());
      EndIf;
      аМинус:=аМинус+1;
    EndDo;
    
    нДата:=нДата+1;
  EndDo;
EndFunction

Function РассчитатьПериод(Т,НачДата0,КонДата0)
  оК:=Form.оК.Value;
  оЮЛ:=Form.оЮЛ.Value;
  оБезРеал:=Form.оБезРеал.Value;
  КонДата:=BegOfDay(Form.КонДата.Value);

  НачПериод:=НачДата0;
  КонПериод:=КонДата0;
  
  ТИтогиПлюс:=Tab.Create("Дата,ПервичныйДок,ДокОплаты");
  ТИтогиПлюс.AddColumn("Сумма",,"Number");
  ТИтогиПлюс.AddColumn("ФлАванс",,"Number");//1 -- аванс, 2 -- закрытый аванс
  
  ТИтогиМинус:=Tab.Create("Дата,ПервичныйДок,ДокОплаты");
  ТИтогиМинус.AddColumn("Сумма",,"Number");
  ТИтогиМинус.AddColumn("ФлАванс",,"Number");//1 -- аванс, 2 -- закрытый аванс
  
  Form.StatusText("Выполнение запроса по взаиморасчетам...");
  ДНач:=BegOfMonth(КонПериод-120);
  aNum:=Storage.Взаиморасчеты.ElementsNumber("~(@DATE>=ДНач)And(@DATE<=КонПериод)And(Договор.ЮрЛицо=оЮЛ)");
  If (aNum>400000)And(PointerSize=4) Then
    ДНач:=BegOfMonth(КонПериод-90);
  EndIf;
  
  НульТара:=GetNothing("Ref.тмцНоменклатура");
  If Form.оОбъединять.Value=0 Then
    ТЗ:="Period From ДНач to КонПериод;
    |зД:=Storage.Взаиморасчеты.Договор;
    |зК:=Storage.Взаиморасчеты.Договор.@Parent;
    |Документ:=Storage.Взаиморасчеты.@LINK;
    |Condition(зК IN оК.Get(1));
    |Condition(зК NOT IN оК.Get(2));
    |зЮЛ:=Storage.Взаиморасчеты.Договор.ЮрЛицо;
    |Condition(зЮЛ=оЮЛ);
    |зВидДолга:=Storage.Взаиморасчеты.ВидДолга;
    |зТара:=Storage.Взаиморасчеты.Тара;
    |Condition(isEmpty(зТара));
    |зДД:=Storage.Взаиморасчеты.ДатаЗадолженности;
    |зДП:=Storage.Взаиморасчеты.ДатаПродажи;
    |зСмНО:=BegTotals(Сумма);
    |зСмП:=Income(Сумма);
    |зСмР:=Expense(Сумма);
    |Group зВидДолга,зД,Документ;";
    
    З:=Query.Create();
    З.Execute(ТЗ,0);
    З.DoNotMassLoadBeforeAggregation:=1;
  Else
    ДНач:=BegOfMonth(КонПериод-365);
    ДКон:=КонПериод+1;
    аСтроки:=TempDB.Create("зСмП:Number.17.2,зСмР:Number.17.2,зВидДолга:DB,зД:DB,зДата:Date,Документ:DOC,зДокОснование:DOC,зТип:Number.2");
    аСтроки.LoadFrom("Storage.Взаиморасчеты","?(@EXPENSE=0,Сумма,0)->зСмП,?(@EXPENSE=1,Сумма,0)->зСмР,ВидДолга->зВидДолга,Договор->зД,BegOfDay(@DATE)->зДата,@LINK->Документ",
      "@DATE>=ДНач","@Date<ДКон","Договор.ЮрЛицо=оЮЛ","isEmpty(Тара)","Договор.@Parent IN оК.Get(1)","Договор.@Parent NOT IN оК.Get(2)",
      "IsType(@LINK,Doc.Реализация,Doc.ВозвратОтПокупателя,Doc.ВыпискаБанкаПриход,Doc.ПКО,Doc.РКО)",
      "(@LINK..Doc.Реализация.КодОперации=Enum.коРеализация.РеализацияРозничная)Or(@LINK..Doc.ВозвратОтПокупателя.КодОперации=Enum.коВозвратОтПокупателя.ВозвратРозничный)"+
      "Or(IsType(@LINK,Doc.ПКО,Doc.РКО))");
    аСтроки.Update("Doc.ПКО:Документ","Документ..Doc.ПКО.ДокОснование->зДокОснование");
    аСтроки.Update("Doc.РКО:Документ","Документ..Doc.РКО.ДокОснование->зДокОснование");
    аСтроки.Remove("(IsType(Документ,Doc.ПКО))And((IsEmpty(зДокОснование))Or(Not IsType(зДокОснование,Doc.Реализация))Or(зДокОснование..Doc.Реализация.КодОперации<>Enum.коРеализация.РеализацияРозничная))");
    аСтроки.Remove("(IsType(Документ,Doc.РКО))And((IsEmpty(зДокОснование))Or(Not IsType(зДокОснование,Doc.ВозвратОтПокупателя))Or(зДокОснование..Doc.ВозвратОтПокупателя.КодОперации<>Enum.коВозвратОтПокупателя.ВозвратРозничный))");
    аСтроки.Update("Doc.Реализация:Документ","0->зТип");
    аСтроки.Update("Doc.ВозвратОтПокупателя:Документ","1->зТип");
    аСтроки.Update("Doc.ПКО:Документ","2->зТип");
    аСтроки.Update("Doc.РКО:Документ","3->зТип");
    аСтроки.Group("зВидДолга,зД,зДата,зТип","зСмП,зСмР,Документ:MIN");
      
    аСтроки2:=TempDB.Create("зСмП:Number.17.2,зСмР:Number.17.2,зВидДолга:DB,зД:DB,Документ:DOC,зДокОснование:DOC");
    аСтроки2.LoadFrom("Storage.Взаиморасчеты","?(@EXPENSE=0,Сумма,0)->зСмП,?(@EXPENSE=1,Сумма,0)->зСмР,ВидДолга->зВидДолга,Договор->зД,@LINK->Документ",
      "@DATE>=ДНач","@Date<ДКон","Договор.ЮрЛицо=оЮЛ","isEmpty(Тара)","Договор.@Parent IN оК.Get(1)","Договор.@Parent NOT IN оК.Get(2)",
      "(@LINK..Doc.Реализация.КодОперации<>Enum.коРеализация.РеализацияРозничная)And(@LINK..Doc.ВозвратОтПокупателя.КодОперации<>Enum.коВозвратОтПокупателя.ВозвратРозничный)");
    аСтроки2.Update("Doc.ПКО:Документ","Документ..Doc.ПКО.ДокОснование->зДокОснование");
    аСтроки2.Update("Doc.РКО:Документ","Документ..Doc.РКО.ДокОснование->зДокОснование");
    аСтроки2.Remove("(IsType(Документ,Doc.ПКО))And(not IsEmpty(зДокОснование))And(IsType(зДокОснование,Doc.Реализация))And(зДокОснование..Doc.Реализация.КодОперации=Enum.коРеализация.РеализацияРозничная)");
    аСтроки2.Remove("(IsType(Документ,Doc.РКО))And(not IsEmpty(зДокОснование))And(IsType(зДокОснование,Doc.ВозвратОтПокупателя))And(зДокОснование..Doc.ВозвратОтПокупателя.КодОперации=Enum.коВозвратОтПокупателя.ВозвратРозничный)");
    аСтроки2.Group("зВидДолга,зД,Документ","зСмП,зСмР");
      
    //Остатки
    ТЗ:="Period From ДНач to ДНач;
    |зД:=Storage.Взаиморасчеты.Договор;
    |зК:=Storage.Взаиморасчеты.Договор.@Parent;
    |Документ:=Storage.Взаиморасчеты.@LINK;
    |Condition(зК IN оК.Get(1));
    |Condition(зК NOT IN оК.Get(2));
    |зЮЛ:=Storage.Взаиморасчеты.Договор.ЮрЛицо;
    |Condition(зЮЛ=оЮЛ);
    |зВидДолга:=Storage.Взаиморасчеты.ВидДолга;
    |зТара:=Storage.Взаиморасчеты.Тара;
    |Condition(isEmpty(зТара));
    |зДД:=Storage.Взаиморасчеты.ДатаЗадолженности;
    |зДП:=Storage.Взаиморасчеты.ДатаПродажи;
    |зСмНО:=BegTotals(Сумма);
    |зСмП:=Income(Сумма);
    |зСмР:=Expense(Сумма);
    |Group зВидДолга,зД,Документ;";
    З:=Query.Create();
    aTab:=З.Execute(ТЗ,0);
    
    //Удаляем документы за ДНач, оставляем зСмНО
    aNum:=0;
    While aNum<aTab.Size() Do
      aNum:=aNum+1;
      aTab.CurLine:=aNum;
      If not IsEmpty(aTab["Документ"]) Then
        aTab.Remove(aNum);
        aNum:=aNum-1;
      EndIf;
    EndDo;
    
    аСтроки.Unload(aTab,"зВидДолга,зД,Документ,зСмП,зСмР"); 
    аСтроки2.Unload(aTab,"зВидДолга,зД,Документ,зСмП,зСмР"); 
    аСтроки:=0;
    аСтроки2:=0;
  EndIf;
  
  Form.StatusText("Загрузка объектов базы данных...");
  MassLoadObjects(З.ResultTable,,,0,1,"Склад,ДокОснование");
  Form.StatusText("Подготовка запроса...");
  З.PostProcess();
  
  Form.StatusText("Подготовка к расчету...");
  ТОстатки:=Tab.Create();
  If оБезРеал=0 Then
    //Запрос по остаткам
    ТЗ:="Period From ДНач to КонПериод;
    |зЮЛ:=Storage.ОстаткиТМЦ.ЮрЛицо;
    |зН:=Storage.ОстаткиТМЦ.Номенклатура;
    |зФил:=Storage.ОстаткиТМЦ.Склад.Магазин;
    |Condition(зЮЛ=оЮЛ);
    |зКН:=BegTotals(Количество);
    |зКР:=Expense(Количество);
    |Group зФил,зН;";
    
    З2:=Query.Create();
    З2.Execute(ТЗ);
    
    ТОстатки.AddColumn("Индекс");//<ФилКод>@<ТМЦКод>
    ТОстатки.AddColumn("зК",,"Number");
    ТОстатки.AddColumn("зКЭтотПериод",,"Number");
    While З2.Next(1) Do
      зФилКод:=""+?(isEmpty(З2.зФил),"",З2.зФил.Code)+"@";
      While З2.Next(2) Do
        Кол:=Max(0,З2.зКР-З2.зКН);
        If Кол>0 Then
          ТОстатки.AddLine("Индекс,зК",зФилКод+З2.зН.Code,Кол);
        EndIf;
      EndDo;
    EndDo;
    
    //Запрос по остаткам 2
    ТЗ:="Period From НачПериод to КонПериод;
    |зЮЛ:=Storage.ОстаткиТМЦ.ЮрЛицо;
    |зН:=Storage.ОстаткиТМЦ.Номенклатура;
    |зФил:=Storage.ОстаткиТМЦ.Склад.Магазин;
    |Condition(зЮЛ=оЮЛ);
    |зКР:=Expense(Количество);
    |Group зФил,зН;";
    
    З2:=Query.Create();
    З2.Execute(ТЗ);
    
    While З2.Next(1) Do
      зФилКод:=""+?(isEmpty(З2.зФил),"",З2.зФил.Code)+"@";
      While З2.Next(2) Do
        Кол:=Max(0,З2.зКР);
        If Кол>0 Then
          Индекс:=зФилКод+З2.зН.Code;
          Стр:=0;
          If ТОстатки.FindAndGoto(Индекс,,"Индекс")=0 Then
            ТОстатки.AddLine("Индекс",зФилКод+З2.зН.Code);
          EndIf;
          ТОстатки.зКЭтотПериод:=Min(Кол,ТОстатки.зК);
        EndIf;
      EndDo;
    EndDo;
  EndIf;
  
  
  While З.Next(1) Do
    While З.Next(2) Do
      зД:=З.зД;
      зК:=зД.Parent();
      Form.StatusText("Расчет: "+зК);
      If З.зВидДолга=Enum.ПокупательПоставщик.Покупатель Then
        Взв:="ВозвратОтПокупателя";
        ВычислитьИДобавитьВТаблицу(З,ТИтогиПлюс,ТИтогиМинус,Взв,1);
      Else
        Взв:="ВозвратПоставщику";
        ВычислитьИДобавитьВТаблицу(З,ТИтогиМинус,ТИтогиПлюс,Взв,-1);
      EndIf;
    EndDo;
  EndDo;
  З:=0;
  
  //Добавляем остатки кассовых и банковских документов, за исключением подотчета
  If not ВыбраныОсобыеФильтры() Then
    Form.StatusText("Дополнительные кассовые документы...");
    //Касса
    ТЗ:="Period From НачПериод to КонПериод;
    |зЮЛ:=Storage.Касса.ЮрЛицо;
    |Condition(зЮЛ=оЮЛ);
    |Документ:=Storage.Касса.@LINK;
    |зРасход:=Expense(Сумма);
    |зПриход:=Income(Сумма);
    |Group Документ;";
    
    ЗКасса:=Query.Create();
    ЗКасса.Execute(ТЗ);
    ЗКасса.DoNotMassLoadBeforeAggregation:=1;
    MassLoadObjects(ЗКасса.ResultTable,,,0,1,"КодОперации,ДокОснование");
    ЗКасса.PostProcess();
    
    
    While ЗКасса.Next(1) Do
      зДок:=ЗКасса.Документ;
      If isEmpty(зДок) Then
        Continue;
      EndIf;
      Вид:=зДок.DBName();
      If (Вид<>"ПКО")And(Вид<>"РКО") Then
        Continue;
      EndIf;
      If Вид="ПКО" Then
        If (зДок.КодОперации=Enum.коПКО.ОплатаПокупателя)Or(зДок.КодОперации=Enum.коПКО.ВозвратОтПоставщика)Or(зДок.КодОперации=Enum.коПКО.ВозвратОтПодотчетника) Then
          Continue;
        EndIf;
      ElseIf Вид="РКО" Then
        If (зДок.КодОперации=Enum.коРКО.ОплатаПоставщику)Or(зДок.КодОперации=Enum.коРКО.ВозвратПокупателю)Or(зДок.КодОперации=Enum.коРКО.ВыдачаПодотчет) Then
          Continue;
        EndIf;
      EndIf;
      If зДок.УчитыватьВНалоговомУчете=0 Then
        ДобавитьВЛогОшибок(зДок,"Документ исключен из книги доходов или расходов (не стоит галка ""учитывать в книге"") (3)!",Вид="ПКО");
        Continue;
      EndIf;
      См0:=ЗКасса.зПриход-ЗКасса.зРасход;
      If См0>0 Then
        ТИтогиПлюс.AddLine("Сумма,ДокОплаты,ПервичныйДок,Дата",См0,зДок,зДок,BegOfDay(зДок.DocDate));
        ДобавитьВЛогДокументов(зДок,См0,зДок.DocDate,"Добавлен, как прочий кассовый документ с галкой ""включать""",1);
      Else
        ТИтогиМинус.AddLine("Сумма,ДокОплаты,ПервичныйДок,Дата",-См0,зДок,зДок,BegOfDay(зДок.DocDate));
        ДобавитьВЛогДокументов(зДок,-См0,зДок.DocDate,"Добавлен, как прочий кассовый документ с галкой ""включать""",-1);
      EndIf;
    EndDo;
    ЗКасса:=0;
    
    Form.StatusText("Дополнительные банковские документы...");
    //Банк
    ТЗ:="Period From НачПериод to КонПериод;
    |зЮЛ:=Storage.Банк.ЮрЛицо;
    |Condition(зЮЛ=оЮЛ);
    |Документ:=Storage.Банк.@LINK;
    |зРасход:=Expense(Сумма);
    |зПриход:=Income(Сумма);
    |Group Документ;";
    
    ЗБанк:=Query.Create();
    ЗБанк.Execute(ТЗ);
    ЗБанк.DoNotMassLoadBeforeAggregation:=1;
    MassLoadObjects(ЗБанк.ResultTable,,,0,1,"КодОперации,ДокОснование");
    ЗБанк.PostProcess();
    
    
    While ЗБанк.Next(1) Do
      зДок:=ЗБанк.Документ;
      If isEmpty(зДок) Then
        Continue;
      EndIf;
      Вид:=зДок.DBName();
      If (Вид<>"ВыпискаБанкаПриход")And(Вид<>"ВыпискаБанкаРасход") Then
        Continue;
      EndIf;
      If Вид="ВыпискаБанкаПриход" Then
        If (зДок.КодОперации=Enum.коВыпискаБанкаПриход.ОплатаПокупателя)Or(зДок.КодОперации=Enum.коВыпискаБанкаПриход.ВозвратОтПоставщика)
            Or((зДок.КодОперации=Enum.коВыпискаБанкаПриход.Прочее)And(зДок.Счет.Code="71.1")) Then
          Continue;
        EndIf;
      ElseIf Вид="ВыпискаБанкаРасход" Then
        If (зДок.КодОперации=Enum.коВыпискаБанкаРасход.ОплатаПоставщику)Or(зДок.КодОперации=Enum.коВыпискаБанкаРасход.ВозвратПокупателю)
            Or((зДок.КодОперации=Enum.коВыпискаБанкаРасход.Прочее)And(зДок.Счет.Code="71.1")) Then
          Continue;
        EndIf;
      EndIf;
      If зДок.УчитыватьВНалоговомУчете=0 Then
        ДобавитьВЛогОшибок(зДок,"Документ исключен из книги доходов или расходов (не стоит галка ""учитывать в книге"") (4)!",Вид="ВыпискаБанкаПриход");
        Continue;
      EndIf;
      См0:=ЗБанк.зПриход-ЗБанк.зРасход;
      If См0>0 Then
        ТИтогиПлюс.AddLine("Сумма,ДокОплаты,ПервичныйДок,Дата",См0,зДок,зДок,BegOfDay(зДок.DocDate));
        ДобавитьВЛогДокументов(зДок,См0,зДок.DocDate,"Добавлен, как прочий банковский документ с галкой ""включать""",-1);
      Else
        ТИтогиМинус.AddLine("Сумма,ДокОплаты,ПервичныйДок,Дата",-См0,зДок,зДок,BegOfDay(зДок.DocDate));
        ДобавитьВЛогДокументов(зДок,-См0,зДок.DocDate,"Добавлен, как прочий банковский документ с галкой ""включать""",-1);
      EndIf;
    EndDo;
    ЗБанк:=0;
    
    //Подотчет: TODO: добавляем все документы списания из подотчета, если деньги были выданы и документ списания выписан в этом периоде
    //          TODO: либо деньги были выданы в этом периоде
    оТО:=Enum.ТипыПодотчетныхОпераций.ПодотчетнаяОперация;
    Form.StatusText("Документы по подотчету...");
    ТЗ:="Period From НачПериод to КонПериод;
    |зЮЛ:=Storage.ПодотчетныеОперации.ЮрЛицо;
    |Condition(зЮЛ=оЮЛ);
    |Документ:=Storage.ПодотчетныеОперации.@LINK;
    |зТО:=Storage.ПодотчетныеОперации.ТипОперации;
    |Condition(зТО=оТО);
    |зК:=Storage.ПодотчетныеОперации.ПодотчетноеЛицо;
    |зНО:=BegTotals(Сумма);
    |зРасход:=Expense(Сумма);
    |зПриход:=Income(Сумма);
    |зКО:=EndTotals(Сумма);
    |Group зК,Документ;";
    
    ЗПод:=Query.Create();
    ЗПод.Execute(ТЗ);
    
    While ЗПод.Next(1) Do
      СмНО:=ЗПод.зНО;
      While ЗПод.Next(2) Do
        зДок:=ЗПод.Документ;
        If isEmpty(зДок) Then
          Continue;
        EndIf;
        Вид:=зДок.DBName();
        If ЗПод.зРасход=0 Then
          Continue;
        EndIf;
        If Вид="ПКО" Then
          Continue;
        EndIf;
        If глЕстьРеквизитДокумента("УчитыватьВНалоговомУчете",Вид) Then
          If (зДок.УчитыватьВНалоговомУчете=0)And(not ДокументИсключение(зДок)) Then
            ДобавитьВЛогОшибок(зДок,"Документ подотчета исключен из книги доходов или расходов (не стоит галка ""учитывать в книге"") (5)!",0);
            Continue;
          EndIf;
        EndIf;
        
        ТИтогиМинус.AddLine("Сумма,ДокОплаты,ПервичныйДок,Дата",ЗПод.зРасход,зДок,зДок,BegOfDay(зДок.DocDate));
        ДобавитьВЛогДокументов(зДок,ЗПод.зРасход,зДок.DocDate,"Добавлен, как документ, закрывающий потодчет, с галкой ""включать""",-1);
      EndDo;
    EndDo;
  EndIf;
  
  
  Form.StatusText("Сортировка и подготовка к выводу...");
  ТИтогиПлюс.Group("ДокОплаты,ПервичныйДок,ФлАванс,Дата","Сумма");
  ТИтогиМинус.Group("ДокОплаты,ПервичныйДок,ФлАванс,Дата","Сумма");
  ТИтогиПлюс.Sort("Дата+,ПервичныйДок");
  ТИтогиМинус.Sort("Дата+,ПервичныйДок");

  пН:=0;
    

  Приход0:=0;Расход0:=0;
  ВывестиДиапазон(Т,ТИтогиПлюс,ТИтогиМинус,Приход0,Расход0,пН);
  
  аДата:=GetMonth(НачПериод);
  Приход1:=Приход1+Приход0;
  Расход1:=Расход1+Расход0;
  ПриходКв:=ПриходКв+Приход0;
  РасходКв:=РасходКв+Расход0;
  
  //1,2,3 + 4,5,6 + 7,8,9 + 10,11,12
  НомКв:=?(аДата=3,"I",?(аДата=6,"II",?(аДата=9,"III",?(аДата=12,"IV",""))));
  If НомКв<>"" Then
    пИтогоКвартал:="Итого за "+НомКв+" квартал";
    пПриход:=глФРМ(ПриходКв);
    пРасход:=глФРМ(РасходКв);
    ПриходКв:=0;
    РасходКв:=0;
    
    Т.CopyByX("v3",1);
  EndIf;
  If аДата>3 Then
    НомМес:=?(аДата<7,"полугодие",?(аДата<10,"9 месяцев","год"));
    пИтогоНакопительный:="Итого за "+НомМес;
    пПриход:=глФРМ(Приход1);
    пРасход:=глФРМ(Расход1);
    Т.CopyByX("v4",1);
  EndIf;
  
  If EndOfMonth(НачПериод)<EndOfMonth(КонДата) Then
    Т.CopyByX("v6",1);
    Т.CopyByX("v1",1);
  EndIf;
  
  Exit 1;
EndFunction

Function OnExecute(СпУстановки)
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оЮЛ:=Form.оЮЛ.Value;
  оК:=Form.оК.Value;
  
  If not глПроверитьДатуВОтчетах(Param,НачДата,КонДата,0) Then
    Exit;
  EndIf;
  If оЮЛ.Selected()=0 Then
    Box("Не выбрано юридическое лицо!",Q_STOP);
    Exit;
  EndIf;

  ТЛог:=Table.Create();
  ТЛог.SetSourceName("Предупреждения");
  оСвойства:="Период с "+НачДата+" по "+КонДата;
  ТЛог.CopyByX("v1",1);
  ФлОшибки:=0;
  
  //Первый лист
  пЮЛ:=оЮЛ.ПолнНаименование;
  пОКПО:=оЮЛ.ОКПО;
  пАдрес:=глПредставлениеАдреса(оЮЛ.ЮрАдрес);
  пРС:=Trim(оЮЛ.Контрагент.ОсновнойСчет.НомерСчета);
  пБанк:="";
  пГод:=GetYear(КонДата);
  If оЮЛ.Контрагент.ОсновнойСчет.Selected()<>0 Then
    пБанк:="в "+Trim(оЮЛ.Контрагент.ОсновнойСчет.Банк)+" "+Trim(оЮЛ.Контрагент.ОсновнойСчет.Банк.Местонахождение);
  EndIf;
  Т:=Table.Create();
  Т.CopyByX("v1",1);
  
  _ИНН:=Trim(Replace(оЮЛ.ИНН,"\","/"));
  If Length(_ИНН)<13 Then
    For i:=1 To Min(12,Length(_ИНН)) Do
      Т.Area(i+1,27,i+1,27).Text:=Mid(_ИНН,i,1);
    EndDo;
  Else
    For i:=1 To Min(20,Length(_ИНН)) Do
      Т.Area(i+3,23,i+3,23).Text:=Mid(_ИНН,i,1);
    EndDo;
  EndIf;
  глПечатнаяФормаОтчета(Т,0,"Обложка");
  
  Т:=Table.Create();
  Т.SetSourceName("Данные");
  Т.CopyByX("v1",1);
  Т.Options.FixedLine:=Т.Height();
  
  ТДок:=Table.Create();
  ТДок.SetSourceName("ВключенныеДокументы");
  ТДок.CopyByX("v1",1);
  
  Приход1:=0;Расход1:=0;
  ПриходКв:=0;РасходКв:=0;
  
  аДата:=НачДата;
  While аДата<КонДата Do
    If not РассчитатьПериод(Т,аДата,Min(EndOfMonth(аДата),КонДата)) Then
      Exit;
    EndIf;
    аДата:=EndOfMonth(аДата)+1;
  EndDo;
  
  
  пСуммаДохИтого:=глФРМ(Приход1);
  пСуммаРасхИтого:=глФРМ(Расход1);
  пСуммаРазнИтого:="";
  пСумма1:="";
  пСумма2:="";
  
  Т.CopyByX("v5",1);
  глПечатнаяФормаОтчета(Т,0,"Раздел 1");
  
  
  пПериод:=ПериодСтр(НачДата,КонДата);
  Т:=Table.Create();
  Т.SetSourceName("Раздел3");
  Т.CopyByX("v1",1);
  глПечатнаяФормаОтчета(Т,0,"Раздел 3");
  
  //Т:=Table.Create();
  //Т.SetSourceName("Раздел4");
  //Т.CopyByX("v1",1);
  //глПечатнаяФормаОтчета(Т,0,"Раздел 4");
  
  If ФлОшибки Then
    ТЛог.CopyByX("v3",1);
    глПечатнаяФормаОтчета(ТЛог,0,"Ошибки и сообщения");
  Else
    ТЛог:=0;
  EndIf;
  
  ТДок.CopyByX("v3",1);
  глПечатнаяФормаОтчета(ТДок,0,"Включенные документы");
EndFunction
