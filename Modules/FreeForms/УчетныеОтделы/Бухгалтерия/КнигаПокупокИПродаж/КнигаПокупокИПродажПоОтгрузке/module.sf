//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
var Рассчитано Export;
Var Таб Export; //Основная таблица
                //->"зК","ТабПродаж", "ТабПокупок"
                //    ->"зДок","зКорДок","ДатаОплаты","См","См"+?,"ТДок","ФлКоррИзДругойКниги"
                //ФлКоррИзДругойКниги: 0 -- обычная операция, 1 -- сторнирование другого периода, 2 -- отражение остатков момента перехода на ОСН (НДС)
                //ТДок: 0 -- обычные документы
                //      1 -- авансы
                //      2 -- зачтенные авансы
                //      3 -- списания
                //      4,5 -- доп. лист
Var ТабКорректировка193 Export;
Var ТабЗакрытие622 Export;//Таблица закрытия 62.2 на 62.1 за текущий период
Var ТабЗакрытие602 Export;//Таблица закрытия 60.2 на 60.1 за текущий период
Var ЧлНДСАвансов Export;
Var ТЛог Export;
Var ФлОшибки Export;
Var СпНДС Export;

//Коды вида операций:
//
//01 - Отгрузка (передача) или приобретение товаров, работ, услуг (включая посреднические услуги), имущественных прав, за исключением операций, перечисленных по кодам 03, 04, 06, 10, 11, 13
//02 - Оплата, частичная оплата (полученная или переданная) в счет предстоящих поставок товаров (выполнения работ, оказания услуг (включая посреднические услуги), передачи имущественных прав, за исключением операций, перечисленных по кодам 05, 06, 12
//03 - Возврат покупателем товаров продавцу или получение продавцом возвращенных покупателем товаров
//04 - Отгрузка (передача) или приобретение товаров, работ, услуг (за исключением посреднических услуг), имущественных прав на основе договора комиссии (агентского договора, в случае, если агент совершает действия от своего имени), за исключением операций, перечисленных по коду 06
//05 - Оплата, частичная оплата (полученная или переданная) в счет предстоящих поставок товаров (выполнения работ, оказания услуг (за исключением посреднических услуг), передачи имущественных прав на основе договора комиссии (агентского договора, в случае, если агент совершает действия от своего имени), за исключением операций, перечисленных по коду 06
//06 - Операции, совершаемые налоговыми агентами, перечисленными в статье 161 Налогового кодекса Российской Федерации (Собрание законодательства Российской Федерации, 2000, N 32, ст.3340; 2011, N 50, ст.7359)
//07 - Операции, перечисленные в подпункте 2 пункта 1 статьи 146 Налогового кодекса Российской Федерации
//08 - Операции, перечисленные в подпункте 3 пункта 1 статьи 146 Налогового кодекса Российской Федерации
//09 - Получение сумм, указанных в статье 162 Налогового кодекса Российской Федерации
//10 - Отгрузка (передача) или получение товаров, работ, услуг, имущественных прав на безвозмездной основе
//11 - Отгрузка (передача) или приобретение товаров, имущественных прав, перечисленных в пунктах 3, 4, 5.1 статьи 154, в подпунктах 1-4 статьи 155 Налогового кодекса Российской Федерации
//12 - Оплата, частичная оплата (полученная или переданная) в счет предстоящих поставок товаров, передачи имущественных прав, перечисленных в пунктах 3, 4, 5.1 статьи 154, в подпунктах 1-4 статьи 155 Налогового кодекса Российской Федерации
//13 - Проведение подрядными организациями (застройщиками или техническими заказчиками) капитального строительства, модернизации (реконструкции) объектов недвижимости

//Упрощение:
//Код вида операции:
//01. Продажа/покупка
//02. Аванс (выданный, полученный)
//03. Возврат
//04. Продажа/покупка по агентскому договору
//05. Аванс (выданный, полученный) по агентскому договору
//06. Операции из статьи 161 нал. кодекса.
//07. Операции из статьи 146, подпункт 2 пункта 1.
//08. Операции из статьи 146, подпункт 3 пункта 1.
//09. Получение сумм, указанных в статье 162.
//10. Передача/получение на безвоздездной основе.
//11. Операции из статьи 154, пунктах 3,4,5.1 и статьи 155 подпунктах 1-4.
//12. Аванс из статьи 154, пунктах 3,4,5.1 и статьи 155 подпунктах 1-4.
//13. Подряд на строительство/модернизацию.


Function пРабота(тСтр)
    Form.StatusText(тСтр);
    Form.UpdateProgress(-1,,тСтр);
EndFunction

Function ДобавитьВЛогОшибок(пДок,пТекст,ФлПродажи,Важн=0)
  пТип:=?(ФлПродажи,"Кн. продаж","Кн. покупок");
  ТЛог.CopyByX(?(Важн=0,"v2","v4"),1);
  ФлОшибки:=1;
EndFunction

Function ОбновитьДоступность()
  //Form.кнРезультаты.isDisabled:=1-Рассчитано*(Form.оЮЛ.Value.Selected()<>0);
  Form.кнРезультаты2.isDisabled:=1-Рассчитано*(Form.оЮЛ.Value.Selected()<>0)*глПользователь.бухБухгалтер;
  Form.bPanelProceed.isDisabled:=1-(Form.оЮЛ.Value.Selected()<>0);
EndFunction

Function ВыбраныОсобыеФильтры()
  оК:=Form.оК.Value;
  Exit _Or(оК.Get(1).Size()>0,оК.Get(2).Size()>0);
EndFunction

Function СуществуетФлагАвансов(КнигаПокупок)
  оЮЛ:=Form.оЮЛ.Value;
  зДата:=BegOfDay(Form.НачДата.Value)-1;
  
  зЭл:=Ref.бухУчетАвансов;
  If зЭл.Find("ЮрЛицо,СуммаАванса,КнигаПокупок,КонецУчетногоПериода",оЮЛ,0,КнигаПокупок,зДата) Then
    Exit 1;
  EndIf;
  If зЭл.Find("ЮрЛицо,СуммаАванса,КнигаПокупок,<КонецУчетногоПериода",оЮЛ,0,КнигаПокупок,зДата) Then
    Exit 0;
  EndIf;
  
  If AskQuestion("Номера авансов для предыдущего периода не найдены! Будет считаться, что это первый учетный период "+
    "для этого юр. лица. Если это не так, отмените работу и сформируйте книгу продаж более ранним (начальным) периодом! Продолжить?",Q_QUESTION+Q_YESNO)<>R_YES Then
    Exit 0;
  EndIf;
  Exit 1;
EndFunction
                

Function СоздатьЗапросПоАвансам(КнигаПокупок);
  оЮЛ:=Form.оЮЛ.Value;
  зДата:=BegOfDay(Form.НачДата.Value)-1;
  
  //Sort здесь для расположения документов в последовательности корректно
  ТЗ:="(зЭл:=Ref.бухУчетАвансов;
  |зКнига:=Ref.бухУчетАвансов.КнигаПокупок;
  |зДатаПер:=Ref.бухУчетАвансов.КонецУчетногоПериода;
  |зДатаАв:=Ref.бухУчетАвансов.ДатаАванса;
  |зНомерАв:=Ref.бухУчетАвансов.Name;
  |зЮЛ:=Ref.бухУчетАвансов.ЮрЛицо;
  |зК:=Ref.бухУчетАвансов.Контрагент;
  |зСм:=Ref.бухУчетАвансов.СуммаАванса;
  |Condition(зЮЛ=оЮЛ);
  |Condition(зСм>0);
  |Condition(зКнига=КнигаПокупок);
  |Condition(BegOfDay(зДатаПер)=зДата);
  |Group зК,зЭл;) Postprocessing (
  |AllowIncompatibleSortPaths 1;
  |Group зК;
  |Sort зДатаАв,зНомерАв;
  |Group зЭл;)";
  З:=Query.Create();
  З.Execute(ТЗ,1,1,"зК,зЭл");
  
  Exit З;
EndFunction


Function ВходящийНомер(Д)
  If not IsDBObject(Д) Then
    Exit Д;
  EndIf;
  If глЕстьРеквизитДокумента("КодОперации",Д.DBName()) Then
    If Д.КодОперации=Enum.коРегистрацияОС.РеализацияОС Then
      Exit Trim(Д.DocNum);
    EndIf;
  EndIf;
  а:="";
  If глЕстьРеквизитДокумента("НомерДокВходящийСФ",Д.DBName()) Then
    а:=Trim(Д.НомерДокВходящийСФ);
  EndIf;
  If а="" Then
    If глЕстьРеквизитДокумента("НомерДокВходящий",Д.DBName()) Then
      а:=Trim(Д.НомерДокВходящий);
    EndIf;
  EndIf;
  If а="" Then
    а:=Trim(Д.DocNum);
  EndIf;
  Exit а;
EndFunction

Function ВходящаяДата(Д)
  If not IsDBObject(Д) Then
    Exit Д;
  EndIf;
  If глЕстьРеквизитДокумента("КодОперации",Д.DBName()) Then
    If Д.КодОперации=Enum.коРегистрацияОС.РеализацияОС Then
      Exit BegOfDay(Д.DocDate);
    EndIf;
  EndIf;
  а:="";
  If глЕстьРеквизитДокумента("ДатаДокВходящийСФ",Д.DBName()) Then
    а:=?(isEmpty(Д.ДатаДокВходящийСФ),"",Д.ДатаДокВходящийСФ);
  EndIf;
  If а="" Then
    If глЕстьРеквизитДокумента("ДатаДокВходящий",Д.DBName()) Then
      а:=?(IsEmpty(Д.ДатаДокВходящий),"",Д.ДатаДокВходящий);
    EndIf;
  EndIf;
  If а="" Then
    а:=BegOfDay(Д.DocDate);
  EndIf;
  Exit а;
EndFunction

Function ЗаписатьИОбработать(аДок)
  If not глЗаписать(аДок) Then
    Exit 0;
  EndIf;
  If аДок.Status()=1 Then
    If not глОтменитьУдаление(аДок) Then
      Exit 0;
    EndIf;
  EndIf;
  If not глОбработать(аДок) Then
    Exit 0;
  EndIf;
  
  Exit 1;
EndFunction

Function ДобавитьСторнированиеВТекущийПериод(зДок,ТабПрямая,ТабОбратная,ФлЗнак)
  СмСтавка:=List.Create();
  
  aTab:=зДок.LoadStorage("Взаиморасчеты");
  aTab.Select();
  While aTab.Next() Do
    If aTab.Тара.Selected()<>0 Then
      Continue;
    EndIf;
    Чл:=Max(aTab.СтавкаНДС.Index(),1);
    Чл:=СпНДС.GetByName(""+Чл);
    См:=aTab.Сумма*ФлЗнак*?(aTab._Expense=1,-1,1);
    СмСтавка.SetByName(""+Чл,Number(СмСтавка.GetByName(""+Чл))+См);
  EndDo;
  //Увеличение суммы
  Фл:=0;
  Стр0:=0;
  Тб:=ТабПрямая;
  For i:=1 to СмСтавка.Size() Do
    Чл:=СмСтавка.GetName(i);
    См:=СмСтавка.Get(i);
    If См<=0 Then
      Continue;
    EndIf;
    ЧлН:=Number(Чл);
    If Фл=0 Then
      Тб.AddLine("ТДок,зДок,зКорДок,ДатаОплаты",0,зДок.ДокОснование,зДок,ВходящийНомер(зДок)+" от "+ВходящаяДата(зДок));
      //Тб.AddLine("ТДок,зДок,зКорДок,ДатаОплаты",0,?(зДок.ДокОснование.Status()>1,зДок.ДокОснование,GetNothing()),зДок,ВходящийНомер(зДок)+" от "+ВходящаяДата(зДок));
      Стр0:=Тб.Size();
    EndIf;
    Тб.См:=Тб.См+См;
    Тб.СторСмИзм:=Тб.СторСмИзм+Тб.См;
    Тб.СторСмНДСИзм:=Тб.СторСмНДСИзм+Round(Тб.См*ЧлН/(100+ЧлН),2);
    Тб.Set(Стр0,"См"+Чл,Тб.Get(Стр0,"См"+Чл)+См);
  EndDo;
  
  //Уменьшение суммы
  Фл:=0;
  Стр0:=0;
  Тб:=ТабОбратная;
  For i:=1 to СмСтавка.Size() Do
    Чл:=СмСтавка.GetName(i);
    См:=СмСтавка.Get(i);
    If См>=0 Then
      Continue;
    EndIf;
    См:=-См;
    ЧлН:=Number(Чл);
    If Фл=0 Then
      Тб.AddLine("ТДок,зДок,зКорДок,ДатаОплаты,ФлКоррИзДругойКниги",0,зДок.ДокОснование,зДок,ВходящийНомер(зДок)+" от "+ВходящаяДата(зДок),1);
      //Тб.AddLine("ТДок,зДок,зКорДок,ДатаОплаты,ФлКоррИзДругойКниги",0,?(зДок.ДокОснование.Status()>1,зДок.ДокОснование,GetNothing()),зДок,ВходящийНомер(зДок)+" от "+ВходящаяДата(зДок),1);
      Стр0:=Тб.Size();
    EndIf;
    Тб.См:=Тб.См+См;
    Тб.СторСмИзм:=Тб.СторСмИзм+Тб.См;
    Тб.СторСмНДСИзм:=Тб.СторСмНДСИзм+Round(Тб.См*ЧлН/(100+ЧлН),2);
    Тб.Set(Стр0,"См"+Чл,Тб.Get(Стр0,"См"+Чл)+См);
  EndDo;
EndFunction

Function ОчиститьТекущиеАвансы(КнигаПокупок);//+создать запись о пересчете
  оК:=Form.оК.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оЮЛ:=Form.оЮЛ.Value;
  
  If ВыбраныОсобыеФильтры() Then
    Exit 1;
  EndIf;
  
  зЭл:=Ref.бухУчетАвансов;
  aList:=зЭл.Load(0,"ЮрЛицо,КнигаПокупок,<=КонецУчетногоПериода,>=КонецУчетногоПериода",оЮЛ,КнигаПокупок,КонДата,НачДата);
  
  ФлФлаг:=0;
  For i:=1 To aList.Size() Do
    зЭл:=aList.Get(i);
    If (Trim(зЭл.Name)="0")And(зЭл.КонецУчетногоПериода=КонДата) Then
      ФлФлаг:=1;
      Continue;
    EndIf;
    зЭл.DeletePhysically();
  EndDo;
  If ФлФлаг=0 Then
    зЭл:=Ref.бухУчетАвансов;
    зЭл.New();
    зЭл.Name:="0";
    зЭл.ДатаАванса:=КонДата;
    зЭл.КнигаПокупок:=КнигаПокупок;
    зЭл.КонецУчетногоПериода:=КонДата;
    зЭл.Контрагент:=0;
    зЭл.СуммаАванса:=0;
    зЭл.ЮрЛицо:=оЮЛ;
    зЭл.Save();
  EndIf;
  Exit 1;
EndFunction

Function СоздатьПустуюТаблицу(флПокупки=0)
  Тб:=Tab.Create("зДок,зКорДок,ДатаОплаты,зДокОплаты");
  If флПокупки Then
    Тб.AddColumn("спДок");
  EndIf;
  Тб.AddColumn("См",,"Number");
  Тб.AddColumn("СмБезНДС",,"Number");
  Тб.AddColumn("См0",,"Number");
  Тб.AddColumn("См5",,"Number");
  Тб.AddColumn("См7",,"Number");
  Тб.AddColumn("См10",,"Number");
  Тб.AddColumn("См18",,"Number");
  Тб.AddColumn("См20",,"Number");
  Тб.AddColumn("ТДок",,"Number");
  Тб.AddColumn("ФлКоррИзДругойКниги",,"Number");
  Тб.AddColumn("ТПечати");
  //Только для вывода журнала
  Тб.AddColumn("СторСмИзм",,"Number");    //Док. сторнирования, сумма (изменение)
  Тб.AddColumn("СторСмНДСИзм",,"Number"); //Док. сторнирования, сумма НДС (изменение)
  Exit Тб;
EndFunction

Function ПозиционироватьТаблицуНаКлиенте(зК)
  If not Таб.FindAndGoto(зК,,"зК") Then
    Таб.AddLine("зК,ТабПродаж,ТабПокупок",зК,СоздатьПустуюТаблицу(),СоздатьПустуюТаблицу(1));
  EndIf;
EndFunction

//Учет приходов и расходов одного дня в таблице авансов
Function ДобавитьДеньВТекущиеАвансы(СмТекСальдо,ДеньРасход,ДеньПриход,ТРДок,ТАвансы,ByRef СмАвансовНаЗакрытие,ByRef АвансовНаЗакрытиеИндекс,ДатаЗакрытия)
  СмРазница:=ДеньРасход;
  //Добавление новых авансов
  If СмТекСальдо<0 Then   
    СмАванс:=Max(ДеньРасход,СмТекСальдо);
    СмРазница:=ДеньРасход-СмАванс;
    If СмАванс<0 Then
      СмАвансовНаЗакрытие:=СмАвансовНаЗакрытие+СмАванс;
      For i:=1 to ТРДок.Size() Do
        ТРДок.CurLine:=ТРДок.Size()-i+1;
        См0:=Round(Max(ТРДок.Сумма,СмАванс),2);
        If См0<0 Then
          ТРДок.Сумма:=ТРДок.Сумма-См0;
          СмАванс:=СмАванс-См0;
          ТАвансы.AddLine("зДок,Сумма",ТРДок.зДок,-См0);
        EndIf;
        If СмАванс=0 Then
          Break;
        EndIf;
      EndDo;
    EndIf;
  EndIf;
  ДеньПриход:=ДеньПриход+СмРазница;
  
  //Закрытие авансов: вычтем ДеньПриход из последних авансов старше, чем ДатаЗакрытия-оДнейАванса
  оДнейАванса:=Form.оДнейАванса.Value;
  оДнейАванса:=?(оДнейАванса=0,6,оДнейАванса);
  If оДнейАванса>1 Then
    iIndex:=ТАвансы.Size();
    While _And(СмАвансовНаЗакрытие<0,ДеньПриход>0,iIndex>=АвансовНаЗакрытиеИндекс,iIndex>0) Do
      ТАвансы.CurLine:=iIndex;
      If ТАвансы.флТолькоДляЗачтения=1 Then
        Break;
      EndIf;
      аДатаАванса:=BegOfDay(ТАвансы.зДок.DocDate);
      If аДатаАванса>ДатаЗакрытия-оДнейАванса Then
        См0:=Min(ТАвансы.Сумма-ТАвансы.СуммаЗакрытия,ДеньПриход);
        См0:=Min(См0,-СмАвансовНаЗакрытие);
        If См0=0 Then
          iIndex:=iIndex-1;
          Continue;
        EndIf;
        ДеньПриход:=Round(ДеньПриход-См0,2);
        СмАвансовНаЗакрытие:=Round(СмАвансовНаЗакрытие+См0,2);
        ТАвансы.Сумма:=Round(ТАвансы.Сумма-См0,2);
        If ТАвансы.Сумма=0 Then
          ТАвансы.Remove(iIndex);
        EndIf;
        iIndex:=iIndex-1;
      Else
        Break;//Остались только более старые авансы
      EndIf;
    EndDo;
  EndIf;
  
  //Закрытие авансов: закроем авансы, начиная с индекса АвансовНаЗакрытиеИндекс
  While _And(СмАвансовНаЗакрытие<0,ДеньПриход>0,АвансовНаЗакрытиеИндекс<=ТАвансы.Size()) Do
    ТАвансы.CurLine:=АвансовНаЗакрытиеИндекс;
    См0:=Min(ТАвансы.Сумма-ТАвансы.СуммаЗакрытия,ДеньПриход);
    См0:=Min(См0,-СмАвансовНаЗакрытие);
    If См0=0 Then
      АвансовНаЗакрытиеИндекс:=АвансовНаЗакрытиеИндекс+1;
      Continue;
    EndIf;
    ДеньПриход:=Round(ДеньПриход-См0,2);
    СмАвансовНаЗакрытие:=Round(СмАвансовНаЗакрытие+См0,2);
    ТАвансы.СуммаЗакрытия:=Round(ТАвансы.СуммаЗакрытия+См0,2);
    ТАвансы.ДатаЗакрытия:=ДатаЗакрытия;
    If ТАвансы.СуммаЗакрытия=ТАвансы.Сумма Then
      АвансовНаЗакрытиеИндекс:=АвансовНаЗакрытиеИндекс+1;
    EndIf;
  EndDo;
EndFunction

Function СоздатьТаблицуПечати(флТип,зКПрод,зК,зНомер,зДата,зСумма)
  сп:=List.Create();
  сп.SetByName("ЮрЛицо",Form.оЮЛ.Value);
  сп.SetByName("Продавец",зКПрод);
  сп.SetByName("Контрагент",зК);
  сп.SetByName("НомерДок",зНомер);
  сп.SetByName("ДатаДок",зДата);
  сп.SetByName("Тип",флТип);
  сп.SetByName("СуммаАванса",зСумма);
  сп.SetByName("СчетФактура",1);
  Exit сп;
EndFunction

Function ДобавитьВТекущиеАвансы(КнигаПокупок,зК,зНомер,зДата,зСумма,флПроводки=0)
  оК:=Form.оК.Value;
  оЮЛ:=Form.оЮЛ.Value;

  If ВыбраныОсобыеФильтры() Then
    Exit 1;
  EndIf;
  
  аАв:=Ref.бухУчетАвансов;
  аАв.New();
  аАв.Name:=зНомер;
  аАв.ДатаАванса:=BegOfDay(зДата);
  аАв.КнигаПокупок:=КнигаПокупок;
  аАв.флПроводкиБухУчета:=флПроводки;
  аАв.КонецУчетногоПериода:=BegOfDay(Form.КонДата.Value);
  аАв.Контрагент:=зК;
  аАв.СуммаАванса:=зСумма;
  аАв.ЮрЛицо:=оЮЛ;
  аАв.Save();
  
  Exit 1;
EndFunction


Function ДобавитьСторнированиеВДопЛист(зДок,ФлЗнак,Таб)
  СмБезНДС:=0;См0:=0;См5:=0;См7:=0;См10:=0;См18:=0;См20:=0;
  БСмБезНДС:=0;БСм0:=0;БСм5:=0;БСм7:=0;БСм10:=0;БСм18:=0;БСм20:=0;
  aTab:=зДок.LoadStorage("Взаиморасчеты");
  aTab.Select();
  While aTab.Next() Do
    If aTab.Тара.Selected()<>0 Then
      Continue;
    EndIf;
    Чл:=Max(aTab.СтавкаНДС.Index(),1);
    Чл:=СпНДС.GetByName(""+Чл);
    См:=aTab.Сумма*ФлЗнак*?(aTab._Expense=1,-1,1);
    If aTab.ТипДокумента=4 Then
      Exec("См"+Чл+":=См"+Чл+"+См;");
    Else
      Exec("БСм"+Чл+":=БСм"+Чл+"+См;");
    EndIf;
  EndDo;
  Таб.AddLine("ТДок,зДок,См,СмБезНДС,См0,См5,См7,См10,См18,См20",4,зДок,СмБезНДС+См0+См10+См18,СмБезНДС,См0,См5,См7,См10,См18,См20);
  Таб.AddLine("ТДок,зДок,См,СмБезНДС,См0,См5,См7,См10,См18,См20",5,зДок,БСмБезНДС+БСм0+БСм10+БСм18,БСмБезНДС,БСм0,БСм5,БСм7,БСм10,БСм18,БСм20);
EndFunction

Function ВходящийДокумент(зДок)
  If not IsDBObject(зДок) Then
    Exit зДок;
  EndIf;
  Exit ВходящийНомер(зДок)+"@"+ВходящаяДата(зДок);
EndFunction

Function OnExecute(СпУстановки)
  Рассчитано:=0;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оЮЛ:=Form.оЮЛ.Value;
  оК:=Form.оК.Value;
  оКАА:=Form.оКАА.Value;
  ФлАвтоАвансыВыданные:=_Or(оКАА[1].Size()>0,оКАА[2].Size()>0);
  оБезДопЛистов:=Form.оБезДопЛистов.Value;
  оВозвратыРеализации:=Form.оВозвратыРеализации.Value;
  ФлБылоПредупреждениеОЗакрытомПериоде:=0;
  ОбновитьДоступность();
  
  If not глПроверитьДатуВОтчетах(Param,НачДата,КонДата,-2) Then
    Exit;
  EndIf;
  If оЮЛ.Selected()=0 Then
    Box("Не выбрано юридическое лицо!",Q_STOP);
    Exit;
  EndIf;
  If IsEmpty(КонДата)+IsEmpty(НачДата)>0 Then
    Box("Не выбрана начальная дата или конечная дата!",Q_STOP);
    Exit;
  EndIf;
  If (EndOfMonth(КонДата)<>КонДата)Or(НачДата<>BegOfMonth(НачДата)) Then
    Box("Период не совпадает с границами месяца или квартала!",Q_STOP);
    If not глПользователь.общиеАдминистратор Then
      Exit;
    EndIf;
  EndIf;
  
  ТАвВыдТекПериод:=0;
  If ФлАвтоАвансыВыданные Then
    ТАвВыдТекПериод:=Tab.Create("зК,зДок,флУчтен");
    оКО:=Enum.коАванс.АвансВыданный;
    КДата:=КонДата+1;
    ТЗ:="Condition(Doc.Аванс.@Status<>1);
    |Condition(Doc.Аванс.DocDate<КДата)And(Doc.Аванс.DocDate>=НачДата);
    |зЮЛ:=Doc.Аванс.ЮрЛицо;
    |зУА:=Doc.Аванс.Аналитика;
    |зК:=Doc.Аванс.Контрагент;
    |зКО:=Doc.Аванс.КодОперации;
    |зДок:=Doc.Аванс;
    |Condition(зК IN оКАА.Get(1));
    |Condition(зК NOT IN оКАА.Get(2));
    |Condition(зУА IN оУА);
    |Condition(зЮЛ=оЮЛ);
    |Condition(зКО=оКО);
    |Group зК,зДок;";
    
    З:=Query.Create();
    З.Execute(ТЗ,1,1,"зК,зДок");
    
    While З.Next(1) Do
      While З.Next(2) Do
        аДок:=З.зДок.Copy();
        ТАвВыдТекПериод.AddLine("зК,зДок,флУчтен",З.зК,аДок,0);
      EndDo;
    EndDo;
    ТАвВыдТекПериод.Sort("зК,зДок+");
  EndIf;  
  
  флУчетАвансов:=оЮЛ.флУчетАвансов;
  If флУчетАвансов=1 Then
    If not СуществуетФлагАвансов(0) Then
      If AskQuestion("Для данного юр. лица еще не была сформирована книга продаж предыдущего учетного периода. "+
          "Это не позволяет использовать номера авансов для этого периода. Сформируйте сначала книгу продаж "+
          "для прошлого периода, потом уже для этого! Игнорировать (не рекомендуется!)?",Q_STOP+Q_YESNO)<>R_YES Then
        Exit;
      EndIf;  
    EndIf;
  ElseIf флУчетАвансов=0 Then
    If not СуществуетФлагАвансов(1) Then
      If AskQuestion("Для данного юр. лица еще не была сформирована книга продаж предыдущего учетного периода. "+
          "Это не позволяет использовать номера авансов для этого периода. Сформируйте сначала книгу продаж "+
          "для прошлого периода, потом уже для этого! Игнорировать (не рекомендуется!)?",Q_STOP+Q_YESNO)<>R_YES Then
        Exit;
      EndIf;
    EndIf;
  ElseIf флУчетАвансов=2 Then
    ТДокАвансов:=Tab.Create("зДок,зК");
    ТДокАвансов.AddColumn("Сумма",,"Number");
    оКО:=Enum.коАванс.АвансПолученный;
    
    ТЗ:="зСтатус:=Doc.Аванс.@Status;
    |Condition(зСтатус<>1);
    |зДата:=BegOfDay(Doc.Аванс.DocDate);
    |Condition(BegOfDay(зДата)<=КонДата);
    |зЮЛ:=Doc.Аванс.ЮрЛицо;
    |зК:=Doc.Аванс.Контрагент;
    |зКО:=Doc.Аванс.КодОперации;
    |зДок:=Doc.Аванс;
    |Condition(зК IN оК.Get(1));
    |Condition(зК NOT IN оК.Get(2));
    |Condition(зЮЛ=оЮЛ);
    |Condition(зКО=оКО);
    |зСм0:=Doc.Аванс.СуммаВзаиморасчетов;
    |зСумма:=SUM(зСм0);
    |Group зК,зДок;";
    
    З:=Query.Create();
    З.Execute(ТЗ,1,1,"зК,зДок");
    
    //Из этой таблицы необходимо удалить документы, которые были закрыты в прошлые периоды
    While З.Next(1) Do
      While З.Next(2) Do
        аДок:=З.зДок.Copy();
        aTab:=аДок.LineParts("ЗачтениеАванса");
        См0:=0;
        aTab.Select();
        While aTab.Next() Do
          If aTab.ДатаЗачтения<НачДата Then
            См0:=Round(См0+aTab.СуммаЗачтения,2);
          EndIf;
        EndDo;
        If См0<З.зСумма Then
          //Из документа аванса удаляем строки, связанные с текущим и будущими периодами
          Фл:=0;
          bTab:=aTab.Copy();
          aNum:=0;
          While aNum<aTab.Size() Do
            aNum:=aNum+1;
            aTab.CurLine:=aNum;
            If aTab.ДатаЗачтения>=НачДата Then
              aTab.Remove(aNum);
              Фл:=1;
              aNum:=aNum-1;
              Continue;
            EndIf;
          EndDo;
          If Round(аДок.СуммаВзаиморасчетов-См0,2)>0 Then
            If Фл Then
              If _And(not ФлБылоПредупреждениеОЗакрытомПериоде,BegOfDay(аДок.DocDate)<=ДатаЗапретаСТочкиЗренияПолномочий(аДок)) Then
                ФлБылоПредупреждениеОЗакрытомПериоде:=1;
                If AskQuestion("Для формирования этого отчета необходимо изменить документы аванса за старые периоды. Данные периоды уже были закрыты бухгалтерией. Вы можете "+
                    "игнорировать дату запрета и продолжить пересчет, однако, после пересчета за этот период необходимо будет также пересчитать все последуюшие периоды до "+
                    "текущего дня! Хотите игнорировать дату запрета и продолжить?",Q_WARNING+Q_YESNO)<>R_YES Then
                  Exit;
                EndIf;
              EndIf;
              If not глЗаписать(аДок,0,0,2) Then
                Message("Освободите документ %LINK% для продолжения работы!","!",аДок);
                Exit;
              EndIf;
            EndIf;
            ТДокАвансов.AddLine("зДок,Сумма,зК",аДок,Round(аДок.СуммаВзаиморасчетов-См0,2),З.зК);
          EndIf;
          //If not aTab.Compare(bTab,"ДатаЗачтения,СуммаЗачтения") Then
          //  If not глЗаписать(аДок) Then
          //    Message("Освободите документ %LINK% для продолжения работы!","!",аДок);
          //    Exit;
          //  EndIf;
          //EndIf;
          
          ТДокАвансов.AddLine("зДок,Сумма,зК",аДок,Round(З.зСумма-См0,2),З.зК);
        EndIf;
      EndDo;
    EndDo;
    ТДокАвансов.Sort("зК,зДок+");
  EndIf;  
  
  СпНДС:=List.Create();
  СпНДС.SetByName(""+Enum.СтавкиНДС.БезНДС.Index(),"БезНДС");
  СпНДС.SetByName(""+Enum.СтавкиНДС.НДС0.Index(),0);
  СпНДС.SetByName(""+Enum.СтавкиНДС.НДС5.Index(),5);
  СпНДС.SetByName(""+Enum.СтавкиНДС.НДС7.Index(),7);
  СпНДС.SetByName(""+Enum.СтавкиНДС.НДС10.Index(),10);
  СпНДС.SetByName(""+Enum.СтавкиНДС.НДС18.Index(),18);
  СпНДС.SetByName(""+Enum.СтавкиНДС.НДС20.Index(),20);
  //пСмСтолбики:="См,СмБезНДС,См0,См5,См7,См10,См18,См20";
  ЧлНДСАвансов:=?(глСпециальнаяСтавкаУСН(оЮЛ,КонДата)=0,20,глСпециальнаяСтавкаУСН(оЮЛ,КонДата));
  
  Таб:=Tab.Create("зК,ТабПродаж,ТабПокупок");
  ТабКорректировка193:=Tab.Create("зК,зСм");
  
  пРабота("Выполнение запроса...");
  фТПок:=Enum.ПокупательПоставщик.Покупатель;
  фТПост:=Enum.ПокупательПоставщик.Поставщик;
  
  Зав:=0;
  If флУчетАвансов>0 Then
    If not ОчиститьТекущиеАвансы(0) Then//+создать запись о пересчете
      Exit;
    EndIf;
    Зав:=СоздатьЗапросПоАвансам(0);//Авансы для зачета
    If Зав=0 Then
      Exit;
    EndIf;
  EndIf;
  
  //Основной запрос
  ТЗ:="Period From НачДата to КонДата;
  |зК:=Storage.Взаиморасчеты.Договор.@Parent;
  |зНДС:=Storage.Взаиморасчеты.СтавкаНДС;
  |зТДок:=Storage.Взаиморасчеты.ТипДокумента;
  |Документ:=Storage.Взаиморасчеты.@LINK;
  |Condition(isEmpty(Storage.Взаиморасчеты.Тара));
  |зУч:=Storage.Взаиморасчеты.УчитыватьВНалоговомУчете;
  |зТД:=Storage.Взаиморасчеты.ВидДолга;
  |зСмНО:=BegTotals(Сумма);
  |зСмП:=Income(Сумма);
  |зСмР:=Expense(Сумма);
  |Condition(зК IN оК.Get(1));
  |Condition(зК NOT IN оК.Get(2));
  |Condition(Storage.Взаиморасчеты.Договор.ЮрЛицо=оЮЛ);
  |Group зТД,зК,Документ,зНДС;";
  //Используются: зТД,зК,Документ,зНДС,зСмНО,зСмП,зСмР,зТДок,зУч
  //ТЗ:="("+ТЗ+")"+_NEWLINE+"Postprocessing ("+_NEWLINE+"SkipVariables зЮЛ,зТара;)";
  
  З:=Query.Create();
  If оВозвратыРеализации=1 Then  
  
    пРабота("Подготовка запроса...");
    aTab:=З.Execute(ТЗ,0);
    З.DoNotMassLoadBeforeAggregation:=1;
    MassLoadObjects(aTab,,,0,2);
    aTab.Sort("Документ");
    
    aTab.Select();
    While aTab.Next() Do
      зДок:=aTab.Документ;
      if isEmpty(зДок) Then
        Continue;
      EndIf;
      If aTab.CurLine%100=0 Then
        Form.StatusText("Подготовка запроса: "+aTab.CurLine+" из "+aTab.Size());
      EndIf;
      If зДок.DBName="ВозвратПоставщику" Then
        зДО:=зДок.ДокОснование;
        зДО:=?(_Or(isEmpty(зДО),зДО.Status()<2),GetNothing(),зДО);
        If _And(not IsEmpty(зДО),aTab.Find(зДО,,"Документ",1)>0) Then
          Continue;
        EndIf;
        aTab.зТД:=фТПок;
        Чл:=Max(aTab.зНДС.Index(),1);
        Чл:=Number(СпНДС.GetByName(""+Чл));
        If Чл>0 Then
          ТабКорректировка193.AddLine("зК,зСм",зДок.Контрагент,Round((aTab.зСмП-aTab.зСмР)*Чл/(100+Чл),2));
        EndIf;
      {  
      ElseIf зДок.DBName="ВозвратОтПокупателя" Then
        зДО:=зДок.ДокОснование;
        зДО:=?(_Or(isEmpty(зДО),зДО.Status()<2),GetNothing(),зДО);
        If _And(not IsEmpty(зДО),aTab.Find(зДО,,"Документ",1)>0) Then
          Continue;
        EndIf;
        aTab.зТД:=фТПост;
      }
      EndIf;
    EndDo;
    ТабКорректировка193.Group("зК","зСм");
    З.PostprocessLinear("зТД,зК,Документ,зНДС");//экономия памяти.
  Else
    З.Execute(ТЗ,2,1,"зТД,зК,Документ,зНДС");//экономия памяти.
  EndIf;

  пУН:="УниверсальныйДокумент";
  пСтор:="Сторнирование";
  пВозврат:="ВозвратОтПокупателя";
  зВозвратКоСтор:=Enum.коВозвратОтПокупателя.ВозвратСторнирование;
  ФлОшибки:=0;
  ТЛог:=Table.Create();
  ТЛог.SetSourceName("Ошибки");
  оСвойства:="Период с "+НачДата+" по "+КонДата;
  ТЛог.CopyByX("v1",1);

  ТбК:=Tab.Create("зК");
  ТабЗакрытие622:=Tab.Create("Контрагент,Сумма");
  ТабЗакрытие602:=Tab.Create("Контрагент,Сумма");
  
  пРабота("Расчет данных...");
  While З.Next(1) Do
    ФлПродажи:=З.зТД=фТПок;
    ФлЗнак:=?(ФлПродажи,1,-1);
    While З.Next(2) Do
      зК:=З.зК.Copy();
      Form.StatusText(""+зК);
      
      ПозиционироватьТаблицуНаКлиенте(зК);
      Таб2:=?(флПродажи,Таб.ТабПродаж,Таб.ТабПокупок);

      зНО:=З.BegTotals("зСмНО")*ФлЗнак;
      зПриход:=З.Compute("зСмП");
      зКО:=зНО+(зПриход-З.Compute("зСмР"))*ФлЗнак;
      
      ТТ:=Tab.Create("зДок");//Реализации/поступления
      ТТ.AddColumn("ТДок",,"Number");//Тип документа
      ТТ.AddColumn("ДокСтор");//Док. сторнирования
      ТТ.AddColumn("СторСмИзм",,"Number");//Док. сторнирования, сумма (изменение)
      ТТ.AddColumn("СторСмНДСИзм",,"Number");//Док. сторнирования, сумма НДС (изменение)
      ТТ.AddColumn("ДокОпл");//Док. оплаты, "" -- оплачен пред. авансом
      ТТ.AddColumn("СмОпл",,"Number");//Осталось оплатить
      ТТ.AddColumn("См",,"Number");
      ТТ.AddColumn("СмБезНДС",,"Number");
      ТТ.AddColumn("См0",,"Number");
      ТТ.AddColumn("См5",,"Number");
      ТТ.AddColumn("См7",,"Number");
      ТТ.AddColumn("См10",,"Number");
      ТТ.AddColumn("См18",,"Number");
      ТТ.AddColumn("См20",,"Number");
      
      ТО:=Tab.Create("зДок");//Оплаты
      ТО.AddColumn("ТДок",,"Number");
      ТО.AddColumn("См",,"Number");
      ТО.AddColumn("СмБезНДС",,"Number");
      ТО.AddColumn("См0",,"Number");
      ТО.AddColumn("См5",,"Number");
      ТО.AddColumn("См7",,"Number");
      ТО.AddColumn("См10",,"Number");
      ТО.AddColumn("См18",,"Number");
      ТО.AddColumn("См20",,"Number");
      
      ТСтор:=Tab.Create("зДок");
      
//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам
      If (флПродажи=1)And(флУчетАвансов=2) Then
        //1. Создание таблицы авансов текущего периода ТАвансы и ТАвТекПериод
        //2. Копирование в нее незакрытых авансов предыдущего периода (если зНО<0)
        
        СмТекСальдо:=зНО;
        ПредДень:=0;
        ДеньПриход:=0;
        ДеньРасход:=0;
        ТАвансы:=Tab.Create("зДок");//Документ, из-за которого появился аванс
        ТАвансы.AddColumn("зАвДок");//Документ аванса
        ТАвансы.AddColumn("флТолькоДляЗачтения",,"Number");//Авансы прошлых периодов
        ТАвансы.AddColumn("Сумма",,"Number");
        ТАвансы.AddColumn("СуммаЗакрытия",,"Number");
        ТАвансы.AddColumn("ДатаЗакрытия");
        
        ТАвТекПериод:=Tab.Create("зДок");
        ТАвТекПериод.AddColumn("флУчтен",,"Number");
        
        ТРДок:=Tab.Create("зДок");
        ТРДок.AddColumn("Сумма",,"Number");
        СмАвансовНаЗакрытие:=Min(СмТекСальдо,0);
        АвансовНаЗакрытиеИндекс:=1;
        
        См0:=Max(-СмТекСальдо,0);
        If ТДокАвансов.FindAndGoto(зК,,"зК")>0 Then
          Repeat
            If ТДокАвансов.зК<>зК Then
              Break;
            EndIf;
            дАванса:=BegOfDay(ТДокАвансов.зДок.DocDate);
            If (См0>0)And(дАванса<НачДата) Then
              См1:=Round(Min(См0,ТДокАвансов.Сумма),2);
              См0:=Round(См0-См1,2);
              
              ТАвансы.AddLine("зДок,Сумма,флТолькоДляЗачтения,зАвДок",ТДокАвансов.зДок,См1,1,ТДокАвансов.зДок);
            EndIf;
            
            If (дАванса>=НачДата)And(дАванса<=КонДата) Then
              ТАвТекПериод.AddLine("зДок",ТДокАвансов.зДок);
            EndIf;
          Until not ТДокАвансов.Next();
        EndIf;
        
        If См0>0 Then
          ТАвансы.AddLine("зДок,Сумма,флТолькоДляЗачтения",0,См0,1);
          ДобавитьВЛогОшибок(0,"Недостаточно документов аванса на начало периода (на сумму "+глФРМ(См0)+", контрагент "+зК+")! Необходимо пересчитать предыдущие периоды!",ФлПродажи,1);
        EndIf;
      EndIf;
//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам
      



      While З.Next(3) Do
        зДок:=З.Документ;
        if isEmpty(зДок) Then
          Continue;
        EndIf;
        зДок:=зДок.Copy();
        См:=(З.Compute("зСмП")-З.Compute("зСмР"))*ФлЗнак;
        
//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам
        //Учет приходов и расходов одного дня в таблице авансов
        If (флПродажи=1)And(флУчетАвансов=2) Then
          If (ПредДень=0)Or(ПредДень<>BegOfDay(зДок.DocDate)) Then
            If ПредДень<>0 Then
              ДобавитьДеньВТекущиеАвансы(СмТекСальдо,ДеньРасход,ДеньПриход,ТРДок,ТАвансы,СмАвансовНаЗакрытие,АвансовНаЗакрытиеИндекс,ПредДень);
            EndIf;
            ПредДень:=BegOfDay(зДок.DocDate);
            ДеньПриход:=0;
            ДеньРасход:=0;
          EndIf;
          
          If См<0 Then
            ТРДок.NewLine();
            ТРДок.зДок:=зДок;
            ТРДок.Сумма:=См;
          EndIf;
          СмТекСальдо:=СмТекСальдо+См;
          ДеньРасход:=ДеньРасход+Min(См,0);
          ДеньПриход:=ДеньПриход+Max(См,0);
        EndIf;
//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам

        If З.зУч=0 Then
          ДобавитьВЛогОшибок(зДок,"Документ исключен из книги продаж или покупок (не стоит галка ""включать в книгу продаж/покупок"")!",ФлПродажи);
          Continue;
        EndIf;
        
        Вид:=зДок.DBName();
        Тб:=?(См<0,ТО,ТТ);
        ТДок:=З.зТДок;
        If Вид=пУН Then
          While З.Next(4) Do //НДС
            Чл:=Max(З.зНДС.Index(),1);
            Чл:=СпНДС.GetByName(""+Чл);
            См:=(З.Compute("зСмП")-З.Compute("зСмР"))*ФлЗнак;
            Тб:=?(См<0,ТО,ТТ);
            If Тб.зДок<>зДок Then
              Тб.AddLine("ТДок,зДок",1,зДок);
            EndIf;
            Тб.См:=Тб.См+См;
            Тб.Set(Тб.Size(),"См"+Чл,Тб.Get(Тб.Size(),"См"+Чл)+См);
          EndDo;
          Continue;
        ElseIf Вид=пСтор Then
          зДО:=зДок.ДокОснование;
          If (зДО.Status()>1)And(BegOfDay(зДО.DocDate)<НачДата)Or(BegOfDay(зДО.DocDate)>КонДата) Then
            If оБезДопЛистов=0 Then
              ТСтор.AddLine("зДок",зДок);
              Continue;
            EndIf;
          EndIf;
          ДобавитьСторнированиеВТекущийПериод(зДок,Таб2,?(флПродажи=1,Таб.ТабПокупок,Таб.ТабПродаж),ФлЗнак);
          Continue;
        ElseIf Вид=пВозврат Then
          If зДок.КодОперации=зВозвратКоСтор Then
            зДО:=зДок.ДокОснование;
            If (зДО.Status()>1)And(BegOfDay(зДО.DocDate)<НачДата)Or(BegOfDay(зДО.DocDate)>КонДата) Then
              If оБезДопЛистов=0 Then
                ТСтор.AddLine("зДок",зДок);
                Continue;
              EndIf;
            EndIf;
            ДобавитьСторнированиеВТекущийПериод(зДок,Таб2,?(флПродажи=1,Таб.ТабПокупок,Таб.ТабПродаж),ФлЗнак);
            Continue;
          EndIf;
        EndIf;
        
        Тб.AddLine("ТДок,См,зДок",ТДок,См,зДок);
        Стр0:=Тб.Size();
        While З.Next(4) Do //НДС
          Чл:=Max(З.зНДС.Index(),1);
          Чл:=СпНДС.GetByName(""+Чл);
          Тб.Set(Стр0,"См"+Чл,Тб.Get(Стр0,"См"+Чл)+(З.Compute("зСмП")-З.Compute("зСмР"))*ФлЗнак);
        EndDo;
      EndDo;
      
//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам
      If (флПродажи=1)And(флУчетАвансов=2) Then
        //Учет приходов и расходов последнего дня периода в таблице авансов
        If ПредДень<>0 Then
          ДобавитьДеньВТекущиеАвансы(СмТекСальдо,ДеньРасход,ДеньПриход,ТРДок,ТАвансы,СмАвансовНаЗакрытие,АвансовНаЗакрытиеИндекс,ПредДень);
        EndIf;
        
        //Физическое создание документов авансов и проверка текущих существующих документов
        ТАвансы.Select();//зДок,зАвДок,флТолькоДляЗачтения,Сумма,СуммаЗакрытия,ДатаЗакрытия
        While ТАвансы.Next() Do
          If (ТАвансы.флТолькоДляЗачтения=0)And(Round(ТАвансы.Сумма,2)>0) Then
            аДатаАванса:=BegOfDay(ТАвансы.зДок.DocDate);
            Фл:=0;
            For i:=1 to ТАвТекПериод.Size() Do
              ТАвТекПериод.CurLine:=i;
              If (BegOfDay(ТАвТекПериод.зДок.DocDate)=аДатаАванса)And(ТАвансы.зДок=ТАвТекПериод.зДок.ДокОснование) Then
                Фл:=1;
                зДок:=ТАвТекПериод.зДок;
                аДок:=зДок;
                ТАвансы.зАвДок:=зДок;
                If зДок.СуммаВзаиморасчетов<>ТАвансы.Сумма Then
                  аДок:=зДок.Copy();
                  аДок.СуммаВзаиморасчетов:=ТАвансы.Сумма;
                  If not ЗаписатьИОбработать(аДок) Then
                    Exit;
                  EndIf;
                  Message("Сумма документа аванса (%LINK%, %LINK%) изменена с "+глФРМ(зДок.СуммаВзаиморасчетов)+" на "+глФРМ(ТАвансы.Сумма)+"!","I",аДок,зК);
                  ДобавитьВЛогОшибок(аДок,"Сумма документа аванса ("+аДок+", "+зК+") изменена с "+глФРМ(зДок.СуммаВзаиморасчетов)+" на "+глФРМ(ТАвансы.Сумма)+"!",ФлПродажи,1);
                ElseIf зДок.Status()<2 Then
                  аДок:=зДок.Copy();
                  If not ЗаписатьИОбработать(аДок) Then
                    Exit;
                  EndIf;
                  Message("Документа аванса (%LINK%, %LINK%) был обработан!","I",аДок,зК);
                  ДобавитьВЛогОшибок(аДок,"Документа аванса ("+аДок+", "+зК+") был обработан!",ФлПродажи,1);
                EndIf;
                ТАвТекПериод.флУчтен:=1;
                Break;
              EndIf;
            EndDo;
            If not Фл Then
              //Создать новый
              аДок:=Doc.Аванс;
              аДок.New();
              аДок.DocDate:=аДатаАванса;
              аДок.ЮрЛицо:=оЮЛ;
              аДок.Автор:=глПользователь;
              аДок.ДокОснование:=ТАвансы.зДок;
              аДок.флБезПроводок:=1-Form.оПроводки.Value;
              аДок.КодОперации:=Enum.коАванс.АвансПолученный;
              глЗаполнитьШапку(аДок);
              аДок.Контрагент:=зК;
              аДок.СуммаВзаиморасчетов:=ТАвансы.Сумма;
              If not ЗаписатьИОбработать(аДок) Then
                Exit;
              EndIf;
              ТАвансы.зАвДок:=аДок;
              Message("Был создан новый документ аванса (%LINK%, %LINK%) с суммой "+глФРМ(ТАвансы.Сумма)+"!","I",зК,аДок);
              ДобавитьВЛогОшибок(аДок,"Был создан новый документ аванса ("+аДок+") с суммой "+глФРМ(ТАвансы.Сумма)+"!",ФлПродажи,1);
            EndIf;
            
            зНомер:=ТАвансы.зАвДок.DocNum;
            зДата:=ТАвансы.зАвДок.DocDate;
            If аДок.флНеОтображатьВКниге=0 Then
              Таб2.AddLine("зДок,ДатаОплаты,зДокОплаты,См,См"+ЧлНДСАвансов+",ТДок",ТАвансы.зАвДок,зДата,ТАвансы.зАвДок.ДокОснование,ТАвансы.Сумма,ТАвансы.Сумма,1);
              Таб2.ТПечати:=СоздатьТаблицуПечати(0,оЮЛ.Контрагент,зК,зНомер,зДата,ТАвансы.Сумма);
            EndIf;  
          EndIf;
          
          If ТАвансы.СуммаЗакрытия=0 Then
            Continue;
          EndIf;
          
          Фл:=0;
          Таб3:=Таб.ТабПокупок;
          зНомер:="?";
          зДата:=КонДата;
          If IsEmpty(ТАвансы.зАвДок) Then
            Таб3.AddLine("зДок,ДатаОплаты,См,См"+ЧлНДСАвансов+",ТДок",зНомер+" от "+зДата,ТАвансы.ДатаЗакрытия,ТАвансы.СуммаЗакрытия,ТАвансы.СуммаЗакрытия,2);//"Зачт. аванс "+
            Фл:=1;
          Else
            зНомер:=ТАвансы.зАвДок.DocNum;
            зДата:=BegOfDay(ТАвансы.зАвДок.DocDate);
            If ТАвансы.зАвДок.флНеОтображатьВКниге=0 Then
              //Раньше сумма аванса равнялась тому, что осталось зачесть на начало периода,
              //       по требованию налоговой изменено на начальную сумму аванса
              См0:=ТАвансы.зАвДок.СуммаВзаиморасчетов;
              Таб3.AddLine("зДок,ДатаОплаты,См,См"+ЧлНДСАвансов+",ТДок",ТАвансы.зАвДок,ТАвансы.ДатаЗакрытия,См0,ТАвансы.СуммаЗакрытия,2);
              Фл:=1;
            EndIf;
            //Изменяем документ полученного аванса
            аДок:=ТАвансы.зАвДок.Copy();            
            aTab:=аДок.LineParts("ЗачтениеАванса");
            aTab.AddLine("ДатаЗачтения,СуммаЗачтения",КонДата,ТАвансы.СуммаЗакрытия);
            If аДок.флБезПроводок=0 Then
              ТабЗакрытие622.AddLine("Контрагент,Сумма",аДок.Контрагент,ТАвансы.СуммаЗакрытия);
            EndIf;
            If _And(not ФлБылоПредупреждениеОЗакрытомПериоде,BegOfDay(аДок.DocDate)<=ДатаЗапретаСТочкиЗренияПолномочий(аДок)) Then
              ФлБылоПредупреждениеОЗакрытомПериоде:=1;
              If AskQuestion("Для формирования этого отчета необходимо изменить документы аванса за старые периоды. Данные периоды уже были закрыты бухгалтерией. Вы можете "+
                  "игнорировать дату запрета и продолжить пересчет, однако, после пересчета за этот период необъодимо будет также пересчитать все последуюшие периоды до "+
                  "текущего дня! Хотите игнорировать дату запрета и продолжить?",Q_WARNING+Q_YESNO)<>R_YES Then
                Exit;
              EndIf;
            EndIf;
            If not глЗаписать(аДок,0,0,2) Then
              Message("Освободите документ %LINK% для продолжения работы!","!",аДок);
              Exit;
            EndIf;
            //Таб3.зДок:=ТАвансы.зАвДок;
          EndIf;
          If Фл Then
            Таб3.ТПечати:=СоздатьТаблицуПечати(1,оЮЛ.Контрагент,зК,зНомер,зДата,ТАвансы.СуммаЗакрытия);
          EndIf;
        EndDo;
        
        //Удаляем лишние
        ТАвТекПериод.Select();
        While ТАвТекПериод.Next() Do
          If ТАвТекПериод.флУчтен=0 Then
            аДок:=ТАвТекПериод.зДок;
            If аДок.Status()>1 Then
              If not глОтменитьОбработку(аДок) Then
                Message("Освободите документ %LINK% для продолжения работы!","!",аДок);
                Exit;
              EndIf;
              //аДок.Mark(1);
              Message("Документ аванса (%LINK%) был удален!","I",аДок);
              ДобавитьВЛогОшибок(зДок,"Документ аванса ("+аДок+") был удален!",ФлПродажи,1);
            EndIf;
          EndIf;
        EndDo;
      EndIf;
//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам//Учет авансов по документам
      
      
      If ТТ.Size()+ТО.Size()=0 Then
        //Ситуация с зКО без документов может возникнуть, когда аванс создается за счет сторнирований/возвратов сторнирований
        If Round(зКО,6)>=0 Then
          Continue;
        EndIf;  
      EndIf;
      
      //1. Закрываем возвраты
      i:=0;
      While i<ТО.Size() Do
        i:=i+1;
        ТО.CurLine:=i;
        If ТО.ТДок<>2 Then
          Continue;
        EndIf;
        зДок:=ТО.зДок;
        зДО:=ТО.зДок.ДокОснование;
        зДО:=?(_Or(isEmpty(зДО),зДО.Status()<2),GetNothing(),зДО);
        If ТТ.FindAndGoto(зДО,,"зДок")=0 Then
          If (зДок.DBName()=пВозврат)Or(оВозвратыРеализации=0) Then
            //Отнимаем возврат от реализаций/поступлений периода без подчиненных документов последовательно, пока не уменьшим его до нуля
            ФлУчтен:=0;
            ТТ.Select();
            While ТТ.Next() Do
              If _And(IsDBObject(ТТ.зДок),ТО.FindAndGoto(ТТ.зДок)>0) Then
                Continue;
              EndIf;
              СмБезНДС:=Max(ТО.СмБезНДС,-ТТ.СмБезНДС);
              См0:=Round(Max(ТО.См0,-ТТ.См0),2);
              См5:=Round(Max(ТО.См5,-ТТ.См5),2);
              См7:=Round(Max(ТО.См7,-ТТ.См7),2);
              См10:=Round(Max(ТО.См10,-ТТ.См10),2);
              См18:=Round(Max(ТО.См18,-ТТ.См18),2);
              См20:=Round(Max(ТО.См20,-ТТ.См20),2);
              ТТ.СмБезНДС:=ТТ.СмБезНДС+СмБезНДС;
              ТТ.См0:=ТТ.См0+См0;ТТ.См5:=ТТ.См5+См5;ТТ.См7:=ТТ.См7+См7;ТТ.См10:=ТТ.См10+См10;ТТ.См18:=ТТ.См18+См18;ТТ.См20:=ТТ.См20+См20;
              ТО.См0:=ТО.См0-См0;ТО.См5:=ТО.См5-См5;ТО.См7:=ТО.См7-См7;ТО.См10:=ТО.См10-См10;ТО.См18:=ТО.См18-См18;ТО.См20:=ТО.См20-См20;
              СмИт:=СмБезНДС+См0+См5+См7+См10+См18+См20;
              ТТ.См:=Round(ТТ.См+СмИт,2);
              ТО.См:=Round(ТО.См-СмИт,2);
              If ТТ.См=0 Then
                aNum:=ТТ.CurLine;
                ТТ.Remove(ТТ.CurLine);
                ТТ.CurLine:=aNum-1;
              EndIf;
              If ТО.См=0 Then
                ТО.Remove(i);
                i:=i-1;
                ФлУчтен:=1;
                Break;
              EndIf;
            EndDo;
            If ФлУчтен Then
              ДобавитьВЛогОшибок(зДок,"Возврат без основания или с основанием за пределами периода был закрыт документами текущего периода!",ФлПродажи);
            Else
              ДобавитьВЛогОшибок(зДок,"Возврат без основания или с основанием за пределами периода!",ФлПродажи);
              ТТ.AddLine("зДок,См,СмБезНДС,См0,См5,См7,См10,См18,См20",зДок,ТО.См,ТО.СмБезНДС,ТО.См0,ТО.См5,ТО.См7,ТО.См10,ТО.См18,ТО.См20);
              ТО.Remove(i);
              i:=i-1;
            EndIf;
          Else
            Message("Внутренняя ошибка учета документа возврата: "+зДок+"! Расчет остановлен!","!");
            Exit;
          EndIf;
        Else
          If _Or(Round(ТТ.СмБезНДС+ТО.СмБезНДС,2)<0,Round(ТТ.См0+ТО.См0,2)<0,Round(ТТ.См10+ТО.См10,2)<0,Round(ТТ.См5+ТО.См5,2)<0,Round(ТТ.См7+ТО.См7,2)<0,Round(ТТ.См18+ТО.См18)<0,Round(ТТ.См20+ТО.См20)<0) Then
            ДобавитьВЛогОшибок(ТО.зДок,"Возврат на большие суммы НДС ("+глФРМ(ТТ.См0+ТТ.СмБезНДС+ТТ.См5+ТТ.См7+ТТ.См10+ТТ.См18+ТТ.См20,"")+" и "+
              глФРМ(-ТО.См0-ТО.СмБезНДС-ТО.См10-ТО.См5-ТО.См7-ТО.См18-ТО.См20,"")+"), либо неверный возврат, содержащий товар, отсутствовавший в исходном документе!",ФлПродажи);
            СмБезНДС:=Max(ТО.СмБезНДС,-ТТ.СмБезНДС);
            См0:=Max(ТО.См0,-ТТ.См0);
            См5:=Max(ТО.См5,-ТТ.См5);
            См7:=Max(ТО.См7,-ТТ.См7);
            См10:=Max(ТО.См10,-ТТ.См10);
            См18:=Max(ТО.См18,-ТТ.См18);
            См20:=Max(ТО.См20,-ТТ.См20);
            ТТ.СмБезНДС:=ТТ.СмБезНДС+СмБезНДС;
            ТТ.См0:=ТТ.См0+См0;
            ТТ.См5:=ТТ.См5+См5;
            ТТ.См7:=ТТ.См7+См7;
            ТТ.См10:=ТТ.См10+См10;
            ТТ.См18:=ТТ.См18+См18;
            ТТ.См20:=ТТ.См20+См20;
            СмИт:=СмБезНДС+См0+См5+См7+См10+См18+См20;
          Else
            ТТ.СмБезНДС:=ТТ.СмБезНДС+ТО.СмБезНДС;
            ТТ.См0:=ТТ.См0+ТО.См0;
            ТТ.См5:=ТТ.См5+ТО.См5;
            ТТ.См7:=ТТ.См7+ТО.См7;
            ТТ.См10:=ТТ.См10+ТО.См10;
            ТТ.См18:=ТТ.См18+ТО.См18;
            ТТ.См20:=ТТ.См20+ТО.См20;
            СмИт:=ТО.См0+ТО.См5+ТО.См7+ТО.См10+ТО.См18+ТО.См20;
          EndIf;
          ТТ.См:=ТТ.См+СмИт;
          ТО.См:=ТО.См-СмИт;
          If ТТ.См=0 Then
            ТТ.Remove(ТТ.CurLine);
          EndIf;
          If ТО.См=0 Then
            ТО.Remove(i);
            i:=i-1;
          EndIf;
        EndIf;
      EndDo;
      
      //2. Закрываем сторнирования
      //i:=0;
      //While i<ТО.Size() Do
      //  i:=i+1;
      //  ТО.CurLine:=i;
      //  If ТО.ТДок<>4 Then
      //    Continue;
      //  EndIf;
      //  зДО:=ТО.зДок.ДокОснование;
      //  If ТТ.FindAndGoto(зДО,,"зДок"):=0 Then
      //    If зДО.DocDate<НачДата Then
      //      зНО:=зНО+ТО.См;
      //    Else
      //      ДобавитьВЛогОшибок(ТО.зДок,"Сторнирование будущего документа или неверное сторнирование!",ФлПродажи);
      //    EndIf;
      //  Else
      //    ТТ.См0:=ТТ.См0+ТО.См0;
      //    ТТ.См5:=ТТ.См5+ТО.См5;
      //    ТТ.См7:=ТТ.См7+ТО.См7;
      //    ТТ.См10:=ТТ.См10+ТО.См10;
      //    ТТ.См18:=ТТ.См18+ТО.См18;
      //    ТТ.См20:=ТТ.См20+ТО.См20;
      //    СмИт:=ТО.См0+ТО.См5+ТО.См7+ТО.См10+ТО.См18+ТО.См20;
      //    ТТ.См:=ТТ.См+СмИт;
      //    ТТ.ДокСтор:=ТО.зДок;
      //    ТТ.СторСмИзм:=СмИт;
      //    ТТ.СторСмНДСИзм:=Round(ТО.См5*5/105,2)+Round(ТО.См7*7/107,2)+Round(ТО.См10*10/110,2)+Round(ТО.См18*18/118,2)+Round(ТО.См20*20/120,2);
      //    
      //    If ТТ.См:=0 Then
      //      ТТ.Remove(ТТ.CurLine);
      //    EndIf;
      //    ТО.Remove(i);
      //    i:=i-1;
      //  EndIf;
      //EndDo;
      
      //Подготовка оплат
      ТТ.Select();
      While ТТ.Next() Do
        ТТ.СмОпл:=Max(0,ТТ.См);
      EndDo;
      
      //3. Закрываем отрицательное начальное сальдо
      СтрТТ:=1;
      См0:=зНО;
      If См0<0 Then
        ТТ.Select();
        While ТТ.Next() Do
          If ТТ.СмОпл>0 Then
            См:=Min(ТТ.СмОпл,-См0);
            ТТ.СмОпл:=Round(ТТ.СмОпл-См,2);
            См0:=Round(См0+См,2);
            If См0=0 Then
              Break;
            EndIf;
          EndIf;
          СтрТТ:=СтрТТ+1;
        EndDo;
      EndIf;
      
      //4. Закрываем оплаты
      ТО.Select();
      While (ТО.Next())And(СтрТТ<=ТТ.Size()) Do
        While СтрТТ<=ТТ.Size() Do
          ТТ.CurLine:=СтрТТ;
          If (Round(ТТ.СмОпл,2)<=0)Or(ТТ.ТДок>=4) Then
            СтрТТ:=СтрТТ+1;
            Continue;
          EndIf;
          См0:=Min(ТТ.СмОпл,-ТО.См);
          ТТ.СмОпл:=Round(ТТ.СмОпл-См0,2);
          ТО.См:=Round(ТО.См+См0,2);
          If ТТ.СмОпл=0 Then
            ТТ.ДокОпл:=ТО.зДок;
            СтрТТ:=СтрТТ+1;
          EndIf;
          If ТО.См=0 Then
            Break;
          EndIf;
        EndDo;
        If Round(ТО.См,2)<>0 Then//Остался аванс
          Break;
        EndIf;
        If СтрТТ>ТТ.Size() Then
          Break;
        EndIf;
      EndDo;
      
      If _And(флПродажи=0,ФлАвтоАвансыВыданные,зКО<0,_And(_Or(оКАА[1].Size()=0,оКАА[1].Contains(зК)),_Or(оКАА[2].Size()=0,not оКАА[2].Contains(зК)))) Then
        //Учет автоматического создания авансов выданных только для авансов, созданных в текущем месяце
        СмЗачАванс:=Min(зПриход,Max(0,-зНО));
        СмАванс:=Max(0,-зКО)-(Max(0,-зНО)-СмЗачАванс);
        If СмАванс>0 Then
          aNum:=ТО.Size()+1;
          While (aNum>1)And(СмАванс>0) Do
            aNum:=aNum-1;
            ТО.CurLine:=aNum;
            См:=Min(СмАванс,Max(0,-ТО.См));
            СмАванс:=Round(СмАванс-См,2);
            If (См=0)Or(IsEmpty(ТО.зДок)) Then
              Continue;
            EndIf;
            аДатаАванса:=BegOfDay(ТО.зДок.DocDate);
            Фл:=0;
            ТАвВыдТекПериод.CurLine:=0;
            While ТАвВыдТекПериод.LocateAndGoto("зК",зК,1)>0 Do
              If (BegOfDay(ТАвВыдТекПериод.зДок.DocDate)=аДатаАванса)And(ТО.зДок=ТАвВыдТекПериод.зДок.ДокОснование) Then
                Фл:=1;
                зДок:=ТАвВыдТекПериод.зДок;
                аДок:=зДок;
                If зДок.СуммаВзаиморасчетов<>См Then
                  аДок:=зДок.Copy();
                  аДок.СуммаВзаиморасчетов:=См;
                  If not ЗаписатьИОбработать(аДок) Then
                    Exit;
                  EndIf;
                  Message("Сумма документа аванса выданного (%LINK%, %LINK%) изменена с "+глФРМ(зДок.СуммаВзаиморасчетов)+" на "+глФРМ(См)+"!","I",аДок,зК);
                  ДобавитьВЛогОшибок(аДок,"Сумма документа аванса выданного ("+аДок+", "+зК+") изменена с "+глФРМ(зДок.СуммаВзаиморасчетов)+" на "+глФРМ(См)+"!",ФлПродажи,1);
                ElseIf зДок.Status()<2 Then
                  аДок:=зДок.Copy();
                  If not ЗаписатьИОбработать(аДок) Then
                    Exit;
                  EndIf;
                  Message("Документа аванса выданного (%LINK%, %LINK%) был обработан!","I",аДок,зК);
                  ДобавитьВЛогОшибок(аДок,"Документа аванса выданного ("+аДок+", "+зК+") был обработан!",ФлПродажи,1);
                EndIf;
                ТАвВыдТекПериод.флУчтен:=1;
                Break;
              EndIf;
            EndDo;
            If not Фл Then
              //Создать новый
              аДок:=Doc.Аванс;
              аДок.New();
              аДок.DocDate:=аДатаАванса;
              аДок.ЮрЛицо:=оЮЛ;
              аДок.Аналитика:=оЮЛ.ОсновнаяАналитика;
              аДок.Автор:=глПользователь;
              аДок.ДокОснование:=ТО.зДок;
              аДок.флБезПроводок:=1-Form.оПроводки.Value;
              аДок.КодОперации:=Enum.коАванс.АвансВыданный;
              глЗаполнитьШапку(аДок);
              аДок.Контрагент:=зК;
              аДок.СуммаВзаиморасчетов:=См;
              If not ЗаписатьИОбработать(аДок) Then
                Exit;
              EndIf;
              Message("Был создан новый документ аванса выданного (%LINK%, %LINK%) с суммой "+глФРМ(См)+"!","I",зК,аДок);
              ДобавитьВЛогОшибок(аДок,"Был создан новый документ аванса выданного ("+аДок+") с суммой "+глФРМ(См)+"!",ФлПродажи,1);
            EndIf;
          EndDo;
          If СмАванс>0 Then
            ДобавитьВЛогОшибок("Неверная сумма выданных авансов по контрагенту "+зК+" ("+зК.Code+"), разница: "+глФРМ(СмАванс),"Пересчитайте книги пред. периода!",ФлПродажи);
          EndIf;
        EndIf;
      ElseIf флПродажи=1 Then
        //Копирование результата в Таб
        ТбК.AddLine("зК",зК);
        
        If флУчетАвансов=0 Then
          //Аванс=АвансНаКонецПериода
          //ЗачтенныйАванс=АвансНаНачалоПериода
          If зНО<0 Then
            Таб3:=Таб.ТабПокупок;
            зНомер:="АВ"+зК.Code+""+GetYear(НачДата-1)+Right("000"+GetMonth(НачДата-1),2);
            СтрДок:=зНомер+" от "+(НачДата-1);//"Зачт. аванс "+
            Таб3.AddLine("зДок,ДатаОплаты,См,См"+ЧлНДСАвансов+",ТДок",СтрДок,СтрДок,-зНО,-зНО,2);
            Таб3.ТПечати:=СоздатьТаблицуПечати(1,оЮЛ.Контрагент,зК,зНомер,(НачДата-1),-зНО);
          EndIf;
          If зКО<0 Then
            зНомер:="АВ"+зК.Code+""+GetYear(КонДата)+Right("000"+GetMonth(КонДата),2);
            СтрДок:=зНомер+" от "+КонДата;//"Аванс "+
            Таб2.AddLine("зДок,ДатаОплаты,См,См"+ЧлНДСАвансов+",ТДок",СтрДок,СтрДок,-зКО,-зКО,1);
            Таб2.ТПечати:=СоздатьТаблицуПечати(0,оЮЛ.Контрагент,зК,зНомер,КонДата,-зКО);
          EndIf;
        ElseIf (флПродажи<>1)Or(флУчетАвансов=1) Then
          //ЗачтенныйАванс=мин(РасходЗаПериод,АвансНаНачалоПериода)
          //Аванс=АвансНаКонецПериода-(АвансНаНачалоПериода-ЗачтенныйАванс)
          СмЗачАванс:=Min(зПриход,Max(0,-зНО));
          СмАванс:=Max(0,-зКО)-(Max(0,-зНО)-СмЗачАванс);
          
          //Зачтенные
          Зав.First();
          If Зав.ResultTable.LocateAndGoto("зК,@LEVEL",зК,2)>0 Then
            While Зав.Next(2) Do
              зЭл:=Зав.зЭл;
              СмЗачет:=Min(СмЗачАванс,Зав.зСм);
              СмОстаток:=Зав.зСм-СмЗачет;
              СмЗачАванс:=СмЗачАванс-СмЗачет;
              If СмЗачет>0 Then
                Таб3:=Таб.ТабПокупок;
                зНом:=Trim(зЭл.Name);//"Зачт. аванс "+
                //Раньше сумма аванса равнялась тому, что осталось зачесть на начало периода,
                //       по требованию налоговой изменено на начальную сумму аванса
                См0:=СмЗачет;
                aEl:=Ref.бухУчетАвансов;
                If aEl.Find("~(КонецУчетногоПериода=зЭл.ДатаАванса)And(Name=зЭл.Name)And(Контрагент=зЭл.Контрагент)And(ЮрЛицо=зЭл.ЮрЛицо)And(КнигаПокупок=зЭл.КнигаПокупок)") Then
                  См0:=aEl.СуммаАванса;
                EndIf;
                Таб3.AddLine("зДок,ДатаОплаты,См,См"+ЧлНДСАвансов+",ТДок",зНом+" от "+зЭл.ДатаАванса,зНом+" от "+КонДата,См0,СмЗачет,2);
                Таб3.ТПечати:=СоздатьТаблицуПечати(1,оЮЛ.Контрагент,зК,Trim(зЭл.Name),зЭл.ДатаАванса,СмЗачет);
              EndIf;
              If СмОстаток>0 Then
                If not ДобавитьВТекущиеАвансы(0,зК,Trim(зЭл.Name),зЭл.ДатаАванса,СмОстаток) Then
                  Exit;
                EndIf;
              EndIf;
            EndDo;
          EndIf;
          If СмЗачАванс>0 Then
            ДобавитьВЛогОшибок("Неверный аванс по контрагенту "+зК+" ("+зК.Code+")","Найден зачтенный аванс, который отсутствовал в справочнике авансов! Пересчитайте книги пред. периода!",0);
            Таб3:=Таб.ТабПокупок;
            зНомер:="АВ"+зК.Code+""+GetYear(КонДата)+Right("000"+GetMonth(КонДата),2);
            Таб3.AddLine("зДок,ДатаОплаты,См,См"+ЧлНДСАвансов+",ТДок",зНомер+" от "+КонДата,Таб3.зДок,СмЗачАванс,СмЗачАванс,2);//"Зачт. аванс "+
            Таб3.ТПечати:=СоздатьТаблицуПечати(1,оЮЛ.Контрагент,зК,зНомер,КонДата,СмЗачАванс);
          EndIf;
          
          If СмАванс>0 Then
            зНомер:="АВ"+зК.Code+""+GetYear(КонДата)+Right("000"+GetMonth(КонДата),2);
            If not ДобавитьВТекущиеАвансы(0,зК,зНомер,КонДата,СмАванс) Then
              Exit;
            EndIf;
            
            Таб2.AddLine("зДок,ДатаОплаты,См,См"+ЧлНДСАвансов+",ТДок",зНомер+" от "+КонДата,Таб2.зДок,СмАванс,СмАванс,1);//"Аванс "+
            Таб2.ТПечати:=СоздатьТаблицуПечати(0,оЮЛ.Контрагент,зК,зНомер,КонДата,СмАванс);
          EndIf;
          
        EndIf;
      EndIf;
      ТО:=0;
      
      ТТ.Select();
      While ТТ.Next() Do
        
        //Исключаем отложенный НДС
        If _And(Pos("DB.DOC",typestr(ТТ.зДок))=1,глЕстьРеквизитДокумента("ОтложитьНДСНаПериод",ТТ.зДок.DBName())) Then
          If not IsEmpty(ТТ.зДок.ОтложитьНДСНаПериод) Then
            аДата:=BegOfMonth(ТТ.зДок.ОтложитьНДСНаПериод);
            If (аДата<BegOfMonth(НачДата))Or(аДата>BegOfMonth(КонДата)) Then
              ДобавитьВЛогОшибок(ТТ.зДок,"Документ исключен из книги продаж или покупок (НДС отложен на другой период)!",ФлПродажи);
              Continue;
            EndIf;
          EndIf;
        EndIf;
        
        If ТТ.ТДок=1 Then
          Continue;//Исключение всех корректировок
        EndIf;
        Таб2.AddLine("зДок,зКорДок,СторСмИзм,СторСмНДСИзм,ДатаОплаты,См,СмБезНДС,См0,См5,См7,См10,См18,См20,ТДок",ТТ.зДок,ТТ.ДокСтор,ТТ.СторСмИзм,ТТ.СторСмНДСИзм,
          ?(not IsEmpty(ТТ.ДокОпл),""+ВходящийНомер(ТТ.ДокОпл)+" от "+ВходящаяДата(ТТ.ДокОпл),""),
          ТТ.См,ТТ.СмБезНДС,ТТ.См0,ТТ.См5,ТТ.См7,ТТ.См10,ТТ.См18,ТТ.См20,0);
      EndDo;
      
      //Сторнирования
      ТСтор.Select();
      While ТСтор.Next() Do
        ФлЗнак:=?(ФлПродажи=1,1,-1);
        ДобавитьСторнированиеВДопЛист(ТСтор.зДок,ФлЗнак,Таб2);
      EndDo;
      
      ТТ:=0;
    EndDo; //По клиентам
    
    //Перевод авансов с прошлых периодов
    If (флПродажи=1)And(флУчетАвансов=1) Then
      Зав.First();
      While Зав.Next(1) Do
        зК:=Зав.зК;
        If ТбК.FindAndGoto(зК,,"зК")>0 Then
          Continue;
        EndIf;
        
        While Зав.Next(2) Do
          зЭл:=Зав.зЭл;
          If Зав.зСм>0 Then
            If not ДобавитьВТекущиеАвансы(0,зК,Trim(зЭл.Name),зЭл.ДатаАванса,Зав.зСм) Then
              Exit;
            EndIf;
          EndIf;
        EndDo;
      EndDo;
    EndIf;
    
  EndDo; //По книгам  
  
  If (not IsEmpty(ТАвВыдТекПериод))And(not ВыбраныОсобыеФильтры()) Then
    ТАвВыдТекПериод.Select();
    While ТАвВыдТекПериод.Next() Do
      If ТАвВыдТекПериод.флУчтен=0 Then
        аДок:=ТАвВыдТекПериод.зДок;
        If аДок.Status()>1 Then
          If not глОтменитьОбработку(аДок) Then
            Message("Освободите документ %LINK% для продолжения работы!","!",аДок);
            Exit;
          EndIf;
          //аДок.Mark(1);
          Message("Документ аванса выданного (%LINK%) был удален!","I",аДок);
          ДобавитьВЛогОшибок(зДок,"Документ аванса выданного ("+аДок+") был удален!",ФлПродажи,1);
        EndIf;
      EndIf;
    EndDo;
  EndIf;
  
  //Корректировка книг покупок. Некоторые входящие документы могут быть представлены у нас двумя и более документами, мы должны их показать как один документ
  Таб.Select();
  While Таб.Next() Do
    Таб2:=Таб.ТабПокупок;
    Таб2.Select();
    While Таб2.Next() Do
      Таб2.спДок:=ВходящийДокумент(Таб2.зДок);
    EndDo;
    Таб2.Sort("спДок+,зКорДок+");
    
    aNum:=1;
    While aNum<=Таб2.Size() Do
      Таб2.CurLine:=aNum;
      зДок:=Таб2.зДок;
      пДок:=Таб2.спДок;
      зКорДок:=Таб2.зКорДок;
      Таб2.спДок:=GetNothing();
      bNum:=aNum;
      While bNum+1<=Таб2.Size() Do
        If _Or(Таб2["спДок",bNum+1]<>пДок,Таб2["зКорДок",bNum+1]<>зКорДок) Then
          Break;
        EndIf;
        bNum:=bNum+1;
      EndDo;
      If bNum>aNum Then
        Сп:=List.Create(?(isEmpty(зДок),зДок,зДок.Copy()));
        Таб2.спДок:=Сп;
        For i:=aNum+1 to bNum Do
          Сп.Add(Таб2.Get(i,"зДок"));
          Таб2.См:=Таб2.См+Таб2.Get(i,"См");
          Таб2.СмБезНДС:=Таб2.СмБезНДС+Таб2.Get(i,"СмБезНДС");
          Таб2.См0:=Таб2.См0+Таб2.Get(i,"См0");
          Таб2.См5:=Таб2.См5+Таб2.Get(i,"См5");
          Таб2.См7:=Таб2.См7+Таб2.Get(i,"См7");
          Таб2.См10:=Таб2.См10+Таб2.Get(i,"См10");
          Таб2.См18:=Таб2.См18+Таб2.Get(i,"См18");
          Таб2.См20:=Таб2.См20+Таб2.Get(i,"См20");
          Таб2.СторСмИзм:=Таб2.СторСмИзм+Таб2.Get(i,"СторСмИзм");
          Таб2.СторСмНДСИзм:=Таб2.СторСмНДСИзм+Таб2.Get(i,"СторСмНДСИзм");
          If (IsEmpty(Таб2.зКорДок))And(not IsEmpty(Таб2.Get(i,"зКорДок"))) Then
            Таб2.зКорДок:=Таб2.Get(i,"зКорДок");
          EndIf;
        EndDo;
        For i:=aNum+1 to bNum Do
          Таб2.Remove(aNum+1);
        EndDo;
      EndIf;
      aNum:=aNum+1;
    EndDo;
    Таб2.Sort("зДок+");
  EndDo;  
  
  
  //Отложенный НДС, включенный в данный период
  НачДата1:=BegOfMonth(НачДата);
  КонДата1:=BegOfMonth(КонДата);
  Дата0:='01.01.1981';
  Дата1:=Date();
  ТЗ:="Period From Дата0 to Дата1;
  |зЮЛ:=Storage.ОтложенныйНДС.ЮрЛицо;
  |зК:=Storage.ОтложенныйНДС.Контрагент;
  |зДата:=Storage.ОтложенныйНДС.ВключатьВКнигуВПериоде;
  |зСтавка:=Storage.ОтложенныйНДС.СтавкаНДС;
  |Документ:=Storage.ОтложенныйНДС.@LINK;
  |Condition(зК IN оК.Get(1));
  |Condition(зК NOT IN оК.Get(2));
  |Condition(зЮЛ=оЮЛ);
  |Condition((BegOfDay(зДата)>=НачДата1)And(BegOfDay(зДата)<=КонДата1));
  |зСм0:=Storage.ОтложенныйНДС.Сумма;
  |зСм:=SUM(зСм0);
  |Group зК,Документ,зСтавка;";
  
  ЗОНДС:=Query.Create();
  ЗОНДС.Execute(ТЗ);
  
  While ЗОНДС.Next(1) Do
    ПозиционироватьТаблицуНаКлиенте(ЗОНДС.зК);
    Таб2:=Таб.ТабПокупок;
    While ЗОНДС.Next(2) Do
      аДок:=ЗОНДС.Документ;
      If Таб2.FindAndGoto(аДок,,"зДок")>0 Then
        Continue;//Внутренняя ошибка?
      EndIf;
      Таб2.AddLine("зДок,ДатаОплаты,ТДок,См",аДок,BegOfDay(аДок.DocDate),0,ЗОНДС.зСм);
      While ЗОНДС.Next(3) Do
        зСтавка:=ЗОНДС.зСтавка;
        If зСтавка.Index()=0 Then
          Message("Для документа %LINK% обнаружена неверная ставка отложенного НДС, обработайте документ заново!","!",ЗОНДС.Документ);
          Exit;
        EndIf;
        Чл:=Max(зСтавка.Index(),1);
        Чл:=СпНДС.GetByName(""+Чл);
        
        Таб2.СмБезНДС:=Таб2.СмБезНДС+?(Чл="БезНДС",ЗОНДС.зСм,0);
        Таб2.См0:=Таб2.См0+?(Чл=0,ЗОНДС.зСм,0);
        Таб2.См5:=Таб2.См5+?(Чл=5,ЗОНДС.зСм,0);
        Таб2.См7:=Таб2.См7+?(Чл=7,ЗОНДС.зСм,0);
        Таб2.См10:=Таб2.См10+?(Чл=10,ЗОНДС.зСм,0);
        Таб2.См18:=Таб2.См18+?(Чл=18,ЗОНДС.зСм,0);
        Таб2.См20:=Таб2.См20+?(Чл=20,ЗОНДС.зСм,0);
      EndDo;
      
      ДобавитьВЛогОшибок(аДок,"Документ включен в книгу покупок, как документ с НДС отложенным на текущий период!",0);
    EndDo;
  EndDo;
  
  
//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные
//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные
//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные

  //Запрос по документам авансов выданных
  Сп:=List.Create();
  Сп.Add(Enum.коАванс.АвансВыданный);
  ТЗ:="зСтатус:=Doc.Аванс.@Status;
  |Condition(зСтатус>1);
  |зДата:=Doc.Аванс.DocDate;
  |Condition((BegOfDay(зДата)<=КонДата)And(BegOfDay(зДата)>=НачДата));
  |зЮЛ:=Doc.Аванс.ЮрЛицо;
  |зК:=Doc.Аванс.Контрагент;
  |зКО:=Doc.Аванс.КодОперации;
  |зДок:=Doc.Аванс;
  |Condition(зК IN оК.Get(1));
  |Condition(зК NOT IN оК.Get(2));
  |Condition(зЮЛ=оЮЛ);
  |Condition(зКО IN Сп);
  |зСм0:=Doc.Аванс.СуммаВзаиморасчетов;
  |зСм:=SUM(зСм0);
  |Group зК,зДок;";
  
  Зав:=Query.Create();
  Зав.Execute(ТЗ);
  
  If not ОчиститьТекущиеАвансы(1) Then//+создать запись о пересчете
    Exit;
  EndIf;
  
  ЗавСтар:=СоздатьЗапросПоАвансам(1);//Авансы для зачета
  If ЗавСтар=0 Then
    Exit;
  EndIf;
  
  ФлПредупреж:=0;
  ТбК:=Tab.Create("зК");
  While Зав.Next(1) Do
    зК:=Зав.зК;
    ТбК.AddLine("зК",зК);
    If ФлПредупреж=0 Then
      If ВыбраныОсобыеФильтры() Then
        ФлПредупреж:=1;
        Box("Найден по крайней мере один документ выданного аванса, однако, он не будет отображен, пока выбраны фильтры по контрагенту!",Q_STOP);
      EndIf;
    EndIf;  
    
    ФлОК:=1;
    зКО:=0;
    зРасход:=0;
    З.First();
    If З.ResultTable.LocateAndGoto("зТД,зК",фТПост,зК)=0 Then
      ФлОК:=0;
    Else
      З.LinearLevelPos:=2;
      зРасход:=З.Compute("зСмР");
      зКО:=З.BegTotals("зСмНО")+(З.Compute("зСмП")-зРасход);
      If зКО<=0 Then
        ФлОК:=0;
      EndIf;
    EndIf;
    ПозиционироватьТаблицуНаКлиенте(зК);
    
    ЗавСтар.First();
    If ЗавСтар.ResultTable.LocateAndGoto("зК,@LEVEL",зК,2)>0 Then
      While ЗавСтар.Next(2) Do
        зЭл:=ЗавСтар.зЭл;
        СмЗачет:=Min(зРасход,ЗавСтар.зСм);
        СмОстаток:=ЗавСтар.зСм-СмЗачет;
        зРасход:=зРасход-СмЗачет;
        If СмЗачет>0 Then
          Таб2:=Таб.ТабПродаж;
          зНом:=Trim(зЭл.Name);//"Зачт. аванс "+
          Таб2.AddLine("зДок,ДатаОплаты,См,См"+ЧлНДСАвансов+",ТДок",зНом+" от "+зЭл.ДатаАванса,КонДата,СмЗачет,СмЗачет,2);
          Таб2.ТПечати:=СоздатьТаблицуПечати(1,зК,оЮЛ.Контрагент,Trim(зЭл.Name),зЭл.ДатаАванса,СмЗачет);
          If зЭл.флПроводкиБухУчета Then
            ТабЗакрытие602.AddLine("Контрагент,Сумма",зК,СмЗачет);
          EndIf;
        EndIf;
        If СмОстаток>0 Then
          If not ДобавитьВТекущиеАвансы(1,зК,Trim(зЭл.Name),зЭл.ДатаАванса,СмОстаток,зЭл.флПроводкиБухУчета) Then
            Exit;
          EndIf;
        EndIf;
      EndDo;
    EndIf;
    
    If not ФлОК Then
      Continue;
    EndIf;
    
    While Зав.Next(2) Do
      См:=Min(Зав.зСм,зКО);
      СмРазница:=Round(Зав.зСм-См,2);
      зКО:=Round(зКО-См,2);
      If См>0 Then
        зНомер:=?(Зав.зДок.НомерДокВходящий="",Зав.зДок.DocNum,Зав.зДок.НомерДокВходящий);
        зДата:=?(IsEmpty(Зав.зДок.ДатаДокВходящий),Зав.зДок.DocDate,Зав.зДок.ДатаДокВходящий);
        If ДобавитьВТекущиеАвансы(1,зК,зНомер,зДата,См,Зав.зДок.флБезПроводок=0)=0 Then
          Exit;
        EndIf;
        
        Таб2:=Таб.ТабПокупок;
        Таб2.AddLine("зДок,ДатаОплаты,См,См"+ЧлНДСАвансов+",ТДок",зНомер+" от "+зДата,зНомер+" от "+КонДата,См,См,1);
        Таб2.ТПечати:=СоздатьТаблицуПечати(0,зК,оЮЛ.Контрагент,Trim(зНомер),зДата,См);
      EndIf;
      If (СмРазница>0)And(Зав.зДок.флБезПроводок=0) Then
        ТабЗакрытие602.AddLine("Контрагент,Сумма",зК,СмРазница);
      EndIf;
    EndDo;
  EndDo;
  
  //Старые авансы, не попавшие в предыдущий запрос
  ЗавСтар.First();
  While ЗавСтар.Next(1) Do
    зК:=ЗавСтар.зК;
    If ТбК.FindAndGoto(зК,,"зК")>0 Then
      Continue;
    EndIf;
    
    зРасход:=0;
    З.First();
    If З.ResultTable.LocateAndGoto("зТД,зК",фТПост,зК)>0 Then
      //зТД,зК,Документ,зНДС
      З.LinearLevelPos:=2; //4-2=2
      зРасход:=З.Compute("зСмР");
    EndIf;
    
    ПозиционироватьТаблицуНаКлиенте(зК);
    While ЗавСтар.Next(2) Do
      зЭл:=ЗавСтар.зЭл;
      СмЗачет:=Min(зРасход,ЗавСтар.зСм);
      СмОстаток:=ЗавСтар.зСм-СмЗачет;
      зРасход:=зРасход-СмЗачет;
      If СмЗачет>0 Then
        Таб2:=Таб.ТабПродаж;
        зНом:=Trim(зЭл.Name);//"Зачт. аванс "+
        Таб2.AddLine("зДок,ДатаОплаты,См,См"+ЧлНДСАвансов+",ТДок",зНом+" от "+зЭл.ДатаАванса,зНом+" от "+КонДата,СмЗачет,СмЗачет,2);
        Таб2.ТПечати:=СоздатьТаблицуПечати(1,зК,оЮЛ.Контрагент,Trim(зЭл.Name),зЭл.ДатаАванса,СмЗачет);
        If зЭл.флПроводкиБухУчета Then
          ТабЗакрытие602.AddLine("Контрагент,Сумма",зК,СмЗачет);
        EndIf;
      EndIf;
      If СмОстаток>0 Then
        If ДобавитьВТекущиеАвансы(1,зК,Trim(зЭл.Name),зЭл.ДатаАванса,СмОстаток,зЭл.флПроводкиБухУчета)=0 Then
          Exit;
        EndIf;
      EndIf;
    EndDo;
  EndDo;
  
  
//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные
//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные
//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные//Документ: Авансы выданные
  
  
  If not ВыбраныОсобыеФильтры() Then //(флПродажи=1)
    пРабота("Расчет списаний...");
    Таб.AddLine("зК,ТабПродаж,ТабПокупок",0,СоздатьПустуюТаблицу(),СоздатьПустуюТаблицу(1));
    Таб2:=Таб.ТабПродаж;
    
    Сп:=List.Create();
    Сп.Add(Enum.коРегистрацияТМЦ.СписаниеТМЦ);
    //Списания ТМЦ
    ТЗ:="зСтатус:=Doc.РегистрацияТМЦ.@Status;
    |Condition(зСтатус>1);
    |зДата:=Doc.РегистрацияТМЦ.DocDate;
    |Condition((BegOfDay(зДата)<=КонДата)And(BegOfDay(зДата)>=НачДата));
    |зФлНДС:=Doc.РегистрацияТМЦ.УчитыватьВНалоговомУчете;
    |Condition(зФлНДС>0);
    |зЮЛ:=Doc.РегистрацияТМЦ.ЮрЛицо;
    |зКО:=Doc.РегистрацияТМЦ.КодОперации;
    |Документ:=Doc.РегистрацияТМЦ;
    |зСм0:=Doc.РегистрацияТМЦ.Номенклатура.Сумма;
    |зСм:=SUM(зСм0);
    |зНДС:=Doc.РегистрацияТМЦ.Номенклатура.СтавкаНДС;
    |Condition(зЮЛ=оЮЛ);
    |Condition(зКО IN Сп);
    |Group Документ,зНДС;";
    
    З:=Query.Create();
    З.Execute(ТЗ);
    
    While З.Next(1) Do
      If З.зСм>0 Then
        зДок:=З.Документ;
        Таб2.AddLine("зДок,ДатаОплаты",зДок,ВходящийНомер(зДок)+" от "+ВходящаяДата(зДок));
        While З.Next(2) Do
          Таб2.См:=Таб2.См+З.зСм;
          Чл:=Max(З.зНДС.Index(),1);
          Чл:=СпНДС.GetByName(""+Чл);
          
          Таб2.СмБезНДС:=Таб2.СмБезНДС+?(Чл="БезНДС",З.зСм,0);
          Таб2.См0:=Таб2.См0+?(Чл=0,З.зСм,0);
          Таб2.См5:=Таб2.См5+?(Чл=5,З.зСм,0);
          Таб2.См7:=Таб2.См7+?(Чл=7,З.зСм,0);
          Таб2.См10:=Таб2.См10+?(Чл=10,З.зСм,0);
          Таб2.См18:=Таб2.См18+?(Чл=18,З.зСм,0);
          Таб2.См20:=Таб2.См20+?(Чл=20,З.зСм,0);
          Таб2.ТДок:=3;
        EndDo;
      EndIf;
    EndDo;
    
    Сп:=List.Create();
    Сп.Add(Enum.коРегистрацияОС.ВводВЭксплуатациюИСписаниеОС);
    Сп.Add(Enum.коРегистрацияОС.ВводВЭксплуатациюОС);
    Сп.Add(Enum.коРегистрацияОС.СписаниеОС);
    //Списания ОС
    ТЗ:="зСтатус:=Doc.РегистрацияОС.@Status;
    |Condition(зСтатус>1);
    |зДата:=Doc.РегистрацияОС.DocDate;
    |Condition((BegOfDay(зДата)<=КонДата)And(BegOfDay(зДата)>=НачДата));
    |зСм0:=Doc.РегистрацияОС.Номенклатура.Сумма;
    |зФлНДС:=Doc.РегистрацияОС.УчитыватьВНалоговомУчете;Condition(зФлНДС>0);
    |зКО:=Doc.РегистрацияОС.КодОперации;Condition(зКО IN Сп);
    |зНДС:=Doc.РегистрацияОС.Номенклатура.СтавкаНДС;
    |зЮЛ:=Doc.РегистрацияОС.ЮрЛицо;Condition(зЮЛ IN оЮЛ);
    |зСм:=SUM(зСм0);
    |Документ:=Doc.РегистрацияОС;
    |Group Документ,зНДС;";
    З:=Query.Create();
    З.Execute(ТЗ);
    
    While З.Next(1) Do
      If З.зСм>0 Then
        зДок:=З.Документ;
        Таб2.AddLine("зДок,ДатаОплаты",зДок,ВходящийНомер(зДок)+" от "+ВходящаяДата(зДок));
        While З.Next(2) Do
          Таб2.См:=Таб2.См+З.зСм;
          Чл:=Max(З.зНДС.Index(),1);
          Чл:=СпНДС.GetByName(""+Чл);
          
          Таб2.СмБезНДС:=Таб2.СмБезНДС+?(Чл="БезНДС",З.зСм,0);
          Таб2.См0:=Таб2.См0+?(Чл=0,З.зСм,0);
          Таб2.См5:=Таб2.См5+?(Чл=5,З.зСм,0);
          Таб2.См7:=Таб2.См7+?(Чл=7,З.зСм,0);
          Таб2.См10:=Таб2.См10+?(Чл=10,З.зСм,0);
          Таб2.См18:=Таб2.См18+?(Чл=18,З.зСм,0);
          Таб2.См20:=Таб2.См20+?(Чл=20,З.зСм,0);
          Таб2.ТДок:=3;
        EndDo;
      EndIf;
    EndDo;
  EndIf;  
  
  If ФлОшибки=1 Then
    ТЛог.CopyByX("v3",1);
    глПечатнаяФормаОтчета(ТЛог,0,"Ошибки и предупреждения");
  Else
    ТЛог:=0;
  EndIf;
  
  пРабота(?(ФлОшибки=0,"Работа окончена успешно!","При расчете выявлены ошибки в данных!"));
  Рассчитано:=1;
  ОбновитьДоступность();
EndFunction


Function OnDoubleClick(Таб)
  if Таб.SelectionMode>1 then
    result:=not глРаботаСОсобымиИконкамиТаблицы(Таб);  
    Exit;
  EndIf;  
  Знч:=Таб.Area(Таб.CurCol,Таб.CurLine).Value;
  If TypeStr(Знч)<>"LIST" Then
    Exit 1;
  EndIf;
  Result:=0;
  If Знч.GetByName("СчетФактура")<>1 Then
    aList:=List.Create();
    Знч.CopyTo(aList);
    If aList.Select(Знч,1)<>0 Then
      OpenObject(Знч,0,1);
    EndIf;
  Else
    aList:=List.Create("Вывести форму счет-фактуры","Открыть "+Знч["Контрагент"]);
    aNum:=aList.Select(Знч,1);
    If aNum=1 Then
      LoadModule(0,"Modules\FreeForms\ПечатныеФормы\Справочник.бухУчетАвансов\СчетФактура",Знч,0);
    ElseIf aNum=2 Then
      OpenObject(Знч["Контрагент"].Copy(),0,1);
    EndIf;
  EndIf;
EndFunction



//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать
//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать
//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать//Печать


Function НайтиДокументыПоИдентификатору(Тип,Стр)
  оЮЛ:=Form.оЮЛ.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);

  ТЗ:="зСтатус:=Doc.БухгалтерскаяОперация.@Status;
  |Condition(зСтатус<>1);
  |зДата:=BegOfDay(Doc.БухгалтерскаяОперация.DocDate);
  |Condition(зДата<=КонДата);
  |Condition(зДата>=НачДата);
  |зЮЛ:=Doc.БухгалтерскаяОперация.ЮрЛицо;
  |Condition(зЮЛ=оЮЛ);
  |зДок:=Doc.БухгалтерскаяОперация;
  |зТип:=Doc.БухгалтерскаяОперация.УникальныйИдентификатор;
  |Condition(зТип=Тип);
  |Group зДок;";
  
  З:=Query.Create();
  З.Execute(ТЗ);
  Сп:=List.Create();
  Фл:=0;
  While З.Next(1) Do
    If Фл=0 Then
      Фл=1;
      If AskQuestion("За данный период уже обнаружены созданные документы "+Стр+" по выбранным юр. лицам. Желаете обновить документы?",Q_QUESTION+Q_YESNO)<>R_YES Then
        Exit 0;
      EndIf;
    EndIf;
    
    аДок:=З.зДок.Copy();
    If pos("DB.DOC",TypeStr(Сп.GetByName(З.зЮЛ.Code)))>0 Then
      If not глУдалить(аДок) Then
        Exit 0;
      EndIf;
    Else
      If аДок.Status()=1 Then
        If not глОтменитьУдаление(аДок) Then
          Exit 0;
        EndIf;
      EndIf;
      If аДок.Status()>1 Then
        If not глОтменитьОбработку(аДок) Then
          Exit 0;
        EndIf;
      EndIf;
      aTab:=аДок.LineParts("Содержание");
      aTab.ClearLines();
      аДок.Автор:=глПользователь;
      аДок.ЮрЛицо:=оЮЛ;
      аДок.Комментарий:="Проводки по НДС за период с "+НачДата+" по "+КонДата;
      аДок.СуммаВзаиморасчетов:=0;
      If not глЗаписать(аДок) Then
        Exit 0;
      EndIf;
      Сп.SetByName(З.зЮЛ.Code,аДок);
    EndIf;
  EndDo;
  Exit Сп;
EndFunction

Function НомерГТД(Д)
  пГТД:="";
  If _And(Pos("DB.DOC",typestr(Д))>0,глЕстьРеквизитДокумента("Склад",Д.DBName())) Then
    If Д.Склад.БезПартионногоУчета=0 Then
      aTab:=Д.LoadStorage("ОстаткиТМЦ");
      aTab.Select();
      While aTab.Next() Do
        If not IsEmpty(aTab.Партия) Then
          пГТД:=Trim(aTab.Партия.НомерГТД);
          If пГТД<>"" Then
            Break;
          EndIf;
        EndIf;
      EndDo;
    EndIf;
  EndIf;
  Exit пГТД;
EndFunction

Function ПолучитьКодОперации(Д,зКор,ТипДок,Покупки,ФлРозничныйПокупатель)
  пКодОп:=?(ФлРозничныйПокупатель,"26","01");
  If TypeStr(Д)="STRING" Then
    If ТипДок=2 Then
      If ФлРозничныйПокупатель Then
        пКодОп:=?(Покупки=0,"26","16");//Розничный покупатель
      Else
        пКодОп:=?(Покупки=0,"21","22");//Зачт. аванс
      EndIf;
    Else
      пКодОп:="02";//Аванс
    EndIf;
  ElseIf not IsDBObject(Д) Then
    Exit пКодОп;
  ElseIf Д.DBName()="ВозвратОтПокупателя" Then
    If Д.КодОперации=Enum.коВозвратОтПокупателя.ВозвратСторнирование Then
      пКодОп:=?(ФлРозничныйПокупатель,"16","18");
    Else
      пКодОп:=?(ФлРозничныйПокупатель,"16","03");//Возврат
    EndIf;
  ElseIf Д.DBName()="Сторнирование" Then
    If (Покупки=1)And(Д.СуммаВзаиморасчетов>Д.ДокОснование.СуммаВзаиморасчетов) Then
      пКодОп:="01";
    Else
      пКодОп:=?(ФлРозничныйПокупатель,"16","18");//Сторнирование
    EndIf;
  ElseIf Д.DBName()="ВозвратПоставщику" Then
    пКодОп:=?(ФлРозничныйПокупатель,"16","03");//Возврат
  ElseIf ТипДок=2 Then
    If ФлРозничныйПокупатель Then
      пКодОп:=?(Покупки=0,"26","16");//Розничный покупатель
    Else
      пКодОп:=?(Покупки=0,"21","22");//Зачт. аванс
    EndIf;
  ElseIf ТипДок=1 Then
    пКодОп:=?(ФлРозничныйПокупатель,"26","02");//Аванс
  EndIf;
  
  If not IsEmpty(зКор) Then
    If (зКор.DBName()="ВозвратОтПокупателя")And(зКор.КодОперации=Enum.коВозвратОтПокупателя.ВозвратСторнирование) Then
      пКодОп:=?(ФлРозничныйПокупатель,"16","18");//Возврат-сторнирование (было 16)
    ElseIf зКор.DBName()="Сторнирование" Then
      If (Покупки=1)And(зКор.СуммаВзаиморасчетов>зКор.ДокОснование.СуммаВзаиморасчетов) Then
        пКодОп:="01";
      Else
        пКодОп:=?(ФлРозничныйПокупатель,"16","18");//Сторнирование
      EndIf;
    EndIf;
  EndIf;
  
  Exit пКодОп;
EndFunction

Function ВывестиКнигуПродаж(СохранитьВКаталоге=0)
  оЮЛ:=Form.оЮЛ.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);

  Т:=Table.Create();
  If КонДата>'01.01.2025' Then
    Т.SetSourceName("КнигаПродаж");
  Else
    Т.SetSourceName("КнигаПродаж2024");
  EndIf;
  пПродавец:=оЮЛ.ПолнНаименование;
  пИНН:=оЮЛ.ИНН;
  пПериод:="с "+FormatDate(НачДата,"DD MMM YYYY")+" по "+FormatDate(КонДата,"DD MMM YYYY");
  Т.CopyByX("v1",1);
  Т.Options.FixedLine:=Т.Height();
  
  ТДЛ:=Table.Create();
  If КонДата>'01.01.2025' Then
    ТДЛ.SetSourceName("ДопЛистКнигиПродаж");
  Else
    ТДЛ.SetSourceName("ДопЛистКнигиПродаж2024");
  EndIf;
  ТДЛ.CopyByX("v1",1);
  ТДЛ.Options.FixedLine:=ТДЛ.Height();
  ФлДопЛист:=0;
  
  пН:=0;
  пН2:=0;
  См:=0;
  СмБезНДС:=0;
  См0:=0;
  См5:=0;См5НДС:=0;
  См7:=0;См7НДС:=0;
  См10:=0;См10НДС:=0;
  См18:=0;См18НДС:=0;
  См20:=0;См20НДС:=0;
  
  ДопСм:=0;
  ДопСмБезНДС:=0;
  ДопСм0:=0;
  ДопСм5:=0;ДопСм5НДС:=0;
  ДопСм7:=0;ДопСм7НДС:=0;
  ДопСм10:=0;ДопСм10НДС:=0;
  ДопСм18:=0;ДопСм18НДС:=0;
  ДопСм20:=0;ДопСм20НДС:=0;
  
  Таб.Select();
  While Таб.Next() Do
    If Таб.зК=0 Then
      пК:="";
      пКР:="";
    Else
      пК:=Таб.зК.ПолнНаименование;
      пКР:=Таб.зК;
    EndIf;
    пИННКПП:=?(isEmpty(Таб.зК),пИНН,Replace(Trim(Таб.зК.ИНН),"\","/"));
    
    Таб2:=Таб.ТабПродаж;
    Таб2.Select();
    While Таб2.Next() Do
      If Таб2.См=0 Then
        Continue;
      EndIf;
      
      зДок:=?(_And(IsDBObject(Таб2.зДок),not isEmpty(Таб2.зДок)),Таб2.зДок.Copy(),Таб2.зДок);//Оптимизация по памяти
      зКорДок:=?(_And(IsDBObject(Таб2.зКорДок),not isEmpty(Таб2.зКорДок)),Таб2.зКорДок.Copy(),Таб2.зКорДок);
      
      пГТД:="";
      If TypeStr(зДок)="STRING" Then
        пДок:=зДок;
        пДокР:=Таб2.ТПечати;
      Else
        If Таб2.ТДок=3 Then
          пДок:="Списание ТМЦ "+зДок.DocNum+" от "+Trim(зДок.DocDate);
        ElseIf Таб2.ТДок=1 Then
          пДок:=зДок.DocNum+" от "+Trim(зДок.DocDate);//"Аванс "+
        ElseIf Таб2.ТДок=2 Then
          пДок:=зДок.DocNum+" от "+Trim(зДок.DocDate);//"Зачт. аванс "+
        Else
          пДок:=ВходящийНомер(зДок)+" от "+ВходящаяДата(зДок);
          //пГТД:=НомерГТД(зДок);
        EndIf;
        пДокР:=зДок.Copy();
      EndIf;
      пДок2:="";
      пДокР2:=GetNothing();
      пДокИспр:="";
      If _And(pos("DB.DOC",typestr(зДок))>0,глЕстьРеквизитДокумента("НомерДокИсправление",зДок.DBName())) Then
        If Trim(зДок.НомерДокИсправление)<>"" Then
          пДокИспр:=Trim(зДок.НомерДокИсправление)+" от "+зДок.ДатаДокИсправление;
        EndIf;
      EndIf;
      пКодОп:=ПолучитьКодОперации(зДок,зКорДок,Таб2.ТДок,0,?(Таб.зК=0,0,Таб.зК.фоРозничныйПокупатель));
      
      пДокСтор:=?(IsEmpty(зКорДок),"",ВходящийНомер(зКорДок)+" от "+ВходящаяДата(зКорДок));
      пДокСторИсп:="";
      If _And(not isEmpty(зКорДок),pos("DB.DOC",typestr(зКорДок))>0,глЕстьРеквизитДокумента("НомерДокИсправление",зКорДок.DBName())) Then
        If Trim(зКорДок.НомерДокИсправление)<>"" Then
          пДокСторИсп:=Trim(зКорДок.НомерДокИсправление)+" от "+зКорДок.ДатаДокИсправление;
        EndIf;
      EndIf;
      пДокСторР:=?(IsEmpty(зКорДок),"",зКорДок);
      пОДок:=Таб2.ДатаОплаты;
      пОДокР:=Таб2.ДатаОплаты;
      If not IsEmpty(Таб2.зДокОплаты) Then
        пОДокР:=Таб2.зДокОплаты.Copy();
        If TypeStr(Таб2.ДатаОплаты)="DATE" Then
          пОДок:=ВходящийНомер(Таб2.зДокОплаты)+" от "+ВходящаяДата(Таб2.зДокОплаты);
        Else
          пОДок:=ВходящийНомер(пОДок)+" от "+ВходящаяДата(пОДок);
        EndIf;  
      EndIf;
      пВал:="";//"643, руб."; -- заполняется только для валютных операций
      пСм:=глФРМ(Таб2.См);
      пСмБезНДС:=глФРМ(Таб2.СмБезНДС);
      пСм0:=глФРМ(Таб2.См0);
      пСм5:=глФРМ(Таб2.См5-Round(Таб2.См5*5/105,2));
      пСм7:=глФРМ(Таб2.См7-Round(Таб2.См7*7/107,2));
      пСм10:=глФРМ(Таб2.См10-Round(Таб2.См10*10/110,2));
      пСм18:=глФРМ(Таб2.См18-Round(Таб2.См18*18/118,2));
      пСм20:=глФРМ(Таб2.См20-Round(Таб2.См20*20/120,2));
      If (Таб2.ТДок=1)Or(Таб2.ТДок=2) Then //В этом столбике не отражаются авансы и зачтенные авансы
        Exec("пСм"+ЧлНДСАвансов+":="""";");
      EndIf;
      пСм5НДС:=глФРМ(Таб2.См5*5/105);
      пСм7НДС:=глФРМ(Таб2.См7*7/107);
      пСм10НДС:=глФРМ(Таб2.См10*10/110);
      пСм18НДС:=глФРМ(Таб2.См18*18/118);
      пСм20НДС:=глФРМ(Таб2.См20*20/120);
      If Таб2.ТДок>=4 Then
        If Таб2.См<>0 Then
          If Таб2.См<0 Then
            пДок:=Trim(зДок.ДокОснование.DocNum)+" от "+BegOfDay(зДок.ДокОснование.DocDate);
            пДокР:=зДок.ДокОснование.Copy();
          Else
            пДок2:=пДок;
            пДок:="";
            пДокР2:=пДокР;
            пДокР:=GetNothing();
          EndIf;
          ФлДопЛист:=1;
          пН2:=пН2+1;
          ТДЛ.CopyByX("v2",1);
          
          ДопСм:=ДопСм+Таб2.См;
          ДопСмБезНДС:=ДопСмБезНДС+Таб2.СмБезНДС;
          ДопСм0:=ДопСм0+Таб2.См0;
          ДопСм5:=ДопСм5+Таб2.См5-Round(Таб2.См5*5/105,2);
          ДопСм7:=ДопСм7+Таб2.См7-Round(Таб2.См7*7/107,2);
          ДопСм10:=ДопСм10+Таб2.См10-Round(Таб2.См10*10/110,2);
          ДопСм18:=ДопСм18+Таб2.См18-Round(Таб2.См18*18/118,2);
          ДопСм20:=ДопСм20+Таб2.См20-Round(Таб2.См20*20/120,2);
          ДопСм5НДС:=ДопСм5НДС+Round(Таб2.См5*5/105,2);
          ДопСм7НДС:=ДопСм7НДС+Round(Таб2.См7*7/107,2);
          ДопСм10НДС:=ДопСм10НДС+Round(Таб2.См10*10/110,2);
          ДопСм18НДС:=ДопСм18НДС+Round(Таб2.См18*18/118,2);
          ДопСм20НДС:=ДопСм20НДС+Round(Таб2.См20*20/120,2);
        EndIf;
        Continue;
      EndIf;
      
      пН:=пН+1;
      Т.CopyByX("v2",1);
      If Т.Height()%100=0 Then
        Form.StatusText(""+Т.Height()+", "+пК);
      EndIf;
      
      См:=См+Таб2.См;
      СмБезНДС:=СмБезНДС+Таб2.СмБезНДС;
      См0:=См0+Таб2.См0;
      If _Or(ЧлНДСАвансов<>5,Таб2.ТДок<1,Таб2.ТДок>2) Then//В этом столбике не отражаются авансы и зачтенные авансы
        См5:=См5+Таб2.См5-Round(Таб2.См5*5/105,2);
      EndIf;
      If _Or(ЧлНДСАвансов<>7,Таб2.ТДок<1,Таб2.ТДок>2) Then//В этом столбике не отражаются авансы и зачтенные авансы
        См7:=См7+Таб2.См7-Round(Таб2.См7*7/107,2);
      EndIf;
      См10:=См10+Таб2.См10-Round(Таб2.См10*10/110,2);
      См18:=См18+Таб2.См18-Round(Таб2.См18*18/118,2);
      If _Or(ЧлНДСАвансов<>20,Таб2.ТДок<1,Таб2.ТДок>2) Then//В этом столбике не отражаются авансы и зачтенные авансы
        См20:=См20+Таб2.См20-Round(Таб2.См20*20/120,2);
      EndIf;
      См5НДС:=См5НДС+Round(Таб2.См5*5/105,2);
      См7НДС:=См7НДС+Round(Таб2.См7*7/107,2);
      См10НДС:=См10НДС+Round(Таб2.См10*10/110,2);
      См18НДС:=См18НДС+Round(Таб2.См18*18/118,2);
      См20НДС:=См20НДС+Round(Таб2.См20*20/120,2);
    EndDo;
  EndDo;
  
  
  //Итого необходимо пересчитать еще раз, чтобы формула выполнялась для строки итого без разницы в копейках (так считает налоговая)
  См5:=Round(См5НДС+См5,2);См5НДС:=Round(См5*5/105,2);См5:=Round(См5-См5НДС,2);
  См7:=Round(См7НДС+См7,2);См7НДС:=Round(См7*7/107,2);См7:=Round(См7-См7НДС,2);
  См10:=Round(См10НДС+См10,2);См10НДС:=Round(См10*10/110,2);См10:=Round(См10-См10НДС,2);
  См18:=Round(См18НДС+См18,2);См18НДС:=Round(См18*18/118,2);См18:=Round(См18-См18НДС,2);
  См20:=Round(См20НДС+См20,2);См20НДС:=Round(См20*20/120,2);См20:=Round(См20-См20НДС,2);
  
  пСм:=глФРМ(См);
  пСмБезНДС:=глФРМ(СмБезНДС);
  пСм0:=глФРМ(См0);
  пСм5:=глФРМ(См5);
  пСм7:=глФРМ(См7);
  пСм10:=глФРМ(См10);
  пСм18:=глФРМ(См18);
  пСм20:=глФРМ(См20);
  пСм5НДС:=глФРМ(См5НДС);
  пСм7НДС:=глФРМ(См7НДС);
  пСм10НДС:=глФРМ(См10НДС);
  пСм18НДС:=глФРМ(См18НДС);
  пСм20НДС:=глФРМ(См20НДС);
  Т.CopyByX("v3",1);
  If СохранитьВКаталоге=0 Then
    глПечатнаяФормаОтчета(Т,0,"Книга продаж "+оЮл);
  Else
    Т.Save(СохранитьВКаталоге+"Книга продаж "+оЮл+" c "+НачДата+" по "+КонДата+".xls",1);
    Т:=0;
  EndIf;  
  
  If ФлДопЛист=1 Then
    ТДЛ.Area(16,16).Text:=глФРМ(См);
    ТДЛ.Area(17,16).Text:=глФРМ(См20);
    ТДЛ.Area(18,16).Text:=глФРМ(См18);
    ТДЛ.Area(19,16).Text:=глФРМ(См10);
    ТДЛ.Area(20,16).Text:=глФРМ(См7);
    ТДЛ.Area(21,16).Text:=глФРМ(См5);
    ТДЛ.Area(22,16).Text:=глФРМ(См0);
    ТДЛ.Area(23,16).Text:=глФРМ(См20НДС);
    ТДЛ.Area(24,16).Text:=глФРМ(См18НДС);
    ТДЛ.Area(25,16).Text:=глФРМ(См10НДС);
    ТДЛ.Area(26,16).Text:=глФРМ(См7НДС);
    ТДЛ.Area(27,16).Text:=глФРМ(См5НДС);
    ТДЛ.Area(28,16).Text:=глФРМ(СмБезНДС);
    
    пСм:=глФРМ(См+ДопСм);
    пСмБезНДС:=глФРМ(СмБезНДС+ДопСмБезНДС);
    пСм0:=глФРМ(См0+ДопСм0);
    пСм5:=глФРМ(См5+ДопСм5);
    пСм7:=глФРМ(См7+ДопСм7);
    пСм10:=глФРМ(См10+ДопСм10);
    пСм18:=глФРМ(См18+ДопСм18);
    пСм20:=глФРМ(См20+ДопСм20);
    пСм5НДС:=глФРМ(См5НДС+ДопСм5НДС);
    пСм7НДС:=глФРМ(См7НДС+ДопСм7НДС);
    пСм10НДС:=глФРМ(См10НДС+ДопСм10НДС);
    пСм18НДС:=глФРМ(См18НДС+ДопСм18НДС);
    пСм20НДС:=глФРМ(См20НДС+ДопСм20НДС);
    ТДЛ.CopyByX("v3",1);
    If СохранитьВКаталоге=0 Then
      глПечатнаяФормаОтчета(ТДЛ,0,"Доп. лист книги продаж "+оЮл);
    Else
      ТДЛ.Save(СохранитьВКаталоге+"Доп. лист книги продаж "+оЮл+" c "+НачДата+" по "+КонДата+".xls",1);
      ТДЛ:=0;
    EndIf;
  EndIf;

  If СохранитьВКаталоге<>0 Then
    Box("Отчет успешно сохранен!",Q_INFORMATION);
  EndIf;  
EndFunction


Function ВывестиКнигуПокупок(СохранитьВКаталоге=0)
  оЮЛ:=Form.оЮЛ.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);

  Т:=Table.Create();
  Т.SetSourceName("КнигаПокупок");
  пПокупатель:=оЮЛ.ПолнНаименование;
  пИНН:=оЮЛ.ИНН;
  пПериод:="с "+FormatDate(НачДата,"DD MMM YYYY")+" по "+FormatDate(КонДата,"DD MMM YYYY");
  Т.CopyByX("v1",1);
  Т.Options.FixedLine:=Т.Height();
  
  ТДЛ:=Table.Create();
  ТДЛ.SetSourceName("ДопЛистКнигиПокупок");
  ТДЛ.CopyByX("v1",1);
  ТДЛ.Options.FixedLine:=ТДЛ.Height();
  ФлДопЛист:=0;
  
  пН:=0;
  пН2:=0;
  См:=0;
  СмБезНДС:=0;
  См0:=0;
  См5:=0;См5НДС:=0;
  См7:=0;См7НДС:=0;
  См10:=0;См10НДС:=0;
  См18:=0;См18НДС:=0;
  См20:=0;См20НДС:=0;
  
  ДопСм:=0;
  ДопСмБезНДС:=0;
  ДопСм0:=0;
  ДопСм5:=0;ДопСм5НДС:=0;
  ДопСм7:=0;ДопСм7НДС:=0;
  ДопСм10:=0;ДопСм10НДС:=0;
  ДопСм18:=0;ДопСм18НДС:=0;
  ДопСм20:=0;ДопСм20НДС:=0;
  
  Таб.Select();
  While Таб.Next() Do    
    Таб2:=Таб.ТабПокупок;
    Таб2.Select();
    While Таб2.Next() Do
      If Таб2.См=0 Then
        Continue;
      EndIf;
      If _And(ЧлНДСАвансов<>20,Таб2.ТДок<>2) Then
        Continue;//Книга покупок не выводится для УСН 5% и 7%
      EndIf;
      If Таб.зК=0 Then
        пК:="";
        пКР:="";
      Else
        пК:=Таб.зК.ПолнНаименование;
        пКР:=Таб.зК;
      EndIf;
      If Таб2.ТДок=2 Then
        пК:=оЮЛ.Контрагент.ПолнНаименование;
        пКР:=оЮЛ.Контрагент;
      EndIf;
      пИННКПП:=?(isEmpty(пКР),пИНН,Replace(Trim(пКР.ИНН),"\","/"));
      
      зДок:=?(_And(IsDBObject(Таб2.зДок),not isEmpty(Таб2.зДок)),Таб2.зДок.Copy(),Таб2.зДок);//Оптимизация по памяти
      зКорДок:=?(_And(IsDBObject(Таб2.зКорДок),not isEmpty(Таб2.зКорДок)),Таб2.зКорДок.Copy(),Таб2.зКорДок);
      
      пГТД:="";
      If TypeStr(зДок)="STRING" Then
        пДок:=зДок;
        пДокР:=Таб2.ТПечати;
      ElseIf Таб2.ТДок=1 Then
        пДок:=зДок.DocNum+" от "+Trim(зДок.DocDate);//"Аванс "+
        пДокР:=зДок.Copy();
      ElseIf Таб2.ТДок=2 Then
        пДок:=зДок.DocNum+" от "+Trim(зДок.DocDate);//"Зачт. аванс "+
        пДокР:=зДок.Copy();
      Else
        пДок:=ВходящийНомер(зДок)+" от "+ВходящаяДата(зДок);
        пДокР:=?(isEmpty(зДок),зДок,зДок.Copy());
        If not isEmpty(Таб2.спДок) Then
          пДокР:=Таб2.спДок;
        EndIf;
        пГТД:=НомерГТД(зДок);
      EndIf;
      пДок2:="";
      пДокР2:=GetNothing();
      пКодОп:=ПолучитьКодОперации(зДок,зКорДок,Таб2.ТДок,1,?(Таб.зК=0,0,Таб.зК.фоРозничныйПокупатель));
      пДокИспр:="";
      If _And(pos("DB.DOC",typestr(зДок))>0,глЕстьРеквизитДокумента("НомерДокИсправление",зДок.DBName())) Then
        If Trim(зДок.НомерДокИсправление)<>"" Then
          пДокИспр:=Trim(зДок.НомерДокИсправление)+" от "+зДок.ДатаДокИсправление;
        EndIf;
      EndIf;
      

      пДокСтор:=?(IsEmpty(зКорДок),"",ВходящийНомер(зКорДок)+" от "+FormatDate(ВходящаяДата(зКорДок),"dd.mm.YYYY"));
      пДокСторР:=?(IsEmpty(зКорДок),"",зКорДок);
      //пОДок:=Таб2.ДатаОплаты;
      пОДок:="";//для книги покупок не используется, -- импорт товаров
      пВал:="";//"643, руб."; -- заполняется только для валютных операций
      пСм:=глФРМ(Таб2.См);
      пСмБезНДС:=глФРМ(Таб2.СмБезНДС);
      пСм0:=глФРМ(Таб2.См0);
      пСм5:=глФРМ(Таб2.См5-Round(Таб2.См5*5/105,2));
      пСм7:=глФРМ(Таб2.См7-Round(Таб2.См7*7/107,2));
      пСм10:=глФРМ(Таб2.См10-Round(Таб2.См10*10/110,2));
      пСм18:=глФРМ(Таб2.См18-Round(Таб2.См18*18/118,2));
      пСм20:=глФРМ(Таб2.См20-Round(Таб2.См20*20/120,2));
      If (Таб2.ТДок=1)Or(Таб2.ТДок=2) Then //В этом столбике не отражаются авансы и зачтенные авансы
        Exec("пСм"+ЧлНДСАвансов+":="""";");
      EndIf;
      пСм5НДС:=глФРМ(Таб2.См5*5/105);
      пСм7НДС:=глФРМ(Таб2.См7*7/107);
      пСм10НДС:=глФРМ(Таб2.См10*10/110);
      пСм18НДС:=глФРМ(Таб2.См18*18/118);
      пСм20НДС:=глФРМ(Таб2.См20*20/120);
      пСмНДС:=глФРМ(Таб2.См20*20/120+Таб2.См18*18/118+Таб2.См10*10/110+Таб2.См7*7/107+Таб2.См5*5/105);
      If Таб2.ТДок>=4 Then
        If Таб2.См<>0 Then
          If Таб2.См<0 Then
            пДок:=Trim(зДок.ДокОснование.DocNum)+" от "+BegOfDay(зДок.ДокОснование.DocDate);
            пДокР:=зДок.ДокОснование.Copy();
          Else
            пДок2:=пДок;
            пДок:="";
            пДокР2:=пДокР;
            пДокР:=GetNothing();
          EndIf;
          ФлДопЛист:=1;
          пН2:=пН2+1;
          ТДЛ.CopyByX("v2",1);
          
          ДопСм:=ДопСм+Таб2.См;
          ДопСмБезНДС:=ДопСмБезНДС+Таб2.СмБезНДС;
          ДопСм0:=ДопСм0+Таб2.См0;
          ДопСм5:=ДопСм5+Таб2.См5-Round(Таб2.См5*5/105,2);
          ДопСм7:=ДопСм7+Таб2.См7-Round(Таб2.См7*7/107,2);
          ДопСм10:=ДопСм10+Таб2.См10-Round(Таб2.См10*10/110,2);
          ДопСм18:=ДопСм18+Таб2.См18-Round(Таб2.См18*18/118,2);
          ДопСм20:=ДопСм20+Таб2.См20-Round(Таб2.См20*20/120,2);
          ДопСм5НДС:=ДопСм5НДС+Round(Таб2.См5*5/105,2);
          ДопСм7НДС:=ДопСм7НДС+Round(Таб2.См7*7/107,2);
          ДопСм10НДС:=ДопСм10НДС+Round(Таб2.См10*10/110,2);
          ДопСм18НДС:=ДопСм18НДС+Round(Таб2.См18*18/118,2);
          ДопСм20НДС:=ДопСм20НДС+Round(Таб2.См20*20/120,2);
        EndIf;
        Continue;
      EndIf;
      
      пН:=пН+1;
      Т.CopyByX("v2",1);
      If Т.Height()%100=0 Then
        Form.StatusText(""+Т.Height()+", "+пК);
      EndIf;
      
      См:=См+Таб2.См;
      СмБезНДС:=СмБезНДС+Таб2.СмБезНДС;
      См0:=См0+Таб2.См0;
      If _Or(ЧлНДСАвансов<>5,Таб2.ТДок<1,Таб2.ТДок>2) Then//В этом столбике не отражаются авансы и зачтенные авансы
        См5:=См5+Round(Таб2.См5-Round(Таб2.См5*5/105,2),2);
      EndIf;
      If _Or(ЧлНДСАвансов<>7,Таб2.ТДок<1,Таб2.ТДок>2) Then//В этом столбике не отражаются авансы и зачтенные авансы
        См7:=См7+Round(Таб2.См7-Round(Таб2.См7*7/107,2),2);
      EndIf;
      См10:=См10+Round(Таб2.См10-Round(Таб2.См10*10/110,2),2);
      См18:=См18+Round(Таб2.См18-Round(Таб2.См18*18/118,2),2);
      If _Or(ЧлНДСАвансов<>20,Таб2.ТДок<1,Таб2.ТДок>2) Then//В этом столбике не отражаются авансы и зачтенные авансы
        См20:=См20+Round(Таб2.См20-Round(Таб2.См20*20/120,2),2);
      EndIf;
      См5НДС:=См5НДС+Round(Таб2.См5*5/105,2);
      См7НДС:=См7НДС+Round(Таб2.См7*7/107,2);
      См10НДС:=См10НДС+Round(Таб2.См10*10/110,2);
      См18НДС:=См18НДС+Round(Таб2.См18*18/118,2);
      См20НДС:=См20НДС+Round(Таб2.См20*20/120,2);
    EndDo;
  EndDo;
  
  
  пСм:=глФРМ(См);
  пСмБезНДС:=глФРМ(СмБезНДС);
  пСм0:=глФРМ(См0);
  пСм5:=глФРМ(См5);
  пСм7:=глФРМ(См7);
  пСм10:=глФРМ(См10);
  пСм18:=глФРМ(См18);
  пСм20:=глФРМ(См20);
  пСм5НДС:=глФРМ(См5НДС);
  пСм7НДС:=глФРМ(См7НДС);
  пСм10НДС:=глФРМ(См10НДС);
  пСм18НДС:=глФРМ(См18НДС);
  пСм20НДС:=глФРМ(См20НДС);
  пСмНДС:=глФРМ(См5НДС+См7НДС+См10НДС+См18НДС+См20НДС);
  Т.CopyByX("v3",1);
  If СохранитьВКаталоге=0 Then
    глПечатнаяФормаОтчета(Т,0,"Книга покупок "+оЮл);
  Else
    Т.Save(СохранитьВКаталоге+"Книга покупок "+оЮл+" c "+НачДата+" по "+КонДата+".xls",1);
    Т:=0;
  EndIf;  
  
  If ФлДопЛист=1 Then
    ТДЛ.Area(15,17).Text:=глФРМ(См);
    ТДЛ.Area(16,17).Text:=глФРМ(См20НДС+См18НДС+См10НДС+См7НДС+См5НДС);
    пСм:=глФРМ(См+ДопСм);
    пСмБезНДС:=глФРМ(СмБезНДС+ДопСмБезНДС);
    пСм0:=глФРМ(См0+ДопСм0);
    пСм5:=глФРМ(См5+ДопСм5);
    пСм7:=глФРМ(См7+ДопСм7);
    пСм10:=глФРМ(См10+ДопСм10);
    пСм18:=глФРМ(См18+ДопСм18);
    пСм20:=глФРМ(См20+ДопСм20);
    пСм5НДС:=глФРМ(См5НДС+ДопСм5НДС);
    пСм7НДС:=глФРМ(См7НДС+ДопСм7НДС);
    пСм10НДС:=глФРМ(См10НДС+ДопСм10НДС);
    пСм18НДС:=глФРМ(См18НДС+ДопСм18НДС);
    пСм20НДС:=глФРМ(См20НДС+ДопСм20НДС);
    пСмНДС:=глФРМ(См5НДС+ДопСм5НДС+См7НДС+ДопСм7НДС+См10НДС+ДопСм10НДС+См18НДС+ДопСм18НДС+См20НДС+ДопСм20НДС);
    ТДЛ.CopyByX("v3",1);
    If СохранитьВКаталоге=0 Then
      глПечатнаяФормаОтчета(ТДЛ,0,"Доп. лист книги покупок "+оЮл);
    Else
      ТДЛ.Save(СохранитьВКаталоге+"Доп. лист книги покупок "+оЮл+" c "+НачДата+" по "+КонДата+".xls",1);
      ТДЛ:=0;
    EndIf;
  EndIf;
  
  If СохранитьВКаталоге<>0 Then
    Box("Отчет успешно сохранен!",Q_INFORMATION);
  EndIf;  
EndFunction


Function ВывестиЖурнал(Т,Покупки=0);
  
  If Покупки=0 Then
    пТип:="Часть 1. Выставленные счета-фактуры";
    пДата:="Дата выставления";
    пНаименование:="Наименование покупателя";
    пИНН2:="ИНН/КПП покупателя";
  Else
    пТип:="Часть 2. Полученные счета-фактуры";
    пДата:="Дата получения";
    пНаименование:="Наименование продавца";
    пИНН2:="ИНН/КПП продавца";
  EndIf;
  Т.CopyByX("v5",1);
  
  пСм1:=0;
  пСмНДС1:=0;
  пСмУм1:=0;пСмНДСУм1:=0;
  пСмУв1:=0;пСмНДСУв1:=0;
  
  пН:=0;
  Таб.Select();
  While Таб.Next() Do
    If Таб.зК=0 Then
      пК:="";
      пКР:="";
      пИНН:="";
    Else
      пК:=Таб.зК.ПолнНаименование;
      пКР:=Таб.зК;
      пИНН:=Trim(Таб.зК.ИНН);
    EndIf;
    
    ФлПокВыведен:=0;
    пСм0:=0;
    пСмНДС0:=0;
    пСмУм0:=0;пСмНДСУм0:=0;
    пСмУв0:=0;пСмНДСУв0:=0;
    If Покупки=0 Then
      Таб2:=Таб.ТабПродаж;
    Else
      Таб2:=Таб.ТабПокупок;
    EndIf;
    Таб2.Select();
    While Таб2.Next() Do
      If Таб2.См=0 Then
        Continue;
      EndIf;
      If Таб2.ТДок=2 Then
        Continue;//Без зачтенных авансов
      EndIf;
      If Таб2.ТДок=3 Then
        Continue;//Без списаний
      EndIf;
      If Таб2.ТДок>3 Then
        Continue;//Без доп. листов
      EndIf;
      
      
      If ФлПокВыведен=0 Then
        ФлПокВыведен=1;
        Т.CopyByX("v3",1);
        Выс:=Т.Height();
      EndIf;
      
      зДок:=?(_And(IsDBObject(Таб2.зДок),not isEmpty(Таб2.зДок)),Таб2.зДок.Copy(),Таб2.зДок);//Оптимизация по памяти
      зКорДок:=?(_And(IsDBObject(Таб2.зКорДок),not isEmpty(Таб2.зКорДок)),Таб2.зКорДок.Copy(),Таб2.зКорДок);
      
      If TypeStr(зДок)="STRING" Then
        //"Аванс "+зНомер+" от "+(НачДата-1);
        пДата:=зДок;
        TearStr(пДата," ");
        пНомер:=TearStr(пДата," от ");
        пДокР:=Таб2.ТПечати;
        Вид:="Аванс";
      Else
        пНомер:=ВходящийНомер(зДок);
        пДата:=ВходящаяДата(зДок);
        пДокР:=?(isEmpty(зДок),зДок,зДок.Copy());
        Вид:=пДокР.DBName();
      EndIf;
      пН:=пН+1;
      пДатаЭл:="";
      пКодСп:="1";//1 -- бумажные, 2 -- электронные
      
      пКодОп:=ПолучитьКодОперации(зДок,зКорДок,Таб2.ТДок,Покупки,?(Таб.зК=0,0,Таб.зК.фоРозничныйПокупатель));
      
      пНомИспр:="";
      пДатаИспр:="";
      пВал:="Российский рубль, 643";
      
      пНомерКор:=?(IsEmpty(зКорДок),"",Trim(зКорДок.DocNum));
      пДатаКор:=?(IsEmpty(зКорДок),"",Trim(зКорДок.DocDate));
      пДокСторР:=?(IsEmpty(зКорДок),"",зКорДок);
      пСм:=Таб2.См;
      пСмНДС:=Round(Таб2.См5*5/105,2)+Round(Таб2.См7*7/107,2)+Round(Таб2.См10*10/110,2)+Round(Таб2.См18*18/118,2)+Round(Таб2.См20*20/120,2);
      
      пСмУм:="";
      пСмУв:="";
      пСмНДСУм:="";
      пСмНДСУв:="";
      If not IsEmpty(зКорДок) Then
        пСм:=пСм-Таб2.СторСмИзм;
        пСмНДС:=пСмНДС-Таб2.СторСмНДСИзм;
        
        пСмУм0:=пСмУм0+Max(0,-Таб2.СторСмИзм);
        пСмУв0:=пСмУв0+Max(0,Таб2.СторСмИзм);
        пСмНДСУм0:=пСмНДСУм0+Max(0,-Таб2.СторСмНДСИзм);
        пСмНДСУв0:=пСмНДСУв0+Max(0,Таб2.СторСмНДСИзм);
        
        пСмУм:=глФРМ(Max(0,-Таб2.СторСмИзм));
        пСмУв:=глФРМ(Max(0,Таб2.СторСмИзм));
        пСмНДСУм:=глФРМ(Max(0,-Таб2.СторСмНДСИзм));
        пСмНДСУв:=глФРМ(Max(0,Таб2.СторСмНДСИзм));
      EndIf;
      
      пСм0:=пСм0+пСм;
      пСмНДС0:=пСмНДС0+пСмНДС;
      
      пСм:=глФРМ(пСм);
      пСмНДС:=глФРМ(пСмНДС);
      Т.CopyByX("v2",1);
      If Т.Height()%100=0 Then
        Form.StatusText(""+Т.Height()+", "+пК);
      EndIf;
    EndDo;
    
    пСм1:=пСм1+пСм0;
    пСмНДС1:=пСмНДС1+пСмНДС0;
    пСмУм1:=пСмУм1+пСмУм0;пСмНДСУм1:=пСмНДСУм1+пСмНДСУм0;
    пСмУв1:=пСмУв1+пСмУв0;пСмНДСУв1:=пСмНДСУв1+пСмНДСУв0;
    
    If ФлПокВыведен=1 Then
      Т.Area(15,Выс).Text:=глФРМ(пСм0);
      Т.Area(16,Выс).Text:=глФРМ(пСмНДС0);
      Т.Area(17,Выс).Text:=глФРМ(пСмУм0);
      Т.Area(18,Выс).Text:=глФРМ(пСмУв0);
      Т.Area(19,Выс).Text:=глФРМ(пСмНДСУм0);
      Т.Area(20,Выс).Text:=глФРМ(пСмНДСУв0);
    EndIf;
  EndDo;
  
  пСм:=глФРМ(пСм1);
  пСмНДС:=глФРМ(пСмНДС1);
  пСмУм:=глФРМ(пСмУм1);
  пСмУв:=глФРМ(пСмУв1);
  пСмНДСУм:=глФРМ(пСмНДСУм1);
  пСмНДСУв:=глФРМ(пСмНДСУв1);
  
  Т.CopyByX("v4",1);
EndFunction

Function ВывестиЖурналУчета()
  КонДата:=BegOfDay(Form.КонДата.Value);
  оЮЛ:=Form.оЮЛ.Value;
  Т:=Table.Create();
  Т.SetSourceName("Журнал");
  
  пЗагол:="Журнал учета полученных и выставленных счетов-фактур, применяемых при расчетах по налогу на добавленную стоимость";
  пПериод:="за "+(Trunc((GetMonth(КонДата)-1)/3)+1)+" квартал "+GetYear(КонДата)+" года";
  пЮЛ:="Наименование налогоплательщика: "+Trim(оЮЛ.ПолнНаименование);
  пИНН:="ИНН/КПП налогоплательщика: "+оЮЛ.ИНН;
  Т.CopyByX("v1",1);
  
  ВывестиЖурнал(Т,0);
  ВывестиЖурнал(Т,1);
  
  Т.CopyByX("v6",1);
  глПечатнаяФормаОтчета(Т,0,"Журнал счета счетов-фактур "+оЮл);
EndFunction

Function ВывестиНДСПоступленийОстатков(ФлТаблица=0)
  оЮЛ:=Form.оЮЛ.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);

  пИНН:=оЮЛ.ИНН;
  пИНН:=TearStr(пИНН,"/");
  СпСвоиКонтрагенты:=List.Create();
  СпСвоиКонтрагенты:=Ref.кнтКонтрагенты.Load(0,"%ИНН",пИНН);
  i:=0;
  While i<СпСвоиКонтрагенты.Size() Do
    i:=i+1;
    If TearStr(СпСвоиКонтрагенты[i].ИНН,"/")<>пИНН Then
      СпСвоиКонтрагенты.Remove(i);
      i:=i-1;
    EndIf;
  EndDo;
  If СпСвоиКонтрагенты.Size()=0 Then
    Raise "Ошибка создания списка своих контрагентов";
  EndIf;
  
  aList:=List.Create();
  aList["СпКонтрагенты"]:=СпСвоиКонтрагенты;
  aList["ДатаОст"]:=НачДата-1; 
  LoadModule(0,"Modules\FreeForms\УчетныеОтделы\Бухгалтерия\КнигаПокупокИПродаж\КнигаПокупокИПродажПоОтгрузке",aList,0,"Module","РежимПоступленийОстатков");
  If aList["Результат"]<>1 Then
    Exit;
  EndIf;
  ФлМагазины:=aList["Режим"]=2;
  оН:=List.Create();//TODO
  СпИсключить:=aList["СпКонтрагенты"];
  аДата:=BegOfDay(aList["ДатаОст"]);
  аДата2:=BegOfDay(аДата)+1;
  
  
  ТабПеремещ:=Tab.Create("Магазин,Номенклатура,Количество,ИзМагазина");
  If ФлМагазины Then
    //Создаем таблицу для перемещений. 
    Form.StatusText("Расчет перемещений (1)...");
    ТЗ:="зСтатус:=Doc.ПеремещениеТМЦ.@Status;Condition(зСтатус>1);Condition(Doc.ПеремещениеТМЦ.DocDate<аДата2);
    |Condition(Doc.ПеремещениеТМЦ.ЮрЛицо=оЮЛ);
    |зДок:=Doc.ПеремещениеТМЦ;
    |Group зДок;";
    З:=Query.Create();
    З.Execute(ТЗ);
    While З.Next(1)=1 Do
      зДок:=З.зДок;
      If _And(зДок.Склад.Магазин<>зДок.СкладПолучатель.Магазин,IsEmpty(зДок.Склад.Магазин)+IsEmpty(зДок.СкладПолучатель.Магазин)=0) Then
        aTab:=зДок.LineParts("Номенклатура");
        aTab.Select();
        While aTab.Next() Do
          ТабПеремещ.AddLine("Магазин,Номенклатура,Количество,ИзМагазина",зДок.СкладПолучатель.Магазин,aTab.Номенклатура,aTab.Количество,зДок.Склад.Магазин);
        EndDo;
      EndIf;
    EndDo;
    //Поступлений от контрагента с тем же ИНН, как и текущее юр. лицо
    Form.StatusText("Расчет перемещений (2)...");
    ТЗ:="зСтатус:=Doc.ПоступлениеТМЦ.@Status;Condition(зСтатус>1);Condition(Doc.ПоступлениеТМЦ.DocDate<аДата2);
    |Condition(Doc.ПоступлениеТМЦ.ЮрЛицо=оЮЛ);
    |Condition(Doc.ПоступлениеТМЦ.Контрагент IN СпСвоиКонтрагенты);
    |зДок:=Doc.ПоступлениеТМЦ;
    |Group зДок;";
    З:=Query.Create();
    З.Execute(ТЗ);
    While З.Next(1)=1 Do
      зДок:=З.зДок;
      If Trim(зДок.НомерДокВходящий)="" Then
        Message("Для внутреннего поступления "+зДок+" не указан входящий номер!","!");
        Continue;
      EndIf;
      Номер:=Trim(зДок.НомерДокВходящий);
      аДата0:=BegOfYear(зДок.DocDate);
      аДата1:=EndOfYear(зДок.DocDate)+1;
      зДок2:=Doc.Реализация;
      If not зДок2.Find("~(@Status>1)And(DocNum=Номер)And(DocDate>=аДата0)And(DocDate<аДата1)") Then
        Message("Для внутреннего поступления "+зДок+" не найдена парная реализация с номером "+Номер+"!","!");
        Continue;
      EndIf;
      If зДок.Магазин<>зДок2.Магазин Then
        aTab:=зДок.LineParts("Номенклатура");
        aTab.Select();
        While aTab.Next() Do
          ТабПеремещ.AddLine("Магазин,Номенклатура,Количество,ИзМагазина",зДок.Магазин,aTab.Номенклатура,aTab.Количество,зДок2.Магазин);
        EndDo;
      EndIf;
    EndDo;
    ТабПеремещ.Group("Магазин,Номенклатура,ИзМагазина","Количество");
    ТабПеремещ.Sort("ИзМагазина,Номенклатура");
  EndIf;
  
  
  //Остатки в штуках на аДата
  Form.StatusText("Запрос по остаткам...");
  пТовар:=Enum.ВидыНоменклатуры.Товар;
  ТЗ:="Period From аДата to аДата;
  |зМг:=Storage.ОстаткиТМЦ.Склад.Магазин;
  |зН:=Storage.ОстаткиТМЦ.Номенклатура;
  |Condition(зН IN оН);
  |Condition(Storage.ОстаткиТМЦ.Номенклатура.ВидНоменклатуры=пТовар);
  |Condition(Storage.ОстаткиТМЦ.ЮрЛицо=оЮЛ);
  |зКО:=EndTotals(Количество);
  |Group "+?(ФлМагазины,"зМг,","")+"зН;";
  З:=Query.Create();
  З.Execute(ТЗ);
  If ФлМагазины Then
    ТабОст:=Tab.Create("Магазин,Номенклатура,Количество,Найдено");
    While З.Next(1)=1 Do
      While З.Next(2)=1 Do
        If З.зКО>0 Then
          ТабОст.AddLine("Магазин,Номенклатура,Количество,Найдено",З.зМг,З.зН,З.зКО,0);
        EndIf;
      EndDo;
    EndDo;
    ТабОст.Sort("Магазин,Номенклатура");
  Else
    ТабОст:=Tab.Create("Номенклатура,Количество,Найдено");
    While З.Next(1)=1 Do
      If З.зКО>0 Then
        ТабОст.AddLine("Номенклатура,Количество,Найдено",З.зН,З.зКО,0);
      EndIf;
    EndDo;
  EndIf;
  If ТабОст.Size()=0 Then
    Box("Нет остатков на указанную дату!",Q_STOP);
    Exit;
  EndIf;
  
  //Поступления в штуках на аДата
  Form.StatusText("Запрос по приходам...");
  аСтроки:=TempDB.Create("зКл:Number.20.5,зСм:Number.20.2,зН:Ref.тмцНоменклатура,зМагазин:DB,зДок:DOC,зДата:Date");
  Form.StatusText("Выполнение запроса...");
  аСтроки.LoadFrom("Doc.ПоступлениеТМЦ","Номенклатура.Количество->зКл,Номенклатура.Сумма->зСм,Номенклатура.Номенклатура->зН,Склад.Магазин->зМагазин,@ELEMENT->зДок,DocDate->зДата",
    "@Status>1","ЮрЛицо=оЮЛ","DocDate<аДата2","ЮрЛицо=оЮЛ","Номенклатура.Номенклатура.ВидНоменклатуры=пТовар","Номенклатура.Номенклатура IN оН",//"УчитыватьВНалоговомУчете>0",
    ?(СпИсключить.Size()>0,"Контрагент NOT IN СпИсключить",""));//"Контрагент.ТипАктива<>3",
  If ФлМагазины Then
    аСтроки.Group("зН,зМагазин,зДок,зДата","зКл,зСм");
    аСтроки.Select("зМагазин+,зН+,зДата-");
  Else
    аСтроки.Group("зН,зДок,зДата","зКл,зСм");
    аСтроки.Select("зН+,зДата-");
  EndIf;
  
  
  Form.StatusText("Расчет...");
  ObjC:=ObjectCollector.Create();
  аСтр:=0;
  аВсего:=аСтроки.Size();
  аМагазин:=0;
  аН:=0;
  ТабСуммы:=Tab.Create("Количество,Сумма,СуммаНДС,Документ"+?(ФлМагазины,",Магазин")+?(ФлТаблица,",СтавкаНДС"));
  ТабНоменклатура:=Tab.Create("Количество,Сумма,СуммаНДС,Номенклатура"+?(ФлМагазины,",Магазин"));
  зКл:=0;
  While аСтроки.Next() Do
    аСтр:=аСтр+1;
    Form.StatusText("Расчет "+аСтр+" из "+аВсего);
    If ФлМагазины Then
      If _Or(аН<>аСтроки.зН,аМагазин<>аСтроки.зМагазин) Then        
        аН:=ObjC.Get(аСтроки.зН);
        аМагазин:=ObjC.Get(аСтроки.зМагазин);
        зКл:=0;
        ТабОст.CurLine:=0;
        If ТабОст.LocateAndGoto("Магазин,Номенклатура",аМагазин,аН,1)>0 Then
          зКл:=Max(0,ТабОст.Количество-ТабОст.Найдено);
        EndIf;
      EndIf;    
    ElseIf аН<>аСтроки.зН Then
      аН:=ObjC.Get(аСтроки.зН);
      зКл:=0;
      If ТабОст.FindAndGoto(аН,,"Номенклатура")>0 Then
        зКл:=Max(0,ТабОст.Количество);//NOTE: Найдено здесь не используется
      EndIf;
    EndIf;
    If _And(оН.Size()>0,not оН.Contains(аН)) Then
      Continue;
    EndIf;
    зКл3:=аСтроки.зКл;
    //зКл3 --Остаток из поступления
    //зКл -- Остаток в текущем магазине, требующий распределения
    If зКл>0 Then
      зКл2:=Max(0,Min(зКл,зКл3));
      If зКл2>0 Then
        Контрагент:=ObjC.Get(ObjC.Get(аСтроки.зДок).Контрагент);
        СтавкаНДС:=глСтавкаНДСНоменклатуры(Контрагент,аСтроки.зН,аСтроки.зДата);
        ТабСуммы.AddLine("Количество,Сумма,Документ",зКл2,Round(аСтроки.зСм/аСтроки.зКл*зКл2,2),ObjC.Get(аСтроки.зДок));
        ТабСуммы.СуммаНДС:=Round(ТабСуммы.Сумма*глКоэффНДС(СтавкаНДС),2);//TODO, optimize?
        If ФлТаблица Then
          ТабСуммы.СтавкаНДС:=СтавкаНДС;
        EndIf;
        ТабНоменклатура.AddLine("Количество,Сумма,СуммаНДС,Номенклатура",ТабСуммы.Количество,ТабСуммы.Сумма,ТабСуммы.СуммаНДС,аН);
        ТабОст.Найдено:=Round(ТабОст.Найдено+зКл2,6);
        If ФлМагазины Then
          ТабСуммы.Магазин:=аМагазин;
          ТабНоменклатура.Магазин:=ТабСуммы.Магазин;
        EndIf;
      EndIf;
      зКл:=Round(зКл-зКл2,6);
      зКл3:=Round(зКл3-зКл2,6);
    EndIf;
    
    //Перемещения
    If ФлМагазины Then
      ТабПеремещ.CurLine:=0;
      While зКл3>0 Do
        If ТабПеремещ.LocateAndGoto("ИзМагазина,Номенклатура",аМагазин,аН,1)>0 Then
          зКл2:=Max(0,ТабПеремещ.Количество);
          аНом:=ТабОст.Locate("Магазин,Номенклатура",ТабПеремещ.Магазин,аН,1);
          If (аНом>0)And(зКл2>0) Then
            зКл2:=Min(зКл2,Max(0,ТабОст["Количество",аНом]-ТабОст["Найдено",аНом]));//Количество товара в магазине ТабПеремещ.Магазин, которое можно закрыть перемещениями из магазина аМагазин
            зКл4:=Min(зКл2,зКл3);
            зКл3:=Round(зКл3-зКл4,6);
            Контрагент:=ObjC.Get(ObjC.Get(аСтроки.зДок).Контрагент);
            СтавкаНДС:=глСтавкаНДСНоменклатуры(Контрагент,аСтроки.зН,аСтроки.зДата);
            ТабСуммы.AddLine("Количество,Сумма,Документ,Магазин",зКл4,Round(аСтроки.зСм/аСтроки.зКл*зКл4,2),ObjC.Get(аСтроки.зДок),ТабПеремещ.Магазин);
            ТабСуммы.СуммаНДС:=Round(ТабСуммы.Сумма*глКоэффНДС(СтавкаНДС),2);//TODO, optimize?
            If ФлТаблица Then
              ТабСуммы.СтавкаНДС:=СтавкаНДС;
            EndIf;
            ТабНоменклатура.AddLine("Количество,Сумма,СуммаНДС,Номенклатура,Магазин",ТабСуммы.Количество,ТабСуммы.Сумма,ТабСуммы.СуммаНДС,аН,ТабПеремещ.Магазин);
            ТабОст["Найдено",аНом]:=Round(ТабОст["Найдено",аНом]+зКл4,6);
            ТабПеремещ.Количество:=Round(ТабПеремещ.Количество-зКл4,6);
            If ТабПеремещ.Количество=0 Then
              аНум2:=ТабПеремещ.CurLine-1;
              ТабПеремещ.Remove(ТабПеремещ.CurLine);
              ТабПеремещ.CurLine:=аНум2;
            EndIf;
          EndIf;
        Else
          Break;
        EndIf;
      EndDo;
    EndIf;
  EndDo;
  
  Фл:=0;
  //ТабОст.Group(?(ФлМагазины,"Магазин,","")+"Номенклатура","Количество,Найдено");
  пТип2:="Количество не удалось восстановить";
  пТип3:="Не удалось восстановить, сред. Сумма";
  пТип4:="Не удалось восстановить, сред. Сумма НДС";
  Т:=Table.Create();
  Т.SetSourceName("РасчетНДСОстатков");
  оЗагол:="Остатки товара, для которых не удалось найти соответствующее поступление";
  оСвойства:="Остатки на "+аДата+" по юр. лицу "+оЮЛ;
  пТип:="Номенклатура";
  пКл20:=0;
  пСм0:=0;
  пСмНДС0:=0;
  Т.CopyByX("v1",1);
  ТабОст.Select();
  While ТабОст.Next() Do
    If ТабОст.Найдено<ТабОст.Количество Then
      Фл:=1;
      пДок:=ObjC.Get(ТабОст.Номенклатура);
      пМаг:="-";
      If ФлМагазины Then
        пМаг:=ObjC.Get(ТабОст.Магазин);
      EndIf;
      пК:="-";
      пКл:=глФРМЧл(ТабОст.Количество);
      пКл2:=глФРМЧл(ТабОст.Количество-ТабОст.Найдено);
      пКл20:=Round(пКл20+ТабОст.Количество-ТабОст.Найдено,6);
      пСм:="";
      пСмНДС:="";
      Т.CopyByX("v2",1);
    EndIf;
  EndDo;
  If Фл Then
    пКл:="-";
    пКл2:=глФРМЧл(пКл20);
    пСм:=глФРМ(пСм0);
    пСмНДС:=глФРМ(пСмНДС0);
    Т.CopyByX("v3",1);
    глПечатнаяФормаОтчета(Т,0,"Расчет НДС остатков (документы)");
  EndIf;
  
  MassLoadObjects(ТабСуммы,,,,2);
  ТабСуммы.Group(?(ФлМагазины,"Магазин,","")+"Документ"+?(ФлТаблица,",СтавкаНДС"),"Количество,Сумма,СуммаНДС");
  ТабСуммы.Sort(?(ФлМагазины,"Магазин+,","")+"Документ+");
  
  ТабНоменклатура.Group(?(ФлМагазины,"Магазин,","")+"Номенклатура","Количество,Сумма,СуммаНДС");
  ТабНоменклатура.Sort(?(ФлМагазины,"Магазин+,","")+"Номенклатура+");
  
  Form.StatusText("Вывод...");
  If ФлТаблица Then
    ТабДок:=Tab.Create("Документ,Магазин,Контрагент,Сумма,СуммаНДС,См20,См18,См10,См0,См7,См5,СмБезНДС");
    ТабСуммы.Select();
    While ТабСуммы.Next() Do
      ТабДок.AddLine("Документ,Магазин,Контрагент,Сумма,СуммаНДС",ТабСуммы.Документ,
        ?(ФлМагазины,ObjC.Get(ТабСуммы.Магазин),""),ObjC.Get(ObjC.Get(ТабСуммы.Документ).Контрагент),ТабСуммы.Сумма,ТабСуммы.СуммаНДС);
      Чл:=Max(СтавкаНДС.Index(),1);
      ТабДок["См"+СпНДС[""+Чл]]:=ТабСуммы.Сумма;
    EndDo;
    ТабДок.Group("Магазин,Документ,Контрагент","См20,См18,См10,См0,См7,См5,СмБезНДС,Сумма,СуммаНДС");
    aList:=List.Create();
    aList["ТабСуммы"]:=ТабДок;
    aList["СтавкаНДС"]:=СтавкаНДС;
    aList["ФлМагазины"]:=ФлМагазины;
    aList["Дата"]:=аДата;
    aList["ЮрЛицо"]:=оЮЛ;
    LoadModule(0,"Modules\FreeForms\УчетныеОтделы\Бухгалтерия\КнигаПокупокИПродаж\КнигаПокупокИПродажПоОтгрузке",aList,0,"Module","ВыборПоступленийОстатков");
    If aList["Результат"]<>1 Then
      Exit;
    EndIf;
    ТабДок:=aList["Таблица"];//Документ,Магазин,Контрагент,Сумма,СуммаНДС,спНДС
    
    ТабДок.Sort("зДок+");
    ТабДок.Select();
    While ТабДок.Next() Do
      ПозиционироватьТаблицуНаКлиенте(ТабДок.Контрагент);
      Таб2:=Таб.ТабПокупок;
      Таб2.AddLine("ТДок,зДок,ДатаОплаты,ФлКоррИзДругойКниги",0,ТабДок.Документ,ТабДок.Документ.DocDate,2);
      СпСуммы:=ТабДок.спНДС;
      For i:=1 To СпНДС.Size() Do
        См:=Number(СпСуммы["См"+СпНДС[i]]);
        Таб2["См"+СпНДС[i]]:=См;
        Таб2.См:=Round(Таб2.См+См,2);
      EndDo;
    EndDo;
    Box("Выбранные документы добавлены к текущей книге покупок!",Q_INFORMATION);
  Else
    пТип2:="Количество для восстановления";
    пТип3:="Сумма остатков";
    пТип4:="Сумма НДС остатков";
    Т:=Table.Create();
    Т.SetSourceName("РасчетНДСОстатков");
    оЗагол:="Расчет НДС поступлений для остатков товаров по юр. лицу на определенную дату (документы)";
    оСвойства:="Остатки на "+аДата+" по юр. лицу "+оЮЛ;
    пТип:="Документ";
    Т.CopyByX("v1",1);
    
    пКл20:=0;
    пСм0:=0;
    пСмНДС0:=0;
    ТабСуммы.Select();
    While ТабСуммы.Next() Do
      пДок:=ТабСуммы.Документ;
      //пК:=пДок.Контрагент;
      пК:=ObjC.Get(ObjC.Get(пДок).Контрагент);
      пКл:="-";
      пМаг:=?(ФлМагазины,ObjC.Get(ТабСуммы.Магазин),"");
      пКл2:=глФРМЧл(ТабСуммы.Количество);
      пСм:=глФРМ(ТабСуммы.Сумма);
      пСмНДС:=глФРМ(ТабСуммы.СуммаНДС);
      пКл20:=пКл20+ТабСуммы.Количество;
      пСм0:=пСм0+ТабСуммы.Сумма;
      пСмНДС0:=пСмНДС0+ТабСуммы.СуммаНДС;
      Т.CopyByX("v2",1);
    EndDo;

    пКл:="-";
    пКл2:=глФРМЧл(пКл20);
    пСм:=глФРМ(пСм0);
    пСмНДС:=глФРМ(пСмНДС0);
    Т.CopyByX("v3",1);
    глПечатнаяФормаОтчета(Т,0,"Расчет НДС остатков (документы)");
    
    
    Т2:=Table.Create();
    Т2.SetSourceName("РасчетНДСОстатков");
    оЗагол:="Расчет НДС поступлений для остатков товаров по юр. лицу на определенную дату (номенклатура)";
    оСвойства:="Остатки на "+аДата+" по юр. лицу "+оЮЛ;
    пТип:="Номенклатура";
    Т2.CopyByX("v1",1);
    
    Form.StatusText("Вывод (2)...");
    пКл0:=0;
    пКл20:=0;
    пСм0:=0;
    пСмНДС0:=0;
    ТабНоменклатура.Select();
    While ТабНоменклатура.Next() Do
      пДок:=ТабНоменклатура.Номенклатура;
      пМаг:=?(ФлМагазины,ObjC.Get(ТабНоменклатура.Магазин),"");
      пК:="-";
      If ФлМагазины Then
        пКл:=0;
        ТабОст.CurLine:=0;
        If ТабОст.LocateAndGoto("Магазин,Номенклатура",ТабНоменклатура.Магазин,ТабНоменклатура.Номенклатура,1)>0 Then
          пКл:=ТабОст.Количество;
        EndIf;
      Else
        пКл:=Number(ТабОст.FindAndGet("Количество",ТабНоменклатура.Номенклатура,,"Номенклатура"));
      EndIf;
      пКл2:=глФРМЧл(ТабНоменклатура.Количество);
      пСм:=глФРМ(ТабНоменклатура.Сумма);
      пСмНДС:=глФРМ(ТабНоменклатура.СуммаНДС);
      пКл0:=пКл0+пКл;
      пКл:=глФРМЧл(пКл);
      пКл20:=пКл20+ТабНоменклатура.Количество;
      пСм0:=пСм0+ТабНоменклатура.Сумма;
      пСмНДС0:=пСмНДС0+ТабНоменклатура.СуммаНДС;
      Т2.CopyByX("v2",1);
    EndDo;
  
    пКл:=глФРМЧл(пКл0);
    пКл2:=глФРМЧл(пКл20);
    пСм:=глФРМ(пСм0);
    пСмНДС:=глФРМ(пСмНДС0);
    Т2.CopyByX("v3",1);
    глПечатнаяФормаОтчета(Т2,0,"Расчет НДС остатков (номенклатура)");
  EndIf;
EndFunction

Function ПоступленияОстатковОбновитьИтого()
  MainTab:=Form.MainTab.Value;
  См:=0;
  СмНДС:=0;
  MainTab.Select();
  While MainTab.Next() Do
    If MainTab.Check(MainTab.CurLine,"Галки")=1 Then
      См:=Round(См+MainTab.Сумма,2);
      СмНДС:=Round(СмНДС+MainTab.СуммаНДС,2);
    EndIf;
  EndDo;
  Form.пСуммаИтого.Caption:=глФРМ(См,"")+" руб. в т.ч. НДС "+глФРМ(СмНДС,"")+" руб.";
EndFunction

Function СозданиеБухОперации()
  оЮЛ:=Form.оЮЛ.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);

  Индекс:="НДС:ДВ";
  спДок:=НайтиДокументыПоИдентификатору(Индекс,"движений по НДС");
  If спДок=0 Then
    Exit;
  EndIf;
  
  
  Сч76Н1:=глНайтиСчет("76.Н.1");
  Сч682:=глНайтиСчет("68.2");
  Сч76АВ:=глНайтиСчет("76.АВ");
  Сч193:=глНайтиСчет("19.3");
  Сч411:=глНайтиСчет("41.1");
  Сч412:=глНайтиСчет("41.2");
  
  //Корректировка 19.3
  ТЗ:="Period From НачДата to КонДата;
  |Condition(Storage.БухгалтерскиеСчета.ЮрЛицо=оЮЛ);
  |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
  |зКонОст:=EndTotals(Сумма);
  |//зРасход:=Expense(Сумма);
  |//зПриход:=Income(Сумма);
  |Condition(Storage.БухгалтерскиеСчета.Счет=Сч193);
  |Group зСуб1;";
  З19:=Query.Create();
  З19.Execute(ТЗ);
  
  //Корректировка 76.Н.1
  ТЗ:="Period From НачДата to КонДата;
  |Condition(Storage.БухгалтерскиеСчета.ЮрЛицо=оЮЛ);
  |зСуб1:=Storage.БухгалтерскиеСчета.Субконто1;
  |зКонОст:=EndTotals(Сумма);
  |//зРасход:=Expense(Сумма);
  |//зПриход:=Income(Сумма);
  |Condition(Storage.БухгалтерскиеСчета.Счет=Сч76Н1);
  |Group зСуб1;";
  З76:=Query.Create();
  З76.Execute(ТЗ);
  
  ТабКорректировка:=ТабКорректировка193.Copy();
  ТабКорректировка.AddColumn("зСм76");
  ТабКорректировка.Select();
  While ТабКорректировка.Next() Do
    ТабКорректировка.зСм76:=ТабКорректировка.зСм;
  EndDo;
  
  аДок:=спДок.GetByName(оЮЛ.Code);
  If IsEmpty(аДок) Then
    аДок:=Doc.БухгалтерскаяОперация;
    аДок.New();
    аДок.КодОперации:=Enum.коБухгалтерскаяОперация.БухгалтерскаяОперация;
    аДок.DocDate:=КонДата;
    аДок.Автор:=глПользователь;
    аДок.ЮрЛицо:=оЮЛ;
    аДок.Комментарий:="Проводки по НДС за период с "+НачДата+" по "+КонДата;
    аДок.СуммаВзаиморасчетов:=0;
    глУстановитьНовыйНомер(аДок);
    аДок.УникальныйИдентификатор:=Индекс;
    спДок.SetByName(оЮЛ.Code,аДок);
  EndIf;
  aTab:=аДок.LineParts("Содержание");
  аНалог:=глНайтиСубконтоПоИмени(Сч682.ВидСубконто1,"Налог: начислен/уплачен");
  аК:=Ref.кнтКонтрагенты;
  
  Сч1:=глНайтиСчет("62.2");
  Сч2:=глНайтиСчет("62.1");
  ТабЗакрытие622.Group("Контрагент","Сумма");
  ТабЗакрытие622.Select();//Переносим закрытые авансы полученные с 62.2 на 62.1
  While ТабЗакрытие622.Next() Do
    aTab.AddLine("СчетД,СубконтоД1,СчетК,СубконтоК1,Сумма",Сч1,ТабЗакрытие622.Контрагент,Сч2,ТабЗакрытие622.Контрагент,ТабЗакрытие622.Сумма);
  EndDo;
  
  Сч1:=глНайтиСчет("60.1");
  Сч2:=глНайтиСчет("60.2");
  ТабЗакрытие602.Group("Контрагент","Сумма");
  ТабЗакрытие602.Select();//Переносим закрытые авансы выданные с 60.2 на 60.1
  While ТабЗакрытие602.Next() Do
    aTab.AddLine("СчетД,СубконтоД1,СчетК,СубконтоК1,Сумма",Сч1,ТабЗакрытие602.Контрагент,Сч2,ТабЗакрытие602.Контрагент,ТабЗакрытие602.Сумма);
  EndDo;
  
  Таб.Select();
  While Таб.Next() Do
    If Таб.зК=0 Then
      Continue;
    EndIf;
    Form.StatusText(""+Таб.зК);
    
    Таб2:=Таб.ТабПродаж;
    СмНДС:=0;
    СмАвансы:=0;
    Таб2.Select();
    While Таб2.Next() Do
      If Таб2.См=0 Then
        Continue;
      EndIf;
      If (Таб2.ФлКоррИзДругойКниги=0)And((Таб2.ТДок=0)Or(Таб2.ТДок>=4)) Then
        СмНДС:=СмНДС+Round(Таб2.См5*5/105,2)+Round(Таб2.См7*7/107,2)+Round(Таб2.См10*10/110,2)+Round(Таб2.См18*18/118,2)+Round(Таб2.См20*20/120,2);
      ElseIf Таб2.ТДок=1 Then
        СмАвансы:=СмАвансы+Round(Таб2.См18*5/105,2)+Round(Таб2.См18*7/107,2)+Round(Таб2.См18*18/118,2)+Round(Таб2.См20*20/120,2);
      EndIf;
    EndDo;
    Таб2:=Таб.ТабПокупок;
    Таб2.Select();
    While Таб2.Next() Do
      If Таб2.См=0 Then
        Continue;
      EndIf;
      If (Таб2.ФлКоррИзДругойКниги=1)And((Таб2.ТДок=0)Or(Таб2.ТДок>=4)) Then
        СмНДС:=СмНДС-Round(Таб2.См5*5/105,2)-Round(Таб2.См7*7/107,2)-Round(Таб2.См10*10/110,2)-Round(Таб2.См18*18/118,2)-Round(Таб2.См20*20/120,2);
      EndIf;
    EndDo;
    
    
    //Сумма НДС 68.2->76.Н.1
    If СмНДС<>0 Then
      См76:=0;
      З76.First();
      If З76.ResultTable.LocateAndGoto("зСуб1,@LEVEL",Таб.зК,1)>0 Then
        См76:=З76.зКонОст;
      EndIf;
      If ТабКорректировка.FindAndGoto(Таб.зК,,"зК")>0 Then
        СмНДС:=Round(СмНДС-ТабКорректировка.зСм76,2);
        ТабКорректировка.зСм76:=0;
      EndIf;
      См:=Round(?((Abs(СмНДС+См76)<5.0)And(См76<>0),-См76,СмНДС),2);
      
      If См<>0 Then
        aTab.AddLine("СчетД,СубконтоД1,СчетК,СубконтоК1,Сумма",Сч76Н1,Таб.зК,Сч682,аНалог,См);
      EndIf;
    EndIf;
    
    If СмАвансы<>0 Then
      aTab.AddLine("СчетД,СубконтоД1,СчетК,СубконтоК1,Сумма",Сч76АВ,Таб.зК,Сч682,аНалог,Max(СмАвансы,-СмАвансы));
    EndIf;
    
    Таб2:=Таб.ТабПокупок;
    СмОстНДС:=0;
    ТОснНДС:=Tab.Create("Номенклатура,Склад,Количество0,Сумма0,СуммаНДС");
    СмНДС:=0;
    СмЗачАвансы:=0;
    Таб2.Select();
    While Таб2.Next() Do
      If Таб2.См=0 Then
        Continue;
      EndIf;
      If Таб2.ФлКоррИзДругойКниги=2 Then
        СмОстНДС:=СмОстНДС+Round(Таб2.См5*5/105,2)+Round(Таб2.См7*7/107,2)+Round(Таб2.См10*10/110,2)+Round(Таб2.См18*18/118,2)+Round(Таб2.См20*20/120,2);
        зДок:=Таб2.зДок;
        bTab:=зДок.LineParts("Номенклатура");
        bTab.Select();
        While bTab.Next() Do
          If (bTab.Номенклатура.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара)And(bTab.СтавкаНДС=Enum.СтавкиНДС.БезНДС) Then
            Continue;
          EndIf;
          ТОснНДС.AddLine("Номенклатура,Склад,Количество0,Сумма0,СуммаНДС",bTab.Номенклатура,зДок.Склад,bTab.Количество,bTab.Сумма,Round(bTab.Сумма*глКоэффНДС(bTab.СтавкаНДС),2));
        EndDo;
      ElseIf (Таб2.ФлКоррИзДругойКниги=0)And((Таб2.ТДок=0)Or(Таб2.ТДок>=4)) Then
        СмНДС:=СмНДС+Round(Таб2.См5*5/105,2)+Round(Таб2.См7*7/107,2)+Round(Таб2.См10*10/110,2)+Round(Таб2.См18*18/118,2)+Round(Таб2.См20*20/120,2);
      ElseIf Таб2.ТДок=2 Then
        СмЗачАвансы:=СмЗачАвансы+Round(Таб2.См5*5/105,2)+Round(Таб2.См7*7/107,2)+Round(Таб2.См18*18/118,2)+Round(Таб2.См20*20/120,2);
      EndIf;
    EndDo;
    Таб2:=Таб.ТабПродаж;
    Таб2.Select();
    While Таб2.Next() Do
      If Таб2.См=0 Then
        Continue;
      EndIf;
      If (Таб2.ФлКоррИзДругойКниги=1)And((Таб2.ТДок=0)Or(Таб2.ТДок>=4)) Then
        СмНДС:=СмНДС-Round(Таб2.См5*5/105,2)-Round(Таб2.См7*7/107,2)-Round(Таб2.См10*10/110,2)-Round(Таб2.См18*18/118,2)-Round(Таб2.См20*20/120,2);
      EndIf;
    EndDo;
    
    //Сумма НДС 19.3->68.2
    If СмНДС<>0 Then
      См19:=0;
      З19.First();
      If З19.ResultTable.LocateAndGoto("зСуб1,@LEVEL",Таб.зК,1)>0 Then
        См19:=З19.зКонОст;
      EndIf;
      If ТабКорректировка.FindAndGoto(Таб.зК,,"зК")>0 Then
        СмНДС:=Round(СмНДС-ТабКорректировка.зСм,2);
        ТабКорректировка.зСм:=0;
      EndIf;
      См:=Round(?((Abs(СмНДС-См19)<5.0)And(См19<>0),См19,СмНДС),2);
      
      If См<>0 Then
        aTab.AddLine("СчетД,СубконтоД1,СчетК,СубконтоК1,Сумма",Сч682,аНалог,Сч193,Таб.зК,См);
      EndIf;
    EndIf;

    //Д19.3 К41.1
    //Д68.2 К19.3
    If СмОстНДС<>0 Then
      ТОснНДС.Group("Номенклатура,Склад","Количество0,Сумма0,СуммаНДС");
      //Загрузить всю номенклатуру с суммами из этих документов. Найти пропорцию, снять с 41-го счета СмОстНДС по этой пропорции
      См0:=ТОснНДС.Sum("СуммаНДС");
      If См0=0 Then
        If ТОснНДС.Size()>0 Then
          Message("Внутренняя ошибка при распределении остатков для поставщика "+Таб.зК+"! Обратитесь к администратору!","!");
          ТОснНДС.Select();
          While ТОснНДС.Next() Do
            Message("    Номенклатура,Склад,Количество,Сумма,СуммаНДС: "+ТОснНДС.Номенклатура+","+ТОснНДС.Склад+","+ТОснНДС.Количество0+","+ТОснНДС.Сумма0+","+ТОснНДС.СуммаНДС,"!");
          EndDo;
        EndIf;
      Else
        Кф:=СмОстНДС/См0;
        ТОснНДС.Select();
        While ТОснНДС.Next() Do
          Счет:=?(ТОснНДС.Склад.флРозничныйСклад=0,Сч411,Сч412);
          Сумма:=Round(ТОснНДС.СуммаНДС*Кф,2);
          aTab.AddLine("Содержание,СчетД,СубконтоД1,СчетК,СубконтоК1,СубконтоК2,Сумма","НДС остатков",Сч193,Таб.зК,Счет,ТОснНДС.Номенклатура,ТОснНДС.Склад,Сумма);
          aTab.AddLine("Содержание,СчетД,СубконтоД1,СчетК,СубконтоК1,Сумма","НДС остатков",Сч682,аНалог,Сч193,Таб.зК,Сумма);
        EndDo;
      EndIf;
    EndIf;     
    
    If СмЗачАвансы<>0 Then
      aTab.AddLine("СчетД,СубконтоД1,СчетК,СубконтоК1,Сумма",Сч682,аНалог,Сч76АВ,Таб.зК,Max(СмЗачАвансы,-СмЗачАвансы));
    EndIf;
  EndDo;
  
  ТабКорректировка.Select();
  While ТабКорректировка.Next() Do
    If ТабКорректировка.зСм<>0 Then
      aTab.AddLine("СчетД,СубконтоД1,СчетК,СубконтоК1,Сумма",Сч682,аНалог,Сч193,ТабКорректировка.зК,-ТабКорректировка.зСм);
    EndIf;
    If ТабКорректировка.зСм76<>0 Then
      aTab.AddLine("СчетД,СубконтоД1,СчетК,СубконтоК1,Сумма",Сч76Н1,ТабКорректировка.зК,Сч682,аНалог,-ТабКорректировка.зСм76);
    EndIf;
  EndDo;
  
  If aTab.Size()>0 Then
    аДок.СуммаВзаиморасчетов:=aTab.Sum("Сумма");
    If not глЗаписать(аДок) Then
      Box("Ошибка при создании операции!",Q_STOP);
      Exit;
    EndIf;
    If not глОбработать(аДок) Then
      Box("Ошибка при обработке операции "+аДок+"! Обработайте документ вручную!",Q_STOP);
      Exit;
    EndIf;
  EndIf;  
  
  Box("Операция "+аДок+" создана успешно!",Q_INFORMATION);
EndFunction



Function ВыгрузкаДекларацииПоНДС()
  оЮЛ:=Form.оЮЛ.Value;
  НачДата:=BegOfDay(Form.НачДата.Value);
  КонДата:=BegOfDay(Form.КонДата.Value);
  оКодНал:=Form.оКодНал.Value;
  оНомКорр:=Form.оНомКорр.Value;

  If Trim(Form.оКодНал.Value)="" Then
    Box("Необходимо заполнить код налоговой инспекции на закладке с настройками!",Q_STOP);
    Exit;
  EndIf;

  РезКаталог:="";
  If not SelectFolderDialog(РезКаталог,"Выберите каталог для выгрузки:") Then
    Exit;
  EndIf;
  Путь:=AddBackSlash(РезКаталог);
  Form.StatusText("Производится выгрузка...");
  
  пИННЮЛ:=оЮЛ.ИНН;
  пИННКПП:=Replace(оЮЛ.ИНН,"/","");
  пКПП:=Trim(оЮЛ.ИНН);
  TearStr(пКПП,"/");
  пДата:=FormatDate(НачДата,"YYYYmmdd");
  пДата2:=FormatDate(CurDate(),"dd.mm.YYYY");
  //If КонДата<=EndOfMonth(НачДата) Then
  //  пПериод:=Right("00"+GetMonth(НачДата),2);
  //Else
  //  пПериод:="2"+(Trunc((GetMonth(НачДата)-1)/3)+1);
  //EndIf;
  //пПоМесту:=?(пКПП="","116","214");
  
  ВерсияФормата:=?(НачДата<'01.01.2025',"5.10","5.11");
  
  //5.10:
  //https://base.garant.ru/70791966/7dede6ac8f25be619ed07c17ed1c62c9/
  //5.11:
  //https://www.consultant.ru/document/cons_doc_LAW_493443/a97098c825a630d741c5ed272075ec9f110ee0ae/
  //https://www.consultant.ru/document/cons_doc_LAW_493443/f69e974914627721ce5a7bb95a8a6d35e92beeb8/
  //https://base.garant.ru/70791966/c9c989f1e999992b41b30686f0032f7d/
  //XXXX - код налоговой
  //NO_NDS.8_XXXX_XXXX_ИННКПП_ГГГГММДД_ГУИД.xml
  пИмяПокупок:="NO_NDS.8_"+Trim(оКодНал)+"_"+Trim(оКодНал)+"_"+Trim(пИННКПП)+"_"+пДата+"_"+CreateGUID();
  пИмяДопЛистПокупок:="NO_NDS.81_"+Trim(оКодНал)+"_"+Trim(оКодНал)+"_"+Trim(пИННКПП)+"_"+пДата+"_"+CreateGUID();
  ТПок:=Text.Create();
  ТПок.AddString("<?xml version=""1.0"" encoding=""windows-1251""?>");
  ТПок.AddString("<Файл xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" ИдФайл="""+пИмяПокупок+""" ВерсПрог=""SF Торговля 1.0"" ВерсФорм="""+ВерсияФормата+""">");
  ТПок.AddString("<Документ Индекс=""0000080"" НомКорр="""+оНомКорр+""""+?(оНомКорр=0,""," ПризнСвед8=""0""")+">");
  
  ТПокДЛ:=Text.Create();
  ТПокДЛ.AddString("<?xml version=""1.0"" encoding=""windows-1251""?>");
  ТПокДЛ.AddString("<Файл xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" ИдФайл="""+пИмяДопЛистПокупок+""" ВерсПрог=""SF Торговля 1.0"" ВерсФорм="""+ВерсияФормата+""">");
  ТПокДЛ.AddString("<Документ Индекс=""0000081"" НомКорр="""+оНомКорр+""""+?(оНомКорр=0,""," ПризнСвед81=""0""")+">");
  
  //Сумма итого
  См:=0;
  СмДЛ:=0;
  Таб.Select();
  While Таб.Next() Do
    Таб2:=Таб.ТабПокупок;
    Таб2.Select();
    While Таб2.Next() Do
      If Таб2.ТДок>=4 Then
        СмДЛ:=СмДЛ+Round(Таб2.См5*5/105,2)+Round(Таб2.См7*7/107,2)+Round(Таб2.См10*10/110,2)+Round(Таб2.См18*18/118,2)+Round(Таб2.См20*20/120,2);
        Continue;
      EndIf;
      См:=См+Round(Таб2.См5*5/105,2)+Round(Таб2.См7*7/107,2)+Round(Таб2.См10*10/110,2)+Round(Таб2.См18*18/118,2)+Round(Таб2.См20*20/120,2);
    EndDo;
  EndDo;
  См:=Trim(Round(См,2));
  СмДЛ:=Trim(Round(См+СмДЛ,2));
  ТПок.AddString("<КнигаПокуп СумНДСВсКПк="""+См+""">");
  ТПокДЛ.AddString("<КнигаПокупДЛ СумНДСИтКПк="""+См+""" СумНДСИтП1Р8="""+СмДЛ+""">");
  
  Строк:=ТПок.Size();
  ФлБылДЛ:=0;
  пНом:=0;
  пНомДЛ:=0;
  Таб.Select();
  While Таб.Next() Do
    Таб2:=Таб.ТабПокупок;
    Таб2.Select();
    While Таб2.Next() Do
      If Таб2.См=0 Then
        Continue;
      EndIf;
      If _And(ЧлНДСАвансов<>20,Таб2.ТДок<>2) Then
        Continue;//Книга покупок не выводится для УСН 5% и 7%
      EndIf;
      ФлДЛ:=?(Таб2.ТДок>=4,1,0);
      ФлБылДЛ:=ФлБылДЛ+ФлДЛ;
      пНом:=пНом+(1-ФлДЛ);
      пНомДЛ:=пНомДЛ+ФлДЛ;
      
      зДок:=?(_And(IsDBObject(Таб2.зДок),not isEmpty(Таб2.зДок)),Таб2.зДок.Copy(),Таб2.зДок);//Оптимизация по памяти
      зКорДок:=?(_And(IsDBObject(Таб2.зКорДок),not isEmpty(Таб2.зКорДок)),Таб2.зКорДок.Copy(),Таб2.зКорДок);
      
      пДокИспр:="";
      пДатаИспр:="";
      If _And(pos("DB.DOC",typestr(зДок))>0,глЕстьРеквизитДокумента("НомерДокИсправление",зДок.DBName())) Then
        If Trim(зДок.НомерДокИсправление)<>"" Then
          пДокИспр:=Trim(зДок.НомерДокИсправление);
          пДатаИспр:=зДок.ДатаДокИсправление;
        EndIf;
      EndIf;
      
      пГТД:="";
      If TypeStr(зДок)="STRING" Then
        //Зачт. аванс <Номер> от <Дата>
        пДата:=зДок;
        пДок:=Trim(TearStr(пДата," от "));
        While Pos(" ",пДок)>0 Do
          TearStr(пДок," ");
        EndDo;
        пДата:=FormatDate(Date(пДата),"dd.mm.YYYY");
      Else
        пДок:=ВходящийНомер(зДок);
        пДата:=FormatDate(ВходящаяДата(зДок),"dd.mm.YYYY");
        пГТД:=НомерГТД(зДок);
      EndIf;
      пДокСтор:=?(IsEmpty(зКорДок),"",ВходящийНомер(зКорДок));
      пДокСторДата:=?(IsEmpty(зКорДок),"",FormatDate(ВходящаяДата(зКорДок),"dd.mm.YYYY"));
      
      If Таб.зК=0 Then
        пКПП:=пИННЮЛ;
      Else
        If Таб2.ТДок=2 Then
          пКПП:=Replace(Trim(оЮЛ.Контрагент.ИНН),"\","/");
        Else
          пКПП:=Replace(Trim(Таб.зК.ИНН),"\","/");
        EndIf;
      EndIf;
      пИНН:=TearStr(пКПП,"/");
      
      СмНДС:=Trim(Round(Таб2.См5*5/105,2)+Round(Таб2.См7*7/107,2)+Round(Таб2.См10*10/110,2)+Round(Таб2.См18*18/118,2)+Round(Таб2.См20*20/120,2));
      См:=Trim(Round(Таб2.См,2));
      
      If ФлДЛ=0 Then
        Стр:="<КнПокСтр НомерПор="""+пНом+""" НомСчФПрод="""+пДок+""" ДатаСчФПрод="""+пДата+""""+
          ?(пДокСтор="",""," НомКСчФПрод="""+пДокСтор+""" ДатаКСчФПрод="""+пДокСторДата+"""")+
          //?(пГТД="",""," НомТД="""+пГТД+"""")+" ОКВ=""643"" СтоимПокупВ="""+См+""" СумНДСВыч="""+СмНДС+""""+
          " ОКВ=""643"" СтоимПокупВ="""+См+""" СумНДСВыч="""+СмНДС+""""+
          "><КодВидОпер>"+ПолучитьКодОперации(зДок,зКорДок,Таб2.ТДок,1,?(Таб.зК=0,0,Таб.зК.фоРозничныйПокупатель))+"</КодВидОпер><СвПрод><"+
          ?(пКПП="","СведИП ИННФЛ="""+пИНН+"""","СведЮЛ ИННЮЛ="""+пИНН+""" КПП="""+пКПП+"""")+"/></СвПрод></КнПокСтр>";
        ТПок.AddString(Стр);  
      Else
        Стр:="<КнПокДЛСтр НомерПор="""+пНомДЛ+""" НомСчФПрод="""+пДок+""" ДатаСчФПрод="""+пДата+""""+
          ?(пДокСтор="",""," НомКСчФПрод="""+пДокСтор+""" ДатаКСчФПрод="""+пДокСторДата+"""")+
          //?(пГТД="",""," НомТД="""+пГТД+"""")+" ОКВ=""643"" СтоимПокупВ="""+См+""" СумНДСВыч="""+СмНДС+""""+
          " ОКВ=""643"" СтоимПокупВ="""+См+""" СумНДСВыч="""+СмНДС+""""+
          "><КодВидОпер>"+ПолучитьКодОперации(зДок,зКорДок,Таб2.ТДок,1,?(Таб.зК=0,0,Таб.зК.фоРозничныйПокупатель))+"</КодВидОпер><СвПрод><"+
          ?(пКПП="","СведИП ИННФЛ="""+пИНН+"""","СведЮЛ ИННЮЛ="""+пИНН+""" КПП="""+пКПП+"""")+"/></СвПрод></КнПокДЛСтр>";
        ТПокДЛ.AddString(Стр);  
      EndIf;
        
      Строк:=Строк+1;
      if Строк%10=0 Then
        Form.StatusText("Покупки, строк "+Строк+"...");
      EndIf;  
    EndDo;
  EndDo;
  ТПок.AddString("</КнигаПокуп></Документ></Файл>");
  ТПокДЛ.AddString("</КнигаПокупДЛ></Документ></Файл>");
  
  
  
  //https://www.consultant.ru/document/cons_doc_LAW_493443/6c85a0b338090c0bc3b8dd972f2f6440b21287ea/
  //https://www.consultant.ru/document/cons_doc_LAW_493443/ebc320cd81ea1dd8cc9e7eff19c01927f14bf1c1/
  пДата:=FormatDate(НачДата,"YYYYmmdd");
  пДата2:=FormatDate(CurDate(),"dd.mm.YYYY");
  пИмяПродаж:="NO_NDS.9_"+Trim(оКодНал)+"_"+Trim(оКодНал)+"_"+Trim(пИННКПП)+"_"+пДата+"_"+CreateGUID();
  пИмяДопЛистПродаж:="NO_NDS.91_"+Trim(оКодНал)+"_"+Trim(оКодНал)+"_"+Trim(пИННКПП)+"_"+пДата+"_"+CreateGUID();
  
  ТПрод:=Text.Create();
  ТПрод.AddString("<?xml version=""1.0"" encoding=""windows-1251""?>");
  ТПрод.AddString("<Файл xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" ИдФайл="""+пИмяПродаж+""" ВерсПрог=""SF Торговля 1.0"" ВерсФорм="""+ВерсияФормата+""">");
  ТПрод.AddString("<Документ Индекс=""0000090"" НомКорр="""+оНомКорр+""""+?(оНомКорр=0,""," ПризнСвед9=""0""")+">");
  
  ТПродДЛ:=Text.Create();
  ТПродДЛ.AddString("<?xml version=""1.0"" encoding=""windows-1251""?>");
  ТПродДЛ.AddString("<Файл xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" ИдФайл="""+пИмяДопЛистПродаж+""" ВерсПрог=""SF Торговля 1.0"" ВерсФорм="""+ВерсияФормата+""">");
  ТПродДЛ.AddString("<Документ Индекс=""0000091"" НомКорр="""+оНомКорр+""""+?(оНомКорр=0,""," ПризнСвед91=""0""")+">");
  
  
  //Сумма итого
  См18:=0;См20:=0;См10:=0;См7:=0;См5:=0;См0:=0;СмБезНДС:=0;
  См18НДС:=0;См20НДС:=0;См10НДС:=0;См7НДС:=0;См5НДС:=0;
  СмДЛ18:=0;СмДЛ20:=0;СмДЛ10:=0;СмДЛ7:=0;СмДЛ5:=0;СмДЛ0:=0;СмДЛБезНДС:=0;
  СмДЛ18НДС:=0;СмДЛ20НДС:=0;СмДЛ10НДС:=0;СмДЛ7НДС:=0;СмДЛ5НДС:=0;
  Таб.Select();
  While Таб.Next() Do
    Таб2:=Таб.ТабПродаж;
    Таб2.Select();
    While Таб2.Next() Do
      пСм5НДС:=Round(Таб2.См5*5/105,2);
      пСм7НДС:=Round(Таб2.См7*7/107,2);
      пСм10НДС:=Round(Таб2.См10*10/110,2);
      пСм18НДС:=Round(Таб2.См18*18/118,2);
      пСм20НДС:=Round(Таб2.См20*20/120,2);
      пСм18:=Таб2.См18-пСм18НДС;
      пСм20:=Таб2.См20-пСм20НДС;
      пСм7:=Таб2.См7-пСм7НДС;
      пСм5:=Таб2.См5-пСм5НДС;
      If (Таб2.ТДок=1)Or(Таб2.ТДок=2) Then //В этом столбике не отражаются авансы и зачтенные авансы
        Exec("пСм"+ЧлНДСАвансов+":=0;");
      EndIf;
      
      If Таб2.ТДок>=4 Then
        СмДЛ20НДС:=СмДЛ20НДС+пСм20НДС;
        СмДЛ18НДС:=СмДЛ18НДС+пСм18НДС;
        СмДЛ10НДС:=СмДЛ10НДС+пСм10НДС;
        СмДЛ7НДС:=СмДЛ7НДС+пСм7НДС;
        СмДЛ5НДС:=СмДЛ5НДС+пСм5НДС;
        СмДЛ20:=СмДЛ20+пСм20;
        СмДЛ18:=СмДЛ18+пСм18;
        СмДЛ10:=СмДЛ10+Таб2.См10-пСм10НДС;
        СмДЛ7:=СмДЛ7+пСм7;
        СмДЛ5:=СмДЛ5+пСм5;
        СмДЛБезНДС:=СмДЛБезНДС+Таб2.СмБезНДС;
        СмДЛ0:=СмДЛ0+Таб2.См0;
        Continue;
      EndIf;
      См18НДС:=См18НДС+пСм18НДС;
      См20НДС:=См20НДС+пСм20НДС;
      См10НДС:=См10НДС+пСм10НДС;
      См7НДС:=См7НДС+пСм7НДС;
      См5НДС:=См5НДС+пСм5НДС;
      См18:=См18+пСм18;
      См20:=См20+пСм20;
      См10:=См10+Таб2.См10-пСм10НДС;
      См7:=См7+пСм7;
      См5:=См5+пСм5;
      СмБезНДС:=СмБезНДС+Таб2.СмБезНДС;
      См0:=См0+Таб2.См0;
    EndDo;
  EndDo;
  //Добавлены 5 и 7
  //СтПродБезНДС20 - Всего стоимость продаж по книге продаж (без налога) в рублях и копейках, по ставке 20%
  //СтПродБезНДС18 - Всего стоимость продаж по книге продаж (без налога) в рублях и копейках, по ставке 18%
  //СтПродБезНДС10 - Всего стоимость продаж по книге продаж (без налога) в рублях и копейках, по ставке 10%
  //СтПродБезНДС0 - Всего стоимость продаж по книге продаж (без налога) в рублях и копейках, по ставке 0%
  //СумНДСВсКПр20 - Всего сумма налога по книге продаж в рублях и копейках, по ставке 20%
  //СумНДСВсКПр18 - Всего сумма налога по книге продаж в рублях и копейках, по ставке 18%
  //СумНДСВсКПр10 - Всего сумма налога по книге продаж в рублях и копейках, по ставке 10%
  //СтПродОсвВсКПр - Всего стоимость продаж, освобождаемых от налога, по книге продаж в рублях и копейках
  
  //Итого необходимо пересчитать еще раз, чтобы формула выполнялась для строки итого без разницы в копейках (так считает налоговая)
  См5:=Round(См5НДС+См5,2);См5НДС:=Round(См5*5/105,2);См5:=Round(См5-См5НДС,2);
  См7:=Round(См7НДС+См7,2);См7НДС:=Round(См7*7/107,2);См7:=Round(См7-См7НДС,2);
  См10:=Round(См10НДС+См10,2);См10НДС:=Round(См10*10/110,2);См10:=Round(См10-См10НДС,2);
  См18:=Round(См18НДС+См18,2);См18НДС:=Round(См18*18/118,2);См18:=Round(См18-См18НДС,2);
  См20:=Round(См20НДС+См20,2);См20НДС:=Round(См20*20/120,2);См20:=Round(См20-См20НДС,2);
  ТПрод.AddString("<КнигаПрод СтПродБезНДС20="""+Trim(Round(См20,2))+""" СтПродБезНДС18="""+Trim(Round(См18,2))+""" СтПродБезНДС10="""+Trim(Round(См10,2))+""" "+
    ?(ВерсияФормата="5.11","СтПродБезНДС7="""+Trim(Round(См7,2))+""" СтПродБезНДС5="""+Trim(Round(См5,2))+""" ")+
    "СтПродБезНДС0="""+Trim(Round(См0,2))+""" СумНДСВсКПр20="""+Trim(Round(См20НДС,2))+""" СумНДСВсКПр18="""+Trim(Round(См18НДС,2))+""" СумНДСВсКПр10="""+
    Trim(Round(См10НДС,2))+""" "+?(ВерсияФормата="5.11","СумНДСВсКПр7="""+Trim(Round(См7НДС,2))+""" СумНДСВсКПр5="""+Trim(Round(См5НДС,2))+""" ")+"СтПродОсвВсКПр="""+Trim(Round(СмБезНДС,2))+""">");
    
  //Добавлены 5 и 7
  //ИтСтПродКПр20 - Итоговая стоимость продаж по книге продаж (без налога) в рублях и копейках, по ставке 20%
  //ИтСтПродКПр18 - Итоговая стоимость продаж по книге продаж (без налога) в рублях и копейках, по ставке 18%
  //ИтСтПродКПр10 - Итоговая стоимость продаж по книге продаж (без налога) в рублях и копейках, по ставке 10%
  //ИтСтПродКПр0 - Итоговая стоимость продаж по книге продаж (без налога) в рублях и копейках, по ставке 0%
  //СумНДСИтКПр20 - Итоговая сумма налога по книге продаж в рублях и копейках, по ставке 20%
  //СумНДСИтКПр18 - Итоговая сумма налога по книге продаж в рублях и копейках, по ставке 18%
  //СумНДСИтКПр10 - Итоговая сумма налога по книге продаж в рублях и копейках, по ставке 10%
  //ИтСтПродОсвКПр - Итоговая стоимость продаж, освобождаемых от налога, по книге продаж в рублях и копейках
  //СтПродВсП1Р9_20 - Всего стоимость продаж по Приложению 1 к Разделу 9 (без налога) в рублях и копейках, по ставке 20%
  //СтПродВсП1Р9_18 - Всего стоимость продаж по Приложению 1 к Разделу 9 (без налога) в рублях и копейках, по ставке 18%
  //СтПродВсП1Р9_10 - Всего стоимость продаж по Приложению 1 к Разделу 9 (без налога) в рублях и копейках, по ставке 10%
  //СтПродВсП1Р9_0 - Всего стоимость продаж по Приложению 1 к Разделу 9 (без налога) в рублях и копейках, по ставке 0%
  //СумНДСВсП1Р9_20 - Всего сумма налога по Приложению 1 к Разделу 9 в рублях и копейках, по ставке 20%
  //СумНДСВсП1Р9_18 - Всего сумма налога по Приложению 1 к Разделу 9 в рублях и копейках, по ставке 18%
  //СумНДСВсП1Р9_10 - Всего сумма налога по Приложению 1 к Разделу 9 в рублях и копейках, по ставке 10%
  //СтПродОсвП1Р9Вс - Всего стоимость продаж, освобождаемых от налога, по Приложению 1 к Разделу 9 в рублях и копейках
  ТПродДЛ.AddString("<КнигаПродДЛ ИтСтПродКПр20="""+Trim(Round(См20,2))+""" ИтСтПродКПр18="""+Trim(Round(См18,2))+""" ИтСтПродКПр10="""+Trim(Round(См10,2))+""" "+?(ВерсияФормата="5.11","ИтСтПродКПр7="""+Trim(Round(См7,2))+""" ИтСтПродКПр5="""+Trim(Round(См5,2))+""" ")+
    "ИтСтПродКПр0="""+Trim(Round(См0,2))+""" СумНДСИтКПр20="""+Trim(Round(См20НДС,2))+""" СумНДСИтКПр18="""+Trim(Round(См18НДС,2))+""" СумНДСИтКПр10="""+Trim(Round(См10НДС,2))+""" "+?(ВерсияФормата="5.11","СумНДСИтКПр7="""+Trim(Round(См7НДС,2))+""" СумНДСИтКПр5="""+Trim(Round(См5НДС,2))+""" ")+
    "ИтСтПродОсвКПр="""+Trim(Round(СмБезНДС,2))+""" СтПродВсП1Р9_20="""+Trim(Round(См20+СмДЛ20,2))+""" СтПродВсП1Р9_18="""+Trim(Round(См18+СмДЛ18,2))+""" СтПродВсП1Р9_10="""+Trim(Round(См10+СмДЛ10,2))+""" "+?(ВерсияФормата="5.11","СтПродВсП1Р9_7="""+Trim(Round(См7+СмДЛ7,2))+""" СтПродВсП1Р9_5="""+Trim(Round(См5+СмДЛ5,2))+""" ")+
    "СтПродВсП1Р9_0="""+Trim(Round(См0+СмДЛ0,2))+""" СумНДСВсП1Р9_20="""+Trim(Round(См20НДС+СмДЛ20НДС,2))+""" СумНДСВсП1Р9_18="""+Trim(Round(См18НДС+СмДЛ18НДС,2))+""" СумНДСВсП1Р9_10="""+Trim(Round(См10НДС+СмДЛ10НДС,2))+""" "+?(ВерсияФормата="5.11","СумНДСВсП1Р9_7="""+Trim(Round(См7НДС+СмДЛ7НДС,2))+""" СумНДСВсП1Р9_5="""+Trim(Round(См5НДС+СмДЛ5НДС,2))+""" ")+
    "СтПродОсвП1Р9Вс="""+Trim(Round(СмБезНДС+СмДЛБезНДС,2))+""">");
  
  
  Строк:=ТПрод.Size();
  ФлБылДЛПрод:=0;
  пНом:=0;
  пНомДЛ:=0;
  Таб.Select();
  While Таб.Next() Do
    Таб2:=Таб.ТабПродаж;
    Таб2.Select();
    While Таб2.Next() Do
      If Таб2.См=0 Then
        Continue;
      EndIf;
      ФлДЛ:=?(Таб2.ТДок>=4,1,0);
      ФлБылДЛПрод:=ФлБылДЛПрод+ФлДЛ;
      пНом:=пНом+(1-ФлДЛ);
      пНомДЛ:=пНомДЛ+ФлДЛ;
      
      зДок:=?(_And(IsDBObject(Таб2.зДок),not isEmpty(Таб2.зДок)),Таб2.зДок.Copy(),Таб2.зДок);//Оптимизация по памяти
      зКорДок:=?(_And(IsDBObject(Таб2.зКорДок),not isEmpty(Таб2.зКорДок)),Таб2.зКорДок.Copy(),Таб2.зКорДок);
      
      пДокИспр:="";
      пДатаИспр:="";
      If _And(pos("DB.DOC",typestr(зДок))>0,глЕстьРеквизитДокумента("НомерДокИсправление",зДок.DBName())) Then
        If Trim(зДок.НомерДокИсправление)<>"" Then
          пДокИспр:=Trim(зДок.НомерДокИсправление);
          пДатаИспр:=зДок.ДатаДокИсправление;
        EndIf;
      EndIf;
      
      пГТД:="";
      If TypeStr(зДок)="STRING" Then
        //Аванс <Номер> от <Дата>
        пДата:=зДок;
        пДок:=Trim(TearStr(пДата," от "));
        While Pos(" ",пДок)>0 Do
          TearStr(пДок," ");
        EndDo;
        пДата:=FormatDate(Date(пДата),"dd.mm.YYYY");
      ElseIf (Таб2.ТДок=0)Or(Таб2.ТДок>=4) Then
        пДок:=ВходящийНомер(зДок);
        пДата:=FormatDate(ВходящаяДата(зДок),"dd.mm.YYYY");
        пГТД:=НомерГТД(зДок);
      Else
        пДок:=зДок.DocNum;
        пДата:=FormatDate(зДок.DocDate,"dd.mm.YYYY");
        пГТД:=НомерГТД(зДок);
      EndIf;
      пДокСтор:=?(IsEmpty(зКорДок),"",ВходящийНомер(зКорДок));
      пДокСторДата:=?(IsEmpty(зКорДок),"",FormatDate(ВходящаяДата(зКорДок),"dd.mm.YYYY"));
      
      If Таб.зК=0 Then
        пКПП:=пИННЮЛ;
      Else
        пКПП:=Replace(Trim(Таб.зК.ИНН),"\","/");
      EndIf;
      пИНН:=TearStr(пКПП,"/");
      СмНДС:=Trim(Round(Таб2.См5*5/105,2)+Round(Таб2.См7*7/107,2)+Round(Таб2.См10*10/110,2)+Round(Таб2.См18*18/118,2)+Round(Таб2.См20*20/120,2));
      См:=Trim(Round(Таб2.См,2));
      См5НДС:=Round(Таб2.См5*5/105,2);
      См7НДС:=Round(Таб2.См7*7/107,2);
      См10НДС:=Round(Таб2.См10*10/110,2);
      См18НДС:=Round(Таб2.См18*18/118,2);
      См20НДС:=Round(Таб2.См20*20/120,2);
      См10:=Trim(Round(Таб2.См10-См10НДС,2));
      См18:=Trim(Round(Таб2.См18-См18НДС,2));
      См20:=Trim(Round(Таб2.См20-См20НДС,2));
      См7:=Trim(Round(Таб2.См7-См7НДС,2));
      См5:=Trim(Round(Таб2.См5-См5НДС,2));
      If (Таб2.ТДок=1)Or(Таб2.ТДок=2) Then //В этом столбике не отражаются авансы и зачтенные авансы
        Exec("См"+ЧлНДСАвансов+":=""0.00"";");
      EndIf;
      
      СмБезНДС:=Trim(Round(Таб2.СмБезНДС,2));
      См0:=Trim(Round(Таб2.См0,2));
      См5НДС:=Trim(Round(См5НДС,2));
      См7НДС:=Trim(Round(См7НДС,2));
      См10НДС:=Trim(Round(См10НДС,2));
      См18НДС:=Trim(Round(См18НДС,2));
      См20НДС:=Trim(Round(См20НДС,2));
      
      If ФлДЛ=0 Then
        //НомерПор - Порядковый номер
        //НомСчФПрод - Номер счета-фактуры продавца
        //ДатаСчФПрод - Дата счета-фактуры продавца
        //НомИспрСчФ - Номер исправления счета-фактуры продавца
        //ДатаИспрСчФ - Дата исправления счета-фактуры продавца
        //НомКСчФПрод - Номер корректировочного счета-фактуры продавца
        //ДатаКСчФПрод - Дата корректировочного счета-фактуры продавца
        //НомИспрКСчФ - Номер исправления корректировочного счета-фактуры продавца
        //ДатаИспрКСчФ - Дата исправления корректировочного счета-фактуры продавца
        //ОКВ - Код валюты по ОКВ
        //СтоимПродСФВ - Стоимость продаж по счету-фактуре, разница стоимости по корректировочному счету-фактуре (включая налог), в валюте счета-фактуры
        //СтоимПродСФ - Стоимость продаж по счету-фактуре, разница стоимости по корректировочному счету-фактуре (включая налог) в рублях и копейках
        //СтоимПродСФ20 - Стоимость продаж, облагаемых налогом, по счету-фактуре, разница стоимости по корректировочному счету-фактуре (без налога) в рублях и копейках, по ставке 20%
        //СтоимПродСФ18 - Стоимость продаж, облагаемых налогом, по счету-фактуре, разница стоимости по корректировочному счету-фактуре (без налога) в рублях и копейках, по ставке 18%
        //СтоимПродСФ10 - Стоимость продаж, облагаемых налогом, по счету-фактуре, разница стоимости по корректировочному счету-фактуре (без налога) в рублях и копейках, по ставке 10
        //СтоимПродСФ0 - Стоимость продаж, облагаемых налогом, по счету-фактуре, разница стоимости по корректировочному счету-фактуре (без налога) в рублях и копейках, по ставке 0
        //СумНДССФ20 - Сумма налога по счету-фактуре, разница суммы налога по корректировочному счету-фактуре, в рублях и копейках, по ставке 20
        //СумНДССФ18 - Сумма налога по счету-фактуре, разница суммы налога по корректировочному счету-фактуре, в рублях и копейках, по ставке 18
        //СумНДССФ10 - Сумма налога по счету-фактуре, разница суммы налога по корректировочному счету-фактуре, в рублях и копейках, по ставке 10
        //СтоимПродОсв - Стоимость продаж, освобождаемых от налога, по счету-фактуре, разница стоимости по корректировочному счету-фактуре в рублях и копейках
        //КодВидОпер - Код вида операции
        //РегНомТД - Регистрационный номер таможенной декларации
        //ДокПдтвОпл - Сведения о документе, подтверждающем оплату
        //СвПокуп - Сведения о покупателе
        //СвПос - Сведения о посреднике (комиссионере, агенте)
        Стр:="<КнПродСтр НомерПор="""+пНом+""" НомСчФПрод="""+пДок+""" ДатаСчФПрод="""+пДата+""""+
          ?(пДокСтор="",""," НомКСчФПрод="""+пДокСтор+""" ДатаКСчФПрод="""+пДокСторДата+"""")+
          //?(пГТД="",""," НомТД="""+пГТД+"""")+" ОКВ=""643"" СтоимПродСФВ="""+См+""" СтоимПродСФ="""+См+""" СтоимПродСФ18="""+См18+""" СтоимПродСФ20="""+См20+""""+
          " ОКВ=""643"" СтоимПродСФВ="""+См+""" СтоимПродСФ="""+См+""" СтоимПродСФ18="""+См18+""" СтоимПродСФ20="""+См20+""""+
          " СтоимПродСФ10="""+См10+""" "+?(ВерсияФормата="5.11","СтоимПродСФ7="""+См7+""" СтоимПродСФ5="""+См5+""" ")+"СтоимПродСФ0="""+См0+""" СумНДССФ18="""+См18НДС+""" СумНДССФ20="""+См20НДС+""""+
          " СумНДССФ10="""+См10НДС+""" "+?(ВерсияФормата="5.11","СумНДССФ7="""+См7НДС+""" СумНДССФ5="""+См5НДС+""" ")+"СтоимПродОсв="""+СмБезНДС+"""><КодВидОпер>"+ПолучитьКодОперации(зДок,зКорДок,Таб2.ТДок,0,?(Таб.зК=0,0,Таб.зК.фоРозничныйПокупатель))+"</КодВидОпер>"+
          ?(Таб.зК.фоРозничныйПокупатель=0,"<СвПокуп><"+?(пКПП="","СведИП ИННФЛ="""+пИНН+"""","СведЮЛ ИННЮЛ="""+пИНН+""" КПП="""+пКПП+"""")+"/></СвПокуп>")+"</КнПродСтр>";
        ТПрод.AddString(Стр); 
      Else
        //НомерПор - Порядковый номер
        //НомСчФПрод - Номер счета-фактуры продавца
        //ДатаСчФПрод - Дата счета-фактуры продавца
        //НомИспрСчФ - Номер исправления счета-фактуры продавца
        //ДатаИспрСчФ - Дата исправления счета-фактуры продавца
        //НомКСчФПрод - Номер корректировочного счета-фактуры продавца
        //ДатаКСчФПрод - Дата корректировочного счета-фактуры продавца
        //НомИспрКСчФ - Номер исправления корректировочного счета-фактуры продавца
        //ДатаИспрКСчФ - Дата исправления корректировочного счета-фактуры продавца
        //Код валюты по ОКВ - Элемент обязателен при наличии элемента <НомИспрКСчФ>
        //СтоимПродСФВ - Стоимость продаж по счету-фактуре, разница стоимости по корректировочному счету-фактуре (включая налог), в валюте счета-фактуры
        //СтоимПродСФ - Стоимость продаж по счету-фактуре, разница стоимости по корректировочному счету-фактуре (включая налог), в рублях и копейках
        //СтоимПродСФ20 - Стоимость продаж, облагаемых налогом, по счету-фактуре, разница стоимости по корректировочному счету-фактуре (без налога) в рублях и копейках, по ставке 20%
        //СтоимПродСФ18 - Стоимость продаж, облагаемых налогом, по счету-фактуре, разница стоимости по корректировочному счету-фактуре (без налога) в рублях и копейках, по ставке 18%
        //СтоимПродСФ10 - Стоимость продаж, облагаемых налогом, по счету-фактуре, разница стоимости по корректировочному счету-фактуре (без налога) в рублях и копейках, по ставке 10
        //СтоимПродСФ0 - Стоимость продаж, облагаемых налогом, по счету-фактуре, разница стоимости по корректировочному счету-фактуре (без налога) в рублях и копейках, по ставке 0
        //СумНДССФ20 - Сумма налога по счету-фактуре, разница суммы налога по корректировочному счету-фактуре в рублях и копейках, по ставке 20
        //СумНДССФ18 - Сумма налога по счету-фактуре, разница суммы налога по корректировочному счету-фактуре в рублях и копейках, по ставке 18
        //СумНДССФ10 - Сумма налога по счету-фактуре, разница суммы налога по корректировочному счету-фактуре в рублях и копейках, по ставке 10
        //СтоимПродОсв - Стоимость продаж, освобождаемых от налога, по счету-фактуре, разница стоимости по корректировочному счету-фактуре, в руб. и коп.
        //КодВидОпер - Код вида операции
        //РегНомТД - Регистрационный номер таможенной декларации
        //ДокПдтвОпл - Сведения о документе, подтверждающем оплату
        //СвПокуп - Сведения о покупателе
        //СвПос - Сведения о посреднике (комиссионере, агенте)
        Стр:="<КнПродДЛСтр НомерПор="""+пНомДЛ+""" НомСчФПрод="""+пДок+""" ДатаСчФПрод="""+пДата+""""+
          ?(пДокСтор="",""," НомКСчФПрод="""+пДокСтор+""" ДатаКСчФПрод="""+пДокСторДата+"""")+
          //?(пГТД="",""," НомТД="""+пГТД+"""")+" ОКВ=""643"" СтоимПродСФВ="""+См+""" СтоимПродСФ="""+См+""" СтоимПродСФ18="""+См18+""" СтоимПродСФ20="""+См20+""""+
          " ОКВ=""643"" СтоимПродСФВ="""+См+""" СтоимПродСФ="""+См+""" СтоимПродСФ18="""+См18+""" СтоимПродСФ20="""+См20+""""+
          " СтоимПродСФ10="""+См10+""" "+?(ВерсияФормата="5.11","СтоимПродСФ7="""+См7+""" СтоимПродСФ5="""+См5+""" ")+"СтоимПродСФ0="""+См0+""" СумНДССФ18="""+См18НДС+""" СумНДССФ20="""+См20НДС+""""+
          " СумНДССФ10="""+См10НДС+""" "+?(ВерсияФормата="5.11","СумНДССФ7="""+См7НДС+""" СумНДССФ5="""+См5НДС+""" ")+"СтоимПродОсв="""+СмБезНДС+"""><КодВидОпер>"+ПолучитьКодОперации(зДок,зКорДок,Таб2.ТДок,0,?(Таб.зК=0,0,Таб.зК.фоРозничныйПокупатель))+"</КодВидОпер>"+
          ?(Таб.зК.фоРозничныйПокупатель=0,"<СвПокуп><"+?(пКПП="","СведИП ИННФЛ="""+пИНН+"""","СведЮЛ ИННЮЛ="""+пИНН+""" КПП="""+пКПП+"""")+"/></СвПокуп>")+"</КнПродДЛСтр>";
        ТПродДЛ.AddString(Стр); 
      EndIf;
        
      Строк:=Строк+1;
      if Строк%10=0 Then
        Form.StatusText("Продажи, строк "+Строк+"...");
      EndIf;  
    EndDo;
  EndDo;
  ТПрод.AddString("</КнигаПрод></Документ></Файл>");
  ТПродДЛ.AddString("</КнигаПродДЛ></Документ></Файл>");
  
  
  ТПок.Save(Путь+пИмяПокупок+".xml");
  If ФлБылДЛ=1 Then
    ТПокДЛ.Save(Путь+пИмяДопЛистПокупок+".xml");
  EndIf;
  ТПрод.Save(Путь+пИмяПродаж+".xml");
  If ФлБылДЛПрод=1 Then
    ТПродДЛ.Save(Путь+пИмяДопЛистПродаж+".xml");
  EndIf;
  
  Box("Выгрузка произведена успешно!",Q_INFORMATION);
EndFunction

