//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var Команда Export;

Function OnExecute()
  оДата:=BegOfDay(Form.оДата.Value);
  оН:=Form.оН.Value.Get(1);
  оННЕ:=Form.оН.Value.Get(2);
  If оН.Size()=0 Then
    Box("Необходимо выбрать номенклатуру!",Q_STOP);
    Exit;
  EndIf;
  
  ТЗ:="зН:=Ref.тмцНоменклатура;
  |зСтатус:=Ref.тмцНоменклатура.@STATUS;
  |зПапка:=Ref.тмцНоменклатура.@ISFOLDER;
  |Condition(зПапка=0);"+
  ?(Form.оТакжеУдал.Value=0,"Condition(зСтатус=0);","")+
  "Condition(зН IN оН);
  |Condition(зН NOT IN оННЕ);
  |Group зН"+?(Form.оГруппы.Value=1," with folders","")+";";
  
  З:=Query.Create();
  З.Execute(ТЗ);
  
  пЗаголовок:="Формирование розничных цен на дату "+оДата;
  пСвойства:=глСвойстваПечатиПростые();
  if Form.оСимул.Value Then
    пСвойства:=пСвойства+" Режим симуляции!";
  EndIf;
  
  спМг:=Ref.рознМагазины.Load(0,"~(@ELEMENT IN Form.оМг.Value.Get(1))And((@ELEMENT NOT IN Form.оМг.Value.Get(2)))And(ЮрЛицо IN Form.оЮЛ.Value.Get(1))And((ЮрЛицо NOT IN Form.оЮЛ.Value.Get(2)))");
  If спМг.Size()=0 Then
    Box("Вы не выбрали ни одного магазина для пересчета!",Q_STOP);
    Exit;
  EndIf;
  If _And(not глПользователь.цЦенообразование,_Or(спМг.Size()>1,спМг[1]<>глПользователь.Магазин)) Then
    Box("Вы можете производить пересчет цен только для вашего магазина! Для пересчета цен по другим магазинам обратитесь к администратору!",Q_STOP);
    Exit;
  EndIf;
  
  тТЦ:=Tab.Create("ТипЦен0,ТипЦен,Магазин");
  For i:=1 To спМг.Size() Do
    If _And(спМг[i].ТипЦенРеализации.Selected()<>0,спМг[i].ТипЦенПоступления.Selected()<>0) Then
      тТЦ.AddLine("ТипЦен0,ТипЦен,Магазин",спМг[i].ТипЦенПоступления,спМг[i].ТипЦенРеализации,спМг[i]);
    EndIf;
  EndDo;
  If тТЦ.Size()=0 Then
    Box("Ни в одном из выбранных магазинов не установлены типы цен реализации и закупки!",Q_STOP);
    Exit;
  EndIf;
  
  ФлЦен:=0;
  Т:=Table.Create();  
  Т.CopyByX("v1",1);
  Т.CopyByX("v2|h1",1);
  тТЦ.Select();
  While тТЦ.Next() Do
    ФлЦен:=ФлЦен+1;
    пЦена:=""+тТЦ.ТипЦен+" (расчет от "+тТЦ.ТипЦен0+")";
    Т.CopyByX("v2|h2");
  EndDo;
  Т.CopyByX("v2|h3");
  Т.Options.FixedLine:=Т.Height();
  
  спБуфер:=List.Create();
  ФлНом:=100;
  If З.ResultTable.Size()<20 Then
    ФлНом:=0;
    While З.Next(1) Do
      If not З.зН.IsFolder() Then
        ФлНом:=ФлНом+1;
      EndIf;
    EndDo;
    З.First();
  EndIf;
  If (ФлНом<4)and(ФлЦен<3) Then
    спБуфер:=0;
  EndIf;
  
  ФлИзмененных:=0;
  BeginTransaction();
  Try
    пКолВо:=0;
    While З.Next(1) Do
      пН:=З.зН;
      пКод:=пН.Code;
      пНаименование:=пН.Name;
      Ст:="3";
      пЦ:="";
      If not пН.IsFolder() Then
        пЕд:=Str(пН.базЕдиница)+" / "+Str(пН.оснЕдиница)+" ("+пН.оснКоэффициент+")";
        Ст:="4";
        пКолВо:=пКолВо+1;
      EndIf;
      Form.StatusText(Str(Round(З.ResultTable.CurLine/З.ResultTable.Size()*100,2))+"%");
      Form.UpdateProgress(З.ResultTable.CurLine,З.ResultTable.Size());
      
      Т.CopyByX("v"+Ст+"|h1",1);
      тТЦ.Select();
      While тТЦ.Next() Do
        If пН.IsFolder() Then
          Т.CopyByX("v"+Ст+"|h2");
          Continue;
        EndIf;
        
        ТЦ:=тТЦ.ТипЦен;
        пЦ00:=глНайтиЦенуТипаЦен(пН,тТЦ.ТипЦен0,оДата);
        
        //Подготовить элемент
        Ц:=Ref.цЦены;
        If Ц.Find("@Parent,ТипЦен",пН,ТЦ) Then
          If Ц.Status()=1 Then
            Ц.Mark(0,,пН);
          Else
            пН.SetTrigger(1);
          EndIf;
        Else
          Ц.New();
          Ц.Parent(пН);
          Ц.ТипЦен:=ТЦ;
          If not глЗаписать(Ц) Then
            Exit;
          EndIf;
        EndIf;
        ФлИзмененных:=ФлИзмененных+1;
        
        //Найти новую цену
        пЦ0:=Ц.GetValue("Цена",оДата);
        пПр:=0;пР:=0;
        пЦ1:=глРассчитатьЦену(пН,ТЦ,пЦ00,пПр,пР,,спБуфер);
        If пН.ЦенаМинимальнаяПродажная>0 Then
          пЦ1:=Max(пЦ1,пН.ЦенаМинимальнаяПродажная);
        EndIf;
        If пН.ЦенаМаксимальнаяПродажная>0 Then
          пЦ1:=Min(пЦ1,пН.ЦенаМаксимальнаяПродажная);
        ElseIf _And(пН.флПодлежитПрослеживаемости,пН.ГИСМТТоварнаяГруппа.Selected()<>0,(Lowercase(пН.ГИСМТТоварнаяГруппа.ВнешнееНаименование)="tobacco")or(Lowercase(пН.ГИСМТТоварнаяГруппа.ВнешнееНаименование)="otp")) Then
          аПар:=Ref.тмцПартииТМЦ;
          аПар.UseOrder("Code-");
          If аПар.Find("@Parent,@Status,>ЦенаМаксимальнаяПродажная",пН,0,0) Then
            пЦ1:=Min(пЦ1,аПар.ЦенаМаксимальнаяПродажная);
          EndIf;
        EndIf;
        ФлРуч:=?(пЦ1=-1,1,0);
        пЦ1:=?(пЦ1=-1,пЦ0,пЦ1);
        пДельта:=пЦ1-пЦ0;
        
        //Изменение справочника
        If (not Form.оСимул.Value)And(not ФлРуч) Then
          Try
            If пЦ0<>пЦ1 Then
              Ц.SetValue("Цена",пЦ1,оДата);
              ФлИзмененных:=ФлИзмененных+1;
            EndIf;
          Except  
            Box("Не удалось установить цену для номенклатуры "+пН+", пожалуйста, запустите обработку снова!",Q_STOP);
            Message("Не удалось установить цену для номенклатуры "+пН+", пожалуйста, запустите обработку снова!","!");
          EndTry;
        EndIf;
        
        пЦ0:=глФРМ(пЦ0,"");
        пЦ1:=глФРМ(пЦ1,"");
        пЦ00:=глФРМ(пЦ00,"");
        пПр:=глФРМ(пПр,"");
        пР:=глФРМ(пР,"");
        пДельта:=глФРМ(пДельта,"");
        Т.CopyByX("v"+?(not ФлРуч,Ст,"6")+"|h2");
      EndDo;
      Т.CopyByX("v"+Ст+"|h3");
      
      If ФлИзмененных>50 Then
        CommitTransaction();
        ФлИзмененных:=0;
        BeginTransaction();
      EndIf;
    EndDo;
  Finally
    If IsTransactionActive() Then
      CommitTransaction();
    EndIf;
  EndTry;
  
  Т.CopyByX("v5|h1",1);
  тТЦ.Select();
  While тТЦ.Next() Do
    Т.CopyByX("v5|h2");
  EndDo;
  Т.CopyByX("v5|h3");
  
  If (Form.оОтчет.Value)Or(Form.оСимул.Value) Then
    глПечатнаяФормаОтчета(Т,Param,пЗаголовок);
  EndIf;
  If _And(not Form.оСимул.Value,TypeStr(Param)="LIST") Then
    Param["Ответ"]:=1;
    Form.Destroy(0);
  EndIf;
EndFunction

Function НапечататьЦенники()
  LoadModule(0,"Modules\FreeForms\ВнутренниеОбработки\РозничнаяТорговля\ПечатьЦенников",Param,0,"Module","Form");
EndFunction

Function ПроизвестиВыгрузку()
  спВыгрузка:=глПолучитьДрайверыПоУсловию("ВыгрузкаЦен",1);
  If спВыгрузка.Size()=0 Then
    Box("В рабочем месте не зарегистрировано ни одного драйвера, требующего выгрузки цен!",Q_STOP);
    Exit;
  EndIf;

  оДата:=BegOfDay(Form.оДата.Value);
  оН:=Form.оН.Value.Get(1);
  оННЕ:=Form.оН.Value.Get(2);
  If оН.Size()=0 Then
    Box("Необходимо выбрать номенклатуру!",Q_STOP);
    Exit;
  EndIf;
  
  ТЗ:="зН:=Ref.тмцНоменклатура;
  |зСтатус:=Ref.тмцНоменклатура.@STATUS;
  |зПапка:=Ref.тмцНоменклатура.@ISFOLDER;
  |Condition(зПапка=0);"+
  ?(Form.оТакжеУдал.Value=0,"Condition(зСтатус=0);","")+
  "Condition(зН IN оН);
  |Condition(зН NOT IN оННЕ);
  |Group зН;";
  
  З:=Query.Create();
  З.Execute(ТЗ);
  
  спМг:=Ref.рознМагазины.Load(0,"~(@ELEMENT IN Form.оМг.Value.Get(1))And((@ELEMENT NOT IN Form.оМг.Value.Get(2)))And(ЮрЛицо IN Form.оЮЛ.Value.Get(1))And((ЮрЛицо NOT IN Form.оЮЛ.Value.Get(2)))");
  If спМг.Size()=0 Then
    Box("Вы не выбрали ни одного магазина для выгрузки!",Q_STOP);
    Exit;
  EndIf;
  If _Or(спМг.Size()>1,спМг[1]<>глМагазинДрайверов) Then
    Box("Вы можете производить выгрузку цен только для текущего магазина!",Q_STOP);
    Exit;
  EndIf;
  
  aTab:=Tab.Create("Номенклатура,Штрихкод,Цена");
  While З.Next(1) Do
    пЦ:=глНайтиЦенуТипаЦен(З.зН,глМагазинДрайверов.рзТипЦенРеализации,оДата);
    СтрШк:=глПолучитьШтрихкод(З.зН);
    If пЦ>0 Then
      aTab.AddLine("Номенклатура,Штрихкод,Цена",З.зН,СтрШк,пЦ);
    EndIf;
  EndDo;
  
  For i:=1 To спВыгрузка.Size() Do
    спНастройки:=спВыгрузка[i];
    Form.StatusText("Выгрузка в "+спНастройки["Оборудование"]+"...");
    Try
      спНастройки["ВыгрузкаНоменклатуры"]:=aTab;
      Стр:=глВыполнитьФункциюДрайвера("DriverUpdateNomeclature",спНастройки);
      If Стр<>"" Then
        Raise Стр;
      Endif;
    Except
      Message("Ошибка при выгрузке цен для устройства "+спНастройки["Оборудование"]+": "+PopError(),"!");
      Message("Выгрузка ддя указанного устройства не выполнена полностью, исправьте ошибку или отключите устройство!","!");
      Exit;
    EndTry;
  EndDo;
  Message("Выгрузка цен выполнена успешно!","!");
EndFunction