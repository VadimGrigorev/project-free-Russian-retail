//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

Var НакопленноеСообщение Export;
Var БылаВставкаИзБуфера Export;

Var ФлТипДиалога Export;  //0 -- рабочее место продавца, 1 -- киоск самообслуживания
Var ФлДиалогИнициализированПолностью Export;
Var ТекущийМагазин Export;
Var ТекущееРабочееМесто Export;
Var ТекущийКассир Export;
Var ТекущаяОперация Export;         //0 -- продажа, 1 -- возврат, 2 -- аванс (только в диалоге оплаты), 3 -- кредит (только в диалоге оплаты), 4 -- закрытие аванса (только в диалоге оплаты), 5 -- закрытие кредита (только в диалоге оплаты)
Var КонтрагентЗакрытияАванса Export;//Передает контрагента из операции закрытия аванса в диалог оплаты
Var ПоследнийЧекДокумент Export;
Var лкПользователь Export;          //Текущий пользователь, используется при замене прав, для временной замены на пользователя с большими правами
Var спОкруглениеЦен Export;
Var тГорячиеКлавиши Export;
Var ФлФорсирование Export;          //1 -- выход без запроса, 2 -- закрытие чека, заполнить сумму нал., 3 -- закрытие чека, заполнить сумму безнал.
Var СкидочнаяКартаЧека Export, СкидочнаяКартаЧекаПеременные Export, МодульУсловияСкидочнойКарты Export;
Var ТабДепозитыЧека Export;

Var ВремяПоследнегоОбновленияУсловийПродаж Export;
Var тУсловияПродаж Export;          //"Условие,Переменные,Модуль"
Var спЗапрещеннаяДляСкидокНоменклатура Export;

Var спПодключенныеДрайверы Export;
Var спДополнительныеКассы Export;
Var спНастройкиККМ Export;
Var спПлатежныеТерминалы Export;
Var спДисплеиПокупателя Export, ВремяПоследнейИнициализацииДисплея Export;
Var спВесы Export;
Var МодульДопОбработчики Export;

Var ФлБылаОтменаТовара Export;
Var ВремяПоследнегоНажатия Export;
Var ПоследняяГорячаяКлавиша Export;
Var ФлПредупреждениеОВремениПоследнегоНажатия Export;
Var ПериодическаяОбработка Export;

//Переменные вспомогательных форм
Var спОборудованиеДляОтменыЧека Export;      //Содержит список оборудования и параметры для отмены чека при выходе из диалога
                                             //"ПлатежныйТерминал" -- список для отмены оплаты платежного терминала
                                             //"ЕГАИС" -- список для отмены отправки/возврата марок в ЕГАИС
                                             
Var ФлТолькоВНаличии Export, ФлСдачаДепозитов Export;
Var ПоискТабПозиции Export;
Var ТабПодборОстатки Export;
Var ТабАкцииЧека Export;
Var ТабСертификатыЧека Export;
Var ДолгПокупателя Export;
Var спСписокДокументовОтбор Export;
Var ПочтаИлиТелефон Export;
Var локТекущийМагазин Export, локСпНастройкиККМ Export, локПлатежныеТерминалы Export;
Var КорректировочныеСвойстваЧека Export;

Function ЗакрытьЧекОбновитьАкции() Forward;
Function ЗакрытьЧекОбновитьСуммы(ФлПолноеОбновление=0) Forward;
//Вспомогательные функции для вызовов из модулей условий и т.п.
Function УдалитьАкциюИзДокумента(СтатьяМаркетинга,ФлОбнулитьСкидку=0) Forward;
Function ДобавитьАкциюДляПозиции(СпНоменклатура=0,ПроцентСкидки=0,СуммаСкидки=0,СтатьяМаркетинга=Nothing,ФлУдалитьДругиеАкцииСтроки=0) Forward;
Function ОчиститьБуферContains() Forward;


Function ОтключитьДополнительныеКассы()
  If TypeStr(спДополнительныеКассы)="LIST" Then
    //Отключаем драйверы
    For i:=1 To спДополнительныеКассы.Size() Do
      спДрайверы:=спДополнительныеКассы[i];
      спДрайверы.Remove(1);//Информация о магазине
      For j:=1 To спДрайверы.Size() Do
        спНастройки:=спДрайверы[j];
        Try
          глВыполнитьФункциюДрайвера("DriverDisconnect",спНастройки);
        Except
        EndTry;
      EndDo;
      глВыгрузитьДрайверыДругогоМагазина(спДрайверы);
    EndDo;
  EndIf;
  спДополнительныеКассы:=List.Create();
EndFunction

Function ОтключитьДрайверыПриВыходе()
  If TypeStr(спПодключенныеДрайверы)="LIST" Then
    //Отключаем драйверы
    For i:=1 To спПодключенныеДрайверы.Size() Do
      спНастройки:=спПодключенныеДрайверы[i];
      Try
        глВыполнитьФункциюДрайвера("DriverDisconnect",спНастройки);
      Except
      EndTry;
    EndDo;
    спПодключенныеДрайверы:=List.Create();
  EndIf;
  
  ОтключитьДополнительныеКассы();
EndFunction


Function ИнициализироватьОборудование()
  If глПользователь.РабочееМесто.Selected()=0 Then
    Exit "Необходимо выбрать рабочее место магазина для текущего пользователя!";
  EndIf;
  ТабКроме:=Tab.Create("Тип,Переменная,Значение");
  ТабКроме.AddLine("Тип,Переменная,Значение",Enum.GetCaption("рознТипыОборудования.Весы"),"АктивныеВесы","0");
  СпОшибки:=List.Create();
  глЗагрузитьДрайверы(0,0,СпОшибки,ТабКроме);
  If СпОшибки.Size()>0 Then
    For i:=1 To СпОшибки.Size()-1 Do
      Box(СпОшибки[i],Q_STOP);
    EndDo;
    Exit СпОшибки[СпОшибки.Size()];
  EndIf;
  //Отключаем драйверы
  For i:=1 To спПодключенныеДрайверы.Size() Do
    спНастройки:=спПодключенныеДрайверы[i];
    Try
      глВыполнитьФункциюДрайвера("DriverDisconnect",спНастройки);
    Except
    EndTry;
  EndDo;
  
  спПодключенныеДрайверы:=List.Create();
  спНастройкиККМ:=0;
  спПлатежныеТерминалы:=List.Create();
  спДисплеиПокупателя:=List.Create();
  спВесы:=List.Create();
  LockObject(глДрайверы);
  Try
    For i:=1 To глДрайверы.Size() Do
      спНастройки:=глДрайверы[i];
      aEl:=спНастройки["Оборудование"];
      Стр:=спНастройки["ТипОборудования"];
      If _And(ФлТипДиалога=0,Стр=Enum.GetCaption("рознТипыОборудования.ККТ")) Then
        If спНастройкиККМ<>0 Then
          Exit "Для текущего рабочего места задано более одной ККМ!";
        EndIf;
        спНастройкиККМ:=спНастройки;
      ElseIf _And(ФлТипДиалога=1,Стр=Enum.GetCaption("рознТипыОборудования.КиоскиСамообслуживания")) Then
        If спНастройкиККМ<>0 Then
          Exit "Для текущего рабочего места задано более одного драйвера киоска самообслуживания!";
        EndIf;
        спНастройкиККМ:=спНастройки;
      ElseIf Стр=Enum.GetCaption("рознТипыОборудования.СчитывателиМагнитныхКарт") Then
        //Подключаются как сканеры, не требуют доп. настройки
      ElseIf Стр=Enum.GetCaption("рознТипыОборудования.СчитывателиРадиочипов") Then
        //Подключаются как сканеры, не требуют доп. настройки
      ElseIf Стр=Enum.GetCaption("рознТипыОборудования.ПлатежныеТерминалы") Then
        спПлатежныеТерминалы.Add(спНастройки);
      ElseIf Стр=Enum.GetCaption("рознТипыОборудования.ДисплеиПокупателя") Then
        спДисплеиПокупателя.Add(спНастройки);
      ElseIf _And(Стр=Enum.GetCaption("рознТипыОборудования.Весы"),спНастройки["АктивныеВесы"]=1) Then
        спВесы.Add(спНастройки);
      ElseIf Стр=Enum.GetCaption("рознТипыОборудования.СканерыШтрикодов") Then
        Continue;
      EndIf;
      спПодключенныеДрайверы.Add(спНастройки);
    EndDo;
  Finally
    UnlockObject(глДрайверы);
  EndTry;
  If спНастройкиККМ=0 Then
    Exit "Для текущего рабочего места не задано ни одного драйвера ККМ!";
  EndIf;
  aEl:=спНастройкиККМ["Оборудование"];
  If aEl.Касса.Selected()=0 Then
    Exit "Для ККМ "+aEl+" не задан элемент справочника кассы!";
  EndIf;
  
  //Подключение ККМ
  Try
    Стр:=глВыполнитьФункциюДрайвера("DriverConnect",спНастройкиККМ);
    If Стр<>"" Then
      Raise Стр;
    EndIf;
  Except
    Exit "Ошибка подключения драйвера ККМ: "+PopError();
  EndTry;
  //Подключение остальных драйверов
  For i:=1 To спПодключенныеДрайверы.Size() Do
    Сп:=спПодключенныеДрайверы[i];
    If Сп["Оборудование"]<>спНастройкиККМ["Оборудование"] Then
      Try
        Стр:=глВыполнитьФункциюДрайвера("DriverConnect",Сп);
        If Стр<>"" Then
          Raise Стр;
        EndIf;
      Except
        Exit "Ошибка подключения драйвера для устройства "+Сп["Оборудование"]+": "+PopError();
      EndTry;
    EndIf;
  EndDo;
    
  //Инициализация дополнительных касс
  ОтключитьДополнительныеКассы();
  If ФлТипДиалога=0 Then
    РабочееМесто:=глПользователь.РабочееМесто.Copy();
    aTab:=РабочееМесто.LineParts("Оборудование");
    aTab.Select();
    While aTab.Next() Do
      aEl:=aTab.Оборудование;
      If _Or(aEl.DBName()<>"рознМагазины",IsEmpty(aTab.РабочееМесто)) Then
        Continue;
      EndIf;
      bTab:=aEl.LineParts("Номенклатура");
      If bTab.Size()=0 Then
        Continue;
      EndIf;    
      спДрайверы:=0;
      Стр:=глЗагрузитьДрайверыДругогоМагазина(aTab.РабочееМесто,спДрайверы);
      If Not IsEmpty(Стр) Then
        Exit "Для подчиненного магазина "+aEl+" произошла ошибка при загрузке драйверов: "+Стр;
      EndIf;
      спИнф:=List.Create();
      спИнф["РабочееМесто"]:=aTab.РабочееМесто;
      спИнф["Магазин"]:=aEl;
      спИнф["спНастройкиККМ"]:=0;
      спИнф["спПлатежныеТерминалы"]:=List.Create();
      спИнф["спДисплеиПокупателя"]:=List.Create();
      СпН:=List.Create();
      bTab:=aEl.LineParts("Номенклатура");
      bTab.CopyTo(СпН,,,"Номенклатура");
      спИнф["НоменклатураМагазина"]:=СпН;
      For i:=1 To спДрайверы.Size() Do
        спДрайвер:=спДрайверы[i];
        Стр:=спДрайвер["ТипОборудования"];
        If Стр=Enum.GetCaption("рознТипыОборудования.ККТ") Then
          If спИнф["спНастройкиККМ"]<>0 Then
            спИнф["спНастройкиККМ"]:=1;
          Else
            спИнф["спНастройкиККМ"]:=спДрайвер;
          EndIf;
        ElseIf Стр=Enum.GetCaption("рознТипыОборудования.ПлатежныеТерминалы") Then
          спИнф["спПлатежныеТерминалы"].Add(спДрайвер);
        ElseIf Стр=Enum.GetCaption("рознТипыОборудования.ДисплеиПокупателя") Then
          спИнф["спДисплеиПокупателя"].Add(спДрайвер);
        EndIf;
      EndDo;      
      спДрайверы.Insert(1,спИнф);
      спДополнительныеКассы.Add(спДрайверы);
      If спИнф["спНастройкиККМ"]=0 Then
        Exit "Для подчиненного магазина "+aEl+" не задано ни одного драйвера ККМ!";
      ElseIf спИнф["спНастройкиККМ"]=1 Then
        Exit "Для подчиненного магазина "+aEl+" задано более одной ККМ!";
      EndIf;
      
      //Подключение ККМ
      локСпНастройкиККМ:=спИнф["спНастройкиККМ"];
      Try
        Стр:=глВыполнитьФункциюДрайвера("DriverConnect",локСпНастройкиККМ);
        If Стр<>"" Then
          Raise Стр;
        EndIf;
      Except
        Exit "Для подчиненного магазина "+aEl+" ошибка подключения драйвера ККМ: "+PopError();
      EndTry;
      //Подключение остальных драйверов
      For i:=2 To спДрайверы.Size() Do
        Сп:=спДрайверы[i];
        If Сп["Оборудование"]<>локСпНастройкиККМ["Оборудование"] Then
          Try
            Стр:=глВыполнитьФункциюДрайвера("DriverConnect",Сп);
            If Стр<>"" Then
              Raise Стр;
            EndIf;
          Except
            Exit "Для подчиненного магазина "+aEl+" ошибка подключения драйвера для устройства "+Сп["Оборудование"]+": "+PopError();
          EndTry;
        EndIf;
      EndDo;
    EndDo;
  EndIf;
  
  НакопленноеСообщение:="";
  Form.OnTimerInterval:=глСканерыКлавиатурыТаймерИнтервал;
EndFunction


Function ОбновитьИнформацию(ФлБыстро=0)
  If not ФлБыстро Then
    Try
      стрСмена:="Смена ?";
      Цвет:=_CLR_RED;
      If глВыполнитьФункциюДрайвера("ShiftInfo",спНастройкиККМ)="" Then
        стрСмена:="Смена "+?(TypeStr(спНастройкиККМ["НомерСмены"])<>"NUMBER","?:","№"+спНастройкиККМ["НомерСмены"]+":")+" ";
        aNum:=Number(спНастройкиККМ["СменаСостояние"]);
        //-1 -- ошибка, 0 -- закрыта, 1 -- открыта, 2 -- истекла, 3 -- другое
        if aNum=0 Then
          стрСмена:=стрСмена+"закрыта";
          Цвет:=_CLR_RED;
        Elseif aNum=1 Then
          стрСмена:=стрСмена+"открыта";
          Цвет:=_CLR_WINDOWTEXT;
        Elseif aNum=2 Then
          стрСмена:=стрСмена+"истекла";
          Цвет:=_CLR_RED;
        Else
          стрСмена:=стрСмена+"?";
          Цвет:=_CLR_RED;
        EndIf;
      EndIf;
    Except
      Exit "Ошибка подключения драйвера ККМ: "+PopError();
    EndTry;
  Else
    стрСмена:=Form.тСмена.Caption;
    стрСмена:=Trim(TearStr(стрСмена,","));
    Цвет:=Form.тСмена.FontColor;
  EndIf;
  СтрКассир:=ТекущийКассир;
  If _And(not IsEmpty(ТекущийКассир),not IsEmpty(ТекущийКассир.Контрагент)) Then
    СтрКассир:=ТекущийКассир.Контрагент;
  EndIf;
  If лкПользователь=глПользователь Then
    стрСмена:=стрСмена+", кассир: "+СтрКассир;
  Else
    стрСмена:=стрСмена+", кассир: "+СтрКассир+", права: "+лкПользователь;
  EndIf;
  If стрСмена<>Form.тСмена.Caption Then
    Form.тСмена.Caption:=стрСмена;
  EndIf;
  If Form.тСмена.FontColor<>Цвет Then
    Form.тСмена.FontColor:=Цвет;
  EndIf;
  СтрОперация:="операция: продажа";
  Цвет:=_CLR_WINDOWTEXT;
  Фон:=_CLR_BTNFACE;
  If ТекущаяОперация=1 Then
    СтрОперация:="операция: возврат";
    Цвет:=_CLR_WHITE;
    Фон:=_CLR_RED;
  ElseIf ТекущаяОперация<>0 Then
    СтрОперация:="операция: ошибка ("+ТекущаяОперация+")!";
    Цвет:=_CLR_WHITE;
    Фон:=_CLR_RED;
  ElseIf not IsEmpty(КонтрагентЗакрытияАванса) Then
    СтрОперация:="операция: закрытие аванса";
    Цвет:=_CLR_BLUE;
  EndIf;
  If Form.тОперация.Caption<>СтрОперация Then
    Form.тОперация.Caption:=СтрОперация;
    Form.тОперация.FontColor:=Цвет;
    Form.тОперация.Color:=Фон;
    If Цвет<>_CLR_WINDOWTEXT Then
      Form.тОперация.FontStyle:=1;
    Else
      Form.тОперация.FontStyle:=0;
    EndIf;
  EndIf;
EndFunction


Function ОбновитьИнформациюТекущейСтроки()
  If IsEmpty(спДисплеиПокупателя) Then
    Exit;
  EndIf;
  
  ТабПозиции:=Form.ТабПозиции.Value;
  If ТабПозиции.SelectedLine=0 Then
    If Form.тПозиция.Caption<>"" Then
      Form.тПозиция.Caption:="";
    EndIf;
    If Form.тСумма.Caption<>"" Then
      Form.тСумма.Caption:="";
    EndIf;
  Else
    ТабПозиции.CurLine:=ТабПозиции.SelectedLine;
    пЕд:=?(ТабПозиции.флЛитры=1,"л",Lowercase(ТабПозиции.Номенклатура.базЕдиница));
    Стр:=""+ТабПозиции.Номенклатура+" ("+пЕд+")"+
      ?(ТабПозиции.флМарки=1,", марочный учет")+?((ТабПозиции.Номенклатура.флВесовойТовар=1)Or(ТабПозиции.флЛитры=1),", весовой товар");
    If Form.тПозиция.Caption<>Стр Then
      Form.тПозиция.Caption:=Стр;
    EndIf;
    Стр:=глФРМ(ТабПозиции.Сумма,"")+" руб."+?(ТабПозиции.Количество<>1," за "+Round(ТабПозиции.Количество,3)+" ("+пЕд+")");
    If Form.тСумма.Caption<>Стр Then
      Form.тСумма.Caption:=Стр;
    EndIf;
  EndIf;
  
  Сумма:=ТабПозиции.SUM("Сумма");
  If Сумма=0 Then
    If Form.тСуммаИтого.Caption<>"" Then
      Form.тСуммаИтого.Caption:="";
    EndIf;
  Else
    Стр:="Итого: "+глФРМ(Сумма,"")+" руб., позиций: "+ТабПозиции.Size();
    If Form.тСуммаИтого.Caption<>Стр Then
      Form.тСуммаИтого.Caption:=Стр;
    EndIf;
  EndIf;
  
  Сумма:=ТабПозиции.SUM("Скидка");
  If _And(Сумма=0,IsEmpty(СкидочнаяКартаЧека),ТабДепозитыЧека.Size()=0) Then
    If Form.тИнформация.Caption<>"" Then
      Form.тИнформация.Caption:="";
      Form.тИнформация.Color:=_CLR_BTNFACE;
    EndIf;
  Else
    Стр:="";
    If not IsEmpty(СкидочнаяКартаЧека) Then
      Стр:="Скидочная карта: "+СкидочнаяКартаЧека+?(СкидочнаяКартаЧека.ПроцентСкидки>0," ("+СкидочнаяКартаЧека.ПроцентСкидки+"%)");
    EndIf;
    ТабДепозитыЧека.Select();
    While ТабДепозитыЧека.Next() Do
      Стр:=?(Стр="","Депозит ",Стр+", депозит ")+ТабДепозитыЧека.Сертификат+" на "+глФРМ(ТабДепозитыЧека.Сумма,"")+" руб.";
    EndDo;
    If Сумма<>0 Then
      Сп:=List.Create();
      ТабПозиции.Select();//TODO: медленно?
      While ТабПозиции.Next() Do
        If not IsEmpty(ТабПозиции.ТАкции) Then
          ТабПозиции.ТАкции.CopyTo(Сп,,,"Акция");
        EndIf;
      EndDo;
      Стр:=?(Стр="","",Стр+". ")+"Итого скидка: "+глФРМ(Сумма,"")+" руб.";
      Фл:=0;
      Сп.Group();
      Сп.Sort();
      For i:=1 To Сп.Size() Do
        If _And(not IsEmpty(Сп[i]),Сп[i]<>СкидочнаяКартаЧека) Then
          Стр:=Стр+?(Фл,", "," Акции: ")+Сп[i];
          Фл:=1;
        EndIf;
      EndDo;
    EndIf;
    If Form.тИнформация.Caption<>Стр Then
      Form.тИнформация.Caption:=Стр;
      Form.тИнформация.Color:=MixColors(_CLR_BTNFACE,_CLR_GREEN,10);
    EndIf;
  EndIf;

  If _And(_Or(ВремяПоследнейИнициализацииДисплея=0,ТабПозиции.Size()>0),спДисплеиПокупателя.Size()>0) Then
    //Вызвать обновление информации на дисплее покупателя (обычно по последней позиции в таблице)
    For i:=1 To спДисплеиПокупателя.Size() Do
      спНастройки:=спДисплеиПокупателя[i];
      спНастройки["ТабПозиции"]:=ТабПозиции;
      Try
        глВыполнитьФункциюДрайвера("UpdateDisplayInfo",спНастройки);
      Except
      EndTry;
      спНастройки["ТабПозиции"]:=0;
    EndDo;
  EndIf;
EndFunction

Function ОбновитьУсловияПродаж()
  аДата:=BegOfDay(Date());
  тУсловияПродаж:=Tab.Create("Условие,Переменные,Модуль,спНоменклатура,тНоменклатураУсловия");
  Try
    СпУсловияПродаж:=Ref.рознУсловияПродажИМаркетинговыеАкции.Load(0,"~(@Parent=ТекущийМагазин)And(@Status<>1)And(ДатаНачалаДействия<=аДата)And((ДатаОкончанияДействия<='01.01.1981')Or(ДатаОкончанияДействия>=аДата))");
    СпУсловияПродаж.CopyTo(тУсловияПродаж,,,"Условие");
  Except
  EndTry;
  
  //Подготовка спЗапрещеннаяДляСкидокНоменклатура
  спЗапрещеннаяДляСкидокНоменклатура:=List.Create();
  тУсловияПродаж.Select();
  While тУсловияПродаж.Next() Do
    If тУсловияПродаж.Условие.ТипУсловия=Enum.рознТипыУсловийПродаж.ЗапретитьСкидкиНаПозиции Then    
      тУсловияПродаж.Условие.LineParts("НоменклатураУсловия").CopyTo(спЗапрещеннаяДляСкидокНоменклатура,,,"Номенклатура");
    EndIf;
  EndDo;
  спЗапрещеннаяДляСкидокНоменклатура.Group();
EndFunction

Function ДопОбработчики(Тип,ФлОшибкаОтмена=1,ДопПеременная=0)
  If IsEmpty(МодульДопОбработчики) Then
    Exit 1;
  EndIf;
  СпОперация:=List.Create();
  СпОперация["КодОперации"]:=Тип;
  СпОперация["ДопПеременная"]:=ДопПеременная;
  If not IsEmpty(ПоискТабПозиции) Then
    ТабПозиции:=ПоискТабПозиции;
  Else
    ТабПозиции:=Form.ТабПозиции.Value;
  EndIf;  
  Try
    Exec(МодульДопОбработчики);
  Except
    Стр:=PopError();
    Box("Сценарий дополнительных обработчиков вызвал ошибку "+Left(Стр,200)+"! Операция "+Тип+" отменена!",Q_STOP);
    Exit 1-ФлОшибкаОтмена;
  EndTry;
  If not IsEmpty(СпОперация["Сообщение"]) Then
    Тип:=?(СпОперация["ТипСообщения"]=1,Q_WARNING,?(СпОперация["ТипСообщения"]=2,Q_INFORMATION,Q_STOP));
    Box(СпОперация["Сообщение"],Тип);
  EndIf;
  If СпОперация["Результат"]=1 Then
    Exit 0;
  EndIf;
  Exit 1;
EndFunction

//ТипОперации: 0 -- изменения в чеке
//             1 -- закрытие чека
//             2 -- удаление скидочной карты из чека
//             3 -- удаление скидки карты, карта остается для накопления продаж/баллов
Function ОбновитьСкидкуПоСкидочнымКартам(ТипОперации,СпБлокированныеАкции=0,ТекКарта=0,СмСертификата=0)
  If not IsEmpty(ПоискТабПозиции) Then
    ТабПозиции:=ПоискТабПозиции;
  Else
    ТабПозиции:=Form.ТабПозиции.Value;
  EndIf;

  If (ТипОперации=2)Or(ТипОперации=3) Then
    If not IsEmpty(СкидочнаяКартаЧека) Then
      ТабПозиции.Lock();
      Try
        УдалитьАкциюИзДокумента(СкидочнаяКартаЧека,ТипОперации=3);
      Finally
       ТабПозиции.Unlock();
      EndTry;
    EndIf;
    Exit 1;
  ElseIf ТипОперации=0 Then
    If IsEmpty(СкидочнаяКартаЧека) Then
      Exit 1;
    EndIf;
    УсловиеДействия:=СкидочнаяКартаЧека.УсловиеДействия;
    If IsEmpty(СкидочнаяКартаЧекаПеременные) Then
      //Небольшая оптимизация, для того, чтобы СпНоменклатура.Contains работала быстрее
      СкидочнаяКартаЧекаПеременные:=List.Create();
      СпНоменклатура:=List.Create();
      If УсловиеДействия.Selected()<>0 Then
        aTab:=УсловиеДействия.LineParts("Номенклатура");
        aTab.CopyTo(СпНоменклатура,,,"Номенклатура");
      EndIf;
      СкидочнаяКартаЧекаПеременные["НоменклатураСертификата"]:=СпНоменклатура;
    Else
      СпНоменклатура:=СкидочнаяКартаЧекаПеременные["НоменклатураСертификата"];
    EndIf;
    
    СуммаДокумента:=0;
    ФлБылиСкидки:=0;
    ТабПозиции.Select();
    While ТабПозиции.Next() Do
      If _And(спЗапрещеннаяДляСкидокНоменклатура.Size()>0,спЗапрещеннаяДляСкидокНоменклатура.Contains(ТабПозиции.Номенклатура)) Then
        Continue;
      EndIf;
      If _And(СпНоменклатура.Size()>0,not СпНоменклатура.Contains(ТабПозиции.Номенклатура,1)) Then
        If _Or(ФлБылиСкидки,_And(not IsEmpty(ТабПозиции.ТАкции),ТабПозиции.ТАкции.FindAndGoto(СкидочнаяКартаЧека,,"Акция"))) Then
          ФлБылиСкидки:=1;
        EndIf;  
        Continue;
      EndIf;
      If not IsEmpty(ТабПозиции.ТАкции) Then
        If ТабПозиции.ТАкции.FindAndGoto(СкидочнаяКартаЧека,,"Акция") Then
          СуммаДокумента:=СуммаДокумента+ТабПозиции.ТАкции.Сумма;
          ФлБылиСкидки:=1;
        EndIf;
      EndIf;
      СуммаДокумента:=Round(СуммаДокумента+ТабПозиции.Сумма,2);
    EndDo;
    СуммаСкидки:=Round(СуммаДокумента*СкидочнаяКартаЧека.ПроцентСкидки/100,2);
    СуммаСкидки:=?(СкидочнаяКартаЧека.Бюджет>=0,Min(СкидочнаяКартаЧека.Бюджет,СуммаСкидки),СуммаСкидки);
    
    If _And(УсловиеДействия.Selected()<>0,not IsEmpty(УсловиеДействия.Условие)) Then
      If IsEmpty(СкидочнаяКартаЧекаПеременные) Then
        СкидочнаяКартаЧекаПеременные:=List.Create();
      EndIf;
      СпОперация:=List.Create();
      СпОперация["ТипОперации"]:=0;
      СпОперация["ЭлементУсловие"]:=УсловиеДействия;
      СпОперация["ЭлементКарта"]:=СкидочнаяКартаЧека;
      СпОперация["Переменные"]:=СкидочнаяКартаЧекаПеременные;
      СпОперация["СуммаДокумента"]:=СуммаДокумента;
      СпОперация["СуммаСкидки"]:=СуммаСкидки;
      СпОперация["НоменклатураСкидки"]:=СпНоменклатура;
      СпОперация["Результат"]:=0;
      If IsEmpty(МодульУсловияСкидочнойКарты) Then
        Try      
          МодульУсловияСкидочнойКарты:=Compile(УсловиеДействия.Условие,0,,1);
        Except
          Box("Условие скидочной карты "+УсловиеДействия+" вызвало ошибку "+PopError()+"! Операция отменена!",Q_STOP);
          Exit 0;
        EndTry;
      EndIf;
      Try
        Exec(МодульУсловияСкидочнойКарты);
      Except
        Box("Условие "+УсловиеДействия+" вызвало ошибку "+PopError()+"! Операция отменена!",Q_STOP);
        Exit 0;
      EndTry;
      If СпОперация["Результат"]=1 Then
        Exit 1;
      EndIf;
      СуммаСкидки:=СпОперация["СуммаСкидки"];
    EndIf;
    СуммаСкидки:=Round(СуммаСкидки,2);
    
    If (ФлБылиСкидки)Or((СуммаСкидки>0)And(СуммаДокумента>0)) Then
      ТабПозиции.Lock();
      Try
        //Отнимем акцию от всех строк
        If ФлБылиСкидки Then
          УдалитьАкциюИзДокумента(СкидочнаяКартаЧека);
        EndIf;
        //Добавим акцию во все строки
        If (СуммаСкидки>0)And(СкидочнаяКартаЧека.ТипКарты<>Enum.рознТипыСкидочныхКарт.ПодарочныйСертификат)And(СкидочнаяКартаЧека.ТипКарты<>Enum.рознТипыСкидочныхКарт.Депозит) Then
          ТабПозиции.Select();
          While ТабПозиции.Next() Do
            If _And(спЗапрещеннаяДляСкидокНоменклатура.Size()>0,спЗапрещеннаяДляСкидокНоменклатура.Contains(ТабПозиции.Номенклатура)) Then
              Continue;
            EndIf;
            If _And(СпНоменклатура.Size()>0,not СпНоменклатура.Contains(ТабПозиции.Номенклатура,1)) Then
              Continue;
            EndIf;
            If IsEmpty(ТабПозиции.ТАкции) Then
              ТабПозиции.ТАкции:=Tab.Create("Акция,Сумма,Количество");
            EndIf;
            ТАкции:=ТабПозиции.ТАкции;
            См2:=Round(ТабПозиции.Сумма/СуммаДокумента*СуммаСкидки,2);
            См2:=Min(См2,ТабПозиции.Сумма);
            If ТабПозиции.Номенклатура.ЦенаМинимальнаяПродажная>0 Then
              Количество:=?(ТабПозиции.флЛитры,ТабПозиции.Количество/ТабПозиции.Номенклатура.ОбъемЛитров,ТабПозиции.Количество);
              См2:=Max(Min(См2,ТабПозиции.Сумма-ТабПозиции.Номенклатура.ЦенаМинимальнаяПродажная*Количество),0);
            EndIf;
            ТАкции.AddLine("Акция,Сумма,Количество",СкидочнаяКартаЧека,См2,0);
            ТабПозиции.Сумма:=Round(ТабПозиции.Сумма-См2,2);
            ТабПозиции.Скидка:=ТабПозиции.СуммаБезСкидки-ТабПозиции.Сумма;
          EndDo;
        EndIf;
      Finally
        ТабПозиции.Unlock();
      EndTry;
    EndIf;
    Exit 1;
  ElseIf ТипОперации=1 Then  
    If _And(IsEmpty(СкидочнаяКартаЧека),IsEmpty(ТекКарта)) Then
      Exit 1;
    EndIf;
    ФлСертификат:=not IsEmpty(ТекКарта);
    If IsEmpty(ТекКарта) Then
      ТекКарта:=СкидочнаяКартаЧека;
    EndIf;
    УсловиеДействия:=ТекКарта.УсловиеДействия;
    
    //Блокировка элемента карты
    If ТекКарта.IsLocked()<>1 Then
      аПольз:="";аМаш:="";аВремя:="";
      аДата:=Date();
      Фл:=0;
      While GetPeriodMs(аДата)<500 Do
        If ТекКарта.Lock(аПольз,аМаш,аВремя)>0 Then
          Фл:=1;
          Break;
        EndIf;
        Sleep(5);
      EndDo;
      If not Фл Then
        Стр:="Невозможно заблокировать элемент скидочной карты или сертификата "+ТекКарта+", так как в данный момент он занят пользователем "+аПольз+" на "+аМаш+" в "+аВремя+"! Попробуйте выполнить действие еще раз";
        Box(Стр,Q_STOP);
        Form.тСтатусОбмена.Caption:=Стр;
        Exit 0;
      EndIf;
      If _Or(ТекКарта.ТипКарты<>Enum.рознТипыСкидочныхКарт.Депозит,not ТекКарта.ФлОбнулятьДепозитПриЗакрытииЧека) Then
        СпБлокированныеАкции.Add(ТекКарта,,,1);
      EndIf;
      ТекКарта.Reload();
      If (СмСертификата=0)And(ФлСертификат) Then
        Exit 1;//Не участвующие депозиты, только блокируем.
      EndIf;
    EndIf;
    
    //Подсчет итого изменения бюджета
    СуммаСкидки:=СмСертификата;
    СуммаДокумента:=0;
    ТабПозиции.Select();
    While ТабПозиции.Next() Do
      If IsEmpty(ТабПозиции.ТАкции) Then
        Continue;
      EndIf;
      If ФлСертификат Then
        СуммаДокумента:=Round(СуммаДокумента+ТабПозиции.Сумма,2);
      ElseIf ТабПозиции.ТАкции.FindAndGoto(ТекКарта,,"Акция") Then
        СуммаСкидки:=Round(СуммаСкидки+ТабПозиции.ТАкции.Сумма,2);
        СуммаДокумента:=Round(СуммаДокумента+ТабПозиции.Сумма+ТабПозиции.ТАкции.Сумма,2);
      EndIf;
    EndDo;
    ИтогоПродаж:=Round(СуммаДокумента+ТекКарта.ИтогоПродаж,2);
    Бюджет:=ТекКарта.Бюджет;
    If Бюджет>=0 Then
      Бюджет:=Max(Round(Бюджет-СуммаСкидки,2),0);
    EndIf;
    If (ТекКарта.ТипКарты=Enum.рознТипыСкидочныхКарт.ПодарочныйСертификат)And(СуммаДокумента>0) Then
      Бюджет:=0;
    EndIf;
    
    If _And(УсловиеДействия.Selected()<>0,not IsEmpty(УсловиеДействия.Условие)) Then
      If _And(not ФлСертификат,IsEmpty(СкидочнаяКартаЧекаПеременные)) Then
        СкидочнаяКартаЧекаПеременные:=List.Create();
      EndIf;
      СпОперация:=List.Create();
      СпОперация["ТипОперации"]:=1;
      СпОперация["ЭлементУсловие"]:=УсловиеДействия;
      СпОперация["ЭлементКарта"]:=ТекКарта;
      СпОперация["Переменные"]:=?(ФлСертификат,List.Create(),СкидочнаяКартаЧекаПеременные);
      СпОперация["СуммаДокумента"]:=СуммаДокумента;
      СпОперация["СуммаСкидки"]:=СуммаСкидки;
      СпОперация["Бюджет"]:=Бюджет;
      СпОперация["ИтогоПродаж"]:=ИтогоПродаж;
      СпОперация["Результат"]:=0;
      If IsEmpty(МодульУсловияСкидочнойКарты) Then
        Try      
          МодульУсловияСкидочнойКарты:=Compile(УсловиеДействия.Условие,0,,1);
        Except
          ТекКарта.Unlock();
          Box("Условие скидочной карты "+УсловиеДействия+" вызвало ошибку "+PopError()+"! Операция отменена!",Q_STOP);
          Exit 0;
        EndTry;
      EndIf;
      Try
        Exec(МодульУсловияСкидочнойКарты);
      Except
        ТекКарта.Unlock();
        Box("Условие "+УсловиеДействия+" вызвало ошибку "+PopError()+"! Операция отменена!",Q_STOP);
        Exit 0;
      EndTry;
      If СпОперация["Результат"]=1 Then
        ТекКарта.Unlock();
        Exit 0;
      EndIf;
      Бюджет:=Round(СпОперация["Бюджет"],2);
      ИтогоПродаж:=Round(СпОперация["ИтогоПродаж"],2);
      СуммаСкидки:=Round(СпОперация["СуммаСкидки"],2);
    EndIf;
    ТекКарта.Бюджет:=Бюджет;
    ТекКарта.ИтогоПродаж:=ИтогоПродаж;
    ТекКарта.ИтогоСкидка:=ТекКарта.ИтогоСкидка+СуммаСкидки;
    Exit 1;
  EndIf;
EndFunction

//0 -- добавление строки, 
//1 -- удаление строки
//2 -- изменение строки
//3 -- вызов в момент вызова диалога пробития чека
//4 -- вызов в момент пробития чека
//5 -- добавление скидочной карты, сертификата или депозита
//7 -- вызов в момент добавления строки, когда у товара нулевая цена
Function ПроверитьОперациюПоУсловиямПродаж(ТипОперации,ByRef Параметр,ФлПропуститьАкции=0)
  Var ТабПозиции Export, СпОперация Export;

  Function ПроверитьНаАкцию(Номенклатура,тУсловияПродаж,ByRef Процент,ByRef Сумма,ByRef МаксКоличество);
    If _And(спЗапрещеннаяДляСкидокНоменклатура.Size()>0,спЗапрещеннаяДляСкидокНоменклатура.Contains(Номенклатура)) Then
      Exit 0;
    EndIf;
    If IsEmpty(тУсловияПродаж.спНоменклатура) Then
      Сп:=List.Create();
      тУсловияПродаж.Условие.LineParts("Номенклатура").CopyTo(Сп,,,"Номенклатура");
      тУсловияПродаж.спНоменклатура:=Сп;
    EndIf;
    If not тУсловияПродаж.спНоменклатура.Contains(Номенклатура,1) Then
      Exit 0;
    EndIf;
    зНОткл:=0;
    СтрОткл:=0;
    aTab:=тУсловияПродаж.Условие.LineParts("Номенклатура");
    aTab.Select();
    While aTab.Next() Do
      If aTab.Номенклатура.Contains(Номенклатура,1) Then
        If зНОткл<>0 Then
          If not зНОткл.Contains(aTab.Номенклатура,1) Then
            Continue;
          EndIf;
        EndIf;
        зНОткл:=aTab.Номенклатура;
        СтрОткл:=aTab.CurLine;
      EndIf;
    EndDo;
    If СтрОткл=0 Then
      Exit 0;
    EndIf;
    aTab.CurLine:=СтрОткл;
    Процент:=aTab.ПроцентСкидки;
    Сумма:=aTab.СуммаСкидки;
    МаксКоличество:=aTab.МаксКоличество;
    If (Процент=0)And(Сумма=0) Then
      Процент:=тУсловияПродаж.Условие.ПроцентСкидки;
    EndIf;
    Exit (Процент<>0)Or(Сумма<>0);
  EndFunction    

  If тУсловияПродаж.Size()=0 Then
    If ТипОперации<4 Then
      Exit ОбновитьСкидкуПоСкидочнымКартам(0);
    EndIf;
    Exit 1;
  EndIf;
  If ТипОперации<4 Then
    If not ОбновитьСкидкуПоСкидочнымКартам(0) Then
      Exit 0;
    EndIf;
  EndIf;  
  If not IsEmpty(ПоискТабПозиции) Then
    ТабПозиции:=ПоискТабПозиции;
  Else
    ТабПозиции:=Form.ТабПозиции.Value;
  EndIf;
  Параметр0:=Параметр;
  тУсловияПродаж.Select();
  While тУсловияПродаж.Next() Do
    тНоменклатураУсловия:=0;
    If IsEmpty(тУсловияПродаж.Переменные) Then
      тУсловияПродаж.Переменные:=List.Create();
    EndIf;
    aEl:=тУсловияПродаж.Условие;
    If (not IsEmpty(aEl.Условие))And(IsEmpty(тУсловияПродаж.Модуль)) Then
      Try
        СпОперация:=List.Create();
        тНоменклатураУсловия:=тУсловияПродаж.тНоменклатураУсловия;//Необходимая переменная
        тУсловияПродаж.Модуль:=Compile(aEl.Условие,0,,1);
      Except
        тУсловияПродаж.Модуль:=1;
        Box("Условие "+aEl+" вызвало ошибку "+PopError()+"! Операция отменена!",Q_STOP);
        Exit 0;
      EndTry;
    EndIf;
    If тУсловияПродаж.Модуль=1 Then //Ошибка компиляции
      Continue;
    EndIf; 
    If aEl.ТипУсловия=Enum.рознТипыУсловийПродаж.СкидкаНаПозицию then
      If ((ТипОперации=0)Or(ТипОперации=2)Or((ТипОперации=1)And(_And(not IsEmpty(тНоменклатураУсловия),тНоменклатураУсловия.Size()>0))))And(not ФлПропуститьАкции) Then
  
        //Условие скидки на позицию
        If IsEmpty(тУсловияПродаж.тНоменклатураУсловия) Then
          тУсловияПродаж.тНоменклатураУсловия:=тУсловияПродаж.Условие.LineParts("НоменклатураУсловия").Copy();
          тУсловияПродаж.тНоменклатураУсловия.AddColumn("КоличествоЧека");
          тУсловияПродаж.тНоменклатураУсловия.Sort("Номенклатура");
        EndIf;
      
        //Проверка условия скидки, это может быть медленно
        ФлУсловиеВыполнено:=1;
        тНоменклатураУсловия:=тУсловияПродаж.тНоменклатураУсловия;
        тНоменклатураУсловия.Select();
        While тНоменклатураУсловия.Next() Do
          тНоменклатураУсловия.КоличествоЧека:=0;
          тНоменклатураУсловия.Количество:=?(тНоменклатураУсловия.Количество=0,1,тНоменклатураУсловия.Количество);
        EndDo;
        If тНоменклатураУсловия.Size()>0 Then
          ТабПозиции.Select();
          While ТабПозиции.Next() Do
            If тНоменклатураУсловия.FindAndGoto(ТабПозиции.Номенклатура,,"Номенклатура",1) Then
              тНоменклатураУсловия.КоличествоЧека:=тНоменклатураУсловия.КоличествоЧека+ТабПозиции.Количество;
            Else
              тНоменклатураУсловия.Select();
              While тНоменклатураУсловия.Next() Do
                If _And(тНоменклатураУсловия.Номенклатура.IsFolder(),тНоменклатураУсловия.Номенклатура.Contains(ТабПозиции.Номенклатура,1)) Then
                  тНоменклатураУсловия.КоличествоЧека:=тНоменклатураУсловия.КоличествоЧека+ТабПозиции.Количество;
                  Break;
                EndIf;
              EndDo;
            EndIf;
          EndDo;
                    
          тНоменклатураУсловия.Select();
          While тНоменклатураУсловия.Next() Do
            If тНоменклатураУсловия.Количество>Round(тНоменклатураУсловия.КоличествоЧека,6) Then
              ФлУсловиеВыполнено:=0;
              Break;
            EndIf;
          EndDo;
        EndIf;
        If not ФлУсловиеВыполнено Then
          //Удалить акцию из всех строк
          ТабПозиции.Select();
          While ТабПозиции.Next() Do
            ТАкции:=ТабПозиции.ТАкции;
            If IsEmpty(ТАкции) Then
              Continue;
            EndIf;
            If not ТАкции.FindAndGoto(aEl,,"Акция") Then
              Continue;
            EndIf;
            ТАкции.Remove(ТАкции.CurLine);
            ТабПозиции.Скидка:=ТАкции.Sum("Сумма");
            ТабПозиции.Сумма:=ТабПозиции.СуммаБезСкидки-ТабПозиции.Скидка;
          EndDo;
        EndIf;
      
        If (ФлУсловиеВыполнено)And(ТипОперации<>1)And((aEl.БюджетРубли>0)Or(aEl.БюджетРубли<0))And((aEl.БюджетШтуки>0)Or(aEl.БюджетШтуки<0)) Then
          //Необходимо пересчитать все строки, которые связаны с акцией          
          Кл2:=0;//Общее количество акционной номенклатуры в этом документе
          ТабПозиции.Select();
          While ТабПозиции.Next() Do
            Процент:=0;
            Cумма:=0;
            МаксКоличество:=0;
            If ПроверитьНаАкцию(ТабПозиции.Номенклатура,тУсловияПродаж,Процент,Cумма,МаксКоличество) Then
              //TODO: Используя мьютексы и StoreGlobalTempString/RestoreGlobalTempString хранить сумму акции на сервере, чтобы не превышать бюджет акции
              If IsEmpty(ТабПозиции.ТАкции) Then
                ТабПозиции.ТАкции:=Tab.Create("Акция,Сумма,Количество");
              EndIf;
              ТАкции:=ТабПозиции.ТАкции;
              If ТАкции.FindAndGoto(aEl,,"Акция")=0 Then
                ТАкции.AddLine("Акция,Сумма,Количество",aEl,0,0);
              EndIf;
              СмДругихАкций:=Round(ТАкции.Sum("Сумма")-ТАкции.Сумма,2);
              Кл:=?(МаксКоличество=0,ТабПозиции.Количество,Min(МаксКоличество,ТабПозиции.Количество));
              If aEl.БюджетШтуки>0 Then
                //Кл2: Общее количество акционной номенклатуры в этом документе
                If aEl.БюджетШтуки<=Кл2 Then
                  См:=0;
                ElseIf aEl.БюджетШтуки<Кл+Кл2 Then
                  Кл:=Max(0,aEl.БюджетШтуки-Кл2);
                  См:=Round(ТабПозиции.СуммаБезСкидки/ТабПозиции.Количество*Кл*Процент/100+Cумма,2);
                Else
                  См:=Round(ТабПозиции.СуммаБезСкидки/ТабПозиции.Количество*Кл*Процент/100+Cумма,2);
                EndIf;
              Else
                См:=Round(ТабПозиции.СуммаБезСкидки/ТабПозиции.Количество*Кл*Процент/100+Cумма,2);
              EndIf;
              
              If not IsEmpty(aEl.Условие) Then
                СпОперация:=List.Create();
                СпОперация["ТипОперации"]:=6;
                СпОперация["СуммаСкидки"]:=Round(См,2);
                СпОперация["Количество"]:=Round(Кл,6);
                СпОперация["ПроцентАкции"]:=Процент;
                СпОперация["CуммаАкции"]:=Cумма;
                СпОперация["МаксКоличество"]:=МаксКоличество;
                СпОперация["Результат"]:=0;
                СпОперация["ЭлементУсловие"]:=aEl;
                СпОперация["Переменные"]:=тУсловияПродаж.Переменные;
                Try
                  Exec(тУсловияПродаж.Модуль);
                Except
                  Box("Условие "+aEl+" вызвало ошибку "+PopError()+"! Операция отменена!",Q_STOP);
                  Exit 0;
                EndTry;
                If СпОперация["Результат"]=0 Then
                  См:=СпОперация["СуммаСкидки"];
                  Кл:=СпОперация["Количество"];
                Else
                  См:=0;
                EndIf;
              EndIf;
              
              If aEl.БюджетРубли>0 Then
                См:=Min(См,aEl.БюджетРубли);
              EndIf;
              См:=Min(См,ТабПозиции.СуммаБезСкидки-СмДругихАкций);
              If ТабПозиции.Номенклатура.ЦенаМинимальнаяПродажная>0 Then
                См:=Min(См,Max(0,ТабПозиции.СуммаБезСкидки-СмДругихАкций-ТабПозиции.Номенклатура.ЦенаМинимальнаяПродажная*ТабПозиции.Количество));
              EndIf;
              If См>0 Then
                ТАкции.Сумма:=Round(См,2);
                ТАкции.Количество:=Кл;
                ТабПозиции.Скидка:=ТАкции.Sum("Сумма");
                ТабПозиции.Сумма:=ТабПозиции.СуммаБезСкидки-ТабПозиции.Скидка;
                Кл2:=Round(Кл2+Кл,6);
              EndIf;
            EndIf; //Если номенклатура из акции
          EndDo; //По всем строкам, поиск номенклатуры из акции для пересчета
        EndIf;
      EndIf;
    ElseIf aEl.ТипУсловия=Enum.рознТипыУсловийПродаж.СкидкаССуммыПродажи then
      //Распределяется скидка, если требуется, потом выполняется модуль
      If (ТипОперации<3)And(not ФлПропуститьАкции) Then
        If ((aEl.БюджетРубли>0)Or(aEl.БюджетРубли<0))And(aEl.ПроцентСкидки<>0) Then
          //TODO: Используя мьютексы и StoreGlobalTempString/RestoreGlobalTempString хранить сумму акции на сервере, чтобы не превышать бюджет акции
          ТабПозиции.Lock();
          Try
            //Отнимем акцию от всех строк
            ТабПозиции.Select();
            While ТабПозиции.Next() Do
              ТАкции:=ТабПозиции.ТАкции;
              If IsEmpty(ТАкции) Then
                Continue;
              EndIf;
              If not ТАкции.FindAndGoto(aEl,,"Акция") Then
                Continue;
              EndIf;
              ТАкции.Remove(ТАкции.CurLine);
              ТабПозиции.Скидка:=ТАкции.Sum("Сумма");
              ТабПозиции.Сумма:=ТабПозиции.СуммаБезСкидки-ТабПозиции.Скидка;
            EndDo;
            aTab:=aEl.LineParts("Номенклатура");
            If aTab.Size()=0 Then
              Сумма:=ТабПозиции.Sum("Сумма");
            Else
              If IsEmpty(тУсловияПродаж.спНоменклатура) Then
                Сп:=List.Create();
                тУсловияПродаж.Условие.LineParts("Номенклатура").CopyTo(Сп,,,"Номенклатура");
                тУсловияПродаж.спНоменклатура:=Сп;
              EndIf;
              Сумма:=0;
              ТабПозиции.Select();
              While ТабПозиции.Next() Do
                If тУсловияПродаж.спНоменклатура.Contains(ТабПозиции.Номенклатура,1) Then
                  Сумма:=Round(Сумма+тУсловияПродаж.Сумма,2);
                EndIf;
              EndDo;
            EndIf;
            
            If Сумма>=aEl.СуммаДокумента Then
              //Добавляем акцию во все строки
              См:=Round(Сумма*aEl.ПроцентСкидки/100,2);
              If aEl.БюджетРубли>0 Then
                См:=Min(См,aEl.БюджетРубли);
              EndIf;
              ТабПозиции.Select();
              While ТабПозиции.Next() Do
                If _And(спЗапрещеннаяДляСкидокНоменклатура.Size()>0,спЗапрещеннаяДляСкидокНоменклатура.Contains(ТабПозиции.Номенклатура)) Then
                  Continue;
                EndIf;
                If _And(not IsEmpty(тУсловияПродаж.спНоменклатура),тУсловияПродаж.спНоменклатура.Size()>0,not тУсловияПродаж.спНоменклатура.Contains(ТабПозиции.Номенклатура,1)) Then
                  Continue;
                EndIf;
                If IsEmpty(ТабПозиции.ТАкции) Then
                  ТабПозиции.ТАкции:=Tab.Create("Акция,Сумма,Количество");
                EndIf;
                ТАкции:=ТабПозиции.ТАкции;
                См2:=Round(ТабПозиции.Сумма/Сумма*См,2);
                См2:=Min(См2,ТабПозиции.Сумма);
                If ТабПозиции.Номенклатура.ЦенаМинимальнаяПродажная>0 Then
                  См2:=Min(См2,Max(0,ТабПозиции.Сумма-ТабПозиции.Номенклатура.ЦенаМинимальнаяПродажная*ТабПозиции.Количество));
                EndIf;
                ТАкции.AddLine("Акция,Сумма,Количество",aEl,См2,0);
                ТабПозиции.Сумма:=Round(ТабПозиции.Сумма-См2,2);
                ТабПозиции.Скидка:=ТабПозиции.СуммаБезСкидки-ТабПозиции.Сумма;
              EndDo;
            EndIf;
          Finally
            ТабПозиции.Unlock();
          EndTry;
        EndIf;
      EndIf;
    ElseIf aEl.ТипУсловия<>Enum.рознТипыУсловийПродаж.ПрограммноеУсловие Then
      Continue;
    EndIf;
    If IsEmpty(aEl.Условие) Then
      Continue;
    EndIf;
    СпОперация:=List.Create();
    СпОперация["ТипОперации"]:=ТипОперации;
    If ТипОперации=5 Then
      СпОперация["СкидочнаяКартаЧека"]:=Параметр;
    ElseIf ТипОперации=7 Then
      СпОперация["Номенклатура"]:=Параметр0;
      СпОперация["Цена"]:=?(IsDBObject(Параметр),0,Number(Параметр));
    Else
      СпОперация["НомерСтроки"]:=Параметр;
    EndIf;
    СпОперация["Результат"]:=0;
    СпОперация["Сообщение"]:="";
    СпОперация["ТипСообщения"]:=0;
    СпОперация["ЭлементУсловие"]:=aEl;
    СпОперация["Переменные"]:=тУсловияПродаж.Переменные;    
    Try
      Exec(тУсловияПродаж.Модуль);
    Except
      Box("Условие "+aEl+" вызвало ошибку "+PopError()+"! Операция отменена!",Q_STOP);
      Exit 0;
    EndTry;
    //Сообщение?
    If not IsEmpty(СпОперация["Сообщение"]) Then
      Тип:=?(СпОперация["ТипСообщения"]=1,Q_WARNING,?(СпОперация["ТипСообщения"]=2,Q_INFORMATION,Q_STOP));
      Box(СпОперация["Сообщение"],Тип);
    EndIf;
    If СпОперация["Результат"]=1 Then
      Exit 0;
    EndIf;
    If ТипОперации=5 Then
      Параметр:=СпОперация["СкидочнаяКартаЧека"];
    ElseIf ТипОперации=7 Then
      Параметр:=СпОперация["Цена"];
    Else
      Параметр:=СпОперация["НомерСтроки"];
    EndIf;
  EndDo;
  Exit 1;
EndFunction

Function ПроверитьМаркуНаКорректность(аНоменклатура,ByRef аМарка)
  If not ContainsOnlyCharacters(аМарка,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz;:<=>?!""#$%&'(){}*+,-./@_"+Chr($1D,1)) Then
    аМарка:=ReplaceCharacters(аМарка,"йцукенгшщзхъфывапролджэячсмитьбюЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ.,?"";№","qwertyuiop[]asdfghjkl;'zxcvbnm,.QWERTYUIOP{}ASDFGHJKL:""ZXCVBNM<>/?&@$#");
    If not ContainsOnlyCharacters(аМарка,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz;:<=>?!""#$%&'(){}*+,-./@_"+Chr($1D,1)) Then
      Box("Отсканированный код содержит международные символы, которые недопустимы в кодах марок товара! Переключите язык на латиницу при сканировании марки, если сканер подключен в режиме клавиатуры!",Q_STOP);
      Exit 0;
    EndIf;
  EndIf;
  
  //Длины строк марок: ЕГАИС: 150 (новая), пример: 131400????341710180014DCYW2VRDVFBPQRKDDZW5NLZTUWRUJSA6Y54UFQGXUYS4CDHAR4KNNSBA2QDP23T4SKTKL5JP5ZOKOSUNLHVTFHRCXXKFSDLBJP7O63CGPU2LBKRJW4C7WRML????????
  //                          68 (старая), пример: 22N00000????AVMSNOB0OCJ908220010499919QVAMSX3XMVAQJWMMJU0HG6MZQU????
  //                   ИС МП: 29 (сигареты) без Chr(29), пример: 010460043994001221????????005125000 или 010460043994027221????????005125000
  //                          любой размер (другие группы) с Chr(29)
  ФлВернаяМарка:=_And(аНоменклатура.флАлкогольнаяПродукция,_Or(Length(аМарка)=150,_And(Length(аМарка)=68,аМарка[3]="N"))) Or _And(аНоменклатура.флПодлежитПрослеживаемости,_Or(Length(аМарка)=29,Pos(Chr(29),аМарка)>0));
  If not ФлВернаяМарка Then
    Box("Отсканированный код ("+Length(аМарка)+" символов) не совпадает по длине с кодами марок! Пожалуйста отсканируйте именно марку, а не штрихкод товара!",Q_STOP);
    Exit 0;
  EndIf;
  
  Exit 1;
EndFunction


Function ВыполнитьСканированиеМарки(аНоменклатура,ByRef аПартия,ByRef аМарка)
  While 1 Do //Цикл сканирования марки
    глСброситьСостояниеСканеров(НакопленноеСообщение);
    aList:=List.Create();
    aList["Заголовок"]:="Марка от "+аНоменклатура;
//TODO: Удалить 01.01.2025
    aList["КнопкаПропустить"]:=_AND(аНоменклатура.флПодлежитПрослеживаемости,not IsEmpty(аНоменклатура.ГИСМТТоварнаяГруппа),аНоменклатура.ГИСМТТоварнаяГруппа.ВнешнееНаименование="beer");
    aList["Пропустить"]:=0;
//TODO: Удалить 01.01.2025
    LoadModule(10,"Modules\FreeForms\ВнутренниеОбработки\СпециальныеОбработки\СканированиеШтрихкода",aList,0,"Module","Form");
    If aList["Ответ"]<>1 Then
      Exit 0;
    EndIf;
    аМарка:=aList["Результат"];
//TODO: Удалить 01.01.2025
    If aList["Пропустить"]=1 Then
      аМарка:=1;
      Exit 1;
    EndIf;
//TODO: Удалить 01.01.2025
    If not ПроверитьМаркуНаКорректность(аНоменклатура,аМарка) Then
      Continue;
    EndIf;
    
    аМарка2:=глУдалитьКрипточасть(аМарка);
    аМар:=Ref.тмцМаркировкаПозиций;
    If not аМар.Find("~(@Status=0)And((КодМарки=аМарка2)or(КодМарки=аМарка))And(флСостояние=1)And(@IsFolder=0)And(@Parent.@Parent=аНоменклатура)") Then
      //Проверка принадлежности марки отсканированной позиции (исключение -- табак, который может быть заведен с базе несколькими позициями с разными МРЦ)
      If _And(_Or(аНоменклатура.ГИСМТТоварнаяГруппа.Selected()=0,аНоменклатура.ГИСМТТоварнаяГруппа.ВнешнееНаименование<>"tobacco"),
          аМар.FindEx(0,,"~(@Status=0)And((КодМарки=аМарка2)or(КодМарки=аМарка))And(флСостояние=1)And(@IsFolder=0)And(@Parent.@Parent<>аНоменклатура)")) Then
        If лкПользователь.общиеАдминистратор Then
          If AskQuestion("Отсканированная марка принадлежит другой позиции ("+аМар.Parent().Parent()+"). Игнорировать (будет искажать остатки в базе данных)?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
            Continue;
          EndIf;
        Else
          Box("Отсканированная марка принадлежит другой позиции ("+аМар.Parent().Parent()+")!",Q_STOP);
          Continue;
        EndIf;
      ElseIf not ТекущийМагазин.флНеПроверятьНаличиеМарочногоТовара Then
        If лкПользователь.рознУдалениеПозицийПриПродаже Then
          If AskQuestion("Отсканированная марка отсутствует на балансе организации. Игнорировать (нарушение правил)?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
            Continue;
          EndIf;
        Else
          Box("Отсканированная марка отсутствует на балансе организации или не привязана к товару "+аНоменклатура+"!",Q_STOP);
          Continue;
        EndIf;
      EndIf;
      If isEmpty(аПартия) Then
        //Найдем первую попавшуюся партию
        аПартия:=Ref.тмцПартииТМЦ;
        аПартия.UseOrder("Code-");
        If not аПартия.Find("~(@Parent=аНоменклатура)And(@Status<>1)") Then
          Box("Для позиции "+аНоменклатура+" нет ни одной рабочей партии! Невозможно реализовать такой товар!",Q_STOP);
          Exit 0;
        EndIf;
        //ФлМарочная:=1;
      EndIf;
    Else
      аПартия:=аМар.Parent();
      //ФлМарочная:=Max(ФлМарочная,аПартия.флМарочныйУчет);
    EndIf;
    
    //Проверка, не была ли эта марка уже списана
    флОбщепит:=_And(аНоменклатура.флАлкогольнаяПродукция,ТекущийМагазин.флМагазинОбщепита=1);
    флВесовойТовар:=аНоменклатура.флВесовойТовар=1;
    If _And(not флВесовойТовар,not флОбщепит,аМар.FindEx(0,,"~(КодМарки=аМарка)And(флСостояние=2)And(@IsFolder=0)And((Документ..Doc.Реализация.@Status=2)Or(Документ..Doc.КомплектацияТовара.@Status=2))")) Then
      аМар2:=Ref.тмцМаркировкаПозиций;
      If not аМар2.FindEx(0,,"~(@Status=0)And(КодМарки=аМарка)And(флСостояние=2)And(@IsFolder=0)And(IsType(Документ,Doc.ВозвратОтПокупателя))") Then
        Message("Отсканированная марка уже была реализована документом %LINK%",,аМар.Документ);
        If лкПользователь.общиеАдминистратор Then
          If AskQuestion("Отсканированная марка уже была реализована"+?(not isEmpty(аМар.Документ)," "+аМар.Документ.DocDate+" документом "+аМар.Документ.DocNum)+"! "+
              "Игнорировать (может стать причиной штрафа гос. органов)?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
            Continue;
          EndIf;
        Else
          Box("Отсканированная марка уже была реализована"+?(not isEmpty(аМар.Документ)," "+аМар.Документ.DocDate+" документом "+аМар.Документ.DocNum)+"!",Q_STOP);
          Continue;
        EndIf;
      EndIf;
    ElseIf флОбщепит Then
      аМар0:=Ref.РознОбъемныйУчетМаркировки;
      If аМар0.FindEx(0,,"~(КодМарки=аМарка)And(Документ..Doc.КомплектацияТовара.@Status=2)") Then
        Message("Отсканированная марка уже была использована в комплектации %LINK%",,аМар0.Документ);
        Box("Отсканированная марка уже была использована в комплектации "+аМар0.Документ,Q_STOP);
        Continue;
      EndIf;
    EndIf;
    
    Break;
  EndDo;//Цикл сканирования марки
  Exit 1;
EndFunction

Function НайтиМагазинПоНоменклатуре(аНоменклатура,спДополнительныеКассы)
  Result:=ТекущийМагазин;
  If спДополнительныеКассы.Size()>0 Then
    For i:=1 To спДополнительныеКассы.Size() Do
      спДрайверы:=спДополнительныеКассы[i];
      спИнф:=спДрайверы[1];
      If спИнф["НоменклатураМагазина"].Size()>0 Then
        If IsEmpty(спИнф["СпНоменклатураМагазинаПоиск"]) Then
          Сп:=спИнф["НоменклатураМагазина"];
          СпНоменклатураМагазинаПоиск:=Ref.тмцНоменклатура.LoadEx(0,1,,"~(@IsFolder=0)And(@Element IN Сп)");
          СпНоменклатураМагазинаПоиск.Sort();
          спИнф["СпНоменклатураМагазинаПоиск"]:=СпНоменклатураМагазинаПоиск;
        EndIf;
        If спИнф["СпНоменклатураМагазинаПоиск"].Find(аНоменклатура,,1)>0 Then
          Exit спИнф["Магазин"];
        EndIf;
      EndIf;
    EndDo;
  EndIf;
EndFunction


Function ВыбраннаяНоменклатураЯвляетсяМарочной(аНоменклатура,аПартия)
  If IsEmpty(аНоменклатура) Then
    Exit 0;
  EndIf;
  ФлМарочная:=(аНоменклатура.флПодлежитПрослеживаемости)And(аНоменклатура.ГИСМТТоварнаяГруппа.Selected()<>0);
  If not IsEmpty(аПартия) Then
    аНоменклатура:=аПартия.Parent();
    ФлМарочная:=Max(ФлМарочная,аПартия.флМарочныйУчет);
  ElseIf аНоменклатура.флАлкогольнаяПродукция Then
    aEl:=Ref.тмцПартииТМЦ;
    aEl.UseOrder("Code-");
    aList:=aEl.Load(2,"~(@Status=0)And(@Parent=аНоменклатура)");
    If aList.Size()>1 Then
      ФлМарочная:=Max(ФлМарочная,aList[1].флМарочныйУчет,aList[2].флМарочныйУчет);
    ElseIf aList.Size()>0 Then
      ФлМарочная:=Max(ФлМарочная,aList[1].флМарочныйУчет);
    EndIf;
  EndIf;
  Exit флМарочная;
EndFunction



//Результат 0 или 1, вызывается только из основной формы
Function ДобавитьТоварВТаблицуТоваров(ТабПозиции,ФлИзДругойФормы,аНоменклатура,аПартия,аМарка,аКоличество,ФлСпроситьМарку=0,
    ЦеныНаДату=0,МаксимальнаяРозничнаяЦена=0,СпДопПараметры=0);

  Function ОбновитьЦветаСтроки()
    If Number(ТабПозиции.флМарки)=1 Then
      If not ТабПозиции.Column("Статус").isVisible Then
        ТабПозиции.Column("Статус").isVisible:=1;
      EndIf;
      ТМарки:=ТабПозиции.ТМарки;
      Чл:=?(IsEmpty(ТМарки),0,ТМарки.Size());
      ТабПозиции.Статус:=Чл;
      аЦвет:=_CLR_WINDOW;
      If _Or(ТабПозиции.Номенклатура.флВесовойТовар=1,_And(ТабПозиции.Номенклатура.флАлкогольнаяПродукция,ТабПозиции.Магазин.флМагазинОбщепита=1)) Then
        If Чл<>1 Then
          аЦвет:=MixColors(_CLR_WINDOW,_CLR_RED,10);
        EndIf;
      ElseIf Чл<>ТабПозиции.Количество Then
        аЦвет:=MixColors(_CLR_WINDOW,_CLR_RED,10);
      EndIf;
      ТабПозиции.BackgroundColor(ТабПозиции.CurLine,"Статус",аЦвет);
    EndIf;
    If ТабПозиции.Остаток<=0 Then
      ТабПозиции.BackgroundColor(ТабПозиции.CurLine,"Остаток",MixColors(_CLR_WINDOW,_CLR_RED,10));
    EndIf;
    If ТабПозиции.Магазин<>ТекущийМагазин Then
      ТабПозиции.BackgroundColor(ТабПозиции.CurLine,"Номенклатура",MixColors(_CLR_WINDOW,_CLR_GREEN,10));
    EndIf;
    
    If not ФлИзДругойФормы Then
      ОбновитьИнформациюТекущейСтроки();
    EndIf;
  EndFunction

  Function ОбновитьПартииИМарки()
    If not IsEmpty(аПартия) Then
      If IsEmpty(ТабПозиции.ТПартии) Then
        ТПартии:=Tab.Create("Партия,Количество");
        ТабПозиции.ТПартии:=ТПартии;
      Else
        ТПартии:=ТабПозиции.ТПартии;
      EndIf;
      If ТПартии.FindAndGoto(аПартия,,"Партия")=0 Then
        ТПартии.AddLine("Партия,Количество",аПартия,0);
      EndIf;
      ТПартии.Количество:=ТПартии.Количество+?(ТабПозиции.флЛитры=1,аКоличество/ТабПозиции.Номенклатура.ОбъемЛитров,аКоличество);
    EndIf;
    
    If not IsEmpty(аМарка) Then
      If IsEmpty(ТабПозиции.ТМарки) Then
        ТМарки:=Tab.Create("Партия,Марка");
        ТабПозиции.ТМарки:=ТМарки;
      Else
        ТМарки:=ТабПозиции.ТМарки;
      EndIf;
      If _And(IsEmpty(аПартия),аНоменклатура.флПодлежитПрослеживаемости,аНоменклатура.ГИСМТТоварнаяГруппа.Selected()<>0) Then
        Box("Внутренняя ошибка при нахождении партии марочного товара! Обратитесь к администратору!",Q_STOP);
        Exit 0;
      EndIf;
      ТМарки.AddLine("Партия,Марка",аПартия,аМарка);
    EndIf;
    Exit 1;
  EndFunction  

  If _And(not лкПользователь.бухГлавныйБухгалтер,ТекущаяОперация=1) Then
    Box("Вам запрещено добавлять позиции в возврат, возврат можно создать только выбрав документ реализации!",Q_STOP);
    Exit;
  EndIf;
  
  //Определим, марочный ли это учет
  Result:=0;
  ФлМарочная:=ВыбраннаяНоменклатураЯвляетсяМарочной(аНоменклатура,аПартия);
  аКоличество:=?(аКоличество=0,1,аКоличество);
  
//TODO: Удалить 01.01.2025
  If аМарка=1 Then
    ФлМарочная:=0;
  EndIf;
//TODO: Удалить 01.01.2025

  аМагазин:=НайтиМагазинПоНоменклатуре(аНоменклатура,спДополнительныеКассы);
  флВесовойТовар:=_Or(аНоменклатура.флВесовойТовар=1,_And(аНоменклатура.флАлкогольнаяПродукция,аМагазин.флМагазинОбщепита=1));
  If _And(_Or(аКоличество=1,флВесовойТовар),ФлСпроситьМарку,ФлМарочная,IsEmpty(аМарка)) Then
    If not ВыполнитьСканированиеМарки(аНоменклатура,аПартия,аМарка) Then
      Exit;
    EndIf;  
//TODO: Удалить 01.01.2025
    If аМарка=1 Then
      ФлМарочная:=0;
    EndIf;
//TODO: Удалить 01.01.2025 
  ElseIf _And(not IsEmpty(аМарка),аМарка<>1) Then //Возможно, марка пришла извне, функция ВыполнитьСканированиеМарки уже проверяет язык при сканировании
    If not ContainsOnlyCharacters(аМарка,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz;:<=>?!""#$%&'(){}*+,-./@_"+Chr($1D,1)) Then
      аМарка:=ReplaceCharacters(аМарка,"йцукенгшщзхъфывапролджэячсмитьбюЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ.,?"";№","qwertyuiop[]asdfghjkl;'zxcvbnm,.QWERTYUIOP{}ASDFGHJKL:""ZXCVBNM<>/?&@$#");
      If not ContainsOnlyCharacters(аМарка,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz;:<=>?!""#$%&'(){}*+,-./@_"+Chr($1D,1)) Then
        Box("Отсканированный код содержит международные символы, которые недопустимы в кодах марок товара! Переключите язык на латиницу при сканировании марки, если сканер подключен в режиме клавиатуры!",Q_STOP);
        Exit;
      EndIf;
    EndIf;
  EndIf;
  
//TODO: Удалить 01.01.2025
  If аМарка=1 Then
    аНоменклатура.флПодлежитПрослеживаемости:=0;
    аМарка:="";
  EndIf;
//TODO: Удалить 01.01.2025  
  
  If not IsEmpty(аМарка) Then
    If not ФлМарочная Then
      Box("Для товара "+аНоменклатура+" была отсканирована марка, однако на партии товара отсутствует признак марочного учета! Исправьте ошибку до реализации товара!",Q_STOP);
      Exit;
    EndIf;
    If (аКоличество<>1)And(not флВесовойТовар) Then
      аМарка2:=глУдалитьКрипточасть(аМарка);
      аМар:=Ref.тмцМаркировкаПозиций;
      If _Or(аКоличество<=0,not аМар.FindEx(3,,"~((КодМарки=аМарка)Or(КодМарки=аМарка2))And(@IsFolder=1)")) Then
        Box("Для товара "+аНоменклатура+" была отсканирована марка, однако количество товара не равно единице!",Q_STOP);
        Exit;
      EndIf;
    EndIf;
  EndIf;
  
  //Проверим, что марка уже сканировалась
  If not IsEmpty(аМарка) Then
    For i:=1 To ТабПозиции.Size() Do
      ТМаркиТек:=ТабПозиции.Get(i,"ТМарки");
      If not IsEmpty(ТМаркиТек) Then
        If ТМаркиТек.Find(аМарка,,"Марка")>0 Then
          Box("Данная марка уже была отсканирована по позиции "+ТабПозиции.Get(i,"Номенклатура")+", будьте внимательны!",Q_STOP);
          Exit;
        EndIf;
      EndIf;
    EndDo; 
  EndIf;
  
  aNum:=ТабПозиции.FindAndGoto(аНоменклатура,,"Номенклатура");
  If _And(aNum>0,ФлМарочная,флВесовойТовар) Then
    //Для весового товара с марками каждую позицию с новой маркой будем добавлять отдельно, так как одна позиция = одна марка
    If not IsEmpty(аМарка) Then
      Repeat
        If _And(not IsEmpty(ТабПозиции.ТМарки),ТабПозиции.ТМарки.Find(аМарка,,"Марка")) Then
          Break;
        EndIf;
        aNum:=ТабПозиции.FindAndGoto(аНоменклатура,ТабПозиции.CurLine+1,"Номенклатура");
      Until aNum=0;
      If aNum>0 Then
        аМарка:="";
      EndIf;
    Else
      aNum:=0;
    EndIf;
  ElseIf _And(aNum>0,МаксимальнаяРозничнаяЦена>0,Round(ТабПозиции.Цена,2)<>Round(МаксимальнаяРозничнаяЦена,2)) Then
    //Для сигарет каждую позицию с новой ценой будем добавлять отдельно
    ТабПозиции.CurLine:=0;
    aNum:=ТабПозиции.LocateAndGoto("Номенклатура,Цена",аНоменклатура,МаксимальнаяРозничнаяЦена)>0;
  EndIf;
  If aNum=0 Then
    ФлМРЦ:=0;
    зЧл:=Stor.ОстаткиТМЦ.Gross1("Количество",,0,"Склад,Номенклатура",аМагазин.Склад,аНоменклатура);
    If _And(TypeStr(СпДопПараметры)="LIST",_Or(Number(СпДопПараметры["Сумма"])>0,Number(СпДопПараметры["СуммаБезСкидки"])>0)) Then
      зЦ:=Round(?(Number(СпДопПараметры["Сумма"])>0,Number(СпДопПараметры["Сумма"])/аКоличество,Number(СпДопПараметры["СуммаБезСкидки"])/аКоличество),2);
    ElseIf МаксимальнаяРозничнаяЦена>0 Then
      зЦ:=МаксимальнаяРозничнаяЦена;
      ФлМРЦ:=1;
    ElseIf _And(аНоменклатура.флПодлежитПрослеживаемости,Not IsEmpty(аПартия),аПартия.ЦенаМаксимальнаяПродажная>0) Then
      зЦ:=аПартия.ЦенаМаксимальнаяПродажная;
      ФлМРЦ:=1;
    Else
      зЦ:=Max(0,глПолучитьРозничнуюЦену(аНоменклатура,аМагазин.ТипЦенРеализации,аМагазин,1,ЦеныНаДату));
    EndIf;
    If (аНоменклатура.ВидНоменклатуры=Enum.ВидыНоменклатуры.Услуга)And(зЦ=0) Then
      If not AskNumber(зЦ,"Введите цену услуги "+аНоменклатура+":",15,2) Then
        Exit;
      EndIf;
    EndIf;
    If зЦ=0 Then
      зЦ:=аНоменклатура;
      If _Or(not ПроверитьОперациюПоУсловиямПродаж(7,зЦ,1),TypeStr(зЦ)<>"NUMBER",зЦ<=0) Then
        Стр:="Для товара "+аНоменклатура+" не задана розничная цена или не был распечатан ценник! Невозможно реализовать такой товар!";
        Путь:="Temp\Розница\ТоварыБезЦены\";
        If File.CreateDirectory(Путь) Then
          StringToFile(Стр,Путь+"problem_"+FormatDate(Date(),"YYYYmmddhhttss")+".txt",1200,0);
        EndIf;
        Box(Стр,Q_STOP);
        Exit;
      EndIf;
    EndIf;
    If _And(TypeStr(СпДопПараметры)="LIST",_Or(Number(СпДопПараметры["Сумма"])>0,Number(СпДопПараметры["СуммаБезСкидки"])>0)) Then
      зСм:=?(Number(СпДопПараметры["Сумма"])>0,Number(СпДопПараметры["Сумма"]),Number(СпДопПараметры["СуммаБезСкидки"]));
    Else
      зСм:=аКоличество*зЦ;
    EndIf;
    
    //Округление
    If _And(флВесовойТовар,аМагазин.флПараметрыОкругленияВесовыхПозиций>0) Then
      Чл:=спОкруглениеЦен[аМагазин.флПараметрыОкругленияВесовыхПозиций];
      зСм:=((Round(зСм*100)+(Чл-1)) div Чл)*Чл/100;
    EndIf;

    //Для общепита, переведем номенклатуру в литры, если это не весовой товар
    ФлЛитры:=_And(аНоменклатура.флВесовойТовар=0,аНоменклатура.флАлкогольнаяПродукция,аНоменклатура.ОбъемЛитров>0,аМагазин.флМагазинОбщепита=1,not аНоменклатура.флПодлежитПрослеживаемости);
    If ФлЛитры Then
      аКоличество:=аКоличество*аНоменклатура.ОбъемЛитров;
      зЦ:=Round(зСм/аКоличество,2);
    EndIf;
    
    Фл:=ТабПозиции.IsLocked();
    If not Фл Then
      ТабПозиции.Lock();
    EndIf;
    Try
      ТабПозиции.AddLine("Номенклатура,Остаток,Количество,Цена,флМарки,флМРЦ,флЛитры,Сумма,Магазин",аНоменклатура,зЧл,аКоличество,зЦ,ФлМарочная,ФлМРЦ,ФлЛитры,зСм,аМагазин);
      If _And(TypeStr(СпДопПараметры)="LIST",Number(СпДопПараметры["СуммаБезСкидки"])>0) Then
        ТабПозиции.СуммаБезСкидки:=Number(СпДопПараметры["СуммаБезСкидки"]);
      Else
        ТабПозиции.СуммаБезСкидки:=ТабПозиции.Цена*ТабПозиции.Количество;
      EndIf;
      ТабПозиции.Скидка:=ТабПозиции.СуммаБезСкидки-ТабПозиции.Сумма;
      
      аСтрока:=ТабПозиции.Size();
      If ПроверитьОперациюПоУсловиямПродаж(0,аСтрока) Then
        If not ОбновитьПартииИМарки() Then
          ТабПозиции.Remove(аСтрока);
        Else
          Result:=1;
          ТабПозиции.SelectedLine:=ТабПозиции.Size();
          ОбновитьЦветаСтроки();
        EndIf;
      Else
        ТабПозиции.Remove(аСтрока);
      EndIf;
    Finally
      If not Фл Then
        ТабПозиции.UnLock();
      EndIf;
    EndTry;
  Else
    Фл:=ТабПозиции.IsLocked();
    If not Фл Then
      ТабПозиции.Lock();
    EndIf;
    Try
      //Сдвигаем в конец списка
      If ТабПозиции.CurLine<ТабПозиции.Size() Then
        ТабПозиции.Move(ТабПозиции.CurLine,ТабПозиции.Size()-ТабПозиции.CurLine);
        ТабПозиции.CurLine:=ТабПозиции.Size();
      EndIf;
      ТабПозиции.SelectedLine:=ТабПозиции.Size();
      ФлНеУвеличивать:=0;
//TODO: Удалить 01.01.2025
      If IsEmpty(аМарка)=Number(ТабПозиции.флМарки) Then
        Box("Не смешивайте марочное и не марочное пиво в одном чеке!",Q_STOP);
        Exit 0;
      EndIf;
//TODO: Удалить 01.01.2025           
      ТабПозиции.флМарки:=Max(ТабПозиции.флМарки,ФлМарочная);
      If not IsEmpty(аМарка) Then
        If _And(IsEmpty(ТабПозиции.ТМарки),ТабПозиции.Количество>0) Then
          ФлНеУвеличивать:=1;
        ElseIf _And(not IsEmpty(ТабПозиции.ТМарки),ТабПозиции.ТМарки.Size()<ТабПозиции.Количество) Then
          ФлНеУвеличивать:=1;
        EndIf;
      EndIf;
      If not ОбновитьПартииИМарки() Then
        Exit 0;
      EndIf;
      
      If not ФлНеУвеличивать Then
        аСтрока:=ТабПозиции.CurLine;
        бКоличество:=ТабПозиции.Количество;
        бСуммаБезСкидки:=ТабПозиции.СуммаБезСкидки;
        бСумма:=ТабПозиции.Сумма;
        
        //TODO: текущие скидки
        аКоличество:=?(ТабПозиции.флЛитры,аКоличество*аНоменклатура.ОбъемЛитров,аКоличество);
        ТабПозиции.Количество:=ТабПозиции.Количество+аКоличество;
        ФлМРЦ:=0;
        If МаксимальнаяРозничнаяЦена>0 Then
          зЦ:=МаксимальнаяРозничнаяЦена;
          ФлМРЦ:=1;
        ElseIf _And(аНоменклатура.флПодлежитПрослеживаемости,Not IsEmpty(аПартия),аПартия.ЦенаМаксимальнаяПродажная>0) Then
          зЦ:=аПартия.ЦенаМаксимальнаяПродажная;
          ФлМРЦ:=1;
        Else
          зЦ:=ТабПозиции.Цена;
        EndIf;
        Сумма:=ТабПозиции.Сумма+аКоличество*зЦ;
        If ФлМРЦ Then
          ТабПозиции.ФлМРЦ:=1;
        EndIf;
        
        //Округление
        If _And(флВесовойТовар,аМагазин.флПараметрыОкругленияВесовыхПозиций>0) Then
          Чл:=спОкруглениеЦен[аМагазин.флПараметрыОкругленияВесовыхПозиций];
          Сумма:=((Round(Сумма*100)+(Чл-1)) div Чл)*Чл/100;
        EndIf;
        
        ТабПозиции.Сумма:=Сумма;
        ТабПозиции.СуммаБезСкидки:=ТабПозиции.Цена*ТабПозиции.Количество;
        ТабПозиции.Скидка:=ТабПозиции.СуммаБезСкидки-ТабПозиции.Сумма;
        ТАкции:=Nothing;
        If not IsEmpty(ТабПозиции.ТАкции) Then
          ТАкции:=ТабПозиции.ТАкции.Copy();
        EndIf;
        
        If ПроверитьОперациюПоУсловиямПродаж(2,аСтрока) Then
          Result:=1;
        Else
          //Отменим изменения
          ТабПозиции.CurLine:=аСтрока;
          ТабПозиции.Количество:=бКоличество;
          ТабПозиции.СуммаБезСкидки:=бСуммаБезСкидки;
          ТабПозиции.Сумма:=бСумма;
          ТабПозиции.ТАкции:=ТАкции;
          ПроверитьОперациюПоУсловиямПродаж(2,аСтрока);
          Exit;
        EndIf;
      EndIf;
      ОбновитьЦветаСтроки();
    Finally
      If not Фл Then
        ТабПозиции.UnLock();
      EndIf;
    EndTry;
  EndIf;
EndFunction


Function ВыбратьМаксимальнуюПродажнуюЦену(Номенклатура,ByRef аПартия,ByRef аМарка,ФлБезВыбораПартии=0,ByRef аКоличество=0)
  If IsEmpty(аМарка) Then
    If not ВыполнитьСканированиеМарки(Номенклатура,аПартия,аМарка) Then
      Exit -1;
    EndIf;
  EndIf;
  
  //МРЦ блоков сигарет
  If MatchRe("01[0-9]{14}21.{7}"+Chr(29)+"8005[0-9]{6}"+Chr(29)+"93.{4}",аМарка)>0 Then
    рМРЦ:="(?<=8005)[0-9]{6}";
    стрМРЦ:=MatchRe(рМРЦ,аМарка,,,1)[1];
    Exit Number(стрМРЦ)/100;
  EndIf;
  
  //Получение цены из марки сигарет
  While Length(аМарка)=29 Do
    СтрокаМРЦ:=Mid(аМарка,22,4); 
    Символы:="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!""%&'*+-./_,:;=<>?";
    
    зЦ:=0;
    Множитель:=1;
    For Индекс:=1 To 4 Do      
     ИндексСимвола:=Pos(СтрокаМРЦ[5-Индекс],Символы)-1;
      If ИндексСимвола<0 Then
        Break;
      EndIf;
      зЦ:=зЦ+ИндексСимвола*Множитель;
      Множитель:=Множитель*80;
    EndDo;
   
    //50..10000
    If (зЦ>=5000)And(зЦ<=1000000)And(зЦ%100=0) Then
      Exit зЦ/100;
    EndIf;
    Break;
  EndDo;
  
  If ФлБезВыбораПартии Then
    Exit 0;
  EndIf;

  //Подготовка
  аМагазин:=НайтиМагазинПоНоменклатуре(Номенклатура,спДополнительныеКассы);
  aTab:=Stor.ОстаткиТМЦ.Gross("Партия","Количество",,0,"Склад,Номенклатура",аМагазин.Склад,Номенклатура);
  СпПартии:=List.Create();
  aTab.CopyTo(СпПартии,,,"Партия");
  aEl:=Ref.тмцПартииТМЦ;
  aEl.UseOrder("Дата-");
  ДатаНач:=Date()-365;
  aList:=aEl.Load(0,"~(@Status=0)And(@Parent=Номенклатура)And((Дата<ДатаНач)Or(@ELEMENT IN СпПартии))And(ЦенаМаксимальнаяПродажная>0)");
  For i:=1 To aList.Size() Do
    aList[i]:=aList[i].ЦенаМаксимальнаяПродажная;
  EndDo;
  aList.Group();
  aList.RemoveValue(0);
  If aList.Size()=0 Then
    Exit 0;
  EndIf;
  
  aTab.AddColumn("Цена");
  aTab.Select();
  While aTab.Next() Do
    aTab.Цена:=aTab.Партия.ЦенаМаксимальнаяПродажная;
  EndDo;
  aTab.Group("Цена","Количество");
  
  Таб:=Tab.Create("Номенклатура,Остаток,Количество,Элемент,Цена");
  For i:=1 To aList.Size() Do
    Таб.AddLine("Номенклатура,Элемент,Цена,Остаток",Номенклатура,aList[i],aList[i],Number(aTab.FindAndGet("Количество",aList[i],0,"Цена")));
  EndDo;
  aList:=List.Create();
  aList.Add(Таб,"Номенклатура");
  aList.Add(аМагазин.Склад,"Склад");
  aList.Add(аМагазин.ТипЦенРеализации,"ТипЦен");
  aList.Add(аМагазин,"Магазин");
  aList.Add(1,"ФлПартии");
  aList.Add(1,"БезПоиска");
  If not IsEmpty(ПоискТабПозиции) Then
    aList.Add(ПоискТабПозиции,"ТабПозиции");
  Else
    aList.Add(Form.ТабПозиции.Value,"ТабПозиции");
  EndIf;
  LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборТовараИзСписка");
  If aList["Ответ"]<>1 Then
    Exit -1;
  EndIf;
  Exit aList["Элемент"];
EndFunction

Function СозданиеДокументаКомплектации(Магазин,аКомплектация);
  аНоменклатура:=аКомплектация.Parent();
  aList:=List.Create();
  aList.Add("Количество комплектов","Описание");
  aList.Add("Производство "+аНоменклатура,"Заголовок");
  aList.Add("НЕДОСТАТОЧНО ОСТАТКОВ! Выполняется производство товара "+аНоменклатура+" по комплектации "+аКомплектация,"Номенклатура");
  LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВвестиЧисло");  
  If aList["Ответ"]<>1 Then
    Exit 0;
  EndIf;
  ВсегоЧл:=Number(aList["Результат"]);
  If ВсегоЧл<1 Then
    Exit;
  EndIf;
  аДок:=Doc.КомплектацияТовара;
  аДок.New();
  аДок.DocDate:=Date();
  аДок.Автор:=глПользователь;
  аДок.ЮрЛицо:=Магазин.ЮрЛицо;
  аДок.Магазин:=Магазин;
  глУстановитьНовыйНомер(аДок);
  аДок.Склад:=Магазин.Склад;
  аДок.КодОперации:=Enum.коКомплектацияТовара.КомплектацияТовара;
  аДок.СпособКомплектации:=аКомплектация;
  аДок.ТипЦен:=Магазин.ТипЦенРеализации;
  аДок.КомплектуемыйТовар:=аНоменклатура;
  bTab1:=аДок.LineParts("ВходящаяНоменклатура");
  bTab2:=аДок.LineParts("ИсходящаяНоменклатура");
  ТМарки:=Tab.Create("Партия,Ящик,Марка");
  aTab:=аКомплектация.LineParts("ИсходящаяНоменклатура");
  If aTab.Size()=0 Then
    aTab:=aTab.Copy();
    aTab.AddLine("Номенклатура,Количество",аНоменклатура,1);
  EndIf;
  aTab.Select();
  While aTab.Next() Do
    bTab2.AddLine("Номенклатура,Количество,СтавкаНДС",aTab.Номенклатура,aTab.Количество*ВсегоЧл,глСтавкаНДСНоменклатуры(Магазин.ЮрЛицо,aTab.Номенклатура));
    bTab2.Цена:=Max(0,глПолучитьРозничнуюЦену(aTab.Номенклатура,Магазин.ТипЦенРеализации,Магазин,1,Date()));
    bTab2.Сумма:=bTab2.Цена*bTab2.Количество;
    глПересчитатьСтроку(аДок,bTab2,"Количество2@СуммаНДС");
  EndDo;
  
  СпБлокировка:=List.Create();
  Try
    //Проход по товару комплектации, блокировка элементов 0 справочника рознОбъемныйУчетМаркировки, запрос марок, для полного погашения объема, создание документа
    aTab:=аКомплектация.LineParts("ВходящаяНоменклатура");
    aTab.Select();
    While aTab.Next() Do
      Repeat
        If _And(aTab.Номенклатура.флАлкогольнаяПродукция,aTab.Номенклатура.флПартионныйУчет) Then //Pos(Left(aTab.Номенклатура.ЕГАИСКодАП,3),"500,510,520,261,262,263")=0
          аНоменклатура:=aTab.Номенклатура;
          If аНоменклатура.ОбъемЛитров=0 Then
            Box("Для номенклатуры "+aTab.Номенклатура+" не указан объем в литрах!",Q_STOP);
            Exit 3;
          EndIf;
          аПартия:=Ref.тмцПартииТМЦ;
          аПартия.UseOrder("Code-");
          If not аПартия.Find("~(@Parent=аНоменклатура)And(@Status<>1)") Then
            Box("Для позиции "+аНоменклатура+" не созданы партии!",Q_STOP);
            Exit 3;
          EndIf;
          If not аПартия.флБезУпаковки Then //Кеговое пиво пропускаем, ЕГАИС не имеет к нему отношения
            Break;
          EndIf;
        EndIf;
        bTab1.AddLine("Номенклатура,Количество,СтавкаНДС",aTab.Номенклатура,aTab.Количество*ВсегоЧл,глСтавкаНДСНоменклатуры(Магазин.ЮрЛицо,aTab.Номенклатура));
        bTab1.Цена:=Max(0,глПолучитьРозничнуюЦену(aTab.Номенклатура,Магазин.ТипЦенРеализации,Магазин,1,Date()));
        bTab1.Сумма:=bTab1.Цена*bTab1.Количество;
        глПересчитатьСтроку(аДок,bTab1,"Количество2@СуммаНДС");
        Continue 2;
      Until 0;
      
      //Марочный алкоголь ЕГАИС
      Кл:=aTab.Количество*аНоменклатура.ОбъемЛитров*ВсегоЧл;
      While Кл>0 Do
        While 1 Do
          aList:=List.Create();
          aList["Заголовок"]:="Марка от "+аНоменклатура+" (нужно: "+Кл+" л.)";
          LoadModule(10,"Modules\FreeForms\ВнутренниеОбработки\СпециальныеОбработки\СканированиеШтрихкода",aList,0,"Module","Form");
          If aList["Ответ"]<>1 Then
            Exit 0;
          EndIf;
          СтрКодМарки:=aList["Результат"];
          If not ПроверитьМаркуНаКорректность(аНоменклатура,СтрКодМарки) Then
            Continue;
          EndIf;
          
          //Проверим, использовалась ли марка в реализациях
          аМар0:=Ref.тмцМаркировкаПозиций;
          If аМар0.FindEx(0,,"~(КодМарки=СтрКодМарки)And(флСостояние=2)And(@IsFolder=0)And(Документ..Doc.Реализация.@Status=2)") Then
            Message("Отсканированная марка уже была использована в реализации %LINK%",,аМар0.Документ);
            Box("Отсканированная марка уже была использована в реализации "+аМар0.Документ,Q_STOP);
            Continue;
          EndIf;
          
          If ТМарки.Find(СтрКодМарки,,"Марка")>0 Then
            Box("Дублирующийся код марки!",Q_STOP);
            Continue;
          EndIf;
          Break;
        EndDo;
        
        //Ищем партию марки
        бПартия:=0;
        аМрк:=Ref.тмцМаркировкаПозиций;
        If аМрк.Find("~(@Status=0)And(КодМарки=СтрКодМарки)And(флСостояние=1)And(@IsFolder=0)") Then
          бПартия:=аМрк.Parent();
        EndIf;
        //Ищем остаток марки, блокируем
        аМрк:=Ref.рознОбъемныйУчетМаркировки;
        ЧлОстаток:=аНоменклатура.ОбъемЛитров;
        If аМрк.Find("КодМарки,флТипЭлемента,@Parent",СтрКодМарки,0,аНоменклатура) Then
          ЧлОстаток:=аМрк.Количество;
          If Round(ЧлОстаток,6)<=0 Then
            Box("По данным программы на данной марке не осталось остатка! Используйте другую марку!",Q_STOP);
            Continue;
          EndIf;
          аПольз:="";аМаш:="";аВремя:="";
          If аМрк.Lock(аПольз,аМаш,аВремя)=0 Then
            Box("Невозможно заблокировать элемент марки с объемом номенклатуры "+аНоменклатура+", так как в данный момент он занят пользователем "+аПольз+" на "+аМаш+" в "+аВремя+"! Попробуйте выполнить действие еще раз",Q_STOP);
            Exit 0;
          EndIf;
          СпБлокировка.Add(аМрк);
        EndIf;
        ТМарки.AddLine("Партия,Марка",CoalesceEx(2,бПартия,аПартия),СтрКодМарки);
        Кл2:=Min(Кл,ЧлОстаток);
        Кл:=Round(Кл-Кл2,6);
        If Кл2>0 Then
          bTab1.AddLine("Номенклатура,Партия,Количество,СтавкаНДС",аНоменклатура,ТМарки.Партия,Кл2/аНоменклатура.ОбъемЛитров,глСтавкаНДСНоменклатуры(Магазин.ЮрЛицо,аНоменклатура));
          bTab1.Цена:=Max(0,глПолучитьРозничнуюЦену(аНоменклатура,Магазин.ТипЦенРеализации,Магазин,1,Date()));
          bTab1.Сумма:=bTab1.Цена*bTab1.Количество;
          глПересчитатьСтроку(аДок,bTab1,"Количество2@СуммаНДС");
        EndIf;
      EndDo;
    EndDo;
    аДок.СуммаВзаиморасчетов:=bTab1.Sum("Сумма");
    
    ФлОк:=0;
    BeginTransaction();
    Try
      аДок.Save();
      If ТМарки.Size()>0 Then
        If not глМаркиЗарегистрироватьДокумент(аДок,ТМарки,3,,1) Then
          Raise "Невозможно сохранить марки в документе!";
          Exit;
        EndIf;
      EndIf;
      
      Сп:=List.Create();
      Сп["УровеньФорсирования"]:=1;
      Сп["ЗаблокированныеМаркиОбъема"]:=СпБлокировка;
      If not глОбработать(аДок,Сп) Then
        Raise "Невозможно обработать документ!";
        Exit;
      EndIf;
      флОк:=1;
    Finally
      If флОк Then
        CommitTransaction();
      Else
        Стр:=PopError();
        SuppressException();
        RollbackTransaction();
        If not IsEmpty(Стр) Then
          Box(Стр,Q_STOP);
        EndIf;
        Exit 0;
      EndIf;
    EndTry;
  Finally
    //Разблокировка
    MassUnlock(СпБлокировка);
  EndTry;
  Exit 1;
EndFunction



//Результат: 0 -- код не найден
//           1 -- код найден, результат в переменных
//           2 -- пользователь вызвал диалог "поиск"
//           3 -- пользователь отказался от сканирования (мгновенная отмена)
//           4 -- найден ящик с товаром ЕГАИС, возвращает таблицу в аНоменклатура с столбцами "Номенклатура,Партия,Марка,Количество" 
//
//Комментарий аМарка: если марка не передается этой функции, функция может инициировать запрос по ней, если считает, что товар марочный.
//                    После вызова этой функции обычно вызывается ДобавитьТоварВТаблицуТоваров, которая не будет запращивать марку, если та уже отсканирована
//                    Процедура ДобавитьТоварВТаблицуТоваров не будет проверять, принадлежит ли марка ящику (папке марок) или это обыная марка,
//                    данная процедура выполняет такую проверку
//
Function РазобратьТоварныйШтрихкод(СтрКод,ByRef аНоменклатура,ByRef аПартия,ByRef аМарка,ByRef аКоличество,ByRef аМРЦ)

  Function ПроверитьМаску(Стр,СтрМаска,ByRef РезКод,ByRef РезМасса)
    If Length(Стр)<>Length(СтрМаска) Then
      Exit 0;
    EndIf;
    //Стр2:=ReplaceCharacters(СтрМаска,"PKGC","????");
    СтрМаска:=ReplaceCharacters(СтрМаска,"C","P");
    РезКод:="";
    РезМасса:=0;
    РезМассаГраммы:=0;
    РезМассаГраммыД:=1;
    For i:=1 To Length(СтрМаска) Do
      Симв:=СтрМаска[i];
      If Симв="?" Then
        Continue;
      ElseIf Симв="P" Then
        РезКод:=РезКод+Стр[i];
      ElseIf Симв="K" Then
        РезМасса:=РезМасса*10+Number(Стр[i]);
      ElseIf Симв="G" Then
        РезМассаГраммы:=РезМассаГраммы*10+Number(Стр[i]);
        РезМассаГраммыД:=РезМассаГраммыД*10;
      ElseIf Симв<>Стр[i] Then
        Exit 0;
      EndIf;
    EndDo;
    РезМасса:=РезМасса+РезМассаГраммы/РезМассаГраммыД;
    Exit 1;
  EndFunction
  
  //Пример маски весового товара: 
  //22PPPPPKKGGG? - PPPPP - PLU -- код товара, KK.GGG -- масса товара (в ед. товара), ? -- контрольная цифра
  //Пример маски штучного товара:
  //23CCCCCCCCCC? - CCCCCCCCCC - Код товара (невозможно кодировать товары с кодами больше 9999999999), ? -- контрольная цифра
  аМРЦ:=0;
  СтрМаска:=ТекущийМагазин.МаскаВесовогоТовара;
  СтрМаска2:=ТекущийМагазин.МаскаВесовогоТовара2;
  СтрМаска3:=ТекущийМагазин.МаскаШтучногоТовара;
  Код:=0;
  Масса:=0;
  If _Or(_And(СтрМаска<>"",ПроверитьМаску(СтрКод,СтрМаска,Код,Масса)),_And(СтрМаска2<>"",ПроверитьМаску(СтрКод,СтрМаска2,Код,Масса))) Then
    aPLU:=Number(Код);
    If aPLU>0 Then
      aEl:=Ref.тмцPLUКоды;
      If Not aEl.Find("~(Магазин=ТекущийМагазин)And(PLUКод=aPLU)") Then
        Box("Весовой товар с этим штрихкодом не найден в базе!",Q_STOP);
        Exit 0;
      EndIf;
      аНоменклатура:=aEl.Parent();
      аКоличество:=Масса;
    EndIf;
  ElseIf _And(СтрМаска3<>"",ПроверитьМаску(СтрКод,СтрМаска3,Код,Масса)) Then
    Дл:=Struct.Ref("тмцНоменклатура").Props("Code").DataType;
    TearStr(Дл,"STRING.");
    Код:=Right("000000000000000"+Trim(Код),Number(Дл));
    aEl:=Ref.тмцНоменклатура;
    If aEl.Find("Code",Код) Then
      аНоменклатура:=aEl;
    EndIf;
  EndIf;
  
  //Обычный штрихкод
  If IsEmpty(аПартия)+IsEmpty(аНоменклатура)=2 Then
    аШК:=Ref.тмцШтрихкоды;
    Сп:=аШК.Load(0,"~(@Status=0)And(Name=СтрКод)And((Коэффициент=1)Or(Коэффициент=0))"); 
        
    //Попытка извлечь штрихкод из марки
    If Сп.Size()=0 Then
      СтрШК:=СтрКод;
      If Length(СтрШК)=29 Then
        СтрШК:=Left(СтрШК,14);
      ElseIf Pos(Chr(29),СтрШК)>0 Then
        СтрШК:=Right(Left(СтрШК,16),14);
      Endif;
      СтрШК:=ReplaceRe(СтрШК,"^(?:0+(?=[0-9])|0+(?=0$))","");
      Сп:=Ref.тмцШтрихкоды.Load(0,"~(@Status=0)And(Name=СтрШК)And((Коэффициент=1)Or(Коэффициент=0))");
      If Сп.Size()>0 Then
        аМарка:=СтрКод;
      EndIf;
    EndIf;
    
    //Проверка, принадлежит ли штрихкод справочнику рознКомплектацияНоменклатуры (коктейли)
    If _And(Сп.Size()>0,DBObjectName(Сп[1].Parent())="рознКомплектацияНоменклатуры",ТекущийМагазин.флМагазинОбщепита=1) Then
      аКомплектация:=Сп[1].Parent();
      аНоменклатура:=аКомплектация.Parent();
      аМагазин:=НайтиМагазинПоНоменклатуре(аНоменклатура,спДополнительныеКассы);
      зЧл:=Stor.ОстаткиТМЦ.Gross1("Количество",,0,"Склад,Номенклатура",аМагазин.Склад,аНоменклатура);
      If зЧл<=0.01 Then
        If not СозданиеДокументаКомплектации(аМагазин,аКомплектация) Then
          Exit 3;
        EndIf;
        If AskQuestion("Добавить созданный комплект в чек?",Q_QUESTION+Q_YESNO,R_YES)<>R_YES Then
          Exit 3;
        EndIf;
      EndIf;
    ElseIf Сп.Size()=1 Then
      аШК:=Сп[1];
      аПартия:=?(аШК.Parent().DBName()="тмцПартииТМЦ",аШК.Parent(),0);
      аНоменклатура:=?(аШК.Parent().DBName()="тмцНоменклатура",аШК.Parent(),?(IsEmpty(аПартия),0,аПартия.Parent()));
      If _And(IsEmpty(аПартия),not IsEmpty(аНоменклатура),аНоменклатура.флПодлежитПрослеживаемости,аНоменклатура.ГИСМТТоварнаяГруппа.ВнешнееНаименование="tobacco") Then
        аМРЦ:=ВыбратьМаксимальнуюПродажнуюЦену(аНоменклатура,аПартия,аМарка);
        If аМРЦ<0 Then
          Exit 3;
        EndIf;
      EndIf;
    ElseIf Сп.Size()>1 Then
      ФлВсеСигареты:=1;
      Сп2:=List.Create();
      For i:=1 To Сп.Size() Do
        aEl:=Сп[i].Parent();
        aEl:=?(aEl.DBName()="тмцПартииТМЦ",aEl.Parent(),aEl);
        ФлВсеСигареты:=_And(ФлВсеСигареты,not IsEmpty(aEl),aEl.флПодлежитПрослеживаемости,aEl.ГИСМТТоварнаяГруппа.ВнешнееНаименование="tobacco");
        Сп2.Add(aEl);
      EndDo;
      Сп2.Group();

      If Сп2.Size()>1 Then
        аНоменклатура:=0;
        зН:=0;
        аМагазин:=НайтиМагазинПоНоменклатуре(Сп2[1],спДополнительныеКассы);
        Таб:=Tab.Create("Номенклатура,Количество,Элемент,Цена");
        ТабОст:=Stor.ОстаткиТМЦ.Gross("Номенклатура","Количество",,0,"Номенклатура",Сп2);
        ФлШтучВес:=0;
        //Далее проверяются исключительные случаи:
        //1. Все сигареты (сложности: одна позиция может делиться на разные элементы из-за разных МРЦ, МРЦ может быть получено из марки, и иногда в марке указан ноль). 
        //   Попытаться выбрать нужную позицию и партию автоматически или вывести список, устранив как можно больше лишних
        //2. Группа штучных позиций с остатками и весовых без остатков или наоборот
        //   Оставить только группу, на которой есть остатки (уменьшение путаницы при вскрытии, расфасовке и пр.)
        For i:=1 To Сп2.Size() Do
          зН2:=Сп2[i];
          ТабОст.CurLine:=0;
          зКл:=Number(ТабОст.FindAndGet("Количество",зН2,,"Номенклатура"));
          If _Or(not ФлВсеСигареты,зКл>0,IsEmpty(зН)) Then
            зЦ:=Max(0,глПолучитьРозничнуюЦену(зН2,аМагазин.ТипЦенРеализации,аМагазин,1));
            If (зЦ>0)And((IsEmpty(зН))Or(зКл>0)) Then
              зН:=зН2;
            EndIf;
            If ((ФлВсеСигареты)And(зКл>0))Or(зЦ>0) Then
              Таб.AddLine("Номенклатура,Цена,Количество",зН2,зЦ,зКл);
            EndIf;
          EndIf;
          If _And(ФлШтучВес=2,not зН2.флВесовойТовар,зКл>0) Then
            ФлШтучВес:=-1;
          ElseIf _And(ФлШтучВес=1,зН2.флВесовойТовар,зКл>0) Then
            ФлШтучВес:=-1;
          ElseIf _And(ФлШтучВес=0,зКл>0) Then
            ФлШтучВес:=зН2.флВесовойТовар+1;
          EndIf;
        EndDo;
        If ФлШтучВес>0 Then//Удаляем лишние позиции для случая №2
          Таб.Select();
          While Таб.Next() Do
            If ФлШтучВес<>Таб.Номенклатура.флВесовойТовар+1 Then
              Таб.Remove(Таб.CurLine);
              Таб.CurLine:=Таб.CurLine-1;
            EndIf;
          EndDo;
        EndIf;
        
        Таб.Sort("Количество-,Номенклатура");
        If Таб.Size()=0 Then
          Таб.AddLine("Номенклатура,Цена",Сп2[1],0);
        EndIf;
        If IsEmpty(зН) Then
          зН:=Таб["Номенклатура",1];
        EndIf;
        
        If ФлВсеСигареты Then
          //Исходим из того, что один штрихкод не будет закреплен за разными сигаретами,
          //  поэтому, это одна и та же позиция, разделенная на разные МРЦ
          бПартия:=аПартия;
          аМРЦ:=ВыбратьМаксимальнуюПродажнуюЦену(зН,бПартия,аМарка,1);
          If аМРЦ<0 Then
            Exit 3;
          EndIf;
          If аМРЦ>0 Then
            If _AND(Таб.FindAndGoto(аМРЦ,,"Цена")>0,Таб.Количество>0) Then
              аНоменклатура:=Таб.Номенклатура;
            Else
              аНоменклатура:=зН;
            EndIf;
            аПартия:=бПартия;
            
            If _Or(IsEmpty(аПартия),аПартия.Parent()<>аНоменклатура) Then
              //Найдем первую попавшуюся партию
              аПартия:=Ref.тмцПартииТМЦ;
              аПартия.UseOrder("Code-");
              If not аПартия.Find("~(@Parent=аНоменклатура)And(@Status<>1)And((ЦенаМаксимальнаяПродажная=0)Or(ЦенаМаксимальнаяПродажная=аМРЦ))") Then
                Box("Для позиции "+аНоменклатура+" не найдена партия с МРЦ "+аМРЦ+", либо без указания МРЦ! Невозможно реализовать такой товар!",Q_STOP);
                Exit 3;
              EndIf;
            EndIf;
          EndIf;
        Endif;
      
        If IsEmpty(аНоменклатура) Then
          Таб.CurLine:=0;
          Таб.RemoveLocated("Цена",0);
          If Таб.Size()>1 Then
            aList:=List.Create();
            aList.Add(Таб,"Номенклатура");
            aList.Add(аМагазин.Склад,"Склад");
            aList.Add(аМагазин.ТипЦенРеализации,"ТипЦен");
            aList.Add(аМагазин,"Магазин");
            If not IsEmpty(ПоискТабПозиции) Then
              aList.Add(ПоискТабПозиции,"ТабПозиции");
            Else
              aList.Add(Form.ТабПозиции.Value,"ТабПозиции");
            EndIf;
            LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборТовараИзСписка");
            If aList["Ответ"]=2 Then
              Exit 2;
            ElseIf aList["Ответ"]<>1 Then
              Exit 3;
            EndIf;
            аНоменклатура:=aList["Номенклатура"];
          ElseIf Таб.Size()=1 Then
            аНоменклатура:=Таб["Номенклатура",1];
          Else
            аНоменклатура:=зН;
          EndIf;
          If _And(not IsEmpty(аНоменклатура),аНоменклатура.флПодлежитПрослеживаемости,аНоменклатура.ГИСМТТоварнаяГруппа.ВнешнееНаименование="tobacco") Then
            аМРЦ:=ВыбратьМаксимальнуюПродажнуюЦену(аНоменклатура,аПартия,аМарка);
            If аМРЦ<0 Then
              Exit 3;
            EndIf;
          EndIf;
        EndIf;
        If _And(not IsEmpty(аПартия),аПартия.Parent()<>аНоменклатура) Then
          аПартия:=0;
        EndIf;
      Else
        аНоменклатура:=Сп2[1];
        If _And(аНоменклатура.флПодлежитПрослеживаемости,аНоменклатура.ГИСМТТоварнаяГруппа.ВнешнееНаименование="tobacco") Then
          аМРЦ:=ВыбратьМаксимальнуюПродажнуюЦену(аНоменклатура,аПартия,аМарка);
          If аМРЦ<0 Then
            Exit 3;
          EndIf;
        EndIf;
      EndIf;
    EndIf;
    
    //Убедимся, что для марочного товара ГИСМТ всегда выбрана партия
    If _And(isEmpty(аПартия),not IsEmpty(аНоменклатура),аНоменклатура.флПодлежитПрослеживаемости,аНоменклатура.ГИСМТТоварнаяГруппа.Selected()<>0) Then
      //Найдем первую попавшуюся партию
      аПартия:=Ref.тмцПартииТМЦ;
      аПартия.UseOrder("Code-");
      If not аПартия.Find("~(@Parent=аНоменклатура)And(@Status<>1)") Then
        Box("Для позиции "+аНоменклатура+" нет ни одной рабочей партии! Невозможно реализовать такой товар!",Q_STOP);
        Exit 3;
      EndIf;
    EndIf;
    
    ФлОбщепит:=_And(not isEmpty(аНоменклатура),аНоменклатура.флАлкогольнаяПродукция,ТекущийМагазин.флМагазинОбщепита=1,not аНоменклатура.флПодлежитПрослеживаемости);
    If _And(not IsEmpty(аНоменклатура),_Or(аНоменклатура.флВесовойТовар=1,ФлОбщепит)) Then
      aList:=List.Create();
      aList.Add(аНоменклатура,"Номенклатура");
      If ФлОбщепит Then
        If аНоменклатура.ОбъемЛитров=0 Then
          Box("В номенклатуре "+аНоменклатура+" ("+аНоменклатура.Code+") не заполнен объем штучной позиции! Невозможно конвертировать позиции в литры!",Q_STOP);
          Exit 3;
        EndIf;
        зЕд:=Ref.тмцЕдиницыИзмерения;
        If not зЕд.Find("Name","л") Then
          Box("В БД отсутвует единица измерения литр!",Q_STOP);
          Exit 3;
        EndIf;
        aList.Add(зЕд,"Единица");
      EndIf;
      LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВвестиМассу");  
      If aList["Ответ"]=1 Then
        аКоличество:=Max(0,Number(aList["Количество"]));
        If ФлОбщепит Then
          If аКоличество>аНоменклатура.ОбъемЛитров Then
            Box("Введенное количество превышает объем бутылки!",Q_STOP);
            аНоменклатура:=0;
            аПартия:=0;
            Exit 3;
          EndIf;
          аКоличество:=аКоличество/аНоменклатура.ОбъемЛитров;
        EndIf;
      Else
        аНоменклатура:=0;
        аПартия:=0;
        Exit 3;
      Endif;    
    EndIf;
  EndIf;
  
  ФлВозможенЯщик:=not IsEmpty(аМарка);
  ФлМарочная:=ВыбраннаяНоменклатураЯвляетсяМарочной(аНоменклатура,аПартия);
  If _And(ФлМарочная,IsEmpty(аМарка)) Then
    If not ВыполнитьСканированиеМарки(аНоменклатура,аПартия,аМарка) Then
      Exit 3;
    EndIf;
    ФлВозможенЯщик:=1;
//TODO: Удалить 01.01.2025
    If аМарка=1 Then
      ФлМарочная:=0;
      ФлВозможенЯщик:=0;
    EndIf;
//TODO: Удалить 01.01.2025 
  EndIf;
  
  If IsEmpty(аПартия)+IsEmpty(аНоменклатура)=2 Then //Возможно, это марка
    аКодМарки:=глУдалитьКрипточасть(СтрКод);
    аМар:=Ref.тмцМаркировкаПозиций;
    ФлВозможенЯщик:=1;
    If аМар.Find("~(@Status=0)And(КодМарки=аКодМарки)And(флСостояние=1)And(@IsFolder=0)") Then
      аПартия:=аМар.Parent();
      аМарка:=СтрКод;
      аНоменклатура:=аПартия.Parent();
      ФлВозможенЯщик:=0;
      
      //Проверка, не были ли эта марка уже списана
      If аМар.Find("~(@Status=0)And(КодМарки=СтрКод)And(флСостояние=2)And(@IsFolder=0)And(Документ..Doc.Реализация.@Status=2)") Then
        аМар2:=Ref.тмцМаркировкаПозиций;
        If not аМар2.Find("~(@Status=0)And(КодМарки=СтрКод)And(флСостояние=2)And(@IsFolder=0)And(IsType(Документ,Doc.ВозвратОтПокупателя))") Then
          If лкПользователь.общиеАдминистратор Then
            If AskQuestion("Отсканированная марка уже была реализована"+?(not isEmpty(аМар.Документ)," "+аМар.Документ.DocDate+" документом "+аМар.Документ.DocNum)+"! "+
                "Игнорировать (может стать причиной штрафа гос. органов)?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
              аНоменклатура:=0;
              аПартия:=0;
              Exit 3;
            EndIf;
          Else
            Box("Отсканированная марка уже была реализована"+?(not isEmpty(аМар.Документ)," "+аМар.Документ.DocDate+" документом "+аМар.Документ.DocNum)+"!",Q_STOP);
            аНоменклатура:=0;
            аПартия:=0;
            Exit 3;
          EndIf;
        EndIf;
      EndIf;
      
      зМРЦ:=ВыбратьМаксимальнуюПродажнуюЦену(аНоменклатура,аПартия,аМарка,1);
      If зМРЦ>0 Then
        аМРЦ:=зМРЦ;
      EndIf;
    EndIf;
  EndIf;
  
  If ФлВозможенЯщик Then
    флБлокСигарет:=MatchRe("01[0-9]{14}21.{7}"+Chr(29)+"8005[0-9]{6}"+Chr(29)+"93.{4}",аМарка)>0;
    //Сканирование ящиков: получить последние 26 ящиков с этим кодом, если их 26, вывести сообщение
    СтрКод:=?(IsEmpty(аМарка),СтрКод,аМарка);
    аКодМарки:=глУдалитьКрипточасть(СтрКод);
    аМар:=Ref.тмцМаркировкаПозиций;
    аМар.UseOrder("@CODE-");
    aList:=аМар.Load(26,"~(@Status=0)And((КодМарки=аКодМарки)Or(КодМарки=СтрКод))And(флСостояние<2)And(@IsFolder=1)");
    If aList.Size()=26 Then
      Box("Невозможно использовать штрихкод этого ящика или блока, так как в базе данных найдено не менее 25 других ящиков или блоков с подобным штрихкодом!",Q_WARNING);
      Exit 3;
    ElseIf aList.Size()>0 Then
      //Из выбранных ящиков оставим только те, марки которых частично или полностью есть в наличии
      аМар:=Ref.тмцМаркировкаПозиций;
      bList:=аМар.Load(0,"~(@Status=0)And(флСостояние=1)And(@IsFolder=0)And(@ELEMENT IN aList)");
      //Сортировка таблицы
      Таб:=Tab.Create("Номенклатура,Партия,Марка,Количество");
      For i:=1 To bList.Size() Do
        aEl:=bList[i];
        bEl:=aEl.Parent();
        Таб.AddLine("Номенклатура,Партия,Марка,Количество",bEl.Parent(),bEl,aEl.КодМарки,1);
      EndDo;
      Таб2:=Таб.Copy();
      Таб2.Group("Номенклатура,Партия","Количество");
      Сп:=List.Create();
      Таб2.Select();
      While Таб2.Next() Do
        If Сп.Find(Таб2.Номенклатура)>0 Then
          Box("Невозможно использовать штрихкод этого ящика или блока, так как в базе данных найдено несколько партий одной позиции с таким кодом (возможна путаница при отпуске товара)!",Q_WARNING);
          Exit 3;
        EndIf;
        Сп.Add(Таб2.Номенклатура);
      EndDo;
      
      If Таб2.Size()=0 Then
        Exit 0;
      EndIf;
      
      If Таб2.Size()>1 Then
        аМагазин:=НайтиМагазинПоНоменклатуре(Таб2["Номенклатура",1],спДополнительныеКассы);
        aList:=List.Create();
        aList.Add(Таб2,"Таблица");
        aList.Add(аМагазин.ТипЦенРеализации,"ТипЦен");
        aList.Add(аМагазин,"Магазин");
        aList.Add(СтрКод,"Ящик");
        LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборЯщикаИзСписка");
        If aList["Ответ"]<>1 Then
          Exit 3;
        EndIf;
        Партия:=aList["Партия"];
      Else
        Партия:=Таб2["Партия",1];
      EndIf;
      зН:=Партия.Parent();
      аНоменклатура:=Tab.Create("Номенклатура,Партия,Марка,Количество");
      Таб.Select();
      While Таб.Next() Do
        If Таб.Партия=Партия Then
          аНоменклатура.AddLine("Номенклатура,Партия,Марка,Количество",зН,Партия,Таб.Марка,1);
        EndIf;
      EndDo;
      Box("В чек были добавлены "+аНоменклатура.Size()+" марок(и), имеющиеся в остатках позиции "+зН+" для ящика или блока с кодом "+аКодМарки+". Необходимо реализовать клиенту продукцию именно из этого ящика (блока)!",Q_WARNING);
      Exit 4;
    ElseIf _AND(флБлокСигарет,aList.Size()=0) Then
      Box("Данная марка блока сигарет не найдена в базе!",Q_STOP);
      Exit 3;
    EndIf;
  EndIf;
  
  If IsEmpty(аПартия)+IsEmpty(аНоменклатура)=2 Then
    //Длины строк марок: ЕГАИС: 150 (новая), пример: 131400????341710180014DCYW2VRDVFBPQRKDDZW5NLZTUWRUJSA6Y54UFQGXUYS4CDHAR4KNNSBA2QDP23T4SKTKL5JP5ZOKOSUNLHVTFHRCXXKFSDLBJP7O63CGPU2LBKRJW4C7WRML????????
    //                          68 (старая), пример: 22N00000????AVMSNOB0OCJ908220010499919QVAMSX3XMVAQJWMMJU0HG6MZQU????
    //                   ИС МП: 29 (сигареты) без Chr(29), пример: 010460043994001221????????005125000 или 010460043994027221????????005125000
    //                          любой размер (другие группы) с Chr(29)
    If _Or(Length(СтрКод)=150,Length(СтрКод)=68,Length(СтрКод)=29,pos(Chr(29),СтрКод)>0) Then
      Box("Отсканированная марка не найдена на остатках, перед ее сканированием необходимо отсканировать штрихкод товара, чтобы программа знала, к какому товару она относится!",Q_WARNING);
      Exit 3;
    EndIf;
  EndIf;
  
  Exit IsEmpty(аПартия)+IsEmpty(аНоменклатура)<2;
EndFunction

Function ДобавитьСкидочнуюКартуВЧек(аКарта,ФлЗакрытиеЧека=0,ФлФорсировать=0)
  If not IsEmpty(ПоискТабПозиции) Then
    ТабПозиции:=ПоискТабПозиции;
  Else
    ТабПозиции:=Form.ТабПозиции.Value;
  EndIf;
  If not ПроверитьОперациюПоУсловиямПродаж(5,аКарта,1) Then
    Exit 0;
  EndIf;  

  If (аКарта.ДатаНачалаДействия>BegOfDay(Date()))Or((аКарта.ДатаОкончанияДействия<BegOfDay(Date()))And(not IsEmpty(аКарта.ДатаОкончанияДействия))) Then
    Box("Данная скидочная карта уже истекла, либо еще не начала работать!",Q_STOP);
    Exit 0;
  EndIf;
  If (аКарта.Бюджет=0)And(not ФлФорсировать) Then
    If аКарта.ТипКарты=Enum.рознТипыСкидочныхКарт.ПодарочныйСертификат Then
      Box("Данный подарочный сертификат уже был использован!",Q_STOP);
      Exit 0;
    ElseIf аКарта.ТипКарты=Enum.рознТипыСкидочныхКарт.Депозит Then
      Box("На выбранном депозите отсутствует бюджет!",Q_STOP);
      Exit 0;
    EndIf;
    Box("На выбранной скидочной карте отсутствует бюджет, карта будет использована только для начисления баллов или общей суммы продаж!",Q_INFORMATION);
  EndIf;
  If аКарта.ТипКарты=Enum.рознТипыСкидочныхКарт.ПодарочныйСертификат Then
    If ФлЗакрытиеЧека=0 Then
      Box("Подарочные сертификаты необходимо сканировать во время оплаты чека!",Q_STOP);
    Else
      If (ТекущаяОперация=3)Or(ТекущаяОперация=2)Or(ТекущаяОперация=1) Then
        Box("Данная операция не поддерживает использование подарочных сертификатов!",Q_STOP);
        Exit 0;
      EndIf;
      If ТабСертификатыЧека.FindAndGoto(аКарта,,"Сертификат")>0 Then
        Box("Данный сертификат уже был добавлен в чек!",Q_STOP);
        Exit 0;
      EndIf;
      If ТабСертификатыЧека.Sum("Сумма")>=Form.тСуммаЧека.Value Then
        Box("Сумма подарочных сертификатов в текущем чеке уже больше или равна сумме чека! Если вы хотите изменить сертификат на другой, сначала удалите предыдущий из меню суммы сертификатов!",Q_STOP);
        Exit 0;
      EndIf;
      //ТабСертификатыЧека: "Сертификат,Сумма,СуммаСписана,СуммаТранзакция"
      ТабСертификатыЧека.AddLine("Сертификат,Сумма,СуммаСписана,СуммаТранзакция",аКарта,аКарта.Бюджет,0,0);
      Form.тСуммаСертификатов.Value:=ТабДепозитыЧека.Sum("Сумма")+Max(Min(ТабСертификатыЧека.Sum("Сумма"),Form.тСуммаЧека.Value-ТабДепозитыЧека.Sum("Сумма")),0);
      ЗакрытьЧекОбновитьСуммы();
      Box("Сертификат на сумму "+аКарта.Бюджет+" руб. был добавлен в чек!",Q_INFORMATION);
    EndIf;
    Exit 1;
  ElseIf аКарта.ТипКарты=Enum.рознТипыСкидочныхКарт.Депозит Then
    If ТабДепозитыЧека.FindAndGoto(аКарта,,"Сертификат")>0 Then
      Box("Данный депозит уже был добавлен в чек!",Q_STOP);
      Exit 0;
    EndIf;
    //ТабДепозитыЧека: "Сертификат,Сумма,Сорт"
    ТабДепозитыЧека.AddLine("Сертификат,Сумма,Сорт",аКарта,аКарта.Бюджет,1-аКарта.ФлОбнулятьДепозитПриЗакрытииЧека);
    ТабДепозитыЧека.Sort("Сорт");
    If ФлЗакрытиеЧека<>0 Then
      Form.тСуммаСертификатов.Value:=ТабДепозитыЧека.Sum("Сумма")+Max(Min(ТабСертификатыЧека.Sum("Сумма"),Form.тСуммаЧека.Value-ТабДепозитыЧека.Sum("Сумма")),0);
      ЗакрытьЧекОбновитьСуммы();
      Box("Депозит на сумму "+аКарта.Бюджет+" руб. был добавлен в чек!",Q_INFORMATION);
    Else
      ОбновитьИнформациюТекущейСтроки();
    EndIf;
    Exit 1;
  EndIf;
  
  If not IsEmpty(СкидочнаяКартаЧека) Then
    If СкидочнаяКартаЧека=аКарта Then
      Box("Данная карта уже была добавлена в чек!",Q_INFORMATION);
      Exit 0;
    EndIf;
    If AskQuestion("Текущий чек уже содержит другую скидочную карту, использовании двух карт для одного чека не допускается. Хотите удалить из чека старую карту и использовать текущую?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
      Exit 0;
    EndIf;
    ОбновитьСкидкуПоСкидочнымКартам(2);
  EndIf;
  
  СкидочнаяКартаЧека:=аКарта;
  СкидочнаяКартаЧекаПеременные:=0;
  МодульУсловияСкидочнойКарты:=0;
  ОбновитьСкидкуПоСкидочнымКартам(0);
  //Убедиться, что карта работает
  If ТабПозиции.Size()>0 Then
    СуммаСкидок:=0;
    ТабПозиции.Select();
    While ТабПозиции.Next() Do
      If not IsEmpty(ТабПозиции.ТАкции) Then
        If ТабПозиции.ТАкции.FindAndGoto(СкидочнаяКартаЧека,,"Акция") Then
          СуммаСкидок:=Round(СуммаСкидок+ТабПозиции.ТАкции.Сумма,2);
        EndIf;
      EndIf;
    EndDo;
    If СуммаСкидок=0 Then
      Box("Скидочная карта была добавлена в чек, однако, она не создает скидку! Возможно, в чеке отсутвует номенклатура, на которую действует скидка этой карты!",Q_INFORMATION);
    EndIf;
  EndIf;
  
  If ФлЗакрытиеЧека Then
    ЗакрытьЧекОбновитьАкции();
    ЗакрытьЧекОбновитьСуммы();
  Else
    ОбновитьИнформациюТекущейСтроки();
  EndIf;
  Exit 1;
EndFunction

Function ПринятьРезультатСканирования(СтрКод)
  ВремяПоследнегоНажатия:=0;
  аПартия:=0;
  аНоменклатура:=0;
  аМарка:=0;
  аКоличество:=0;
  аМРЦ:=0;
  Фл:=РазобратьТоварныйШтрихкод(СтрКод,аНоменклатура,аПартия,аМарка,аКоличество,аМРЦ);
  If Фл=2 Then
    //Вызвать диалог Поиск
    Form.кнПоиск.InvokeEventAsync("OnClick");  
    Exit;
  ElseIf Фл=3 Then
    Exit;
  ElseIf Фл=0 Then
    //Скидочная карта или карта регистрации другого продавца
    аКарта:=Ref.рознСкидочныеКарты;
    If аКарта.Find("@Status,Name",0,СтрКод) Then
      ДобавитьСкидочнуюКартуВЧек(аКарта);
      Exit;
    EndIf;
    
    //Карта регистрации другого продавца
    //TODO: 
    
    //Радиочип RFID
    //TODO: 
    
    //Активные весы
    //TODO: 
  ElseIf Фл=4 Then //Группа товаров в таблице аНоменклатура: "Номенклатура,Партия,Марка,Количество" 
    ФлБылаОтменаТовара:=0;
    аНоменклатура.Select();
    While аНоменклатура.Next() Do
      ДобавитьТоварВТаблицуТоваров(Form.ТабПозиции.Value,0,аНоменклатура.Номенклатура,аНоменклатура.Партия,аНоменклатура.Марка,аНоменклатура.Количество,,,аМРЦ);
    EndDo;
    Exit;
  EndIf;
  
  If IsEmpty(аПартия)+IsEmpty(аНоменклатура)=2 Then
    Box("Объект или товар со штрихкодом """+Left(СтрКод,200)+""" в базе не найден!",Q_STOP);
    глСброситьСостояниеСканеров(НакопленноеСообщение);
    Exit;
  EndIf;
  //Добавим строку к товарам, если она не последняя, переместим ее в конец таблицы
  ФлБылаОтменаТовара:=0;

  ДобавитьТоварВТаблицуТоваров(Form.ТабПозиции.Value,0,аНоменклатура,аПартия,аМарка,аКоличество,1,0,аМРЦ);
EndFunction

Function ОчиститьТаблицуТоваров(ФлУдаление=1)
  ТабПозиции:=Form.ТабПозиции.Value;
  If ФлУдаление Then
    ТабПозиции.ClearLines();
    ТабПозиции.Column("Статус").isVisible:=0;
  ElseIf _And(ТабПозиции.Size()>0,ТабПозиции.SelectedLine=0) Then
    ТабПозиции.SelectedLine:=1;
  EndIf;
  ТабДепозитыЧека:=Tab.Create("Сертификат,Сумма,Сорт");
  СкидочнаяКартаЧека:=0;
  СкидочнаяКартаЧекаПеременные:=0;
  МодульУсловияСкидочнойКарты:=0;
  ФлБылаОтменаТовара:=0;
  ВремяПоследнегоНажатия:=0;
  ТекущаяОперация:=0;
  КонтрагентЗакрытияАванса:=0;
  лкПользователь:=глПользователь;
  ОбновитьИнформацию(1);
  ОбновитьИнформациюТекущейСтроки();
EndFunction

Function ЗагрузитьДокументВЧек(зДок,ЦеныНаДату=0)
  //If not лкПользователь.рознУдалениеПозицийПриПродаже Then
  //  Box("Вам запрещено использовать эту функцию, обратитесь к оператору с большими правами!",Q_STOP);
  //  Exit;
  //EndIf;
  ТабПозиции:=Form.ТабПозиции.Value;
  If ТабПозиции.Size()>0 Then
    If AskQuestion("Текущий чек уже содержит позиции, если загрузить выбранный документ, позиции документа будут добавлены к позициям текущего чека. Вы уверены?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
      Exit;
    EndIf;
  EndIf;
  aTab:=зДок.LineParts("Номенклатура");
  If aTab.Size()=0 Then
    Box("Выбранный документ не содержит позиций!",Q_INFORMATION);
    Exit;
  EndIf;

  ТМарки:=глМаркиЗагрузитьДокумент(зДок);
  If _And(not IsEmpty(ТМарки),ТМарки.Size()>0) Then
    Фл:=AskQuestion("Выбранный документ содержит марки! Вы можете загрузить их в текущий чек, если отложенный товар находится перед вами, однако, "+
        "рекомендуется не загружать марки и выполнить их сканирование снова, чтобы избежать возможных ошибок. Загрузить марки все равно?",Q_WARNING+Q_YESNOCANCEL,R_YES);
    If Фл=R_CANCEL Then
      Exit;
    ElseIf Фл=R_NO Then
      ТМарки:=0;
    Else
      ТМарки.AddColumn("Номенклатура");
      ТМарки.Select();
      While ТМарки.Next() Do
        ТМарки.Номенклатура:=ТМарки.Партия.Parent();
      EndDo;
    EndIf;
  EndIf;
  
  Фл:=1;
  ТабПозиции.Lock();
  Try
    aTab.Select();
    While aTab.Next() Do
      While _And(aTab.Количество>0,not IsEmpty(ТМарки),ТМарки.FindAndGoto(aTab.Номенклатура,,"Номенклатура")>0) Do
        Кл:=1;
        If _Or(aTab.Номенклатура.флВесовойТовар=1,_And(aTab.Номенклатура.флАлкогольнаяПродукция,ТекущийМагазин.флМагазинОбщепита=1)) Then
          Кл:=aTab.Количество;
        EndIf;
        aTab.Количество:=Round(aTab.Количество-Кл,6);
        ТМарки.Номенклатура:=0;
        МРЦ:=?(_AND(not isEmpty(aTab.Номенклатура.ГИСМТТоварнаяГруппа),aTab.Номенклатура.ГИСМТТоварнаяГруппа.внешнееНаименование="tobacco"),aTab.Цена,0);
        If not ДобавитьТоварВТаблицуТоваров(ТабПозиции,0,aTab.Номенклатура,ТМарки.Партия,ТМарки.Марка,Кл,0,ЦеныНаДату,МРЦ) Then
          Фл:=0;
        EndIf;
      EndDo;
      
      If aTab.Количество>0 Then
        МРЦ:=?(_AND(not isEmpty(aTab.Номенклатура.ГИСМТТоварнаяГруппа),aTab.Номенклатура.ГИСМТТоварнаяГруппа.внешнееНаименование="tobacco"),aTab.Цена,0);
        If not ДобавитьТоварВТаблицуТоваров(ТабПозиции,0,aTab.Номенклатура,aTab.Партия,0,aTab.Количество,0,ЦеныНаДату,МРЦ) Then
          Фл:=0;
        EndIf;
      EndIf;
    EndDo;
  Finally
    ТабПозиции.UnLock();
  EndTry;
  ОбновитьИнформацию();
  ОбновитьИнформациюТекущейСтроки();
  
  If not Фл Then
    Box("Не все позиции были добавлены в чек из загружаемого документа!",Q_WARNING);
  Else
    Box("Загрузка информации в чек произведена успешно!",Q_INFORMATION);
  EndIf;
EndFunction

Function ВыполнитьПечатьДокумента(Документ,Элемент,ФлПоследний=0)
  If not ФлПоследний Then
    спФормы:=List.Create();
    If IsEmpty(Документ) Then
      спФормы.Add("Распечатать копию последнего чека (на ККМ)");
    Else
      спФормы.Add("Распечатать копию чека документа "+Документ);
    EndIf;
    aList:=File.LoadFiles("Modules\FreeForms\ПечатныеФормы\Документ.Реализация\*.ini",0,1);
    aList.SortByNames();
    For i:=1 To aList.Size() Do
      Ини:=Ini.Create();
      Try
        If not Ини.AddFromString(aList[i]) Then
          Continue;
        EndIf;
      Except
        Continue;
      EndTry;
      If _Or(Number(Ини.GetData("FrontOffice","0"))<>1,not Ини.DoesExist("Description"),not Ини.DoesExist("Caption")) Then
        Continue;
      EndIf;
      спФормы.Add(aList.GetName(i),Ини.GetData("Description","?"));
    EndDo;
    aNum:=спФормы.Select(,Элемент,"Выберите требуемую печатную форму:");
    If aNum=0 Then
      Exit;
    EndIf;
  Else
    aNum:=1;
  EndIf;
  If aNum=1 Then
    НомерДокумента:="";
    If not IsEmpty(Документ) Then
      If _Or(Left(Документ.УникальныйИдентификатор3,1)<>"=",Length(Документ.УникальныйИдентификатор3)<2) Then
        Box("У выбранного документа отсутствует фискальный номер!",Q_STOP);
        Exit;
      EndIf;
      НомерДокумента:=Mid(Документ.УникальныйИдентификатор3,2);
    EndIf;
    If AskQuestion("Раcпечатать копию "+?(IsEmpty(Документ),"последнего пробитого чека","чека документа "+Документ)+", вы уверены?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
      Exit;
    EndIf;
    аМагазин:=?(not IsEmpty(Документ),Документ.Магазин,Nothing);
    aNum:=0;
    If _And(_Or(аМагазин<>ТекущийМагазин,IsEmpty(аМагазин)),спДополнительныеКассы.Size()>0) Then
      спКассы:=List.Create();
      спКассы.Add(0,ТекущийМагазин);
      For i:=1 To спДополнительныеКассы.Size() Do
        спДрайверы:=спДополнительныеКассы[i];
        спИнф:=спДрайверы[1];
        спКассы.Add(i,спИнф["Магазин"]);
        If спИнф["Магазин"]=аМагазин Then
          aNum:=i+1;
          Break;
        EndIf;
      EndDo;
      If aNum=0 Then
        aNum:=спКассы.Select(,0,"Выберите требуемую кассу для печати:");
        If aNum=0 Then
          Exit;
        EndIf;
      EndIf;
    EndIf;
    If aNum<=1 Then
      спНастройки:=спНастройкиККМ;
    Else
      спДрайверы:=спДополнительныеКассы[aNum-1];
      спИнф:=спДрайверы[1];
      спНастройки:=спИнф["спНастройкиККМ"];
    EndIf;
    Try
      спНастройки["НомерДокумента"]:=НомерДокумента;
      Стр:=глВыполнитьФункциюДрайвера("PrintLastReceipt",спНастройки);
      If not IsEmpty(Стр) Then
        Raise Стр;
      EndIf;
      Box("Печать выполнена успешно!",Q_INFORMATION);
    Except
      Box("Ошибка при печати: "+PopError(),Q_STOP);
    EndTry;
    Exit;
  EndIf;
  
  bList:=GetInstalledPrinters();
  If bList.Size()=0 Then
    Box("В системе не установлен ни один принтер!",Q_WARNING);
    Exit;
  EndIf;
  For i:=1 To bList.Size() Do
    bList.SetName(i,"");
  EndDo;
  bNum:=bList.Select(,0,"Выберите принтер для печати:");
  If bNum=0 Then
    Exit;
  EndIf;
  
  Сп:=List.Create();
  Сп.Add(Документ,"Object");
  Сп.Add(1,"ПечататьБезВывода");
  Сп.Add(1,"КоличествоКопий");
  Сп.Add(1,"АвтоматическаяПечать");
  Сп.Add(bList[bNum],"Принтер");
  Путь:=RemoveBackslash(GetPath(спФормы[aNum]));
  LoadModule(10,Путь,Сп,0);
  Box("Операция печати выполнена успешно!",Q_INFORMATION);
EndFunction

//TODO: Ожидается ширина ленты в 40 символов
//НомерСтола -- при нуле не печатать
//Магазин -- если задан печатать счет для этого магазина, иначе если более одного магазина вывести диалог выбора
Function ВыполнитьПечатьСчетаНаОплату(Магазин=0,Док=0,НомерСтола=0)
  Var ШиринаЛенты Export;
  ШиринаЛенты:=40;

  Function _ДобавитьСтроку(ByRef Стр,СтрДоб,Центр=0)
    СтрПроб:=RepeatStr(" ",ШиринаЛенты);
    While СтрДоб<>"" Do
      If (Центр)And(Length(СтрДоб)<=ШиринаЛенты) Then
        Стр:=?(Стр<>"",Стр+_NEWLINE,"")+RepeatStr(" ",(ШиринаЛенты-Length(СтрДоб))\2)+СтрДоб;
        Exit;
      EndIf;
      Стр:=?(Стр<>"",Стр+_NEWLINE,"")+Left(СтрДоб,ШиринаЛенты);
      СтрДоб:=Mid(СтрДоб,ШиринаЛенты+1);
    EndDo;
  EndFunction  
  
  спНастройки:=спНастройкиККМ;
  If IsEmpty(Магазин) Then
    If спДополнительныеКассы.Size()>0 Then
      спКассы:=List.Create();
      спКассы.Add(0,ТекущийМагазин);
      For i:=1 To спДополнительныеКассы.Size() Do
        спДрайверы:=спДополнительныеКассы[i];
        спИнф:=спДрайверы[1];
        спКассы.Add(i,спИнф["Магазин"]);
      EndDo;
      aNum:=0;
      If спКассы.Select(aNum,0,"Выберите требуемую кассу для печати:")=0 Then
        Exit;
      EndIf;
      If aNum<1 Then
        спНастройки:=спНастройкиККМ;
        Магазин:=ТекущийМагазин;
      Else
        спДрайверы:=спДополнительныеКассы[aNum];
        спИнф:=спДрайверы[1];
        спНастройки:=спИнф["спНастройкиККМ"];
        Магазин:=спИнф["Магазин"];
      EndIf;
    Else
      Магазин:=ТекущийМагазин;
    EndIf;
  EndIf;
  
  Стр:="";  
  _ДобавитьСтроку(Стр,Магазин.ЮрЛицо.Name,1);
  _ДобавитьСтроку(Стр,"ДОБРО ПОЖАЛОВАТЬ!",1);
  _ДобавитьСтроку(Стр,Магазин.НазваниеМагазина,1);
  If НомерСтола>0 Then
    _ДобавитьСтроку(Стр,"Стол: "+НомерСтола);
  EndIf;
  If not IsEmpty(Док) Then
    _ДобавитьСтроку(Стр,"Открыт: "+FormatDate(Док.DocDate,"dd.mm.YYY hh:tt:ss"));
  Else
    _ДобавитьСтроку(Стр,"Напечатан: "+FormatDate(Date(),"dd.mm.YYY hh:tt:ss"));
  EndIf;
  _ДобавитьСтроку(Стр,"Официант: "+ТекущийКассир.Контрагент);
  СтрРазд:=RepeatStr("-",ШиринаЛенты);
  СтрПроб:=RepeatStr(" ",ШиринаЛенты);
  _ДобавитьСтроку(Стр,СтрРазд);
  //40: 20 наименование + 8 количество + 12 сумма
  _ДобавитьСтроку(Стр,Left("Наименование"+СтрПроб,20)+"  Кол-во"+"       Сумма");
  _ДобавитьСтроку(Стр,СтрРазд);
  If not IsEmpty(ПоискТабПозиции) Then
    ТабПозиции:=ПоискТабПозиции;
  Else
    ТабПозиции:=Form.ТабПозиции.Value;
  EndIf;  
  _ДобавитьСтроку(Стр," ");
  См:=0;
  ТабПозиции.Select();
  While ТабПозиции.Next() Do
    If ТабПозиции.Магазин<>Магазин Then
      Continue;
    EndIf;
    СтрНаимен:=ТабПозиции.Номенклатура.Name;
    _ДобавитьСтроку(Стр,Left(СтрНаимен,20)+Right("        "+FormatNumber(ТабПозиции.Количество,0,"",2),8)+Right("        "+FormatNumber(ТабПозиции.Сумма,0,"",2),12));
    См:=Round(См+ТабПозиции.Сумма,2);
    СтрНаимен:=Mid(СтрНаимен,21);
    While СтрНаимен<>"" Do
      _ДобавитьСтроку(Стр,Left(СтрНаимен,20));
      СтрНаимен:=Mid(СтрНаимен,21);
    EndDo;
  EndDo;
  _ДобавитьСтроку(Стр,Left("Итого:"+СтрПроб,20+8)+Right("        "+FormatNumber(См,0,"",2),12));
  _ДобавитьСтроку(Стр," ");
  If См=0 Then
    Box("Чек пуст или для указанного магазина нет ни одной позиции для печати!",Q_STOP);
    Exit;
  EndIf;
  
  Try
    СпНастройкиККМ["ДополнительнаяИнформация"]:=Стр;
    Стр:=глВыполнитьФункциюДрайвера("PrintText",спНастройки);
    If not IsEmpty(Стр) Then
      Raise Стр;
    EndIf;
    Box("Печать счета выполнена удачно!",Q_INFORMATION);
  Except
    Box("Не напечатать счет, ошибка: "+PopError()+"!",Q_STOP);
  EndTry;
EndFunction

Function ОтложитьТекущийЧек(ФлВопрос=0,СпРеквизиты=0,ВДокумент=0,ФлНеОчищать=0,ФлУдаленный=0)
  ТабПозиции:=Form.ТабПозиции.Value;
  If ТабПозиции.Size()=0 Then
    Exit;
  EndIf;
  If not лкПользователь.рознУдалениеПозицийПриПродаже Then
    Box("Вам запрещено использовать эту функцию, обратитесь к оператору с большими правами!",Q_STOP);
    Exit;
  EndIf;
  If ФлВопрос Then
    If AskQuestion("Отложить текущий чек, вы уверены? Содержимое чека можно загрузить и продолжить работать с ним из меню ""операции""!",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
      Exit;
    EndIf;
  EndIf;

  //Отложенный чек будет создан для основного магазина, даже если используется несколько касс,
  //  однако, это не должно быть большой проблемой, так как при продолжении чека, он будет снова разборан по разным магазинам
  BeginTransaction();
  Try
    If _Or(IsEmpty(ВДокумент),ВДокумент.DBName()<>"Реализация") Then
      aDoc:=Doc.Реализация;
      aDoc.New();
      aDoc.DocDate:=Date();
    Else
      aDoc:=ВДокумент;
      If aDoc.Status()=1 Then
        aDoc.Mark(0);
      ElseIf aDoc.Status()>1 Then
        If not глОтменитьОбработку(aDoc) Then
          Raise "Невозможно изменить документ "+aDoc;
        EndIf;
      EndIf;
      aTab:=aDoc.LineParts("Номенклатура");
      aTab.ClearLines();
    EndIf;
    aDoc.Автор:=лкПользователь;
    aDoc.ЮрЛицо:=ТекущийМагазин.ЮрЛицо;
    aDoc.Магазин:=ТекущийМагазин;
    глУстановитьНовыйНомер(aDoc);
    aDoc.Склад:=ТекущийМагазин.Склад;
    aDoc.КодОперации:=Enum.коРеализация.РеализацияРозничная;
    aDoc.УчитыватьВНалоговомУчете:=1;
    aDoc.УникальныйИдентификатор3:="=";
    aDoc.Контрагент:=ТекущийМагазин.ДоговорРозничногоПокупателя.Parent();
    aDoc.Договор:=ТекущийМагазин.ДоговорРозничногоПокупателя;
    aDoc.ТипЦен:=ТекущийМагазин.ТипЦенРеализации;
    ТМаркиДокумента:=Tab.Create("Партия,Ящик,Марка");
    aTab:=aDoc.LineParts("Номенклатура");

    ТабПозиции.Select();
    While ТабПозиции.Next() Do
      ТПартии:=ТабПозиции.ТПартии;
      Количество:=ТабПозиции.Количество;
      Сумма:=ТабПозиции.Сумма;
      If ТабПозиции.флЛитры=1 Then
        Количество:=Количество/ТабПозиции.Номенклатура.ОбъемЛитров;
      EndIf;
      Цена:=Round(Сумма/Количество,2);
      If _And(not IsEmpty(ТПартии),ТПартии.Size()>0) Then
        //ТПартии:"Партия,Количество";
        ТПартии.Select();
        While ТПартии.Next() Do
          Кл:=Min(ТПартии.Количество,Количество);
          Количество:=Round(Количество-Кл,6);
          См:=?(Количество=0,Сумма,Round(Кл*Цена,2));
          Сумма:=Сумма-См;
          aTab.AddLine("Номенклатура,Партия,Количество,Цена,Сумма,СтавкаНДС",ТабПозиции.Номенклатура,ТПартии.Партия,Кл,Цена,См,глСтавкаНДСНоменклатуры(ТекущийМагазин.ЮрЛицо,ТабПозиции.Номенклатура));
          глПересчитатьСтроку(aDoc,aTab,"Количество2@СуммаНДС");
          If Количество=0 Then
            Break;
          EndIf;
        EndDo;
      EndIf;
      If Количество>0 Then
        aTab.AddLine("Номенклатура,Количество,Цена,Сумма,СтавкаНДС",ТабПозиции.Номенклатура,Количество,Цена,Сумма,глСтавкаНДСНоменклатуры(ТекущийМагазин.ЮрЛицо,ТабПозиции.Номенклатура));
        глПересчитатьСтроку(aDoc,aTab,"Количество2@СуммаНДС");
      EndIf;
      //Марки
      ТМарки:=ТабПозиции.ТМарки;
      If _And(not IsEmpty(ТМарки),ТМарки.Size()>0) Then
        ТМарки.Select();
        While ТМарки.Next() Do
          ТМаркиДокумента.AddLine("Партия,Ящик,Марка",ТМарки.Партия,"",ТМарки.Марка);
        EndDo;
      EndIf;
    EndDo;
    aDoc.СуммаВзаиморасчетов:=aTab.Sum("Сумма");
    If not IsEmpty(СпРеквизиты) Then
      For i:=1 To СпРеквизиты.Size() Do
        aDoc.SetValue(СпРеквизиты.GetName(i),СпРеквизиты[i]);
      EndDo;
    EndIf;
    aDoc.Save();
    If ТМаркиДокумента.Size()>0 Then
      If not глМаркиЗарегистрироватьДокумент(aDoc,ТМаркиДокумента,2) Then
        Box("Ошибка сохранения марок документа!",Q_STOP);
        Exit;
      EndIf;
    EndIf;
    If ФлУдаленный Then
      aDoc.Mark(1);
    EndIf;
    
    CommitTransaction();
  Except
    RollbackTransaction();
    If not ФлНеОчищать Then
      Box("Ошибка при создании документа: "+PopError()+"!",Q_STOP);
    EndIf;
    Exit;
  EndTry;
  If not ФлНеОчищать Then
    ОчиститьТаблицуТоваров();
    Box("Операция выполнена успешно!",Q_INFORMATION);
  EndIf;
EndFunction

Function ПродолжитьЧек()
  aList:=List.Create();
  aList["ТипДокумента"]:="Doc.Реализация";
  aList["КодОперации"]:=Enum.коРеализация.РеализацияРозничная;
  aList["Магазин"]:=ТекущийМагазин;
  aList["ДополнительныеКассы"]:=спДополнительныеКассы;
  aList["Статус"]:=100;
  aList["Заголовок"]:="Выберите документ отложенного чека для продолжения:";  
  LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборДокументаИзСписка");
  If aList["Ответ"]<>1 Then
    Exit;
  EndIf;  
  ЗагрузитьДокументВЧек(aList["ВыбранныйДокумент"]);
  If not глПользователь.ОбщиеАдминистратор Then
    Try
      aList["ВыбранныйДокумент"].Mark(1);
    Except
    EndTry;
  EndIf;  
EndFunction

Function ПечатьЧекаСВыбором()
  Сп:=List.Create("Распечатать копию последнего чека","Выбрать документ для печати","Печать счёта на оплату");
  aNum:=Сп.Select(,0,"Выберите требуемую кассу для печати:");
  If aNum=0 Then
    Exit;
  EndIf;
  
  If aNum=2 Then
    aList:=List.Create();
    aList["ТипДокумента"]:="Doc.Реализация";
    aList["КодОперации"]:=Enum.коРеализация.РеализацияРозничная;
    aList["ТекущийДокумент"]:=ПоследнийЧекДокумент;
    aList["Магазин"]:=ТекущийМагазин;
    aList["ДополнительныеКассы"]:=спДополнительныеКассы;
    aList["Заголовок"]:="Выберите документ для печати чека:";
    LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборДокументаИзСписка");
    If aList["Ответ"]<>1 Then
      Exit;
    EndIf;
    ВыполнитьПечатьДокумента(aList["ВыбранныйДокумент"],0);  
  ElseIf aNum=3 Then
    ВыполнитьПечатьСчетаНаОплату();
  Else
    ВыполнитьПечатьДокумента(0,0,1);  
  EndIf;
EndFunction

Function ПревратитьВЧекВозврата()
  If ТекущаяОперация=1 Then
    Box("Текущий чек уже находится в режиме создания возврата!",Q_INFORMATION);
    Exit;
  EndIf;
  //Возврат
  If not лкПользователь.рознСозданиеВозвратов Then
    Box("Вам запрещено использовать эту функцию, обратитесь к оператору с большими правами!",Q_STOP);
    Exit;
  EndIf;
  ТабПозиции:=Form.ТабПозиции.Value;
  If ТабПозиции.Size()>0 Then
    If not лкПользователь.бухГлавныйБухгалтер Then
      Box("Для создания возврата удалите все позиции из чека или отложите его, после чего выберите операцию возврата снова!",Q_STOP);
      Exit;
    EndIf;
    If AskQuestion("Текущий чек со всеми набранными позициями будет превращен в чек возврата! Подобная операция строго не рекомендуется. "+
        "Если вы возвращаете алкогольный товар, который уже был списан в ЕГАИС, это списание нельзя будет отменить, и "+
        "в магазине появится недостача товара по ЕГАИС! Разрешить свободный возврат с текущим товаром?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
      Exit;
    EndIf;
    ТекущаяОперация:=1;
    ОбновитьИнформацию(1);
  Else
    Фл:=AskQuestion("Желаете выбрать реализацию, на основе которой будет создан возврат (да) или подобрать товары в возврат с помощью сканера (нет)?",Q_WARNING+Q_YESNOCANCEL,R_YES);
    If Фл=R_CANCEL Then
      Exit;
    ElseIf Фл=R_YES Then
      aList:=List.Create();
      aList["ТипДокумента"]:="Doc.Реализация";
      aList["КодОперации"]:=Enum.коРеализация.РеализацияРозничная;
      aList["Магазин"]:=ТекущийМагазин;
      aList["ДополнительныеКассы"]:=спДополнительныеКассы;
      aList["Статус"]:=102;
      aList["Заголовок"]:="Выберите документ реализации для заполнения возврата:";
      LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборДокументаИзСписка");
      If aList["Ответ"]<>1 Then
        Exit;
      EndIf;  
      aEl:=aList["ВыбранныйДокумент"];
      ЗагрузитьДокументВЧек(aEl,aEl.DocDate);
    ElseIf not лкПользователь.бухГлавныйБухгалтер Then
      Box("Вам запрещена операция свободного возврата, обратитесь к бухгалтеру!",Q_STOP);
      Exit;
    Else
      If AskQuestion("Операция свободного возврата строго не рекомендуется. Если вы возвращаете алкогольный товар, который уже был списан в ЕГАИС, это списание нельзя будет отменить, и "+
          "в магазине появится недостача товара по ЕГАИС! Разрешить свободный возврат?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
        Exit;
      EndIf;
    EndIf;
    ТекущаяОперация:=1;
    ОбновитьИнформацию(1);
  EndIf;
EndFunction

Function ПревратитьВЧекЗакрытияАванса();
  aList:=List.Create();
  aList["ТипДокумента"]:="Doc.Реализация";
  aList["КодОперации"]:=Enum.коРеализация.РеализацияЗаявка;
  aList["Магазин"]:=ТекущийМагазин;
  aList["ДополнительныеКассы"]:=спДополнительныеКассы;
  aList["Статус"]:=102;
  aList["Заголовок"]:="Выберите документ аванса для продолжения:";
  LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборДокументаИзСписка");
  If aList["Ответ"]<>1 Then
    Exit;
  EndIf;
  aEl:=aList["ВыбранныйДокумент"];
  ЗагрузитьДокументВЧек(aEl);
  КонтрагентЗакрытияАванса:=aEl.Контрагент;
  ОбновитьИнформацию();
EndFunction

Function ПревратитьВЧекГашенияКредита()
  ТабПозиции:=Form.ТабПозиции.Value;
  If ТабПозиции.Size()>0 Then
    Box("Для выполнения операции необходимо, чтобы чек не содержал никаких позиций!",Q_STOP);
    Exit;
  EndIf;
  
  aList:=List.Create();
  aList["ТипДокумента"]:="Doc.Реализация";
  aList["КодОперации"]:=Enum.коРеализация.РеализацияРозничная;
  aList["Магазин"]:=ТекущийМагазин;
  aList["ДополнительныеКассы"]:=спДополнительныеКассы;
  aList["Статус"]:=102;
  aList["Заголовок"]:="Выберите документ, отпущенный в кредит:";
  LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборДокументаИзСписка");
  If aList["Ответ"]<>1 Then
    Exit;
  EndIf;
  aEl:=aList["ВыбранныйДокумент"];
  If aEl.Контрагент=ТекущийМагазин.ДоговорРозничногоПокупателя.Parent() Then
    Box("Документы, выписываемые в кредит, должны иметь заведенного в базе покупателя!",Q_STOP);
    Exit;
  EndIf;
  ЗагрузитьДокументВЧек(aEl);
  
  aList:=List.Create();
  aList.Add(ТабПозиции,"ТабПозиции");
  aList.Add(ТекущийКассир,"ТекущийКассир");
  aList.Add(ТекущийМагазин,"ТекущийМагазин");
  aList.Add(ТекущееРабочееМесто,"ТекущееРабочееМесто");
  aList.Add(спНастройкиККМ,"спНастройкиККМ");
  aList.Add(спПодключенныеДрайверы,"спПодключенныеДрайверы");
  aList.Add(спПлатежныеТерминалы,"спПлатежныеТерминалы");
  aList.Add(спДисплеиПокупателя,"спДисплеиПокупателя");
  aList.Add(спВесы,"спВесы");
  aList.Add(5,"ТекущаяОперация");
  aList.Add(aEl.Контрагент,"КонтрагентЗакрытияАванса");
  aList.Add(aEl,"ДокументЗакрытияКредита");
  aList.Add(лкПользователь,"лкПользователь");
  LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","МенюЗакрытьЧек");
  ВремяПоследнегоНажатия:=0;
  ОчиститьТаблицуТоваров();
  ОбновитьИнформацию(1);
EndFunction

Function ВнутренняяВыполнитьОбменРабочийПотокЛоги(Текст,Тип,Цвета,спПараметры)
  фмТекстЛогов:=спПараметры["ТекстЛогов"];
  If not IsEmpty(фмТекстЛогов) Then
    фмТекстЛогов.Caption:=Текст;
    If (Тип<0)or(Тип>2) Then
      фмТекстЛогов.FontColor:=_CLR_RED;
      фмТекстЛогов.FontStyle:=1;
    Else
      фмТекстЛогов.FontColor:=_CLR_WINDOWTEXT;
      фмТекстЛогов.FontStyle:=0;
    EndIf;
  EndIf;
EndFunction

Function ВнутренняяВыполнитьОбменРабочийПотокСтатус(Тип,Текст,Прогресс,Всего,спПараметры)
  фмТекстСтатуса:=спПараметры["ТекстЛогов"];
  If not IsEmpty(фмТекстСтатуса) Then
    фмТекстСтатуса.Caption:=Текст+?((Прогресс>0)And(Всего>0),", "+Прогресс+" из "+Всего+"...");
  EndIf;
EndFunction

Function ВнутренняяВыполнитьОбменРабочийПоток(спПараметры)
  aList:=List.Create();
  aList["Команда"]:=спПараметры["Команда"];
  aList["Элемент"]:=спПараметры["Элемент"];
  aList["ВизуальныйВызов"]:=1;
  фмТекстЛогов:=спПараметры["ТекстЛогов"];
  фмКнопкаОК:=спПараметры["КнопкаОК"];
  фмКнопкаОК.IsDisabled:=1;
  фмКнопкаОК.Color:=_CLR_WINDOW;
  StandardOutputHook(0,"ВнутренняяВыполнитьОбменРабочийПотокЛоги",0,спПараметры);
  StandardOutputHook(2,"ВнутренняяВыполнитьОбменРабочийПотокСтатус",0,спПараметры);
  Try
    Try
      LoadModule(10,спПараметры["Протокол"],aList,0,"Module","Form");
    Except
      //Текст исключения уже на экране, его перехватил StandardOutputHook
    EndTry;
  Finally
    StandardOutputHook(2);
    StandardOutputHook(0);
    фмКнопкаОК.IsDisabled:=0;
    фмКнопкаОК.Color:=MixColors(_CLR_WINDOW,_CLR_GREEN,15);
    If фмТекстЛогов.FontColor<>_CLR_RED Then
      фмТекстЛогов.Caption:="Работа окончена";
    EndIf;
  EndTry;
EndFunction

Function ВнутренняяВыполнитьОбмен(спПараметры)
  СпЭлементы:=спПараметры["СпЭлементы"];
  спПараметры["ТекстЛогов"]:=СпЭлементы["2"];
  //спПараметры["ТекстСтатуса"]:=СпЭлементы["2"];
  спПараметры["КнопкаОК"]:=СпЭлементы["3"];
  Mutex.ExecuteFunctionInSeparateThread("ВнутренняяВыполнитьОбменРабочийПоток",0,спПараметры);
EndFunction

Function ВыполнитьОбмен()
  аПротокол:=Ref.рознПротоколыОбменаМагазинов;
  спМагазины:=List.Create(ТекущийМагазин);
  For i:=1 To спДополнительныеКассы.Size() Do
    спДрайверы:=спДополнительныеКассы[i];
    спИнф:=спДрайверы[1];
    спМагазины.Add(спИнф["Магазин"]);
  EndDo;
  
  спПротоколы:=Ref.рознПротоколыОбменаМагазинов.Load(0,"~(@Parent IN спМагазины)And(@Status=0)");
  ТабПротоколы:=Tab.Create("Магазин,Протокол");
  For i:=1 To спПротоколы.Size() Do
    ТабПротоколы.AddLine("Магазин,Протокол",спПротоколы[i].Parent(),спПротоколы[i]);
  EndDo;
  ТабПротоколы.Sort("Магазин,Протокол");
  ТабКнопки:=Tab.Create("Заголовок,Картинка,Цвет,Тип,Протокол,Команда");
  аМагазин:=0;
  ТабПротоколы.Select();
  While ТабПротоколы.Next() Do
    //Modules\FreeForms\ПротоколыОбмена\Фронтол\
    Стр:=GetFileName(RemoveBackSlash(ТабПротоколы.Протокол.ПутьДрайвераОбмена));
    If Стр="" Then
      Continue;
    EndIf;
    If аМагазин<>ТабПротоколы.Магазин Then
      ТабКнопки.AddLine("Заголовок,Картинка,Цвет,Тип,Протокол,Команда","Для магазина "+ТабПротоколы.Магазин,0,0,1,0,0);
      аМагазин:=ТабПротоколы.Магазин;
    EndIf;
    ТабКнопки.AddLine("Заголовок,Картинка,Цвет,Тип,Протокол,Команда","Выгрузка "+Стр,75,_CLR_GREEN,0,ТабПротоколы.Протокол,1);
    ТабКнопки.AddLine("Заголовок,Картинка,Цвет,Тип,Протокол,Команда","Загрузка "+Стр,76,_CLR_GREEN,0,ТабПротоколы.Протокол,2);
    ТабКнопки.AddLine("Заголовок,Картинка,Цвет,Тип,Протокол,Команда","Загрузка и "+_NEWLINE+"выгрузка "+Стр,292,_CLR_BLUE,0,ТабПротоколы.Протокол,3);
  EndDo;
  If ТабКнопки.Size()=0 Then
    Box("Для магазин"+?(спДополнительныеКассы.Size()>0,"ов","а")+" не задано ни одного протокола обмена!",Q_STOP);
    Exit;
  EndIf;
  ТабКнопки.AddLine("Заголовок,Картинка,Цвет,Тип,Протокол,Команда","Вернуться",0,0,0,0,0);
  
  aList:=List.Create();
  aList.Add(ТабКнопки,"ТабКнопки");
  aList.Add(3,"КнопокПоГоризонтали");
  aList.Add("Доступные способы обмена:","Заголовок");
  LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ЧастыеДействия");
  aNum:=Number(aList["Результат"]);
  If _Or(aNum=0,IsEmpty(ТабКнопки["Протокол",aNum])) Then
    Exit;
  EndIf;
  bNum:=ТабКнопки["Команда",aNum];
  Элемент:=ТабКнопки["Протокол",aNum];
  bList:=List.Create("Выгрузка","Загрузка","Загрузка и выгрузка");
  Команда:=bList[bNum];
  Заголовок:=Replace(ТабКнопки["Заголовок",aNum],_NEWLINE,"");
  Цвет:=MixColors(_CLR_WINDOW,ТабКнопки["Цвет",aNum],15);
  
  ОчиститьБуферContains();
  ТабКнопки:=Tab.Create("Заголовок,Картинка,Цвет,Тип,Протокол,Команда,Высота,Ширина,ЦветФона");
  ТабКнопки.AddLine("Заголовок,Картинка,Цвет,Тип,Протокол,Команда,Ширина,Высота,ЦветФона","Выполняется "+Заголовок+"...",0,0,1,0,0,250,16,_CLR_WINDOW);
  ТабКнопки.AddLine("Заголовок,Картинка,Цвет,Тип,Протокол,Команда,Ширина,Высота,ЦветФона","",0,0,2,0,0,250,62,Цвет);
  ТабКнопки.AddLine("Заголовок,Картинка,Цвет,Тип,Протокол,Команда","Закрыть",0,_CLR_BTNHIGHLIGHT,0,0,1);
  
  aList:=List.Create();
  aList.Add(ТабКнопки,"ТабКнопки");
  aList.Add(1,"КнопокПоГоризонтали");
  aList.Add(1,"ЗапретОтмены");
  aList.Add("Выполняется обмен...","Заголовок");
  aList.Add("ВнутренняяВыполнитьОбмен","ПослеИнициализации");
  aList.Add(ТабПротоколы.Протокол.ПутьДрайвераОбмена,"Протокол");
  aList.Add(Команда,"Команда");
  aList.Add(Элемент,"Элемент");  
  LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ЧастыеДействия");  
EndFunction

Function ВыполнитьПечатьОтчетаПлатежногоТерминала(спНастройкиККМ,спТерминалы,ТипОтчета,СтрТипОтчета)
  For i:=1 To спТерминалы.Size() Do
    спПлатежныйТерминал:=спТерминалы[i];
    спПлатежныйТерминал["Кассир"]:=ТекущийКассир.Контрагент;
    спПлатежныйТерминал["ДополнительнаяИнформация"]:="";
    спПлатежныйТерминал["ДополнительнаяИнформацияНаЭкран"]:="";
    Стр:=глВыполнитьФункциюДрайвера(ТипОтчета,спПлатежныйТерминал);
    If IsEmpty(Стр) Then
      If Trim(спПлатежныйТерминал["ДополнительнаяИнформация"])<>"" Then
        спНастройкиККМ["ДополнительнаяИнформация"]:=спПлатежныйТерминал["ДополнительнаяИнформация"];
        глВыполнитьФункциюДрайвера("PrintText",СпНастройкиККМ);
      ElseIf Trim(спПлатежныйТерминал["ДополнительнаяИнформацияНаЭкран"])<>"" Then
        aList:=List.Create();
        aList.Add(СтрТипОтчета+" банковского терминала:","Заголовок");
        aList.Add(спПлатежныйТерминал["ДополнительнаяИнформацияНаЭкран"],"Сообщение");
        LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ТекстовоеСообщение");  
      EndIf;
    Else
      Box("Невозможно выполнить "+СтрТипОтчета+" в терминале: "+спПлатежныйТерминал["Оборудование"]+", ошибка: "+Стр,Q_STOP);          
    EndIf;
  EndDo;
EndFunction



Function ЗакрытьКассовуюСмену(локТекущийМагазин,локСпНастройкиККМ,Кнопка=0,спТерминалы=спПлатежныеТерминалы)
  Try
    Стр:=?(not локТекущийМагазин.флНеСоздаватьСписанияПиваВЕГАИС,"Операция также создаст документ списания в ЕГАИС для всех товаров, проданных за текущую смену, операция может занять некоторое время. ","");
    If AskQuestion("Закрыть кассовую смену для "+локТекущийМагазин+"? "+Стр+"Вы уверены?",Q_QUESTION+Q_YESNO,R_YES)=R_NO Then
      Exit 0;
    EndIf;
    If not локТекущийМагазин.флНеСоздаватьСписанияПиваВЕГАИС Then
      Стр:="";
      If not глСоздатьКонсолидированноеСписаниеЕГАИС(локТекущийМагазин,Кнопка,Стр,,,1) Then
        Box("Ошибка при создании списания ЕГАИС: "+Стр+"!",Q_STOP);
        Exit 0;
      EndIf;
      If Стр<>"" Then
        Box(Стр,Q_WARNING);
      EndIf;
    EndIf;
    If Кнопка<>0 Then
      Кнопка.Caption:="Закрытие...";
    EndIf;
    локСпНастройкиККМ["Кассир"]:=ТекущийКассир.Контрагент;
    Стр:=глВыполнитьФункциюДрайвера("CloseShift",локСпНастройкиККМ);
    If IsEmpty(Стр) Then
      If (локТекущийМагазин=ТекущийМагазин)Or(спТерминалы<>спПлатежныеТерминалы) Then
        //Закрываем смену в платежных терминалах
        ВыполнитьПечатьОтчетаПлатежногоТерминала(локСпНастройкиККМ,спТерминалы,"CloseShift","закрытие смены");
      EndIf;
      Exit 1;
    EndIf;
  Except
    Стр:=PopError();
  EndTry;
  Box("Не удалось закрыть смену, ошибка: "+Стр+"!",Q_STOP);
  Exit 0;
EndFunction

Function ОткрытьКассовуюСмену(локТекущийМагазин,локСпНастройкиККМ,Кнопка=0,спТерминалы=спПлатежныеТерминалы)
  Try
    If AskQuestion("Открыть кассовую смену для "+локТекущийМагазин+", вы уверены?",Q_QUESTION+Q_YESNO,R_YES)=R_NO Then
      Exit 0;
    EndIf;
    If Кнопка<>0 Then
      Кнопка.Caption:="Открытие...";
    EndIf;
    локСпНастройкиККМ["Кассир"]:=ТекущийКассир.Контрагент;
    Стр:=глВыполнитьФункциюДрайвера("OpenShift",локСпНастройкиККМ);
    If IsEmpty(Стр) Then
      If (локТекущийМагазин=ТекущийМагазин)Or(спТерминалы<>спПлатежныеТерминалы) Then
        //Открываем смену в платежных терминалах
        ВыполнитьПечатьОтчетаПлатежногоТерминала(локСпНастройкиККМ,спТерминалы,"OpenShift","открытие смены");
      EndIf;
      Exit 1;
    EndIf;
  Except
    Стр:=PopError();
  EndTry;
  Box("Не удалось открыть смену, ошибка: "+Стр+"!",Q_STOP);
  Exit 0;
EndFunction

Function ВывестиИнформациюОСрокеДействияФН(локТекущийМагазин,локСпНастройкиККМ)
  Try
    локСпНастройкиККМ["ТипЗапросаИнформации"]:="ДатаОкончанияФН";
    Стр:=глВыполнитьФункциюДрайвера("DeviceInfo",локСпНастройкиККМ);
    If IsEmpty(Стр) Then
      аДата:=локСпНастройкиККМ["ОтветНаЗапросИнформации"];
      If not IsEmpty(аДата) Then
        аРазница:=GetPeriod(Date(),аДата,3);
        Стр:="";
        If аРазница<=0 Then
          Стр:="истек!";
        ElseIf аРазница<48*60 Then //За два дня
          Стр:="истекает через "+?(аРазница div 60=0,"",Str(аРазница div 60)+" ч. ")+Str(аРазница mod 60)+" м.!";
        ElseIf аРазница<7*24*60 Then //За неделю
          Стр:="истекает через "+?(аРазница div 1440=0,"",Str(аРазница div 1440)+" дн. ")+Str((аРазница div 60) mod 24)+" ч.!";
        EndIf;
        If Стр<>"" Then
          Box("Внимание! Срок действия фискального накопителя ККМ "+Стр+" Если не обновить вовремя ФН, продавать продукцию будет невозможно!",Q_WARNING);
        EndIf;
      EndIf;
    EndIf;
  Except
  EndTry;
EndFunction

Function ПодборТоваровДобавитьТовар(Номенклатура)
  Фл:=0;
  аКоличество:=1;
  ФлОбщепит:=_And(Номенклатура.флАлкогольнаяПродукция,ТекущийМагазин.флМагазинОбщепита=1,not Номенклатура.флПодлежитПрослеживаемости);
  If _And(not IsEmpty(Номенклатура),_Or(Номенклатура.флВесовойТовар=1,ФлОбщепит)) Then
    Фл:=1;
    aList:=List.Create();
    aList.Add(Номенклатура,"Номенклатура");
    If ФлОбщепит Then
      If Номенклатура.ОбъемЛитров=0 Then
        Box("В номенклатуре "+Номенклатура+" ("+Номенклатура.Code+") не заполнен объем штучной позиции! Невозможно конвертировать позиции в литры!",Q_STOP);
        Exit 3;
      EndIf;
      зЕд:=Ref.тмцЕдиницыИзмерения;
      If not зЕд.Find("Name","л") Then
        Box("В БД отсутвует единица измерения литр!",Q_STOP);
        Exit 3;
      EndIf;
      aList.Add(зЕд,"Единица");
    EndIf;
    LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВвестиМассу");  
    If aList["Ответ"]<>1 Then
      Exit;
    Endif;    
    аКоличество:=Max(0,Number(aList["Количество"]));
    If ФлОбщепит Then
      If аКоличество>Номенклатура.ОбъемЛитров Then
        Box("Введенное количество превышает объем бутылки!",Q_STOP);
        Exit;
      EndIf;
      аКоличество:=аКоличество/Номенклатура.ОбъемЛитров;
    EndIf;
  EndIf;
  аМРЦ:=0;
  аПартия:=0;
  аМарка:=0;
  If _And(Номенклатура.флПодлежитПрослеживаемости,Номенклатура.ГИСМТТоварнаяГруппа.ВнешнееНаименование="tobacco") Then
    аМРЦ:=ВыбратьМаксимальнуюПродажнуюЦену(Номенклатура,аПартия,аМарка);
    If аМРЦ<0 Then
      Exit;
    EndIf;
  EndIf;
  
  If ДобавитьТоварВТаблицуТоваров(ПоискТабПозиции,1,Номенклатура,аПартия,аМарка,аКоличество,1,,аМРЦ) Then
    If not Фл Then
      Box("Позиция добавлена в реализацию!",Q_INFORMATION);
    EndIf;
  EndIf;
EndFunction

Function ПодборТоваровДобавитьТаблицуТоваров(aTab)
  aNum:=0;
  ПоискТабПозиции.Lock();
  Try
    aNum:=aNum+ДобавитьТоварВТаблицуТоваров(ПоискТабПозиции,1,aTab.Номенклатура,?(IsEmpty(aTab.Партия),0,aTab.Партия),0,aTab.Количество);
  Finally
    ПоискТабПозиции.UnLock();
  EndTry;
  Box("Позиций добавлено в реализацию: "+aNum+"!",Q_INFORMATION);
EndFunction

Function ЗакрытьЧекРасчетСдачиОбновить()
  СуммаПоВсемКассам:=Param["СуммаПоВсемКассам"];
  См2:=Round(Form.тСуммаНаличные.Value+Form.тСуммаКарта.Value+Form.тСуммаСертификатов.Value,2);
  ФлЗнак:=0;
  Form.тИтогоСдача.Caption:=FormatNumber(Abs(См2-СуммаПоВсемКассам),0," ",2);
  If См2<СуммаПоВсемКассам Then
    If Form.тИтогоСдачаТекст.FontColor<>_CLR_RED Then
      Form.тИтогоСдачаТекст.FontColor:=_CLR_RED;
      Form.тИтогоСдачаТекст.Caption:="Итого осталось оплатить:";
      Form.тИтогоСдача.Color:=MixColors(_CLR_BTNFACE,_CLR_RED,10);
    EndIf;   
  Else
    If Form.тИтогоСдачаТекст.FontColor<>_CLR_WINDOWTEXT Then
      Form.тИтогоСдачаТекст.FontColor:=_CLR_WINDOWTEXT;
      Form.тИтогоСдачаТекст.Caption:="Итого сдача:";
      Form.тИтогоСдача.Color:=_CLR_BTNFACE;
    EndIf;   
  EndIf;
EndFunction

Function ЗакрытьЧекОбновитьСуммы(ФлПолноеОбновление=0)
  If ФлПолноеОбновление=1 Then
    If ТекущаяОперация=3 Then
      //Кредит, запретить все способы оплаты
      Form.тСуммаНаличные.Value:=0;
      Form.тСуммаНаличные.IsDisabled:=1;
      Form.тСуммаНаличныеТекст.IsDisabled:=1;
      Form.тСуммаНаличныеТекст.Caption:="Сумма наличными:";
      
      Form.тСуммаКарта.Value:=0;
      СкидочнаяКартаЧека:=0;
      СкидочнаяКартаЧекаПеременные:=0;
      МодульУсловияСкидочнойКарты:=0;
      Form.тСуммаКарта.IsDisabled:=1;
      Form.тСуммаКартаТекст.IsDisabled:=1;
      
      Form.тСуммаСертификатов.Value:=0;
      ТабСертификатыЧека.ClearLines();
      ТабДепозитыЧека.ClearLines();
      Form.тСуммаСертификатов.IsDisabled:=1;
      Form.тСуммаСертификатовТекст.IsDisabled:=1;
    ElseIf ТекущаяОперация=2 Then
      //Аванс
      См:=Max(Form.тСуммаЧека.Value-Form.тСуммаСкидочныхКарт.Value-Form.тСуммаСкидок.Value,0);
      Form.тСуммаНаличные.Value:=См;
      Form.тСуммаНаличные.IsDisabled:=0;
      Form.тСуммаНаличныеТекст.IsDisabled:=0;
      Form.тСуммаНаличныеТекст.Caption:="Сумма аванса:";
      
      Form.тСуммаКарта.Value:=0;
      СкидочнаяКартаЧека:=0;
      СкидочнаяКартаЧекаПеременные:=0;
      МодульУсловияСкидочнойКарты:=0;
      Form.тСуммаКарта.IsDisabled:=1;
      Form.тСуммаКартаТекст.IsDisabled:=1;
      
      Form.тСуммаСертификатов.Value:=0;
      ТабСертификатыЧека.ClearLines();
      ТабДепозитыЧека.ClearLines();
      Form.тСуммаСертификатов.IsDisabled:=1;
      Form.тСуммаСертификатовТекст.IsDisabled:=1;
    ElseIf ТекущаяОперация=1 Then
      //Возврат
      Form.тСуммаНаличные.IsDisabled:=0;
      Form.тСуммаНаличныеТекст.IsDisabled:=0;
      Form.тСуммаНаличныеТекст.Caption:="Сумма наличными:";
      
      Form.тСуммаКарта.IsDisabled:=0;
      Form.тСуммаКартаТекст.IsDisabled:=0;
      
      Form.тСуммаСертификатов.Value:=0;
      ТабСертификатыЧека.ClearLines();
      ТабДепозитыЧека.ClearLines();
      Form.тСуммаСертификатов.IsDisabled:=1;
      Form.тСуммаСертификатовТекст.IsDisabled:=1;
    Else
      Form.тСуммаНаличные.IsDisabled:=0;
      Form.тСуммаНаличныеТекст.IsDisabled:=0;
      Form.тСуммаНаличныеТекст.Caption:="Сумма наличными:";
      
      Form.тСуммаКарта.IsDisabled:=0;
      Form.тСуммаКартаТекст.IsDisabled:=0;
      
      Form.тСуммаСертификатов.IsDisabled:=0;
      Form.тСуммаСертификатовТекст.IsDisabled:=0;
    EndIf;
  EndIf;

  If Form.тСуммаНаличные.Value<0 Then
    Form.тСуммаНаличные.Value:=0;
  EndIf;
  If Form.тСуммаКарта.Value<0 Then
    Form.тСуммаКарта.Value:=0;
  EndIf;
  
  //Нахождение долга покупателя
  If ФлПолноеОбновление Then
    Стр:="Покупатель:";
    ДолгПокупателя:=0;
    If Form.зК.Value.Selected()<>0 Then
      Контрагент:=ТекущийМагазин.ДоговорРозничногоПокупателя.Parent();
      If Form.зК.Value<>Контрагент Then
        ДолгПокупателя:=Storage.Взаиморасчеты.Gross1("Сумма",,0,"~(Договор.@Parent=Form.зК.Value)And(Договор.ЮрЛицо=ТекущийМагазин.ЮрЛицо)");
        If ДолгПокупателя<0 Then
          If ТекущаяОперация=0 Then
            ТекущаяОперация:=4;
          EndIf;
          Стр:="Покупатель (аванс "+глФРМ(-ДолгПокупателя)+"):";
        ElseIf ДолгПокупателя>0 Then
          Стр:="Покупатель (кредит "+глФРМ(ДолгПокупателя)+"):";
        ElseIf ТекущаяОперация=4 Then
          ТекущаяОперация:=0;
        EndIf;
      EndIf;
    EndIf;
    If Form.тПокупательТекст.Caption<>Стр Then
      Form.тПокупательТекст.Caption:=Стр;
    EndIf;
  EndIf;
    
  СуммаОбнуляемыхДепозитов:=0;
  СуммаДепозитов:=Round(ТабДепозитыЧека.Sum("Сумма"),2);
  ТабДепозитыЧека.Select();
  While ТабДепозитыЧека.Next() Do
    If ТабДепозитыЧека.Сертификат.ФлОбнулятьДепозитПриЗакрытииЧека=1 Then
      СуммаОбнуляемыхДепозитов:=Round(СуммаОбнуляемыхДепозитов+ТабДепозитыЧека.Сумма,2);
    EndIf;
  EndDo;
  //ФлСдачаДепозитов: 0 -- При наличии переплат любыми депозитами, показывать сдачу 0
  //                  1 -- При наличии переплат любыми депозитами, показывать сдачу остатка обнуляемых депозитов (остальные остаются или уменьшаются)
  См2:=Round(Form.тСуммаНаличные.Value+Form.тСуммаКарта.Value+Form.тСуммаСертификатов.Value,2);
  ФлЗнак:=0;
  If _Or(См2<Form.тСуммаЧека.Value,СуммаДепозитов=0) Then
    Form.тИтогоСдача.Value:=Abs(См2-Form.тСуммаЧека.Value);
    ФлЗнак:=Sign(См2-Form.тСуммаЧека.Value);
  ElseIf ФлСдачаДепозитов=1 Then
    //Оплат больше на 1000, обнуляемых=2000, необнуляемых=1000, Сдача=Min(1000,2000)+Max(0,1000-(2000+1000))=1000
    //Оплат больше на 4000, обнуляемых=2000, необнуляемых=1000, Сдача=Min(4000,2000)+Max(0,4000-(2000+1000))=3000
    См:=Round(См2-Form.тСуммаЧека.Value,2);
    Form.тИтогоСдача.Value:=Min(См,СуммаОбнуляемыхДепозитов)+Max(0,См-СуммаДепозитов);
  Else
    //Оплат больше на 1000, обнуляемых=2000, необнуляемых=1000, Сдача=Max(0,1000-(2000+1000))=0
    //Оплат больше на 4000, обнуляемых=2000, необнуляемых=1000, Сдача=Max(0,4000-(2000+1000))=1000
    См:=Max(Form.тСуммаЧека.Value,См2-СуммаОбнуляемыхДепозитов);
    Form.тИтогоСдача.Value:=Max(0,См-СуммаДепозитов);
  EndIf;
  Form.тИтого.Value:=См2;
  
  If ТекущаяОперация=3 Then
    //Кредит
    If Form.тИтогоСдачаТекст.Caption<>"Сумма документа:" Then
      Form.тИтогоСдачаТекст.FontColor:=_CLR_GREEN;
      Form.тИтогоСдачаТекст.Caption:="Сумма документа:";
      Form.тИтогоСдача.Color:=_CLR_BTNFACE;
    EndIf;
  ElseIf (ТекущаяОперация=4)And(ФлЗнак<0) Then
    If Form.тИтогоСдачаТекст.Caption<>"Сумма закрытия аванса:" Then
      Form.тИтогоСдачаТекст.FontColor:=_CLR_GREEN;
      Form.тИтогоСдачаТекст.Caption:="Сумма закрытия аванса:";
      Form.тИтогоСдача.Color:=_CLR_BTNFACE;
    EndIf;   
  ElseIf ФлЗнак<0 Then
    If Form.тИтогоСдачаТекст.FontColor<>_CLR_RED Then
      Form.тИтогоСдачаТекст.FontColor:=_CLR_RED;
      Form.тИтогоСдачаТекст.Caption:="Итого осталось оплатить:";
      Form.тИтогоСдача.Color:=MixColors(_CLR_BTNFACE,_CLR_RED,10);
    EndIf;   
  Else
    If Form.тИтогоСдачаТекст.FontColor<>_CLR_WINDOWTEXT Then
      Form.тИтогоСдачаТекст.FontColor:=_CLR_WINDOWTEXT;
      Form.тИтогоСдачаТекст.Caption:="Итого сдача:";
      Form.тИтогоСдача.Color:=_CLR_BTNFACE;
    EndIf;   
  EndIf;
  
  If ТекущаяОперация=0 Then
    Стр:="Продажа";
    Цвет:=_CLR_WINDOWTEXT;
    ЦветФона:=_CLR_BTNFACE;
  ElseIf ТекущаяОперация=1 Then
    Стр:="Возврат";
    Цвет:=_CLR_WHITE;
    ЦветФона:=_CLR_RED;
  ElseIf ТекущаяОперация=2 Then
    Стр:="Аванс (товар не выдается!)";
    Цвет:=_CLR_WHITE;
    ЦветФона:=_CLR_RED;
  ElseIf ТекущаяОперация=3 Then
    Стр:="Кредит (без получения денег)";
    Цвет:=_CLR_BLUE;
    ЦветФона:=_CLR_BTNFACE;
  ElseIf ТекущаяОперация=4 Then
    Стр:="Закрытие аванса"+?(ДолгПокупателя<0," в "+глФРМ(-ДолгПокупателя));
    Цвет:=_CLR_BLUE;
    ЦветФона:=_CLR_BTNFACE;
  ElseIf ТекущаяОперация=5 Then
    Стр:="Закрытие кредита"+?(ДолгПокупателя>0," в "+глФРМ(ДолгПокупателя));
    Цвет:=_CLR_BLUE;
    ЦветФона:=_CLR_BTNFACE;
  EndIf;  
  If Form.тОперация.Caption<>Стр Then
    Form.тОперация.FontColor:=Цвет;
    Form.тОперация.Color:=ЦветФона;
    Form.тОперация.Caption:=Стр;
  EndIf;
  If КорректировочныеСвойстваЧека<>0 Then
    If Form.тОперацияТекст.Caption<>"Операция (КОРРЕКТИРОВКА):" Then
      Form.тОперацияТекст.Caption:="Операция (КОРРЕКТИРОВКА):";
      Form.тОперацияТекст.Color:=_CLR_RED;
      Form.тОперацияТекст.FontColor:=_CLR_WHITE;
    EndIf;
  ElseIf Form.тОперацияТекст.Caption<>"Операция:" Then
    Form.тОперацияТекст.Caption:="Операция:";
    Form.тОперацияТекст.Color:=_CLR_WINDOWTEXT;
    Form.тОперацияТекст.FontColor:=_CLR_BTNFACE;
  EndIf;
  
  If _And(ФлПолноеОбновление,спДисплеиПокупателя.Size()>0) Then
    //Вызвать обновление информации на дисплее покупателя
    For i:=1 To спДисплеиПокупателя.Size() Do
      спНастройки:=спДисплеиПокупателя[i];
      спНастройки["ТабПозиции"]:=ПоискТабПозиции;
      спНастройки["СуммаЧека"]:=Form.тСуммаЧека.Value;
      спНастройки["СуммаНаличные"]:=Form.тСуммаНаличные.Value;
      спНастройки["СуммаКарта"]:=Form.тСуммаКарта.Value;
      спНастройки["СуммаСертификатов"]:=Form.тСуммаСертификатов.Value;
      спНастройки["СуммаСкидок"]:=Form.тСуммаСкидок.Value;
      спНастройки["СуммаСкидочныхКарт"]:=Form.тСуммаСкидочныхКарт.Value;
      спНастройки["Итого"]:=Form.тИтого.Value;
      См:=Form.тСуммаСкидочныхКарт.Value+Form.тСуммаСкидок.Value;
      См2:=Form.тСуммаНаличные.Value+Form.тСуммаКарта.Value+Form.тСуммаСертификатов.Value;
      спНастройки["ИтогоСкидки"]:=См;
      спНастройки["ИтогоОплата"]:=См2;
      спНастройки["ИтогоСдача"]:=См2-Form.тСуммаЧека.Value;
      спНастройки["Магазин"]:=ТекущийМагазин;
      спНастройки["ОперацияОплаты"]:=ТекущаяОперация;
      спНастройки["Покупатель"]:=Form.зК.Value;
      спНастройки["ЭтапОперации"]:=-1;//Ожидание оплаты
      Try
        глВыполнитьФункциюДрайвера("UpdateDisplayInfoPayment",спНастройки);
      Except
      EndTry;
      спНастройки["ТабПозиции"]:=0;
      спНастройки["Магазин"]:=0;
    EndDo;
  EndIf;  
EndFunction

Function ЗакрытьЧекОбновитьАкции()
  ТабПозиции:=ПоискТабПозиции;
  Form.тСуммаЧека.Value:=ТабПозиции.Sum("Сумма");
  СмАкции:=0;
  СмКарта:=0;
  ТабАкцииЧека:=Tab.Create("Акция,Сумма");
  Form.тСуммаСертификатов.Value:=ТабДепозитыЧека.Sum("Сумма")+Max(Min(ТабСертификатыЧека.Sum("Сумма"),Form.тСуммаЧека.Value-ТабДепозитыЧека.Sum("Сумма")),0);
  ТабПозиции.Select();
  While ТабПозиции.Next() Do
    If ТабПозиции.Сумма<ТабПозиции.СуммаБезСкидки Then
      ТАкции:=ТабПозиции.ТАкции;
      СмСкидка:=Round(ТабПозиции.СуммаБезСкидки-ТабПозиции.Сумма,2);
      СмАкции:=СмАкции+СмСкидка;
      If not IsEmpty(ТАкции) Then
        ТАкции.Select();
        While _And(СмСкидка>0,ТАкции.Next()) Do
          См:=Min(ТАкции.Сумма,СмСкидка);
          If См>0 Then
            If _And(not IsEmpty(СкидочнаяКартаЧека),ТАкции.Акция=СкидочнаяКартаЧека) Then
              СмКарта:=Round(СмКарта+См,2);
              СмАкции:=Round(СмАкции-См,2);
            Else
              If ТабАкцииЧека.FindAndGoto(ТАкции.Акция,,"Акция")=0 Then
                ТабАкцииЧека.AddLine("Акция,Сумма",ТАкции.Акция,0);
              EndIf;
              ТабАкцииЧека.Сумма:=Round(ТабАкцииЧека.Сумма+См,2);
            EndIf;
            СмСкидка:=Round(СмСкидка-См,2);
          EndIf;
        EndDo;
      EndIf;
      If СмСкидка>0 Then
        If ТабАкцииЧека.FindAndGoto("Ручная скидка",,"Акция")=0 Then
          ТабАкцииЧека.AddLine("Акция,Сумма","Ручная скидка",0);
        EndIf;
        ТабАкцииЧека.Сумма:=ТабАкцииЧека.Сумма+СмСкидка;
      EndIf;
    EndIf;
  EndDo;
  Form.тСуммаСкидок.Value:=СмАкции;
  Form.тСуммаСкидочныхКарт.Value:=СмКарта;
EndFunction

Function ЗакрытьЧекОбновитьПочту(ИзменилсяКонтрагент=0)
  If ИзменилсяКонтрагент Then
    If ПочтаИлиТелефон="" Then
      ВремКонтрагент:=?(Form.зК.Value.Selected()=0,ТекущийМагазин.ДоговорРозничногоПокупателя.Parent(),Form.зК.Value);
      If ВремКонтрагент.Телефоны<>"" Then
        ПочтаИлиТелефон:=Trim(Replace(ВремКонтрагент.Телефоны,",",_NEWLINE));
        While Pos(_NEWLINE,ПочтаИлиТелефон)>0 Do
          TearStr(ПочтаИлиТелефон,_NEWLINE);
        EndDo;
        ПочтаИлиТелефон:=Trim(ПочтаИлиТелефон);
      EndIf;
    EndIf;
  EndIf;
  //Исправление параметра
  If ПочтаИлиТелефон<>"" Then
    If (ПочтаИлиТелефон[1]="+")And(Length(ПочтаИлиТелефон)=12)And(ContainsOnlyCharacters(ПочтаИлиТелефон,"+0123456789")) Then
      //Телефон
    ElseIf (ПочтаИлиТелефон[1]="8")And(Length(ПочтаИлиТелефон)=11)And(ContainsOnlyCharacters(ПочтаИлиТелефон,"0123456789")) Then
      ПочтаИлиТелефон:="+7"+Mid(ПочтаИлиТелефон,2);
    ElseIf _And(Pos("@",ПочтаИлиТелефон)>0,Pos(".",ПочтаИлиТелефон)>0,ContainsOnlyCharacters(ПочтаИлиТелефон,"@.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&'*+-/=?^_`{|}~")) Then
      //Почта
    Else
      ПочтаИлиТелефон:="";
    EndIf;
  EndIf;
  
  If ПочтаИлиТелефон<>"" Then
    Form.кнПочта.Color:=MixColors(_CLR_BTNFACE,_CLR_BLUE,10);
  Else
    Form.кнПочта.Color:=MixColors(_CLR_BTNFACE,_CLR_BTNHIGHLIGHT,10);
  EndIf;
EndFunction


Function СохранитьФайлОшибкиЧеков(ТОшибкиЧека)
  ИмяФайлаОшибок:="Temp\Розница\ОшибкиЧеков\Чек_"+FormatDate(Date(),"YYYYmmdd_hhttssppp")+".txt";
  Каталог:="Temp\Розница\ОшибкиЧеков\";
  File.CreateDirectory(Каталог);
  If not ТОшибкиЧека.Save(ИмяФайлаОшибок,65001,1) Then
    Logs.Write("Невозможно сохранить файл ошибок отмены чека "+ИмяФайлаОшибок,,"USER",0);
  EndIf;
EndFunction
      
Function ОтменаЧекаЕГАИС(спЕГАИС)
  ТабМарки:=спЕГАИС["ТабМарки"];
  СпНастройки:=List.Create();
  СпНастройки["ТабМарки"]:=ТабМарки;
  СпНастройки["НомерККТ"]:=спЕГАИС["НомерККТ"];
  СпНастройки["НомерСмены"]:=спЕГАИС["НомерСмены"];
  СпНастройки["НомерДокумента"]:=спЕГАИС["ККМНомерДокумента"];
  СпНастройки["Дата"]:=спЕГАИС["ЕГАИСДатаДокумента"];
  ТекущаяОперация:=спЕГАИС["ТекущаяОперация"];
  
  СтрОтвет:="";
  Фл:=глВыгрузитьСписаниеМарокВЕГАИС(ТекущийМагазин,СпНастройки,СтрОтвет,ТекущаяОперация<>1);
  If Фл Then
    If _Or(Pos("<url>",СтрОтвет)=0,Pos("<sign>",СтрОтвет)=0) Then
      Фл:=0;
    EndIf;
  EndIf;
  If not Фл Then
    Logs.Write("Невозможно фиксировать отмену операции ("+ТекущаяОперация+") по маркам в ЕГАИС!",,"USER",0);
    ТОшибкиЧека:=Text.Create(1);
    ТОшибкиЧека.AddString("Невозможно фиксировать отмену операции ("+ТекущаяОперация+") по маркам в ЕГАИС, пакет или ошибка:");
    ТОшибкиЧека.AddString(СтрОтвет);
    ТОшибкиЧека.AddString("");
    ТОшибкиЧека.AddString("Список позиций для отмены операции (цена, марка):");
    
    СтрМарки:="";
    ТабМарки.Select();//Партия,Марка,Цена
    While ТабМарки.Next() Do
      ТОшибкиЧека.AddString(""+ГлФРМ(ТабМарки.Цена)+", "+ТабМарки.Марка);
      СтрМарки:=СтрМарки+_NEWLINE+ТабМарки.Партия.Parent().Code+"@"+ТабМарки.Партия.Code+"@"+ТабМарки.Цена+"@"+ТабМарки.Количество+"@"+ТабМарки.Марка;
    EndDo;
    СохранитьФайлОшибкиЧеков(ТОшибкиЧека);
    
    //Сохраняем файл для автоматической отмены
    Путь:="Temp\ЕГАИС\Розница\ЗапросыФиксацииМарок\";
    If File.CreateDirectory(Путь) Then
      Файл:=Путь+"ОтменаФиксации_"+FormatDate(Date(),"YYYYmmddhhttss")+"_"+ТекущийМагазин.Code+".txt";
      //НомерПопытки<NEWLINE>КодМагазина<NEWLINE>ТипОперации<NEWLINE>НомерККТ<NEWLINE>НомерСмены<NEWLINE>НомерДокумента<NEWLINE>ДатаВремя<NEWLINE>Марка<NEWLINE>Марка...
      //Марки: КодНоменклатуры@КодПартии@Цена@Количество@КодМарки
      Стр:="0"+_NEWLINE+ТекущийМагазин.Code+_NEWLINE+ТекущаяОперация+_NEWLINE+спЕГАИС["НомерККТ"]+_NEWLINE+спЕГАИС["НомерСмены"]+_NEWLINE+спЕГАИС["ККМНомерДокумента"]+_NEWLINE+
        FormatDate(Date(спЕГАИС["ЕГАИСДатаДокумента"]),"dd.mm.YYYY hh:tt:ss")+СтрМарки;
      Try
        StringToFile(Стр,Файл,0,0);
      Except
      EndTry;
    EndIf;
  EndIf;
  Exit Фл;
EndFunction

Function ОтменаБанковскойОперации(спПлатежныйТерминалВрем);
  спПлатежныйТерминал:=спПлатежныйТерминалВрем["спПлатежныйТерминал"];
  спПлатежныйТерминал["Магазин"]:=спПлатежныйТерминалВрем["Магазин"];
  спПлатежныйТерминал["ТабПозиции"]:=спПлатежныйТерминалВрем["ТабПозиции"];
  спПлатежныйТерминал["ТипОперации"]:=101;
  спПлатежныйТерминал["ДополнительнаяИнформация"]:="";
  СтрОшибка:="";
  Try
    СтрОшибка:=глВыполнитьФункциюДрайвера("RegisterTransaction",спПлатежныйТерминал);
  Except
    СтрОшибка:=PopError();
  EndTry;
  If СтрОшибка<>"" Then
    Logs.Write("Ошибка выгрузки возврата на банковский терминал, сумма "+глФРМ(Form.тСуммаКарта.Value),,"USER",0);
    ТОшибкиЧека:=Text.Create(1);
    ТОшибкиЧека.AddString("Ошибка выгрузки возврата на банковский терминал: "+СтрОшибка+", сумма "+глФРМ(Form.тСуммаКарта.Value));
    СохранитьФайлОшибкиЧеков(ТОшибкиЧека);
  EndIf;
EndFunction

Function ДатаГИС(Стр) //2022-12-22T12:16:00.000Z
  Exit Date(Mid(Стр,9,2)+"."+Mid(Стр,6,2)+"."+Left(Стр,4)+" "+Mid(Стр,12,8));
EndFunction
    



Function ЗакрытьЧекПринятиеЧека()
  //ТекущаяОперация: 0 -- продажа, 1 -- возврат, 2 -- аванс (только в диалоге оплаты), 3 -- кредит (только в диалоге оплаты), 4 -- закрытие аванса (только в диалоге оплаты), 5 -- закрытие кредита (только в диалоге оплаты)
  //КорректировочныеСвойстваЧека (биты): 0 -- без выгрузки в ЕГАИС, 1 -- без банк. терминала, 2 -- без выгрузки в ККМ, 3 -- без создания лок. документов
  Form.тСтатусОбмена.Caption:="Подготовка оборудования...";
  Form.кнПринять.IsDisabled:=1;
  ТабПозиции:=ПоискТабПозиции;
  
  If not ПроверитьОперациюПоУсловиямПродаж(4,0) Then
    Exit 0;
  EndIf;
  
  спПлатежныйТерминал:=0;
  If (Form.тСуммаКарта.Value>0)And(КорректировочныеСвойстваЧека and 2=0) Then
    If спПлатежныеТерминалы.Size()>1 Then
      aList:=List.Create();
      aList.Add(спПлатежныеТерминалы,"спПлатежныеТерминалы");
      LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборПлатежногоТерминала");
      If aList["Ответ"]<>1 Then
        Exit 0;
      EndIf;
      спПлатежныйТерминал:=aList["ОтветТерминал"];
    ElseIf спПлатежныеТерминалы.Size()=1 Then
      спПлатежныйТерминал:=спПлатежныеТерминалы[1];
    EndIf;
  EndIf;
  
  If спДисплеиПокупателя.Size()>0 Then
    //Вызвать обновление информации на дисплее покупателя
    For i:=1 To спДисплеиПокупателя.Size() Do
      спНастройки:=спДисплеиПокупателя[i];
      спНастройки["ТабПозиции"]:=ТабПозиции;
      спНастройки["СуммаЧека"]:=Form.тСуммаЧека.Value;
      спНастройки["СуммаНаличные"]:=Form.тСуммаНаличные.Value;
      спНастройки["СуммаКарта"]:=Form.тСуммаКарта.Value;
      спНастройки["СуммаСертификатов"]:=Form.тСуммаСертификатов.Value;
      спНастройки["СуммаСкидок"]:=Form.тСуммаСкидок.Value;
      спНастройки["СуммаСкидочныхКарт"]:=Form.тСуммаСкидочныхКарт.Value;
      спНастройки["Итого"]:=Form.тИтого.Value;
      См:=Form.тСуммаСкидочныхКарт.Value+Form.тСуммаСкидок.Value;
      См2:=Form.тСуммаНаличные.Value+Form.тСуммаКарта.Value+Form.тСуммаСертификатов.Value;
      спНастройки["ИтогоСкидки"]:=См;
      спНастройки["ИтогоОплата"]:=См2;
      спНастройки["ИтогоСдача"]:=Form.тИтогоСдача.Value;
      спНастройки["Магазин"]:=ТекущийМагазин;
      спНастройки["ОперацияОплаты"]:=ТекущаяОперация;
      спНастройки["Покупатель"]:=Form.зК.Value;
      спНастройки["ЭтапОперации"]:=0;//Попытка оплаты
      Try
        глВыполнитьФункциюДрайвера("UpdateDisplayInfoPayment",спНастройки);
      Except
      EndTry;
      спНастройки["ТабПозиции"]:=0;
      спНастройки["Магазин"]:=0;
    EndDo;
  EndIf;
  
  Form.тСтатусОбмена.Caption:="Проверка продукции чека...";
  ФлРегистр2:=0;
  ТабМарки:=Tab.Create("Партия,Марка,Цена,Количество");
  ТабМарки2:=Tab.Create("Номенклатура,Партия,Марка");
  ТабИСМП:=Tab.Create("Номенклатура,Количество,Цена,Партия,Марка,ФлНеПрошлаПроверку,Причина,Поле1,Поле2,Тег1262,Тег1263,Тег1264,Тег1265");
  ТабПозиции.Select();
  While ТабПозиции.Next() Do
    If ТабПозиции.флМарки=1 Then
      ТМарки:=ТабПозиции.ТМарки;
      флВесовойТовар:=_Or(ТабПозиции.Номенклатура.флВесовойТовар=1,_And(ТабПозиции.Номенклатура.флАлкогольнаяПродукция,ТекущийМагазин.флМагазинОбщепита=1));
      If _Or(IsEmpty(ТМарки),_And((ТМарки.Size()<>ТабПозиции.Количество),not флВесовойТовар),_And((ТМарки.Size()<>1),флВесовойТовар)) Then
        Box("Неверное количество марок или марки не заданы для позиции "+ТабПозиции.Номенклатура+"!",Q_STOP);
        Exit 0;
      EndIf;
      If ТабПозиции.Номенклатура.флПодлежитПрослеживаемости Then
        ГИСМТТоварнаяГруппа:=ТабПозиции.Номенклатура.ГИСМТТоварнаяГруппа;
        If _AND(ТабПозиции.Номенклатура.флАлкогольнаяПродукция,_OR(IsEmpty(ГИСМТТоварнаяГруппа),ГИСМТТоварнаяГруппа.ВнешнееНаименование<>"beer")) Then
          Box("Для позиции "+ТабПозиции.Номенклатура+" установлены признаки алкогольной продукции и прослеживаемости, такая установка некорректна! Исправьте положение, прежде чем реализовывать этот товар!",Q_STOP);
          Exit 0;
        EndIf;
        aNum:=ТабИСМП.Size()+1;
        ТМарки.CopyTo(ТабИСМП,,,"Партия,Марка");
        Кл:=ТабПозиции.Количество;
        For i:=aNum To ТабИСМП.Size() Do
          ТабИСМП["Цена",i]:=Round(ТабПозиции.Сумма/ТабПозиции.Количество,2);
          If флВесовойТовар Then
            ТабИСМП["Количество",i]:=Кл;
            Кл:=0;
          Else
            ТабИСМП["Количество",i]:=1;
            Кл:=Max(0,Кл-1);
          EndIf;
        EndDo;
      Else
        If not ТабПозиции.Номенклатура.флАлкогольнаяПродукция Then
          Box("Для позиции с марочным учетом "+ТабПозиции.Номенклатура+" не установлены признаки алкогольной продукции или прослеживаемости, такая установка некорректна! Исправьте положение, прежде чем реализовывать этот товар!",Q_STOP);
          Exit 0;
        EndIf;
        aNum:=ТабМарки.Size()+1;
        ТМарки.CopyTo(ТабМарки,,,"Партия,Марка");
        ТМарки.CopyTo(ТабМарки2,,,"Партия,Марка");
        Кл:=ТабПозиции.Количество;
        If ТабПозиции.ФлЛитры=1 Then
          Кл:=Кл/ТабПозиции.Номенклатура.ОбъемЛитров;
        EndIf;
        Цена:=Round(ТабПозиции.Сумма/Кл,2);
        For i:=aNum To ТабМарки.Size() Do
          Кл2:=Round(Min(Кл,1),6);
          ТабМарки["Цена",i]:=Цена;
          ТабМарки["Количество",i]:=Кл2;
          Кл:=Round(Кл-Кл2,6);
        EndDo;
      EndIf;
    ElseIf ТабПозиции.Номенклатура.флАлкогольнаяПродукция Then
      ФлРегистр2:=1;
    EndIf;
  EndDo;
  
  ФлОперацияОтказ:=-1;
  
  Контрагент:=ТекущийМагазин.ДоговорРозничногоПокупателя.Parent();
  Договор:=ТекущийМагазин.ДоговорРозничногоПокупателя;
  
  If not ТекущийМагазин.флНеПроверятьНаличиеМарочногоТовара Then
    //Предварительно проверим марки, чтобы это не стало сюрпризом позднее
    ТабМарки2.Select();
    While ТабМарки2.Next() Do
      ТабМарки2.Номенклатура:=ТабМарки2.Партия.Parent();
    EndDo;
    If not глМаркиПроверитьНаличиеМарокИзЧека(ТабМарки2) Then
      Exit 0;
    EndIf;
  EndIf;
  
  //"Онлайн" проверка марок ГИС МТ
  If _AND(ТабИСМП.Size()>0,ТекущаяОперация=0) Then
    Стр:="";
    ТабИСМП.Select();
    While ТабИСМП.Next() Do
      AppendStringToBufferedString(Стр,?(Стр<>"",",","")+""""+EncodeString(ТабИСМП.Марка,"JSON")+"""");
    EndDo;
    If Стр<>"" Then
      флОк:=0;
      Try
        //TODO: провести запрос "СерийныйНомерФН"?
        //{"codes":["01048657365749062155esJWe\u001d93dGVz"],"fiscalDriveNumber": "1234567890123456"}    
        //Прокси:="";
        //глРазделитьАдресИПрокси(ТекущийМагазин.АдресЕГАИС,Прокси);
        спДрайверПодписи:=List.Create();
        //спДрайверПодписи["Прокси"]:=Прокси;
        If IsEmpty(глПутьБиблиотекиSSL) Then
          глЗагрузитьБиблиотекуSSL(ТекущийМагазин.ЮрЛицо,спДрайверПодписи);
          глПутьБиблиотекиSSL:=спДрайверПодписи["Библиотека"];
        EndIf;
        СтрНомер:=глНомераФНAPIККТ.Find(ТекущийМагазин.Code);
        If СтрНомер=0 Then
          спНастройкиККМ["ТипЗапросаИнформации"]:="СерийныйНомерФН";
          СтрНомер:=глВыполнитьФункциюДрайвера("DeviceInfo",спНастройкиККМ);
          СтрНомер:=?(IsEmpty(СтрНомер),спНастройкиККМ["ОтветНаЗапросИнформации"],0);
          глНомераФНAPIККТ.Add(ТекущийМагазин.Code,СтрНомер);
        Else
          СтрНомер:=глНомераФНAPIККТ.GetName(СтрНомер);
        EndIf;
        СтрНомер:=?(Length(СтрНомер)<>16,"",СтрНомер);

        спДрайверПодписи["Библиотека"]:=глПутьБиблиотекиSSL;
        Стр:="{""codes"":["+Стр+"]"+?(СтрНомер<>"",",""fiscalDriveNumber"":"""+СтрНомер+"""")+"}";
        СтрОшибка:=глВыполнитьЗапросГИСМТAPIККТ(ТекущийМагазин.ЮрЛицо,спДрайверПодписи,"/api/v4/true-api/codes/check",Стр);
        If not IsEmpty(СтрОшибка) Then
          Exit 0;
        EndIf;
        If IsEmpty(Стр) Then
          стрПредупреждение:="Невозможно соединиться с сервером ГИСМТ, хотя интернет присутствует.
          |Перезагрузите модем или обратитесь к администратору, чтобы исправить ошибку, 
          |иначе это может стать причиной штрафов государственных органов! Пропустить ошибку (только если вы получили разрешение администратора)?";
          If AskQuestion(стрПредупреждение,Q_STOP+Q_YESNO)<>R_YES Then
            СтрОшибка:="Невозможно соединиться с сервером ГИСМТ!";
            Exit 0;
          EndIf;
        EndIf;
        ТабМаркиСОшибками:=Tab.Create("Марка,Ошибка");
        КодЗапроса:=Стр;
        TearStr(КодЗапроса,"""reqId"":""");
        КодЗапроса:=TearStr(КодЗапроса,"""");
        ВремяЗапроса:=Стр;
        TearStr(ВремяЗапроса,"""reqTimestamp"":");
        ВремяЗапроса:=TearStr(ВремяЗапроса,"}");
        ВремяЗапроса:=TearStr(ВремяЗапроса,",");
        КодЗапроса:=?((КодЗапроса<>"")And(ВремяЗапроса<>""),"UUID="+КодЗапроса+"&Time="+ВремяЗапроса,"");
        
        TearStr(Стр,"""codes""");
        TearStr(Стр,"["); 
        While Стр<>"" Do
          //{"code":0,"description":"ok","codes":[{"cis":"00000046209474XXXXXXXXXXXXXXX","valid":true,"printView":"00000046209474XXXXXXX","gtin":"00000046209474","groupIds":[3],
          //  "verified":true,"found":true,"realizable":true,"utilised":true,"isBlocked":false,"productionDate":"2023-11-16T21:45:20.245Z","isOwner":false,"errorCode":0,"isTracking":false,
          //  "sold":false,"packageType":"UNIT","parent":"04600439935254lmJh6=q","producerInn":"7834005168","grayZone":false,"mrp":22300,"smp":11900}],"reqId":"c9909dd3-5e79-48d8-8dbb-77d6791380cf","reqTimestamp":1709728651300}
          TearStr(Стр,"{");
          Стр2:=TearStr(Стр,"}");//TODO: safe?
          Сп:=LoadJSONFromString(Стр2,1);
          //found:false or utilised:false: "Отсутствует информация в системе ГИС"
          //verified:false: "Неверный формат марки, ошибочная марка"
          //sold:true: "Марка уже выведена из оборота"
          //isBlocked:true: "Марка заблокированного товара"
          //realizable:false & grayZone:false: "Марка товара, не введенного в оборот"
          //expireDate<=Date(): "Марка товара с вышедшим сроком годности"
          //Цена>mrp: "Продажа выше максимальной розничной цены"
          СтрОшибка2:="";
          
          If (Сп["found"]="false")Or(Сп["utilised"]="false") Then
            СтрОшибка2:=Сп["cis"]+": отсутствует информация в системе ГИС";
          ElseIf Сп["verified"]="false" Then
            СтрОшибка2:=Сп["cis"]+": неверный формат марки, ошибочная марка";
          ElseIf Сп["sold"]="true" Then
            СтрОшибка2:=Сп["cis"]+": марка уже выведена из оборота";
          ElseIf Сп["isBlocked"]="true" Then
            СтрОшибка2:=Сп["cis"]+": марка заблокированного товара";
          ElseIf (Сп["realizable"]="false")And(Сп["grayZone"]="false") Then
            СтрОшибка2:=Сп["cis"]+": марка товара, не введенного в оборот";
          ElseIf _And(not IsEmpty(Сп["expireDate"]),ДатаГИС(Сп["expireDate"])<Date()) Then //"2022-12-22T12:16:00.000Z"
            СтрОшибка2:=Сп["cis"]+": марка товара с вышедшим сроком годности";
          ElseIf _And(Not IsEmpty(Сп["mrp"]),Number(Сп["mrp"])>0) Then
            If ТабИСМП.FindAndGoto(Сп["cis"],,"Марка")>0 Then
              If ТабИСМП.Цена>Number(Сп["mrp"])/100 Then
                СтрОшибка2:=Сп["cis"]+": продажа выше максимальной розничной цены ("+глФРМ(Number(Сп["mrp"]) )+" и "+глФРМ(ТабИСМП.Цена)+")";
              ElseIf _AND(Not IsEmpty(Сп["smp"]),Number(Сп["smp"])>0,not IsEmpty(Сп["groupids"]),Сп["groupids"].Find(12)=0) then
                If ТабИСМП.Цена<Number(Сп["smp"])/100 Then
                  СтрОшибка2:=Сп["cis"]+": продажа ниже минимальной розничной цены ("+глФРМ(Number(Сп["smp"]) )+" и "+глФРМ(ТабИСМП.Цена)+")";
                EndIf;
              EndIf;
            EndIf;
          EndIf;
          If СтрОшибка2<>"" Then
            AppendStringToBufferedString(СтрОшибка,_NEWLINE+СтрОшибка2);
            TearStr(СтрОшибка2,": ");
            ТабМаркиСОшибками.AddLine("Марка,Ошибка",Сп["cis"],СтрОшибка2);
          EndIf;
          If ТабИСМП.FindAndGoto(Сп["cis"],,"Марка")>0 Then
            ТабИСМП.Тег1262:="030";//Фиксированные значения
            ТабИСМП.Тег1263:="21.11.2023";
            ТабИСМП.Тег1264:="1944";
            ТабИСМП.Тег1265:=КодЗапроса;
          EndIf;
        EndDo;
        If ТабМаркиСОшибками.Size()>0 Then
          aList:=List.Create();
          aList["ТабПозиции"]:=ТабПозиции;
          aList["ТабМаркиСОшибками"]:=ТабМаркиСОшибками;
          aList["флГИСМТ"]:=1;
          aList["флОк"]:=0;
          //"РазрешитьПопытку" исходила из предпосылки, что ЕГАИС отдает всю информацию по маркам в первом запросе, оказывается, это не так.
          //ЕГАИС останавливается не первой найденной неверной марке. Для запроса с несколькими неверными марками, вопрос придется повторять несколько раз.
          //aList["РазрешитьПопытку"]:=ФлПопытка;
          LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","СписокНеверныхМарок");
          флОк:=aList["флОк"]; 
        Else
          флОк:=1;
        EndIf;
      Finally
        If not флОк Then
          If PeekError()<>"" Then
            СтрОшибка:=PeekError();
          EndIf;
          Box(СтрОшибка,Q_STOP);
          Form.тСтатусОбмена.Caption:=СтрОшибка;
          ИмяФайлаОшибок:="Temp\Розница\ОшибкиЧеков\Чек_"+FormatDate(Date(),"YYYYmmdd_hhttssppp")+".txt";
          ТОшибкиЧека:=Text.Create(1);
          If Not IsEmpty(СтрОшибка) Then
            ТОшибкиЧека.AddString(СтрОшибка);
            ТОшибкиЧека.Save(ИмяФайлаОшибок,65001,1);
          EndIf;
          Exit 0;
        EndIf;
      EndTry;
    EndIf;
  EndIf;
  
  If ТекущаяОперация>1 Then
    If Form.зК.Value.Selected()<>0 Then
      Контрагент:=Form.зК.Value;
      Договор:=ref.кнтДоговоры;
      If not Договор.FindEx(3,,"~(@Parent=Контрагент)And(ЮрЛицо=ТекущийМагазин.ЮрЛицо)And(@Status<>1)") Then
        If not Договор.FindEx(3,,"~(@Parent=Контрагент)And(ЮрЛицо=ТекущийМагазин.ЮрЛицо)") Then
          Договор.New();
          Договор.Name:=Trim(ТекущийМагазин.ЮрЛицо);
          Договор.Parent(Контрагент);
          Договор.ЮрЛицо:=ТекущийМагазин.ЮрЛицо;
          Try
            Договор.Save();
          Except
            Box("Невозможно создать договор выбранного покупателя: "+PopError()+"!",Q_STOP);
            Exit 0;
          EndTry;
        EndIf;
      EndIf;
    Else
      Box("Для выполнение этой операции необходимо выбрать покупателя!",Q_STOP);
      Exit 0;
    EndIf;
  EndIf;
  
  //Номер смены, номер ККТ
  Form.тСтатусОбмена.Caption:="Получение статуса ККМ...";
  НомерККТ:=0;
  НомерСмены:=0;
  ККМНомерДокумента:=0;
  ФлБумагаЗаканчивается:=0;
  ФлОбщаяПроблемаККМ:=0;
  Try
    спНастройкиККМ["ДополнительнаяИнформация"]:=1;
    Стр:=глВыполнитьФункциюДрайвера("ShiftInfo",спНастройкиККМ);
    If not IsEmpty(Стр) Then
      Raise Стр;
    EndIf;
    aNum:=Number(спНастройкиККМ["СменаСостояние"]);
    If aNum<>1 Then
      Raise "Смена не открыта или ошибочное состояние смены!";
    EndIf;
    НомерСмены:=Number(спНастройкиККМ["НомерСмены"]);
    НомерККТ:=спНастройкиККМ["НомерККТ"];
    ККМНомерДокумента:=спНастройкиККМ["НомерДокумента"];
    ФлБумагаЗаканчивается:=Number(спНастройкиККМ["БумагаЗаканчивается"]);
    ФлОбщаяПроблемаККМ:=Number(спНастройкиККМ["ОбщаяПроблемаККМ"]);
  Except
    Box("Невозможно получить номер смены ККТ или другую информацию: "+PopError()+"!",Q_STOP);
    Exit 0;
  EndTry;
  If ФлБумагаЗаканчивается Then
    If AskQuestion("Чековая лента кассовой машины закончилась или заканчивается. Рекомендуется сменить чековую ленту сейчас, после чего выполнить оплату. "+
        "Остановить оплату документа сейчас для замены чековой ленты?",Q_WARNING+Q_YESNO,R_YES)=R_YES Then
      Exit 0;
    EndIf;
  EndIf;
  If ФлОбщаяПроблемаККМ Then
    If AskQuestion("ККМ возвратила статус общей ошибки. Это могут быть проблемы с принтером, блокировка ККМ, или другая аппаратная ошибка. Рекомендуется "+
        "исправить ошибку, прежде чем производить печать. Остановить оплату документа сейчас для исправления проблем с ККМ?",Q_WARNING+Q_YESNO,R_YES)=R_YES Then
      Exit 0;
    EndIf;
  EndIf;
  
  //Блокировка скидочных карт и сертификатов
  СпБлокированныеАкции:=List.Create();
  If not ОбновитьСкидкуПоСкидочнымКартам(1,СпБлокированныеАкции) Then
    Exit 0;
  EndIf;
  СуммаСертификатов:=Form.тСуммаСертификатов.Value;
  СуммаДокумента:=Round(ТабПозиции.Sum("Сумма"),2);
  ТабДепозитыЧека.Select();
  While ТабДепозитыЧека.Next() Do
    См:=Min(СуммаДокумента,ТабДепозитыЧека.Сумма);
    СуммаДокумента:=Max(Round(СуммаДокумента-См,2),0);
    СуммаСертификатов:=Max(Round(СуммаСертификатов-См,2),0);
    If not ОбновитьСкидкуПоСкидочнымКартам(1,СпБлокированныеАкции,ТабДепозитыЧека.Сертификат,См) Then
      MassUnlock(СпБлокированныеАкции);
      Exit 0;
    EndIf;
  EndDo;  
  ТабСертификатыЧека.Select();
  While ТабСертификатыЧека.Next() Do
    См:=Min(СуммаСертификатов,ТабСертификатыЧека.Сумма);
    СуммаСертификатов:=Round(СуммаСертификатов-См,2);
    If not ОбновитьСкидкуПоСкидочнымКартам(1,СпБлокированныеАкции,ТабСертификатыЧека.Сертификат,См) Then
      MassUnlock(СпБлокированныеАкции);
      Exit 0;
    EndIf;
  EndDo;
  
  //Начало конструкции отправки данных в разные источники и позже транзации создания локальных документов 
  НомерДокументаККТ:="";
  СтрПоказатьОшибку:="";//Не выводим диалог внутри транзакции, чтобы не мешать другим кассам магазина
  Таблица:=0;
  флОк:=0;  
  Try
    //Изменение и блокировка элементов акций, если необходимо
    ТабПозиции.Select();
    While ТабПозиции.Next() Do
      If not IsEmpty(ТабПозиции.ТАкции) Then
        ТАкции:=ТабПозиции.ТАкции;
        ТАкции.Select();
        While ТАкции.Next() Do
          Акция:=ТАкции.Акция;
          If _And(IsDBObject(Акция),_Or(Акция.DBName()="рознСкидочныеКарты",Акция.БюджетРубли>0,Акция.БюджетШтуки>0)) Then
            i:=СпБлокированныеАкции.Find(Акция,,1);
            If i=0 Then
              аПольз:="";аМаш:="";аВремя:="";
              аДата:=Date();
              Фл:=0;
              While GetPeriodMs(аДата)<500 Do
                If Акция.Lock(аПольз,аМаш,аВремя)>0 Then
                  Фл:=1;
                  Break;
                EndIf;
                Sleep(5);
              EndDo;
              If not Фл Then
                Стр:="Невозможно заблокировать элемент акции "+Акция+", так как в данный момент он занят пользователем "+аПольз+" на "+аМаш+" в "+аВремя+"! Попробуйте выполнить действие еще раз";
                Box(Стр,Q_STOP);
                Form.тСтатусОбмена.Caption:=Стр;
                Exit 0;
              EndIf;
              СпБлокированныеАкции.Add(Акция,,,1);
              Акция.Reload();
            Else
              Акция:=СпБлокированныеАкции[i];
            EndIf;
            If Акция.DBName()<>"рознСкидочныеКарты" Then
              If Акция.БюджетРубли>=0 Then
                Акция.БюджетРубли:=Max(Акция.БюджетРубли-ТАкции.Сумма,0);
              EndIf;
              If Акция.БюджетШтуки>=0 Then
                Акция.БюджетШтуки:=Max(Акция.БюджетШтуки-ТАкции.Количество,0);
              EndIf;
            EndIf;
          EndIf;
        EndDo;
      EndIf;
    EndDo;
  
  
    //Отправка марок в ЕГАИС
    ЕГАИСсылка:="";
    ЕГАИСПодпись:="";
    If not IsEmpty(спОборудованиеДляОтменыЧека["ЕГАИС"]) Then
      спЕГАИС:=спОборудованиеДляОтменыЧека["ЕГАИС"];
      ЕГАИСсылка:=спЕГАИС["ЕГАИСсылка"];
      ЕГАИСПодпись:=спЕГАИС["ЕГАИСПодпись"];
    ElseIf (ТабМарки.Size()>0)And(ТекущаяОперация<>5)And(ТекущаяОперация<>2)And(КорректировочныеСвойстваЧека and 1=0) Then
      Form.тСтатусОбмена.Caption:="Отправка информации в ЕГАИС...";
      ЕГАИСДатаДокумента:=Date();
      //Номер "следующего документа"
      ККМНомерДокумента:=Number(ККМНомерДокумента);
      If IsEmpty(ККМНомерДокумента) Then
        aDoc:=?(ТекущаяОперация<>1,Doc.Реализация,Doc.ВозвратОтПокупателя);
        aDoc.UseOrder("DocDate-");
        If aDoc.Find("Магазин",ТекущийМагазин) Then
          ККМНомерДокумента:=Number(Mid(aDoc.DocNum,4))+1;
        EndIf;
      EndIf;
      ККМНомерДокумента:=ККМНомерДокумента+1;
      
      //ФлПопытка:=1;
      While 1 Do
        СтрОтвет:="";
        СпНастройки:=List.Create();
        СпНастройки["ТабМарки"]:=ТабМарки;
        СпНастройки["НомерККТ"]:=НомерККТ;
        СпНастройки["НомерСмены"]:=НомерСмены;
        СпНастройки["НомерДокумента"]:=ККМНомерДокумента;
        СпНастройки["Дата"]:=ЕГАИСДатаДокумента;
        
        //СтрОтвет:="<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?><A><url>https://146.120.90.148:1444?id=ab43d5e0-855c-4b54-b1d8-ddeb34d1d110&amp;dt=1503271510&amp;cn=00040218</url>"+
        //  "<sign>32B7136A7BCEAFEBE4DA92D9510C196CC42DC56260E1E2802B8C24A8C3EA75F3978EA6963F370F3165B89DBF98FD94F2F0C7F4803965B62A6616A12D8159A5D3</sign><ver>2</ver></A>";
        If not глВыгрузитьСписаниеМарокВЕГАИС(ТекущийМагазин,СпНастройки,СтрОтвет,ТекущаяОперация=1) Then
          //<A><error>1: Проверка не пройдена: продукция не внесена в поштучный учет (197300668497251120001J7QWREV6ABDMVUBCTXH4DI26EQI3SBLUKF57E6RMMUI7CKFR3O7WGHSQVJDJBMUVMJ4QALJEKJPSHT7P345UQXEJHRGPYH4Y22AJNT2NXG2JTO5MVZVSZWDP4557YA6RI), ...</error><ver>2</ver></A>
          //Либо:1: Проверка не пройдена: По ШК 197300668497251120001J7QWREV6ABDMVUBCTXH4DI26EQI3SBLUKF57E6RMMUI7CKFR3O7WGHSQVJDJBMUVMJ4QALJEKJPSHT7P345UQXEJHRGPYH4Y22AJNT2NXG2JTO5MVZVSZWDP4557YA6RI продается объем 500.0000, превышающий остаток 0.0000!, По ШК ... 
          //Очистка текста ошибки
          If pos("<error>",СтрОтвет)>0 Then
            TearStr(СтрОтвет,"<error>");
            СтрОтвет:=TearStr(СтрОтвет,"</error>");
            If MatchRE("[A-Z0-9]{150}|[A-Z0-9]{68}",СтрОтвет,,,0)>0 Then
              //Если в ответе указаны отдельные марки, выведем их в специальный диалог для удобства: ... (...), ... (...), ... [...,...,...]
              ТабМаркиСОшибками:=Tab.Create("Марка,Ошибка");
              Стр:=СтрОтвет;
              Стр:=Replace(Стр,"Невозможно фиксировать списание марок в ЕГАИС, ошибка:","");
              Стр:=Replace(Стр,"Проверка не пройдена:","");
              Стр:=Replace(Стр,"1:","");

              спМарки:=MatchRE("[A-Z0-9]{150}|[A-Z0-9]{68}",Стр,,,1);
              For i:=1 To спМарки.Size() Do
                КонИндекс:=?(i=спМарки.Size(),Length(Стр),RightPos(",",Стр,Pos(спМарки[i+1],Стр)));
                СтрОшибка:=Mid(Стр,1,КонИндекс);
                ТабМаркиСОшибками.AddLine("Марка,Ошибка",спМарки[i],Trim(Replace(СтрОшибка,спМарки[i],Left(спМарки[i],4)+"...")));
                TearStr(Стр,СтрОшибка);
              EndDo;
              
              If ТабМаркиСОшибками.Size()>0 Then
                //Проверка на наличие ошибки "Невозможно фиксировать списание марок в ЕГАИС, ошибка: 1: Проверка не пройдена: По ШК 198314431... продается объем 250.0000, превышающий остаток 0.0000!"
                //!!! Не путать с ошибкой продукция не внесена в поштучный учет (187416610...) или  продается объем, превышающий остаток!
                //Ошибка возникает, если в ЕГАИС за маркой числится недостаточно списываемого объема.
                //Разница м/у списываемым товаром в ЕГАИС и фактическим объемом в бутылке может накапливаться из-за неточности разлива в рюмки
                ТабМаркиСОшибками.Select();
                While ТабМаркиСОшибками.Next() Do
                  If MatchRE("превышающий остаток [0-9]+\.[0-9]+",ТабМаркиСОшибками.Ошибка,,,0)>0 Then
                    СтрМарка:=ТабМаркиСОшибками.Марка;
                    If ТабМарки.FindAndGoto(СтрМарка,,"Марка")>0 Then
                      ТабМарки.Remove(ТабМарки.CurLine);
                    EndIf;
                    ТабМаркиСОшибками.Remove(ТабМаркиСОшибками.Curline);
                    ТабМаркиСОшибками.Curline:=ТабМаркиСОшибками.Curline-1;
                  EndIf;
                EndDo;
                
                If ТабМарки.Size()=0 Then
                  Break;
                EndIf;
                If ТабМаркиСОшибками.Size()=0 Then
                  Continue;
                EndIf;
                
                aList:=List.Create();
                aList["ТабПозиции"]:=ТабПозиции;
                aList["ТабМаркиСОшибками"]:=ТабМаркиСОшибками;
                //"РазрешитьПопытку" исходила из предпосылки, что ЕГАИС отдает всю информацию по маркам в первом запросе, оказывается, это не так.
                //ЕГАИС останавливается не первой найденной неверной марке. Для запроса с несколькими неверными марками, вопрос придется повторять несколько раз.
                //aList["РазрешитьПопытку"]:=ФлПопытка;
                LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","СписокНеверныхМарок");
                
                If aList["Ответ"]=1 Then
                  СпУдаленные:=aList["СпУдаленные"];
                  For i:=1 To СпУдаленные.Size() Do
                    While ТабПозиции.FindAndGoto(СпУдаленные[i],,"Номенклатура")>0 Do
                      ТабПозиции.Remove(ТабПозиции.CurLine);
                    EndDo;
                  EndDo;
                  Form.тСуммаНаличные.Value:=0;
                  Form.тСуммаКарта.Value:=0;
                  ЗакрытьЧекОбновитьАкции();
                  ЗакрытьЧекОбновитьСуммы(1);
                  If ТабПозиции.Size()>0 Then
                    СтрПоказатьОшибку:="Некоторые позиции были удалены из чека, проверьте корректность общей суммы!";
                  EndIf;
                  Exit 0;
                ElseIf aList["Ответ"]=2 Then
                  //Удалим из списания ЕГАИС указанные здесь марки
                  //ФлПопытка:=0;
                  Фл:=0;
                  ТабМаркиСОшибками.Select();
                  While ТабМаркиСОшибками.Next() Do
                    СтрМарка:=ТабМаркиСОшибками.Марка;
                    If ТабМарки.FindAndGoto(СтрМарка,,"Марка")>0 Then
                      ТабМарки.Remove(ТабМарки.CurLine);
                      Фл:=1;
                    EndIf;
                  EndDo;
                  If ТабМарки.Size()=0 Then
                    Break;//Нечего оправлять
                  EndIf;
                  If Фл Then
                    Continue;//Новая попытка
                  EndIf;
                EndIf;
              EndIf;
            //ElseIf Pos("2627:",СтрОтвет)=1 Then
            //  //Ошибка возникает, если в ЕГАИС за маркой числится недостаточно списываемого объема. Указание на марки в данной ошибке отсутствует (на июнь 2024).
            //  //Разница м/у списываемым товаром в ЕГАИС и фактическим объемом в бутылке может накапливаться из-за неточности разлива в рюмки
            //  //Все, что здесь можно сделать, это пропустить чек без выгрузки в ЕГАИС, так как там этот объем уже списан.
            //  ТОшибкиЧека:=Text.Create(1);
            //  ТОшибкиЧека.AddString(СтрОтвет);
            //  СохранитьФайлОшибкиЧеков(ТОшибкиЧека);
            //  спОборудованиеДляОтменыЧека["ЕГАИС"]:=List.Create();//Без отмены
            //  Break;
            EndIf;//Указание на марки в ответе, недостаточно объема
          EndIf;
          СтрПоказатьОшибку:="Невозможно фиксировать списание марок в ЕГАИС, ошибка: "+СтрОтвет+"!";
          Exit 0;
        EndIf;
        
        //СтрОтвет:
        //<?xml version="1.0" encoding="UTF-8" standalone="no"?>
        //<A>
        //<url>https://146.120.90.148:1444?id=ab43d5e0-855c-4b54-b1d8-ddeb34d1d110&amp;dt=1503271510&amp;cn=00040218</url>
        //<sign>32B7136A7BCEAFEBE4DA92D9510C196CC42DC56260E1E2802B8C24A8C3EA75F3978EA6963F370F3165B89DBF98FD94F2F0C7F4803965B62A6616A12D8159A5D3</sign>
        //<ver>2</ver>
        //</A>
        If _Or(Pos("<url>",СтрОтвет)=0,Pos("<sign>",СтрОтвет)=0) Then
          СтрПоказатьОшибку:="Ошибка фиксации списания марок в ЕГАИС, неизвестный ответ ЕГАИС!";
          Exit 0;
        EndIf;
        Стр0:=СтрОтвет;
        TearStr(Стр0,"<url>");
        ЕГАИСсылка:=DecodeHTMLString(TearStr(Стр0,"</url>"));
        TearStr(СтрОтвет,"<sign>");
        ЕГАИСПодпись:=DecodeHTMLString(TearStr(СтрОтвет,"</sign>"));
        
        спЕГАИС:=List.Create();
        спЕГАИС["ТабМарки"]:=ТабМарки;
        спЕГАИС["НомерККТ"]:=НомерККТ;
        спЕГАИС["НомерСмены"]:=НомерСмены;
        спЕГАИС["ККМНомерДокумента"]:=ККМНомерДокумента;
        спЕГАИС["ЕГАИСДатаДокумента"]:=ЕГАИСДатаДокумента;
        спЕГАИС["ЕГАИСсылка"]:=ЕГАИСсылка;
        спЕГАИС["ЕГАИСПодпись"]:=ЕГАИСПодпись;
        спЕГАИС["ТекущаяОперация"]:=ТекущаяОперация;
        спОборудованиеДляОтменыЧека["ЕГАИС"]:=спЕГАИС;
        Break;
      EndDo;//Цикл попыток выгрузки марок в ЕГАИС
    EndIf;
    
    
    //Отправка в платежный терминал
    спНастройкиККМ["ДополнительнаяИнформация"]:="";
    If not IsEmpty(спОборудованиеДляОтменыЧека["ПлатежныйТерминал"]) Then
      спПлатежныйТерминалВрем:=спОборудованиеДляОтменыЧека["ПлатежныйТерминал"];
      спНастройкиККМ["ДополнительнаяИнформация"]:=спПлатежныйТерминалВрем["ДополнительнаяИнформация"];
    ElseIf (спПлатежныйТерминал<>0)And(Form.тСуммаКарта.Value>0)And(ТекущаяОперация<>3)And(КорректировочныеСвойстваЧека and 2=0) Then
      Form.тСтатусОбмена.Caption:="Отправка информации в банковский терминал...";
      спПлатежныйТерминал["Сумма"]:=Form.тСуммаКарта.Value;
      спПлатежныйТерминал["Магазин"]:=ТекущийМагазин;
      спПлатежныйТерминал["ТабПозиции"]:=ТабПозиции;
      спПлатежныйТерминал["Покупатель"]:=Form.зК.Value;
      спПлатежныйТерминал["Кассир"]:=ТекущийКассир.Контрагент;
      //ТипОперации: приход для 0, 2, 4 (частично), 5
      //             возврат для 1
      спПлатежныйТерминал["ТипОперации"]:=?(ТекущаяОперация=1,1,0);
      спПлатежныйТерминал["ИнформацияПоТранзакции"]:=0;      
      спПлатежныйТерминал["ДополнительнаяИнформация"]:="";
      СтрОшибка:="";
      Try
        СтрОшибка:=глВыполнитьФункциюДрайвера("RegisterTransaction",спПлатежныйТерминал);
      Except
        СтрОшибка:=PopError();
      EndTry;
      If СтрОшибка<>"" Then
        СтрПоказатьОшибку:="Ошибка отправки информации на банковский терминал: "+СтрОшибка+"!";
        Exit 0;
      EndIf;
      спНастройкиККМ["ДополнительнаяИнформация"]:=спПлатежныйТерминал["ДополнительнаяИнформация"];
      
      спПлатежныйТерминалВрем:=List.Create();
      спПлатежныйТерминалВрем["спПлатежныйТерминал"]:=спПлатежныйТерминал;
      спПлатежныйТерминалВрем["Подтверждено"]:=0;
      спПлатежныйТерминалВрем["ДополнительнаяИнформация"]:=спПлатежныйТерминал["ДополнительнаяИнформация"];
      спПлатежныйТерминалВрем["ТекущаяОперация"]:=ТекущаяОперация;
      спПлатежныйТерминалВрем["Магазин"]:=ТекущийМагазин;
      спПлатежныйТерминалВрем["ТабПозиции"]:=ТабПозиции;
      спОборудованиеДляОтменыЧека["ПлатежныйТерминал"]:=спПлатежныйТерминалВрем;      
    EndIf;
  
    
    //Отправка в ККМ  
    СуммаДепозитов:=Round(ТабДепозитыЧека.Sum("Сумма"),2);//Работает как наличная оплата
    НомерДокументаККТ:="";
    If КорректировочныеСвойстваЧека and 4=0 Then
      ФлОперацияОтказ:=2;
      Try
        Form.тСтатусОбмена.Caption:="Отправка информации в ККМ...";
        ТабИСМП.Select();
        While ТабИСМП.Next() Do
          ТабИСМП.Номенклатура:=ТабИСМП.Партия.Parent();
        EndDo;
        ТабИСМП.Sort("Номенклатура");

        Таблица:=Tab.Create("Номенклатура,Количество,Сумма,ФлЛитры");
        ТабПозиции.CopyTo(Таблица,,,"Номенклатура,Количество,Сумма,ФлЛитры");
        //Таблица.Group("Номенклатура","Количество,Сумма");//Группировка искажает цены одинаковых позиций с разным МРЦ (сигареты)
        Таблица.AddColumn("СтавкаНДС");
        Таблица.Select();
        While Таблица.Next() Do
          Таблица.СтавкаНДС:=глСтавкаНДСНоменклатуры(ТекущийМагазин.ЮрЛицо,Таблица.Номенклатура);
          If Таблица.ФлЛитры=1 Then
            Таблица.Количество:=Таблица.Количество/Таблица.Номенклатура.ОбъемЛитров;
          EndIf;
        EndDo;
        Сумма:=Round(Таблица.Sum("Сумма"),2);
        ЭлектроннаяСумма:=Form.тСуммаКарта.Value;
        ДругаяБезналичнаяСумма:=Max(Сумма-ЭлектроннаяСумма-Form.тСуммаНаличные.Value-СуммаДепозитов,0);
        
        спНастройкиККМ["СуммаЗакрытияАванса"]:=0;
        ФлОперация:=1;
        ФлОперацияОтказ:=2;
        If ТекущаяОперация=1 Then //Возврат
          ФлОперация:=2;
          ФлОперацияОтказ:=1;
        ElseIf ТекущаяОперация=2 Then //Аванс
          ФлОперация:=10;
          ФлОперацияОтказ:=11;
        ElseIf ТекущаяОперация=3 Then //Кредит
          ФлОперация:=12;
          ФлОперацияОтказ:=13;
        ElseIf ТекущаяОперация=4 Then //Закрытие аванса
          ДолгПокупателя:=Storage.Взаиморасчеты.Gross1("Сумма",,0,"~(Договор.@Parent=Form.зК.Value)And(Договор.ЮрЛицо=ТекущийМагазин.ЮрЛицо)");
          спНастройкиККМ["СуммаЗакрытияАванса"]:=Min(Max(-ДолгПокупателя,0),Сумма);
          ФлОперация:=11;
          ФлОперацияОтказ:=10;
        ElseIf ТекущаяОперация=5 Then //Закрытие кредита
          ФлОперация:=13;
          ФлОперацияОтказ:=12;
        EndIf;
        
        спНастройкиККМ["ТипЧека"]:=ФлОперация;
        спНастройкиККМ["ФлРозничныйПокупатель"]:=Form.зК.Value.Selected()=0;
        If Form.зК.Value.Selected()<>0 Then
          спНастройкиККМ["Контрагент"]:=Form.зК.Value;
        EndIf;
        спНастройкиККМ["ЮрЛицо"]:=ТекущийМагазин.ЮрЛицо;
        спНастройкиККМ["ЕГАИССылка"]:=ЕГАИСсылка;
        спНастройкиККМ["ЕГАИСПодпись"]:=ЕГАИСПодпись;
        спНастройкиККМ["ТабИСМП"]:=ТабИСМП;
        спНастройкиККМ["Сумма"]:=Сумма;
        спНастройкиККМ["ЭлектроннаяСумма"]:=ЭлектроннаяСумма;
        спНастройкиККМ["ДругаяБезналичнаяСумма"]:=ДругаяБезналичнаяСумма;
        спНастройкиККМ["Таблица"]:=Таблица;
        спНастройкиККМ["Кассир"]:=ТекущийКассир.Контрагент;
        спНастройкиККМ["ПочтаИлиТелефонКлиента"]:=ПочтаИлиТелефон;
        спНастройкиККМ["ТабОшибкиПроверкиМарок"]:=0;
        //Ускорение, номера запрошены раньше
        спНастройкиККМ["НомерСмены"]:=НомерСмены;
        спНастройкиККМ["НомерДокумента"]:=ККМНомерДокумента;
        Стр:=глВыполнитьФункциюДрайвера("PrintReceipt",спНастройкиККМ);
        спНастройкиККМ["Таблица"]:=0;
        спНастройкиККМ["ДополнительнаяИнформация"]:="";
        If not IsEmpty(Стр) Then
          ФлОперацияОтказ:=-1;
          Raise Стр;
        EndIf;
        НомерДокументаККТ:=спНастройкиККМ["НомерДокумента"];
      Except
        спНастройкиККМ["Таблица"]:=0;
        спНастройкиККМ["ДополнительнаяИнформация"]:="";
        СтрПоказатьОшибку:="Ошибка отправки информации в кассовый терминал: "+PopError()+"!";
        Exit 0;
      EndTry;
    EndIf;
    
    
    //"Подтверждение" в банковских терминалах, если необходимо (не рекомендуется)
    If _And(not IsEmpty(спОборудованиеДляОтменыЧека["ПлатежныйТерминал"]),спОборудованиеДляОтменыЧека["ПлатежныйТерминал"]["Подтверждено"]=0) Then
      Form.тСтатусОбмена.Caption:="Отправка подтверждения в банковский терминал...";
      спПлатежныйТерминал["ТипОперации"]:=100;
      СтрОшибка:="";
      Try
        СтрОшибка:=глВыполнитьФункциюДрайвера("RegisterTransaction",спПлатежныйТерминал);
      Except
        СтрОшибка:=PopError();
      EndTry;
      If СтрОшибка<>"" Then
        спОборудованиеДляОтменыЧека["ПлатежныйТерминал"]:=0;
      
        //Отправка отказа в ККМ  
        If КорректировочныеСвойстваЧека and 4=0 Then
          Try
            спНастройкиККМ["Таблица"]:=Таблица;
            спНастройкиККМ["ТипЧека"]:=ФлОперацияОтказ;
            ФлОперацияОтказ:=-1;
            Стр:=глВыполнитьФункциюДрайвера("PrintReceipt",спНастройкиККМ);
            спНастройкиККМ["Таблица"]:=0;
            If not IsEmpty(Стр) Then
              Raise Стр;
            EndIf;
          Except
            спНастройкиККМ["Таблица"]:=0;
            СтрОшибка2:=PopError();
            СтрПоказатьОшибку:="Внимание! Не удалось зафиксировать оплату в банковском терминале, однако при отмене ее в кассовом оборудование также произошла ошибка! Товар в этом случае отдавать нельзя, "+
              "убедительная просьба обратиться прямо сейчас к техническому специалисту!";
            Logs.Write("Невозможно подтвердить транзакцию в банковском терминале "+СтрОшибка+"!",,"USER",0);
            Logs.Write("Невозможно отменить транзакцию в ККМ "+СтрОшибка2+", утерянная сумма: "+Сумма+"!",,"USER",0);
            
            Стр:="После ошибки подтверждения транзакции в банковском терминале произошла ошибка отмены чека в ККМ. "+_NEWLINE+
              "Ошибка банковского терминала: "+СтрОшибка+_NEWLINE+
              "Ошибка ККМ: "+СтрОшибка2+_NEWLINE+
              "Тип транзакции ККМ: "+ТекущаяОперация+_NEWLINE+
              "Сумма транзакции: "+Сумма;
            Путь:="Temp\Розница\ОшибкиЧеков\";
            If File.CreateDirectory(Путь) Then
              StringToFile(Стр,Путь+"БанковскийТерминал_"+FormatDate(Date(),"YYYYmmddhhttss")+".txt",1200,0);
            EndIf;
            Exit 0;
          EndTry;
        EndIf;
        СтрПоказатьОшибку:="Ошибка отправки информации на банковский терминал: "+СтрОшибка+"!";
        Exit 0;
      EndIf;
      
      спПлатежныйТерминалВрем:=спОборудованиеДляОтменыЧека["ПлатежныйТерминал"];
      спПлатежныйТерминалВрем["Подтверждено"]:=1;
    EndIf;

    
    //Транзакция может повторяться несколько раз, если документ не удалось обработать, такое 
    //  возможно из-за медленных или умирающих жестких дисков.
    iTry:=0;
    While 1 Do
      iTry:=iTry+1;
      
      ТабСертификатыЧека.Select();
      While ТабСертификатыЧека.Next() Do
        ТабСертификатыЧека.СуммаТранзакция:=0;
      EndDo;
      
      //Начало транзакции изменения таблиц БД
      If IsTransactionActive() Then
        RollbackTransaction();
      EndIf;
      BeginTransaction();
      
      //Создание локальных документов выполняется после всех других операций, чтобы уменьшить время блокировки таблиц до минимума
      If (ТекущаяОперация<5)And(КорректировочныеСвойстваЧека and 8=0) Then
        Form.тСтатусОбмена.Caption:="Создание документа продажи...";
    
        If ТекущаяОперация<>1 Then
          aDoc:=Doc.Реализация;
        Else
          aDoc:=Doc.ВозвратОтПокупателя;
        EndIf;
        aDoc.New();
        aDoc.DocDate:=Date();
        aDoc.Автор:=лкПользователь;
        aDoc.ЮрЛицо:=ТекущийМагазин.ЮрЛицо;
        aDoc.Магазин:=ТекущийМагазин;
        глУстановитьНовыйНомер(aDoc);
        aDoc.Склад:=ТекущийМагазин.Склад;
        If ТекущаяОперация<>1 Then
          aDoc.КодОперации:=?(ТекущаяОперация<>2,Enum.коРеализация.РеализацияРозничная,Enum.коРеализация.РеализацияЗаявка);
          aDoc.СуммаБезналичнойПродажи:=Form.тСуммаКарта.Value;
          aDoc.СуммаСертификатов:=Max(0,Form.тСуммаСертификатов.Value-СуммаДепозитов);
        Else
          aDoc.КодОперации:=Enum.коВозвратОтПокупателя.ВозвратРозничный;
          aDoc.СуммаБезналичногоВозврата:=Form.тСуммаКарта.Value;
          aDoc.СуммаСертификатов:=Max(0,Form.тСуммаСертификатов.Value-СуммаДепозитов);
        EndIf;
        aDoc.УчитыватьВНалоговомУчете:=1;
        aDoc.Контрагент:=Контрагент;
        aDoc.Договор:=Договор;
        aDoc.ТипЦен:=ТекущийМагазин.ТипЦенРеализации;
        ФлРеал:=aDoc.DBName()="Реализация";
        ТМаркиДокумента:=Tab.Create("Партия,Ящик,Марка");
        aTab:=aDoc.LineParts("Номенклатура");
        bTab:=aDoc.LineParts("МаркетингПокупателей");
        СуммаДокумента:=0;//Сумма документа с добавлением скидки скидочной карты (если есть)
        ТабПозиции.Select();
        While ТабПозиции.Next() Do
          ТПартии:=ТабПозиции.ТПартии;
          Количество:=ТабПозиции.Количество;
          Сумма:=ТабПозиции.Сумма;
          Цена:=Round(Сумма/Количество,2);
          If not IsEmpty(СкидочнаяКартаЧека) Then
            If _And(not IsEmpty(ТабПозиции.ТАкции),ТабПозиции.ТАкции.FindAndGoto(СкидочнаяКартаЧека,,"Акция")) Then
              СуммаДокумента:=Round(СуммаДокумента+ТабПозиции.Сумма+ТабПозиции.ТАкции.Сумма,2);
            EndIf;
          EndIf;
          
          //Акции
          СмСкидка:=Round(ТабПозиции.СуммаБезСкидки-ТабПозиции.Сумма,2);
          СмСкидка:=?(Abs(СмСкидка)<0.05,0,СмСкидка);
          If not IsEmpty(ТабПозиции.ТАкции) Then
            зН:=ТабПозиции.Номенклатура;
            ТАкции:=ТабПозиции.ТАкции;
            ТАкции.Select();
            While ТАкции.Next() Do
              См:=Round(ТАкции.Сумма,2);
              If См<>0 Then
                If _And(not IsEmpty(ТАкции.Акция),IsDBObject(ТАкции.Акция),ТАкции.Акция.DBName()="рознУсловияПродажИМаркетинговыеАкции",ТАкции.Акция.ТипУсловия=Enum.рознТипыУсловийПродаж.СкидкаНаПозицию) Then
                  bTab.CurLine:=0;
                  If bTab.LocateAndGoto("СтатьяМаркетинга,Номенклатура",ТАкции.Акция,зН,1)=0 Then
                    bTab.AddLineSorted("СтатьяМаркетинга,Номенклатура","СтатьяМаркетинга,Номенклатура,Количество,Сумма,СуммаДокумента",ТАкции.Акция,зН,0,0);
                  EndIf;
                Else
                  bTab.CurLine:=0;
                  If bTab.FindAndGoto(ТАкции.Акция,,"СтатьяМаркетинга",1)=0 Then
                    bTab.AddLineSorted("СтатьяМаркетинга,Номенклатура","СтатьяМаркетинга,Номенклатура,Количество,Сумма,СуммаДокумента",ТАкции.Акция,Nothing,0,0);
                  EndIf;
                EndIf;
                bTab.Количество:=bTab.Количество+ТАкции.Количество;
                bTab.Сумма:=bTab.Сумма+См;
                СмСкидка:=Round(СмСкидка-См,2);
              EndIf;
            EndDo;
          EndIf;
          If Round(СмСкидка,2)<>0 Then
            аАкция:=Ref.рознСкидочныеКарты;
            If not аАкция.Find("Name","Ручная скидка") Then
              аАкция.New();
              аАкция.Name:="Ручная скидка";
              аАкция.ТипКарты:=Enum.рознТипыСкидочныхКарт.СкидочнаяКарта;
              аАкция.Save();
            EndIf;
            bTab.CurLine:=0;
            If bTab.FindAndGoto(аАкция,,"СтатьяМаркетинга",1)=0 Then
              bTab.AddLineSorted("СтатьяМаркетинга,Номенклатура","СтатьяМаркетинга,Номенклатура,Количество,Сумма,СуммаДокумента",аАкция,0,0,0,0);
            EndIf;
            bTab.Сумма:=bTab.Сумма+СмСкидка;
          EndIf;        
          
          //Марки
          ТМарки:=ТабПозиции.ТМарки;
          If _And(not IsEmpty(ТМарки),ТМарки.Size()>0) Then
            ТПартии:=Tab.Create("Партия,Количество");
            ТМарки.Select();
            While ТМарки.Next() Do
              ТМаркиДокумента.AddLine("Партия,Ящик,Марка",ТМарки.Партия,"",ТМарки.Марка);
              If _Or(ТабПозиции.Номенклатура.флВесовойТовар=1,_And(ТабПозиции.Номенклатура.флАлкогольнаяПродукция,ТекущийМагазин.флМагазинОбщепита=1)) Then
                ТПартии.AddLine("Партия,Количество",ТМарки.Партия,Количество);
              Else
                ТПартии.AddLine("Партия,Количество",ТМарки.Партия,1);
              EndIf;
            EndDo;
            ТПартии.Group("Партия","Количество");
          EndIf;
          If _And(not IsEmpty(ТПартии),ТПартии.Size()>0) Then
            //ТПартии:"Партия,Количество";
            ТПартии.Select();
            While ТПартии.Next() Do
              Кл:=Min(ТПартии.Количество,Количество);
              Количество:=Round(Количество-Кл,6);
              См:=?(Количество=0,Сумма,Round(Кл*Цена,2));
              Ц:=Цена;
              Сумма:=Сумма-См;
              If ТабПозиции.флЛитры=1 Then
                Кл:=Кл/ТабПозиции.Номенклатура.ОбъемЛитров;
                Ц:=Round(См/Кл,2);
              EndIf;
              aTab.AddLine("Номенклатура,Партия,Количество,Цена,Сумма,СтавкаНДС",ТабПозиции.Номенклатура,ТПартии.Партия,Кл,Ц,См,глСтавкаНДСНоменклатуры(ТекущийМагазин.ЮрЛицо,ТабПозиции.Номенклатура));
              глПересчитатьСтроку(aDoc,aTab,"Количество2@СуммаНДС");
              If Количество=0 Then
                Break;
              EndIf;
            EndDo;
          EndIf;
          If Количество>0 Then
            If _And(not IsEmpty(ТМарки),ТМарки.Size()>0) Then
              СтрПоказатьОшибку:="Внутренняя ошибка подсчета марок для позиции "+ТабПозиции.Номенклатура+"!";
              Exit 0;
            Else
              If ТабПозиции.флЛитры=1 Then
                Количество:=Количество/ТабПозиции.Номенклатура.ОбъемЛитров;
                Цена:=Round(Сумма/Количество,2);
              EndIf;
              aTab.AddLine("Номенклатура,Количество,Цена,Сумма,СтавкаНДС",ТабПозиции.Номенклатура,Количество,Цена,Сумма,глСтавкаНДСНоменклатуры(ТекущийМагазин.ЮрЛицо,ТабПозиции.Номенклатура));
              глПересчитатьСтроку(aDoc,aTab,"Количество2@СуммаНДС");
            EndIf;
          EndIf;
        EndDo;
        
        //Депозиты и сертификаты
        СуммаСертификатов:=Max(Round(ТабПозиции.Sum("Сумма"),2)-Form.тСуммаКарта.Value-Form.тСуммаНаличные.Value,0);//Form.тСуммаСертификатов.Value
        If СуммаСертификатов>0 Then
          ТабДепозитыЧека.Select();
          While ТабДепозитыЧека.Next() Do
            См:=Min(СуммаСертификатов,ТабДепозитыЧека.Сумма);
            СуммаСертификатов:=Round(СуммаСертификатов-См,2);
            If См>0 Then
              bTab.CurLine:=0;
              If bTab.FindAndGoto(ТабДепозитыЧека.Сертификат,,"СтатьяМаркетинга",1)=0 Then
                bTab.AddLineSorted("СтатьяМаркетинга,Номенклатура","СтатьяМаркетинга,Номенклатура,Количество,Сумма,СуммаДокумента",ТабДепозитыЧека.Сертификат,0,0,0,0);
              EndIf;
              bTab.Сумма:=bTab.Сумма+См;
            EndIf;
          EndDo;
          ТабСертификатыЧека.Select();
          While ТабСертификатыЧека.Next() Do
            См:=Min(СуммаСертификатов,ТабСертификатыЧека.Сумма);
            СуммаСертификатов:=Round(СуммаСертификатов-См,2);
            If См>0 Then
              ТабСертификатыЧека.СуммаТранзакция:=См;
              bTab.CurLine:=0;
              If bTab.FindAndGoto(ТабСертификатыЧека.Сертификат,,"СтатьяМаркетинга",1)=0 Then
                bTab.AddLineSorted("СтатьяМаркетинга,Номенклатура","СтатьяМаркетинга,Номенклатура,Количество,Сумма,СуммаДокумента",ТабСертификатыЧека.Сертификат,0,0,0,0);
              EndIf;
              bTab.Сумма:=bTab.Сумма+См;
            EndIf;
          EndDo;
        EndIf;        
        
        //Заполним реквизиты СуммаДокумента для корректного заполнения ИтогоПродаж скидочной карты
        If not IsEmpty(СкидочнаяКартаЧека) Then
          bTab.CurLine:=0;
          If bTab.FindAndGoto(СкидочнаяКартаЧека,,"СтатьяМаркетинга",1)>0 Then
            bTab.СуммаДокумента:=СуммаДокумента;
          EndIf;
        EndIf;
        
        aDoc.СуммаВзаиморасчетов:=aTab.Sum("Сумма");
        aDoc.УникальныйИдентификатор3:="="+НомерДокументаККТ;
        aDoc.Save();
        If ТекущаяОперация<>2 Then //В документах, связанных с авансами, марки не сохраняем
          If ТМаркиДокумента.Size()>0 Then
            If not глМаркиЗарегистрироватьДокумент(aDoc,ТМаркиДокумента,3,,1) Then
              If iTry<3 Then
                Continue;
              Else
                СтрПоказатьОшибку:="Ошибка сохранения марок документа!";
                Exit 0;
              EndIf;
            EndIf;
          EndIf;
        EndIf;
        If iTry>1 Then
          //Из-за низкой скорость записи винчестеров, если первая попытка записи уже провалилась
          //SQLite3, возможно, в этот момент сохраняет документ остатков фонового обмена Фронтол
          Sleep(1000);
        EndIf;
        If not глОбработать(aDoc,1) Then
          If iTry<3 Then
            Continue;
          Else
            СтрПоказатьОшибку:="Невозможно обработать документ!";
            Exit 0;
          EndIf;
        EndIf;
      EndIf;
      
      См:=Form.тСуммаЧека.Value;//Сумма чека
      СмПКО:=Min(Max(См-Form.тСуммаКарта.Value-(Form.тСуммаСертификатов.Value-СуммаДепозитов),0),Form.тСуммаНаличные.Value+СуммаДепозитов);
      If (СмПКО>0)And(ТекущаяОперация<>3)And(КорректировочныеСвойстваЧека and 8=0) Then
        If ТекущаяОперация<>1 Then
          bDoc:=Doc.ПКО;
        Else
          bDoc:=Doc.РКО;
        EndIf;
        bDoc.New();
        bDoc.DocDate:=Date();
        bDoc.ЮрЛицо:=ТекущийМагазин.ЮрЛицо;
        bDoc.Магазин:=ТекущийМагазин;
        глУстановитьНовыйНомер(bDoc);
        If ТекущаяОперация<>5 Then
          bDoc.ДокОснование:=aDoc;
        Else
          bDoc.ДокОснование:=Param["ДокументЗакрытияКредита"];
        EndIf;
        bDoc.Автор:=лкПользователь;
        bDoc.КодОперации:=?(ТекущаяОперация<>1,Enum.коПКО.ОплатаПокупателя,Enum.коРКО.ВозвратПокупателю);
        bDoc.УчитыватьВНалоговомУчете:=1;
        bDoc.СуммаВзаиморасчетов:=СмПКО;
        aEl:=спНастройкиККМ["Оборудование"];
        bDoc.Касса:=aEl.Касса;
        bDoc.Контрагент:=Контрагент;
        bDoc.Договор:=Договор;
        bDoc.Основание:="Через "+ТекущийКассир;
        If ТекущаяОперация=1 Then
          зЦЗ:=Ref.зтЦентрыЗатрат;
          If not зЦЗ.Find("Name,ВнутреннееПеремещение","Внутренние перемещения",1) Then
            If not зЦЗ.Find("ВнутреннееПеремещение",1) Then
              зЦЗ.New();
              зЦЗ.Name:="Внутренние перемещения";
              зЦЗ.ВнутреннееПеремещение:=1;
              зЦЗ.Save();
            EndIf;
          EndIf;
          зСЗ:=Ref.зтСтатьиЗатрат;
          If not зСЗ.Find("@Parent,Name",зЦЗ,"Возвраты покупателям") Then
            зСЗ.New();
            зСЗ.Parent(зЦЗ);
            зСЗ.Name:="Возвраты покупателям";
            зСЗ.Save();
          EndIf;
          bDoc.ЦентрЗатрат:=зЦЗ;
          bDoc.СтатьяЗатрат:=зСЗ;
        EndIf;
        If iTry>1 Then
          //Из-за низкой скорость записи винчестеров, если первая попытка записи уже провалилась
          //SQLite3, возможно, в этот момент сохраняет документ остатков фонового обмена Фронтол
          Sleep(1000);
        EndIf;
        If not глОбработать(bDoc,1) Then
          If iTry<3 Then
            Continue;
          Else
            СтрПоказатьОшибку:="Невозможно обработать документ ПКО!";
            Exit 0;
          EndIf;
        EndIf;
      EndIf;
      Break;
    EndDo;
 
    //Сохранение элементов акций вне цикла попытки повторения транзакции (TODO для включения, требуется обновить флаг изменения акций)
    If СпБлокированныеАкции.Size()>0 Then
      For i:=1 To СпБлокированныеАкции.Size() Do
        СпБлокированныеАкции[i].Save();
      EndDo;
    EndIf;
    
    //Постоянные изменения в таблицах вне цикла повторения транзакции
    ТабСертификатыЧека.Select();
    While ТабСертификатыЧека.Next() Do
      ТабСертификатыЧека.СуммаСписана:=Round(ТабСертификатыЧека.СуммаТранзакция+ТабСертификатыЧека.СуммаСписана,2);
    EndDo;
    
    флОк:=1;
  Finally
    If флОк Then
      CommitTransaction();
      MassUnlock(СпБлокированныеАкции);
      спОборудованиеДляОтменыЧека:=List.Create();
      Param["СохранитьКопиюЧека"]:=0;
      
      //Запись информации об ошибках проверки марок
      ТабОшибкиПроверкиМарок:=спНастройкиККМ["ТабОшибкиПроверкиМарок"];
      If not IsEmpty(ТабОшибкиПроверкиМарок) Then
        Стр:="";
        ТабОшибкиПроверкиМарок.Select();
        While ТабОшибкиПроверкиМарок.Next() Do
          If Стр="" Then
            Стр:="Документ: "+aDoc;
          EndIf;
          AppendStringToBufferedString(Стр,_NEWLINE+"Марка "+ТабОшибкиПроверкиМарок.Марка+" -- "+ТабОшибкиПроверкиМарок.Причина);
        EndDo;
        If Стр<>"" Then
          Путь:="Temp\Розница\ОшибкиИСМП\";
          If File.CreateDirectory(Путь) Then
            StringToFile(Стр,Путь+"problem_"+FormatDate(Date(),"YYYYmmddhhttss")+".txt",1200,0);
          EndIf;
        EndIf;
      EndIf;
      
      Form.тСтатусОбмена.Caption:="Операция выполнена успешно";
      If (ТекущаяОперация<>5)And(КорректировочныеСвойстваЧека and 8=0) Then
        Param["ПоследнийЧекДокумент"]:=aDoc;
        ПоследнийЧекДокумент:=aDoc;
      EndIf;
      Param["Ответ"]:=1;
     
      If спДисплеиПокупателя.Size()>0 Then
        //Вызвать обновление информации на дисплее покупателя
        For i:=1 To спДисплеиПокупателя.Size() Do
          спНастройки:=спДисплеиПокупателя[i];
          спНастройки["Магазин"]:=ТекущийМагазин;
          спНастройки["ТабПозиции"]:=ТабПозиции;
          спНастройки["ЭтапОперации"]:=2;//1 -- отмена оплаты, 2 -- удачно
          Try
            глВыполнитьФункциюДрайвера("UpdateDisplayInfoPayment",спНастройки);
          Except
          EndTry;
          спНастройки["Магазин"]:=0;
          спНастройки["ТабПозиции"]:=0;
        EndDo;
      EndIf;
      //Визуально показать, что чек закрыт
      ТабПозиции.ClearLines();
      ТабПозиции.Column("Статус").isVisible:=0;
    Else
      MassUnlock(СпБлокированныеАкции);
      Param["СохранитьКопиюЧека"]:=1;
      Param["СохранитьКопиюЧекаКомментарий"]:=?(СтрПоказатьОшибку<>"",Left(СтрПоказатьОшибку,100),"Общая ошибка чека: см. логи");
    
      ИмяФайлаОшибок:="Temp\Розница\ОшибкиЧеков\Чек_"+FormatDate(Date(),"YYYYmmdd_hhttssppp")+".txt";
      ТОшибкиЧека:=Text.Create(1);
      If СтрПоказатьОшибку<>"" Then
        ТОшибкиЧека.AddString(СтрПоказатьОшибку);
      EndIf;
      
      Стр:=PopError();
      If not IsEmpty(Стр) Then
        СтрПоказатьОшибку:="Исключение при закрытии чека: "+Стр+"!";
        If СтрПоказатьОшибку<>"" Then
          ТОшибкиЧека.AddString(СтрПоказатьОшибку);
        EndIf;
      EndIf;
      SuppressException();
      СтрОшибкаОтмены:="";
      Try
        RollbackTransaction();
      Except
      EndTry;      
            
      //Если банковская оплата произведена, запретить изменять суммы
      If not IsEmpty(спОборудованиеДляОтменыЧека["ПлатежныйТерминал"]) Then
        Form.кнОперации.IsDisabled:=1;
        Form.тСуммаНаличные.IsReadOnly:=1;
        Form.тСуммаКарта.IsReadOnly:=1;
        Form.тСуммаНаличные.Color:=_CLR_BTNFACE;
        Form.тСуммаКарта.Color:=_CLR_BTNFACE;
      EndIf;
        
      //Обратная операция в ККМ
      If (ФлОперацияОтказ<>-1)And(КорректировочныеСвойстваЧека and 4=0) Then
        //Отправка отказа в ККМ  
        Try
          спНастройкиККМ["Таблица"]:=Таблица;
          спНастройкиККМ["ТипЧека"]:=ФлОперацияОтказ;
          Стр:=глВыполнитьФункциюДрайвера("PrintReceipt",спНастройкиККМ);
          спНастройкиККМ["Таблица"]:=0;
          спНастройкиККМ["ДополнительнаяИнформация"]:="";
          If not IsEmpty(Стр) Then
            Raise Стр;
          EndIf;
        Except
          спНастройкиККМ["Таблица"]:=0;
          спНастройкиККМ["ДополнительнаяИнформация"]:="";
          СтрОшибка2:=PopError();
          СтрОшибкаОтмены:=СтрОшибкаОтмены+?(СтрОшибкаОтмены<>"",_NEWLINE)+"Внимание! При отмене операции в кассовом оборудование произошла ошибка "+СтрОшибка2+"! Проверьте корректность сумм чеков в ОФД!";
          Logs.Write("Невозможно отменить транзакцию в ККМ, утерянная сумма: "+спНастройкиККМ["Сумма"]+"!",,"USER",0);
          ТОшибкиЧека.AddString("======");
          ТОшибкиЧека.AddString("Произошла ошибка отмены чека в ККМ, сумма "+спНастройкиККМ["Сумма"]);
          ТОшибкиЧека.AddString("Ошибка ККМ: "+СтрОшибка2);
          ТОшибкиЧека.AddString("Тип транзакции ККМ: "+ФлОперацияОтказ);
        EndTry;
      EndIf;

      Form.тСтатусОбмена.Caption:=СтрОшибкаОтмены;
      
      If ТОшибкиЧека.Size()>0 Then
        Каталог:="Temp\Розница\ОшибкиЧеков\";
        File.CreateDirectory(Каталог);
        If not ТОшибкиЧека.Save(ИмяФайлаОшибок,65001,1) Then
          Logs.Write("Невозможно сохранить файл ошибок отмены чека "+ИмяФайлаОшибок,,"USER",0);
          СтрОшибкаОтмены:=СтрОшибкаОтмены+?(СтрОшибкаОтмены<>"",_NEWLINE)+"Невозможно сохранить файл ошибок отмены чека "+ИмяФайлаОшибок+"!";
        EndIf;
      EndIf;
      
      If спДисплеиПокупателя.Size()>0 Then
        //Вызвать обновление информации на дисплее покупателя
        For i:=1 To спДисплеиПокупателя.Size() Do
          спНастройки:=спДисплеиПокупателя[i];
          спНастройки["Магазин"]:=ТекущийМагазин;
          спНастройки["ТабПозиции"]:=ТабПозиции;
          спНастройки["ЭтапОперации"]:=1;//1 -- отмена оплаты, 2 -- удачно
          Try
            глВыполнитьФункциюДрайвера("UpdateDisplayInfoPayment",спНастройки);
          Except
          EndTry;
          спНастройки["Магазин"]:=0;
          спНастройки["ТабПозиции"]:=0;
        EndDo;
      EndIf;      
      
      If СтрПоказатьОшибку<>"" Then
        Box(Left(СтрПоказатьОшибку,512)+?(Length(СтрПоказатьОшибку)>512,"..."),Q_STOP);//Ограничим, чтобы не выходило за пределы экрана
        Form.тСтатусОбмена.Caption:=СтрПоказатьОшибку;
      EndIf;
      
      If СтрОшибкаОтмены<>"" Then
        Box(Left(СтрОшибкаОтмены,512)+?(Length(СтрОшибкаОтмены)>512,"..."),Q_STOP);
      EndIf;
    EndIf;
  EndTry;
  
  Exit флОк;
EndFunction


Function ЗакрытьЧекПринятьРезультатСканирования(Стр)
  If Form.тСуммаНаличные.IsReadOnly Then
    Exit;
  EndIf;
  аКарта:=Ref.рознСкидочныеКарты;
  If аКарта.Find("@Status,Name",0,Стр) Then
    If ДобавитьСкидочнуюКартуВЧек(аКарта,1) Then
      If аКарта.ТипКарты=Enum.рознТипыСкидочныхКарт.СкидочнаяКарта Then
        Param["СкидочнаяКартаЧека"]:=СкидочнаяКартаЧека;
        Param["СкидочнаяКартаЧекаПеременные"]:=СкидочнаяКартаЧекаПеременные;
      EndIf;
    EndIf;
  EndIf;
EndFunction

Function СписокДокументовПрименитьОбновить()
  НачДата:=спСписокДокументовОтбор["НачДата"];
  КонДата:=спСписокДокументовОтбор["КонДата"];

  Фильтры:=">=DocDate,<DocDate";
  Значения:="'"+BegOfDay(НачДата)+"','"+BegOfDay(КонДата+1)+"'";
  Form.пПериод.Caption:="с "+FormatDate(НачДата,"DD MMM YYYY")+" по "+FormatDate(КонДата,"DD MMM YYYY");
  
  аКонтрагент:=0;
  аАвтор:=0;
  аМагазин:=0;
  аЮрЛицо:=0;
  аСклад:=0;
  аКодОперации:=0;
  аВид:=0;
  аСтатус:=0;
  If not isEmpty(спСписокДокументовОтбор["ТипДокумента"]) Then
    Фильтры:=Фильтры+",=@LINKTYPE";
    аВид:=спСписокДокументовОтбор["ТипДокумента"];
    Значения:=Значения+",аВид";
  EndIf;
  If not isEmpty(спСписокДокументовОтбор["КодОперации"]) Then
    Фильтры:=Фильтры+",=КодОперации";
    аКодОперации:=спСписокДокументовОтбор["КодОперации"];
    Значения:=Значения+",аКодОперации";
  EndIf;
  If not isEmpty(спСписокДокументовОтбор["Магазин"]) Then
    Фильтры:=Фильтры+",->Магазин";
    аМагазин:=спСписокДокументовОтбор["Магазин"];
    Значения:=Значения+",аМагазин";
  EndIf;
  If not isEmpty(спСписокДокументовОтбор["ЮрЛицо"]) Then
    Фильтры:=Фильтры+",->ЮрЛицо";
    аЮрЛицо:=спСписокДокументовОтбор["ЮрЛицо"];
    Значения:=Значения+",аЮрЛицо";
  EndIf;
  If not isEmpty(спСписокДокументовОтбор["Статус"]) Then
    Фильтры:=Фильтры+",->@Status";
    аСтатус:=спСписокДокументовОтбор["Статус"]-100;
    Значения:=Значения+",аСтатус";
  EndIf;
  If not isEmpty(спСписокДокументовОтбор["УникальныйИдентификатор"]) Then
    Фильтры:=Фильтры+",=УникальныйИдентификатор";
    аУникальныйИдентификатор:=спСписокДокументовОтбор["УникальныйИдентификатор"];
    Значения:=Значения+",аУникальныйИдентификатор";
  EndIf;  
  
  ТекущийДокумент:=спСписокДокументовОтбор["ТекущийДокумент"];
  If not isEmpty(ТекущийДокумент) Then
    Try
      спСписокДокументовОтбор["ТекущийДокумент"]:=0;
      Exec("Form.MainTab.SetFiltersAndPositionOnElement(ТекущийДокумент,"""+Фильтры+""","+Значения+")");
    Except
    EndTry;  
  Else
    Exec("Form.MainTab.SetFilters("""+Фильтры+""","+Значения+")");
  EndIf;
EndFunction

Function ВвестиСуммуОбновитьДоступность()
  КодОперации:=Form.КодОперации.Value;
  If КодОперации.SelectedLine=4 Then
    Form.тКонтрагент.IsDisabled:=1;
    Form.оКонтрагент.IsDisabled:=1;
  Else
    Form.тКонтрагент.IsDisabled:=0;
    Form.оКонтрагент.IsDisabled:=0;
    If КодОперации.SelectedLine=1 Then
      Form.тКонтрагент.Caption:="Контрагент:";
    ElseIf КодОперации.SelectedLine=3 Then
      Form.тКонтрагент.Caption:="Инкассатор:";
    Else
      Form.тКонтрагент.Caption:="Подотчетник:";
    EndIf;
  EndIf;
EndFunction

Function МенюККМОбновитьСтатус(Магазин,спНастройкиККМ)
  Form.тМагазин.Caption:=Магазин;
  //Определим смену
  ФлОткрыта:=0;
  Try
    If глВыполнитьФункциюДрайвера("ShiftInfo",спНастройкиККМ)="" Then
      //-1 -- ошибка, 0 -- закрыта, 1 -- открыта, 2 -- истекла, 3 -- другое
      ФлОткрыта:=Number(спНастройкиККМ["СменаСостояние"]);
    EndIf;
  Except
    ФлОткрыта:=-1;
  EndTry;
  
  If (ФлОткрыта=1)or(ФлОткрыта=2) Then
    Form.кнСмена.Color:=MixColors(_CLR_BTNFACE,_CLR_RED,10);
    Form.кнСмена.Caption:="Закрыть смену";
    Form.кнСмена.Tag:=0;
    Form.кнОтчет.Caption:="X-отчет";
    Form.кнОтчет.Tag:=0;
  ElseIf ФлОткрыта=0 Then
    Form.кнСмена.Color:=MixColors(_CLR_BTNFACE,_CLR_GREEN,10);
    Form.кнСмена.Caption:="Открыть смену";
    Form.кнСмена.Tag:=1;
    Form.кнОтчет.Caption:="Z-отчет";
    Form.кнОтчет.Tag:=1;
  Else
    Form.кнСмена.Color:=_CLR_BTNFACE;
    Form.кнСмена.Caption:="Статус смены ?";
    Form.кнОтчет.Caption:="Отчеты недоступны";
    Form.кнСмена.IsDisabled:=1;
    Form.кнОтчет.IsDisabled:=1;
  EndIf;
EndFunction

Function ВвестиСуммуОбновитьФорму(Магазин,СпНастройкиККМ)
  aEl:=спНастройкиККМ["Оборудование"];
  Касса:=aEl.Касса;
  Сумма:=Storage.Касса.Gross1("Сумма",,0,"ЮрЛицо,Касса",Магазин.ЮрЛицо,Касса);
  Form.тСумма1.Caption:=глФРМ(Сумма,"");
  ВвестиСуммуОбновитьДоступность();
  
  //Определим сумму в ККМ
  Сумма2:=-1;
  Try
    If глВыполнитьФункциюДрайвера("CashDrawerInfo",спНастройкиККМ)="" Then
      Сумма2:=Number(спНастройкиККМ["ДенежныйЯщикСумма"]);
    EndIf;
  Except
  EndTry;
  Form.тСумма2.Caption:=?(Сумма2<0,"ошибка!",глФРМ(Сумма2,""));
  If Сумма<>Сумма2 Then
    Form.тСумма2.FontColor:=_CLR_RED;
  EndIf;
EndFunction

Function ОкруглениеИтогоЧека(ТабПозиции,ФлПараметр=0,ФлВМеньшуюСторону=0,ФлТочнаяСумма=0)
  Repeat
    If ФлТочнаяСумма=2 Then
      Break;
    EndIf;
    If ФлПараметр>0 Then
      Чл:=спОкруглениеЦен[ФлПараметр];
    Else
      If ТекущийМагазин.флПараметрыОкругленияИтогоЧека=0 Then
        Break;
      EndIf;
      Чл:=спОкруглениеЦен[ТекущийМагазин.флПараметрыОкругленияИтогоЧека];
    EndIf;
    Кл:=0;
    Сумма0:=0;
    ТабПозиции.Select();
    While ТабПозиции.Next() Do
      зЦена:=Round(ТабПозиции.Сумма/ТабПозиции.Количество,2);
      ФлПропустить:=?(ФлВМеньшуюСторону,
        (ТабПозиции.Номенклатура.ЦенаМинимальнаяПродажная>0)And(Abs(ТабПозиции.Номенклатура.ЦенаМинимальнаяПродажная-зЦена)<2),
        (ТабПозиции.Номенклатура.ЦенаМаксимальнаяПродажная>0)And(Abs(ТабПозиции.Номенклатура.ЦенаМаксимальнаяПродажная-зЦена)<2));
      If (ТабПозиции.ФлМРЦ<>1)And(not ФлПропустить) Then
        Кл:=Кл+1;
        Сумма0:=Round(Сумма0+ТабПозиции.Сумма,2);
      EndIf;
    EndDo;
    If Кл=0 Then
      Break;
    EndIf;
    If ФлВМеньшуюСторону Then
      Сумма:=Round((Round(Сумма0*100) div Чл)*Чл/100,2);    
    Else
      Сумма:=Round(((Round(Сумма0*100)+(Чл-1)) div Чл)*Чл/100,2);
    EndIf;
    If _Or(Сумма-Сумма0>0,(ФлВМеньшуюСторону)And(Сумма-Сумма0<>0)) Then
      См0:=Сумма-Сумма0;
      Кф:=См0/Сумма0;
      ФлПервая:=0;
      ТабПозиции.Select();
      While (ТабПозиции.Next())And(См0<>0) Do
        If _And(спЗапрещеннаяДляСкидокНоменклатура.Size()>0,спЗапрещеннаяДляСкидокНоменклатура.Contains(ТабПозиции.Номенклатура)) Then
          Continue;
        EndIf;
        зЦена:=Round(ТабПозиции.Сумма/ТабПозиции.Количество,2);
        ФлПропустить:=?(ФлВМеньшуюСторону,
          (ТабПозиции.Номенклатура.ЦенаМинимальнаяПродажная>0)And(Abs(ТабПозиции.Номенклатура.ЦенаМинимальнаяПродажная-зЦена)<2),
          (ТабПозиции.Номенклатура.ЦенаМаксимальнаяПродажная>0)And(Abs(ТабПозиции.Номенклатура.ЦенаМаксимальнаяПродажная-зЦена)<2));
        If (ТабПозиции.ФлМРЦ=1)Or(ФлПропустить) Then
          Continue;
        EndIf;
        ФлПервая:=?(ФлПервая=0,ТабПозиции.CurLine,ФлПервая);
        If Кл=1 Then
          ТабПозиции.Сумма:=ТабПозиции.Сумма+См0;
          См0:=0;
        Else
          См1:=Round(ТабПозиции.Сумма*(1+Кф),2);
          См0:=Round(См0+ТабПозиции.Сумма-См1,2);
          ТабПозиции.Сумма:=См1;
        EndIf;
        ТабПозиции.Скидка:=Round(ТабПозиции.СуммаБезСкидки-ТабПозиции.Сумма,2);
      EndDo;
      If (См0<>0)And(ФлПервая>0) Then
        ТабПозиции.CurLine:=ФлПервая;
        ТабПозиции.Сумма:=Round(ТабПозиции.Сумма+См0,2);
        ТабПозиции.Скидка:=Round(ТабПозиции.СуммаБезСкидки-ТабПозиции.Сумма,2);
      EndIf;
    EndIf;
  Until 1;
  
  //Некоторые кассы (к пр. Атол) не принимают чек, когда сумма не удовлетворяет уравнению Цена*Количество=Сумма
  //Это может стать проблемой для дробного количества
  If ФлТочнаяСумма>0 Then
    ТабПозиции.Select();
    While ТабПозиции.Next() Do
      зЦена:=Round(ТабПозиции.Сумма/ТабПозиции.Количество,2);
      If Round(ТабПозиции.Сумма,2)<>Round(ТабПозиции.Количество*зЦена,2) Then
        ТабПозиции.Сумма:=Round(ТабПозиции.Количество*зЦена,2);
        ТабПозиции.Скидка:=Round(ТабПозиции.СуммаБезСкидки-ТабПозиции.Сумма,2);
      EndIf;
    EndDo;
  EndIf;
EndFunction

//Контекст основной формы или формы закрытия
Function УдалитьАкциюИзДокумента(СтатьяМаркетинга,ФлОбнулитьСкидку=0)
  If not IsEmpty(ПоискТабПозиции) Then
    ТабПозиции:=ПоискТабПозиции;
  Else
    ТабПозиции:=Form.ТабПозиции.Value;
  EndIf;
  ТабПозиции.Select();
  While ТабПозиции.Next() Do
    ТАкции:=ТабПозиции.ТАкции;
    If IsEmpty(ТАкции) Then
      Continue;
    EndIf;
    If ТАкции.FindAndGoto(СтатьяМаркетинга,,"Акция")=0 Then
      Continue;
    EndIf;
    ТабПозиции.Сумма:=ТабПозиции.Сумма+ТАкции.Сумма;
    ТабПозиции.Скидка:=ТабПозиции.СуммаБезСкидки-ТабПозиции.Сумма;
    If ФлОбнулитьСкидку Then
      ТАкции.Сумма:=0;
    Else
      ТАкции.Remove(ТАкции.CurLine);
    EndIf;
  EndDo;
EndFunction

//Контекст основной формы
Function ДобавитьАкциюДляПозиции(СпНоменклатура=0,ПроцентСкидки=0,СуммаСкидки=0,СтатьяМаркетинга=Nothing,ФлУдалитьДругиеАкцииСтроки=0)
  If not IsEmpty(ПоискТабПозиции) Then
    ТабПозиции:=ПоискТабПозиции;
  Else
    ТабПозиции:=Form.ТабПозиции.Value;
  EndIf;
  ТабПозиции.Select();
  While ТабПозиции.Next() Do
    If _Or(IsEmpty(СпНоменклатура),СпНоменклатура.Contains(ТабПозиции.Номенклатура,1)) Then
      If ФлУдалитьДругиеАкцииСтроки Then
        ТабПозиции.ТАкции:=Tab.Create("Акция,Сумма,Количество");
        ТабПозиции.Скидка:=0;
        ТабПозиции.Сумма:=ТабПозиции.СуммаБезСкидки;
      EndIf;
      If IsEmpty(ТабПозиции.ТАкции) Then
        ТабПозиции.ТАкции:=Tab.Create("Акция,Сумма,Количество");
      EndIf;
      ТАкции:=ТабПозиции.ТАкции;
      If ТАкции.FindAndGoto(СтатьяМаркетинга,,"Акция")=0 Then
        ТАкции.AddLine("Акция,Сумма,Количество",СтатьяМаркетинга,0,0);
      EndIf;
      См:=ТабПозиции.СуммаБезСкидки*ПроцентСкидки/100+СуммаСкидки;
      См:=Min(См,ТабПозиции.Сумма);
      ТАкции.Сумма:=Round(ТАкции.Сумма+См,2);
      ТабПозиции.Скидка:=ТАкции.Sum("Сумма");
      ТабПозиции.Сумма:=Round(ТабПозиции.СуммаБезСкидки-ТабПозиции.Скидка,2);
    EndIf;
  EndDo;
EndFunction



Function ОбновлениеИндикацииДоступности(спМагазины,СерийныйНомер)

  Function ПроверитьСертификат(aTCP,Сервер,Ссылка,Тип,ByRef СтрПредупреждение)
    aTCP.HTTPClear();
    aTCP.HTTPSetOperation("GET "+Ссылка+" HTTP/1.1");
    aTCP.HTTPSetHeaderField("Host",Сервер);
    aTCP.HTTPSetHeaderField("User-Agent","Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)");
    aTCP.HTTPSetHeaderField("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
    aTCP.HTTPSetHeaderField("Accept-Language","en");
    aTCP.HTTPSetHeaderField("Connection","Keep-Alive");
    If not aTCP.HTTPSendAndReceive Then
      Exit;
    EndIf;
    Стр:=aTCP.HTTPGetOperation();
    TearStr(Стр," ");
    Стр:=TearStr(Стр," ");
    If Стр<>"200" Then
      Exit;
    EndIf;
    aTCP.HTTPDecodeChunked();
    Стр:=UTF8ToUnicode(aTCP.HTTPBodyAsString);
    Try
      аДерево:=LoadJSONFromString(Стр,0);
    Except
      Exit;
    EndTry;
    СтрПояс:=аДерево["to"];//"19.01.2023 13:36:37+0300"
    аДата:=Date(TearStr(СтрПояс,"+"));
    If IsEmpty(аДата) Then
      Exit;
    EndIf;
    If Length(СтрПояс)=4 Then
      аЧасов:=Number(Left(СтрПояс,2));
      аМинут:=Number(Right(СтрПояс,2));
      аДата:=AddHour(аДата,-аЧасов);
      аДата:=AddMinute(аДата,-аМинут);
      аРазница:=GetPeriod(GMTDate(),аДата,3);
    Else
      аРазница:=GetPeriod(Date(),аДата,3);
    EndIf;
    Стр:="";
    If аРазница<=0 Then
      Стр:=Тип+" сертификат УТМ истек!";
    ElseIf аРазница<48*60 Then //За два дня
      Стр:=Тип+" сертификат УТМ истекает через "+?(аРазница div 60=0,"",Str(аРазница div 60)+" ч. ")+Str(аРазница mod 60)+" м.!";
    ElseIf аРазница<7*24*60 Then //За неделю
      Стр:=Тип+" сертификат УТМ истекает через "+?(аРазница div 1440=0,"",Str(аРазница div 1440)+" дн. ")+Str((аРазница div 60) mod 24)+" ч.!";
    EndIf;
    If Стр<>"" Then
      СтрПредупреждение:=?(СтрПредупреждение="","Внимание!",СтрПредупреждение)+" "+Стр;
    EndIf;
  EndFunction

  Sleep(1000);
  //Проверка рабочего режима УТМ, раз в полминуты
  //Проверка доступности 8.8.8.8:53, раз в полминуты
  //Проверка на окончание сертификатов и вывод предупреждения (раз в два часа), раз в 5 минут
  СчетчикСерт:=0;
  СчетчикПредупреждение:=0;
  СтрИндикация:="";
  While 1 Do
  
    ФлПроверкаСертификатов:=0;
    If (СчетчикПредупреждение=0)or(СчетчикПредупреждение>240) Then //2 часа
      If СчетчикСерт%10=0 Then //10*0.5 мин = 5 минут
        ФлПроверкаСертификатов:=1;
      EndIf;
      СчетчикСерт:=СчетчикСерт+1;
    EndIf;
    If СчетчикПредупреждение>0 Then
      СчетчикПредупреждение:=СчетчикПредупреждение+1;
    EndIf;
  
    СтрУТМ:="";
    СтрПредупреждение:="";
    For iLoop:=1 To спМагазины.Size() Do
      СтрДобавка:=?(iLoop=1,""," ("+iLoop+")");
      Магазин:=спМагазины[iLoop];
      Try
        If Магазин.АдресЕГАИС="TEST" Then
          СтрУТМ:="Тестовый УТМ";
        ElseIf Магазин.АдресЕГАИС<>"" Then
          Прокси:="";
          Сервер:=Магазин.АдресЕГАИС;
          Сервер:=глРазделитьАдресИПрокси(Сервер,Прокси);
          If Сервер<>"" Then
            If Прокси<>"" Then
              //<ProxyType>@<ProxyIP>@<User>@<Password>
              aTCP:=IPConnection.Create();
              ПроксиТип:=TearStr(Прокси,"@");
              ПроксиАдр:=TearStr(Прокси,"@");
              ПроксиПольз:=TearStr(Прокси,"@");
              ДопСтр:="";
              If ((ПроксиТип="NGRC")or(ПроксиТип="NGRCCHANNEL"))And(not IsEmpty(ПроксиПольз)) Then
                ПроксиПольз:=DecodeString(ПроксиПольз,"base64");
                ДопСтр:=Прокси;
                Прокси:=TearStr(ДопСтр,"@");//Пароль ngRC сервера
                ДопСтр:=Replace(ДопСтр,"|",Chr(1));//Пароль сервера каналов|Имя канала
              EndIf;
              aTCP.UseProxy(ПроксиАдр,ПроксиТип,ПроксиПольз,Прокси,ДопСтр);
              aTCP.Connect(Сервер);
            Else
              aTCP:=IPConnection.Create();
              aTCP.Connect(Сервер);
            EndIf;
            If Not aTCP.IsConnected Then
              aTCP.Connect(Сервер);
            EndIf;
            if Not aTCP.IsConnected Then
              СтрУТМ:="УТМ не работает"+СтрДобавка;
              СчетчикСерт:=0;
            Else
              aTCP.HTTPSetOperation("GET /opt/in HTTP/1.0");
              aTCP.HTTPSetHeaderField("Host",Сервер);
              aTCP.HTTPSetHeaderField("User-Agent","Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)");
              aTCP.HTTPSetHeaderField("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
              aTCP.HTTPSetHeaderField("Accept-Language","en");
              aTCP.HTTPSetHeaderField("Connection","Keep-Alive");
              If not aTCP.HTTPSendAndReceive Then
                СтрУТМ:="Проблемы с УТМ"+СтрДобавка;
                СчетчикСерт:=0;
              Else
                Стр:=aTCP.HTTPGetOperation();
                TearStr(Стр," ");
                Стр:=TearStr(Стр," ");
                If Стр<>"200" Then
                  СтрУТМ:="Проблемы с УТМ"+СтрДобавка;
                  СчетчикСерт:=0;
                ElseIf ФлПроверкаСертификатов Then //2 часа
                  ПроверитьСертификат(aTCP,Сервер,"/api/gost/orginfo","ГОСТ",СтрПредупреждение);
                  ПроверитьСертификат(aTCP,Сервер,"/api/rsa/orginfo","ЕГАИС",СтрПредупреждение);
                  If СтрПредупреждение<>"" Then
                    СтрПредупреждение:=СтрПредупреждение+" Если не обновить вовремя сертификат(ы), продавать алкогольную продукцию будет невозможно!";
                    СчетчикПредупреждение:=1;
                  EndIf;
                EndIf;
              EndIf;
              
            EndIf;//Соединение установлено
          EndIf;//Сервер задан корректно
        EndIf;//Сервер задан
      Except
      EndTry;
      aTCP:=0;
    EndDo;
    
    СтрИнтернет:="";
    Try
      aTCP:=IPConnection.Connect("8.8.8.8:53");
      if Not aTCP.IsConnected Then
        aTCP:=IPConnection.Connect("8.8.8.8:443");
        if Not aTCP.IsConnected Then
          СтрИнтернет:="Нет Интернета";
        EndIf;
      EndIf;
      aTCP.Disconnect();
    Except
    EndTry;
    
    Стр:=СтрИнтернет+?((СтрИнтернет<>"")And(СтрУТМ<>""),", ")+СтрУТМ;
    If СтрИндикация<>Стр Then
      Try
        PostMessageToForm(СерийныйНомер,10002,Стр);
        СтрИндикация:=Стр;
      Except
      EndTry;
    EndIf;
    If СтрПредупреждение<>"" Then
      Try
        PostMessageToForm(СерийныйНомер,10003,СтрПредупреждение);
      Except
      EndTry;
    EndIf;
    
    For i:=1 To 120 Do
      Sleep(250);
    EndDo;
  EndDo;
EndFunction

Function ПереподключениеОборудования()
  ТабПозиции:=Form.ТабПозиции.Value;
  If ТабПозиции.Size()>0 Then
    Box("Операция переподключения оборудования может быть выполнена только в случае, если чек не содержит никаких позиций!",Q_STOP);
    Exit;
  EndIf;
  
  If AskQuestion("Данная операция позволит подключить все оборудование заново. Вы уверены?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
    Exit;
  EndIf;
  Try
    глЗагрузитьДрайверы();
  Except
    Box("Произошла ошибка при переподключении оборудования ("+PopError()+")! Обработка будет закрыта!",Q_STOP);
    Form.Close(0);
    Exit;
  EndTry;
  спПодключенныеДрайверы:=List.Create();
  
  Стр:=ИнициализироватьОборудование();
  If not IsEmpty(Стр) Then
    Box(Стр,Q_STOP);
    Form.Close(0);
    Exit;
  EndIf;
  
  НакопленноеСообщение:="";
  Form.OnTimerInterval:=глСканерыКлавиатурыТаймерИнтервал;
  ОбновитьИнформацию();
  ОбновитьИнформациюТекущейСтроки();
  Box("Переподключение оборудования выполнено успешно!",Q_INFORMATION);
EndFunction


Function ВыполнитьДействиеГорячейКлавиши(СтрКод,ФлМенюЗакрытияЧека=0,Индекс=0)
  If СтрКод="" Then
    Exit;
  EndIf;
  //ТабПозиции,СпПеременные,ТабДобавить
  If not ФлМенюЗакрытияЧека Then
    ТабПозиции:=Form.ТабПозиции.Value;
  Else
    ТабПозиции:=ПоискТабПозиции;
  EndIf;
  ТабДобавить:=Tab.Create("Номенклатура,Партия,Марка,Количество,Сумма,СуммаБезСкидки");
  СпПеременные:=List.Create();
  СпПеременные["ФлТипДиалога"]:=ФлТипДиалога;
  СпПеременные["МестоВызова"]:=ФлМенюЗакрытияЧека;
  СпПеременные["Магазин"]:=ТекущийМагазин;
  СпПеременные["РабочееМесто"]:=ТекущееРабочееМесто;
  СпПеременные["Кассир"]:=ТекущийКассир;
  СпПеременные["Операция"]:=ТекущаяОперация;
  СпПеременные["Пользователь"]:=лкПользователь;
  СпПеременные["спПодключенныеДрайверы"]:=спПодключенныеДрайверы;
  СпПеременные["спДополнительныеКассы"]:=спДополнительныеКассы;
  СпПеременные["спНастройкиККМ"]:=спНастройкиККМ;
  СпПеременные["спПлатежныеТерминалы"]:=спПлатежныеТерминалы;
  СпПеременные["спДисплеиПокупателя"]:=спДисплеиПокупателя;
  СпПеременные["спВесы"]:=спВесы;
  СпПеременные["ИндексКнопки"]:=Индекс;
  If Индекс>0 Then
    aTab:=ТекущийМагазин.УстановкиФормыРабочегоМеста.LineParts("ЧастыеДействия");
    СпПеременные["ЗаголовокКнопки"]:=aTab["Заголовок",Индекс];
  EndIf;
  СпПеременные["Ответ"]:=0;
  Try
    Exec(СтрКод);
  Except
    Box("Ошибка действия горячей клавиши и кнопки: "+PopError(),Q_STOP);
    Exit;
  EndTry;
  If ТабДобавить.Size()>0 Then
    If ТабДобавить.Size()>5 Then
      ТабПозиции.Lock();
    EndIf;
    Try
      ТабДобавить.Select();
      While ТабДобавить.Next() Do
        //Номенклатура,Партия,Марка,Количество,Сумма,СуммаБезСкидки
        Сп:=List.Create();
        If Number(ТабДобавить.Сумма)>0 Then
          Сп["Сумма"]:=Number(ТабДобавить.Сумма);
        EndIf;
        If Number(ТабДобавить.СуммаБезСкидки)>0 Then
          Сп["СуммаБезСкидки"]:=Number(ТабДобавить.СуммаБезСкидки);
        EndIf;
        аМРЦ:=0;
        ДобавитьТоварВТаблицуТоваров(ТабПозиции,0,ТабДобавить.Номенклатура,Coalesce(ТабДобавить.Партия,0),Coalesce(ТабДобавить.Марка,0),ТабДобавить.Количество,1,,аМРЦ,?(Сп.Size()>0,Сп,0));
      EndDo;
    Finally
      If ТабДобавить.Size()>5 Then
        ТабПозиции.UnLock();
      EndIf;
    EndTry;
  EndIf;
  Чл:=Number(СпПеременные["Ответ"]);
  
  If ФлМенюЗакрытияЧека Then
    If Чл=0 Then
      Exit;
    ElseIf Чл=101 Then //Превратить в наличную
      См2:=Round(Form.тСуммаЧека.Value-Form.тСуммаСертификатов.Value,2);
      If См2<=0 Then
        Exit;
      Else
        Form.тСуммаКарта.Value:=0;
        Form.тСуммаНаличные.Value:=См2;
        ЗакрытьЧекОбновитьСуммы();
      EndIf;
    ElseIf Чл=102 Then //Превратить в безналичную
      См2:=Round(Form.тСуммаЧека.Value-Form.тСуммаСертификатов.Value,2);
      If См2<=0 Then
        Exit;
      Else
        Form.тСуммаНаличные.Value:=0;
        Form.тСуммаКарта.Value:=См2;
        ЗакрытьЧекОбновитьСуммы();
      EndIf;
    ElseIf Чл=303 Then //Превратить в чек возврата
      //TODO: ?
    ElseIf Чл=304 Then //Превратить в чек продажи
      //TODO: ?
    EndIf;
    Exit;
  EndIf;
  
  If Чл=0 Then
    Exit;
  ElseIf Чл=1 Then
    Form.Close();
  ElseIf Чл=2 Then
    ФлФорсирование:=1;
    Form.Close();
  ElseIf Чл=3 Then
    If ТабПозиции.Size()=0 Then
      Exit;
    EndIf;
    If not лкПользователь.рознУдалениеПозицийПриПродаже Then
      Box("Вам запрещено использовать удалять позиции чека, обратитесь к оператору с большими правами!",Q_STOP);
      Exit;
    EndIf;
    If AskQuestion("Удалить все строки из чека?",Q_WARNING+Q_YESNO,R_NO)=R_NO Then
      Exit;
    EndIf;
    If ПроверитьОперациюПоУсловиямПродаж(1,0) Then
      ОчиститьТаблицуТоваров();
    EndIf;
  ElseIf Чл=4 Then
    If ТабПозиции.Size()=0 Then
      Exit;
    EndIf;
    If ПроверитьОперациюПоУсловиямПродаж(1,0) Then
      ОчиститьТаблицуТоваров();
    EndIf;
  ElseIf Чл=100 Then
    Form.кнЗакрытьЧек.InvokeEventAsync("OnClick");  
  ElseIf Чл=101 Then
    ФлФорсирование:=2;
    Form.кнЗакрытьЧек.InvokeEventAsync("OnClick");  
  ElseIf Чл=102 Then
    ФлФорсирование:=3;
    Form.кнЗакрытьЧек.InvokeEventAsync("OnClick");  
  ElseIf Чл=200 Then
    Form.кнОтменитьЧек.InvokeEventAsync("OnClick");  
  ElseIf Чл=201 Then
    ОчиститьТаблицуТоваров();
  ElseIf Чл=202 Then
    ОтложитьТекущийЧек(0);
  ElseIf Чл=300 Then
    ПродолжитьЧек();
  ElseIf Чл=301 Then
    ПечатьЧекаСВыбором();
  ElseIf Чл=302 Then
    ПереподключениеОборудования();
  ElseIf Чл=303 Then
    ПревратитьВЧекВозврата();
  ElseIf Чл=304 Then
    If ТекущаяОперация<>1 Then
      Exit;
    EndIf;
    ТекущаяОперация:=0;
    ОбновитьИнформацию(1);
  ElseIf Чл=305 Then
    ПревратитьВЧекЗакрытияАванса();
  ElseIf Чл=306 Then
    ПревратитьВЧекГашенияКредита();
  ElseIf Чл=307 Then
    aList:=List.Create();
    LoadModule(10,"Modules\FreeForms\ВнутренниеОбработки\СпециальныеОбработки\ИдентификацияПользователя",aList,0,"Module","Form");
    If aList["Результат"]<>1 Then
      Exit;
    EndIf;  
    лкПользователь:=aList["Пользователь"];
    ОбновитьИнформацию(1);
    Box("Операция замены прав выполнена успешно!",Q_INFORMATION);
  ElseIf Чл=400 Then
    Form.кнПоиск.InvokeEventAsync("OnClick");  
  ElseIf Чл=401 Then
    глСброситьСостояниеСканеров(НакопленноеСообщение);
    aList:=List.Create();
    LoadModule(10,"Modules\FreeForms\ВнутренниеОбработки\СпециальныеОбработки\СканированиеШтрихкода",aList,0,"Module","Form");
    If aList["Ответ"]<>1 Then
      Exit;
    EndIf;
    Стр:=aList["Результат"];
    ВремяПоследнегоНажатия:=0;
    аПартия:=0;
    аНоменклатура:=0;
    аМарка:=0;
    аКоличество:=0;
    аМРЦ:=0;
    ФлНайден:=РазобратьТоварныйШтрихкод(Стр,аНоменклатура,аПартия,аМарка,аКоличество,аМРЦ);
    If ФлНайден=0 Then
      Box("Объект или товар со штрихкодом """+Left(Стр,200)+""" в базе не найден!",Q_STOP);
      глСброситьСостояниеСканеров(НакопленноеСообщение);
      Exit;
    ElseIf ФлНайден>1 Then
      Exit;//Поиск
    EndIf;
    ДобавитьТоварВТаблицуТоваров(ТабПозиции,1,аНоменклатура,аПартия,аМарка,аКоличество,1,,аМРЦ);
  ElseIf Чл=402 Then
    aList:=List.Create();
    LoadModule(10,"Modules\FreeForms\ВнутренниеОбработки\СпециальныеОбработки\ПодборСТорговогоОборудования",aList,0,"Module","Form");
    Таб:=aList.GetByName("Результат");
    If _And(not isEmpty(Таб),Таб.Size()>0) Then
      ПодборТоваровДобавитьТаблицуТоваров(Таб);
    EndIf;
  ElseIf Чл=500 Then
    Form.кнЧастыеТовары.InvokeEventAsync("OnClick");  
  ElseIf Чл=700 Then
    If спДополнительныеКассы.Size()>0 Then
      For i:=1 To спДополнительныеКассы.Size() Do
        спДрайверы:=спДополнительныеКассы[i];
        спИнф:=спДрайверы[1];
        If not ОткрытьКассовуюСмену(спИнф["Магазин"],спИнф["спНастройкиККМ"],,спИнф["спПлатежныеТерминалы"]) Then
          Exit;
        EndIf;
      EndDo;
    EndIf;
    ОткрытьКассовуюСмену(ТекущийМагазин,СпНастройкиККМ);
  ElseIf Чл=701 Then
    If спДополнительныеКассы.Size()>0 Then
      For i:=1 To спДополнительныеКассы.Size() Do
        спДрайверы:=спДополнительныеКассы[i];
        спИнф:=спДрайверы[1];
        If not ЗакрытьКассовуюСмену(спИнф["Магазин"],спИнф["спНастройкиККМ"],,спИнф["спПлатежныеТерминалы"]) Then
          Exit;
        EndIf;
      EndDo;
    EndIf;
    ЗакрытьКассовуюСмену(ТекущийМагазин,СпНастройкиККМ);
  ElseIf Чл=702 Then
    ФлОткрыта:=0;
    Try
      If глВыполнитьФункциюДрайвера("ShiftInfo",спНастройкиККМ)="" Then
        ФлОткрыта:=Number(спНастройкиККМ["СменаСостояние"]);
      EndIf;
    Except
      ФлОткрыта:=-1;
    EndTry;
    //-1 -- ошибка, 0 -- закрыта, 1 -- открыта, 2 -- истекла, 3 -- другое
    If ФлОткрыта=0 Then
      //Z-отчет
      Try
        If AskQuestion("Выполнить печать Z-отчета?",Q_QUESTION+Q_YESNO,R_YES)=R_NO Then
          Exit;
        EndIf;
        СпНастройкиККМ["Кассир"]:=ТекущийКассир.Контрагент;
        Стр:=глВыполнитьФункциюДрайвера("PrintReportZ",СпНастройкиККМ);
        If IsEmpty(Стр) Then
          //Печать Z-отчета для платежных терминалов
          ВыполнитьПечатьОтчетаПлатежногоТерминала(локСпНастройкиККМ,спПлатежныеТерминалы,"ReportZ","Z-отчет");
        EndIf;
      Except
        Стр:=PopError();
      EndTry;
      Box("Не удалось выполнить печать Z-отчета, ошибка: "+Стр+"!",Q_STOP);
    ElseIf (ФлОткрыта=1)Or(ФлОткрыта=2) Then
      //X-отчет
      Try
        If AskQuestion("Выполнить печать X-отчета?",Q_QUESTION+Q_YESNO,R_YES)=R_NO Then
          Exit;
        EndIf;
        СпНастройкиККМ["Кассир"]:=ТекущийКассир.Контрагент;
        Стр:=глВыполнитьФункциюДрайвера("PrintReportX",СпНастройкиККМ);
        If IsEmpty(Стр) Then
          //Печать X-отчета для платежных терминалов
          ВыполнитьПечатьОтчетаПлатежногоТерминала(локСпНастройкиККМ,спПлатежныеТерминалы,"ReportX","X-отчет");
        EndIf;
      Except
        Стр:=PopError();
      EndTry;
      Box("Не удалось выполнить печать X-отчета, ошибка: "+Стр+"!",Q_STOP);
    Else
      Box("Неверное состояние смены ККМ не позволяет выполнить печать X или Z отчета!",Q_STOP);
    EndIf;  
  ElseIf Чл=703 Then
    Try
      Стр:=глВыполнитьФункциюДрайвера("OpenCashDrawer",СпНастройкиККМ);
      If IsEmpty(Стр) Then
        Exit;
      EndIf;
    Except
      Стр:=PopError();
    EndTry;
    Box("Не удалось открыть денежный ящик, ошибка: "+Стр+"!",Q_STOP);
  ElseIf Чл=704 Then
    aList:=List.Create();
    aList.Add(спНастройкиККМ,"спНастройкиККМ");
    aList.Add(ТекущийМагазин,"ТекущийМагазин");
    aList.Add(ТекущийКассир,"ТекущийКассир");
    aList.Add(1,"НоменМагазина");
    aList.Add(0,"ТекущаяОперация");
    aList.Add(лкПользователь,"лкПользователь");
    aList.Add(спДополнительныеКассы,"ДополнительныеКассы");
    LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВвестиСумму");  
    ВремяПоследнегоНажатия:=0;
  ElseIf Чл=705 Then
    aList:=List.Create();
    aList.Add(спНастройкиККМ,"спНастройкиККМ");
    aList.Add(ТекущийМагазин,"ТекущийМагазин");
    aList.Add(ТекущийКассир,"ТекущийКассир");
    aList.Add(1,"НоменМагазина");
    aList.Add(1,"ТекущаяОперация");
    aList.Add(лкПользователь,"лкПользователь");
    aList.Add(спДополнительныеКассы,"ДополнительныеКассы");
    LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВвестиСумму");  
    ВремяПоследнегоНажатия:=0;
  EndIf;
EndFunction

//Функция выполняется после добавления новой номенклатуры в базу, либо изменения в папках номенклатуры
//  Иначе новая номенклатура может попасть на некорректную кассу, так как буфер Contains будет содержать старые значения.
Function ОчиститьБуферContains()
  If _And(not IsEmpty(СкидочнаяКартаЧека),not IsEmpty(СкидочнаяКартаЧекаПеременные)) Then
    If TypeStr(СкидочнаяКартаЧекаПеременные["НоменклатураСертификата"])="LIST" Then
      СкидочнаяКартаЧекаПеременные["НоменклатураСертификата"].ClearContainsCache();
    EndIf;
  EndIf;
  спЗапрещеннаяДляСкидокНоменклатура.ClearContainsCache();
  тУсловияПродаж.Select();
  While тУсловияПродаж.Next() Do
    If not IsEmpty(тУсловияПродаж.спНоменклатура) Then
      тУсловияПродаж.спНоменклатура.ClearContainsCache();
      aTab:=тУсловияПродаж.Условие.LineParts("Номенклатура");
      aTab.Select();
      While aTab.Next() Do
        aList:=aTab.Номенклатура.Props();
        If TypeStr(aList)="LIST" Then
          aList.ClearContainsCache();
        EndIf;
      EndDo;
    EndIf;
    If not IsEmpty(тУсловияПродаж.тНоменклатураУсловия) Then
      тНоменклатураУсловия:=тУсловияПродаж.тНоменклатураУсловия;
      тНоменклатураУсловия.Select();
      While тНоменклатураУсловия.Next() Do
        aList:=тНоменклатураУсловия.Номенклатура.Props();
        If TypeStr(aList)="LIST" Then
          aList.ClearContainsCache();
        EndIf;
      EndDo;
    EndIf;
  EndDo;
  If спДополнительныеКассы.Size()>0 Then
    For i:=1 To спДополнительныеКассы.Size() Do
      спДрайверы:=спДополнительныеКассы[i];
      спИнф:=спДрайверы[1];
      If TypeStr(спИнф)="LIST" Then
        спИнф["СпНоменклатураМагазинаПоиск"]:=GetNothing();
        If TypeStr(спИнф["НоменклатураМагазина"])="LIST" Then
          спИнф["НоменклатураМагазина"].ClearContainsCache();
        EndIf;
      EndIf;
    EndDo;
  EndIf;    
EndFunction

спОкруглениеЦен:=List.Create(5,10,50,100,500,1000,5000,10000);

