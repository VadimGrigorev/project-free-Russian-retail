//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

Var НакопленноеСообщение Export;
Var БылаВставкаИзБуфера Export;

Var ФлТипДиалога Export;  //0 -- рабочее место продавца, 1 -- киоск самообслуживания
Var ФлДиалогИнициализированПолностью Export;
Var ТекущийМагазин Export;
Var ТекущееРабочееМесто Export;
Var ТекущийКассир Export;
Var ТекущаяОперация Export;         //0 -- продажа, 1 -- возврат, 2 -- аванс (только в диалоге оплаты), 3 -- кредит (только в диалоге оплаты), 4 -- закрытие аванса (только в диалоге оплаты), 5 -- закрытие кредита (только в диалоге оплаты)
Var КонтрагентЗакрытияАванса Export;//Передает контрагента из операции закрытия аванса в диалог оплаты
Var ПоследнийЧекДокумент Export;
Var лкПользователь Export;          //Текущий пользователь, используется при замене прав, для временной замены на пользователя с большими правами
Var спОкруглениеЦен Export;
Var тГорячиеКлавиши Export;
Var ФлФорсирование Export;          //1 -- выход без запроса, 2 -- закрытие чека, заполнить сумму нал., 3 -- закрытие чека, заполнить сумму безнал.

Var ВремяПоследнегоОбновленияУсловийПродаж Export;
Var тУсловияПродаж Export;          //"Условие,Переменные,Модуль"

Var спПодключенныеДрайверы Export, спДополнительныеКассы Export;
Var спНастройкиККМ Export;
Var спПлатежныеТерминалы Export;
Var спДисплеиПокупателя Export, ВремяПоследнейИнициализацииДисплея Export;
Var спВесы Export;

Var ФлБылаОтменаТовара Export;
Var ВремяПоследнегоНажатия Export;
Var ФлПредупреждениеОВремениПоследнегоНажатия Export;

//Переменные вспомогательных форм
Var ФлТолькоВНаличии Export;
Var ПоискТабПозиции Export;
Var ТабПодборОстатки Export;
Var ТабАкцииЧека Export;
Var ТабСертификатыЧека Export;
Var СкидочнаяКартаЧека Export;
Var ДолгПокупателя Export;
Var спСписокДокументовОтбор Export;
Var ПочтаИлиТелефон Export;
Var локТекущийМагазин Export, локСпНастройкиККМ Export;
Var КорректировочныеСвойстваЧека Export;

Function ЗакрытьЧекОбновитьАкции() Forward;
Function ЗакрытьЧекОбновитьСуммы(ФлПолноеОбновление=0) Forward;


Function ОтключитьДополнительныеКассы()
  If TypeStr(спДополнительныеКассы)="LIST" Then
    //Отключаем драйверы
    For i:=1 To спДополнительныеКассы.Size() Do
      спДрайверы:=спДополнительныеКассы[i];
      спДрайверы.Remove(1);//Информация о магазине
      For j:=1 To спДрайверы.Size() Do
        спНастройки:=спДрайверы[j];
        Try
          глВыполнитьФункциюДрайвера("DriverDisconnect",спНастройки);
        Except
        EndTry;
      EndDo;
      глВыгрузитьДрайверыДругогоМагазина(спДрайверы);
    EndDo;
  EndIf;
  спДополнительныеКассы:=List.Create();
EndFunction

Function ИнициализироватьОборудование()
  If глПользователь.РабочееМесто.Selected()=0 Then
    Exit "Необходимо выбрать рабочее место магазина для текущего пользователя!";
  EndIf;
  СпОшибки:=List.Create();
  глЗагрузитьДрайверы(0,0,СпОшибки);
  If СпОшибки.Size()>0 Then
    For i:=1 To СпОшибки.Size()-1 Do
      Box(СпОшибки[i],Q_STOP);
    EndDo;
    Exit СпОшибки[СпОшибки.Size()];
  EndIf;
  //Отключаем драйверы
  For i:=1 To спПодключенныеДрайверы.Size() Do
    спНастройки:=спПодключенныеДрайверы[i];
    Try
      глВыполнитьФункциюДрайвера("DriverDisconnect",спНастройки);
    Except
    EndTry;
  EndDo;
  
  спПодключенныеДрайверы:=List.Create();
  спНастройкиККМ:=0;
  спПлатежныеТерминалы:=List.Create();
  спДисплеиПокупателя:=List.Create();
  спВесы:=List.Create();
  LockObject(глДрайверы);
  Try
    For i:=1 To глДрайверы.Size() Do
      спНастройки:=глДрайверы[i];
      aEl:=спНастройки["Оборудование"];
      Стр:=спНастройки["ТипОборудования"];
      If _And(ФлТипДиалога=0,Стр=Enum.GetCaption("рознТипыОборудования.ККТ")) Then
        If спНастройкиККМ<>0 Then
          Exit "Для текущего рабочего места задано более одной ККМ!";
        EndIf;
        спНастройкиККМ:=спНастройки;
      ElseIf _And(ФлТипДиалога=1,Стр=Enum.GetCaption("рознТипыОборудования.КиоскиСамообслуживания")) Then
        If спНастройкиККМ<>0 Then
          Exit "Для текущего рабочего места задано более одного драйвера киоска самообслуживания!";
        EndIf;
        спНастройкиККМ:=спНастройки;
      ElseIf Стр=Enum.GetCaption("рознТипыОборудования.СчитывателиМагнитныхКарт") Then
        //Подключаются как сканеры, не требуют доп. настройки
      ElseIf Стр=Enum.GetCaption("рознТипыОборудования.СчитывателиРадиочипов") Then
        //Подключаются как сканеры, не требуют доп. настройки
      ElseIf Стр=Enum.GetCaption("рознТипыОборудования.ПлатежныеТерминалы") Then
        спПлатежныеТерминалы.Add(спНастройки);
      ElseIf Стр=Enum.GetCaption("рознТипыОборудования.ДисплеиПокупателя") Then
        спДисплеиПокупателя.Add(спНастройки);
      ElseIf _And(Стр=Enum.GetCaption("рознТипыОборудования.Весы"),спНастройки["АктивныеВесы"]=1) Then
        спВесы.Add(спНастройки);
      ElseIf Стр=Enum.GetCaption("рознТипыОборудования.СканерыШтрикодов") Then
        Continue;
      EndIf;
      спПодключенныеДрайверы.Add(спНастройки);
    EndDo;
  Finally
    UnlockObject(глДрайверы);
  EndTry;
  If спНастройкиККМ=0 Then
    Exit "Для текущего рабочего места не задано ни одного драйвера ККМ!";
  EndIf;
  aEl:=спНастройкиККМ["Оборудование"];
  If aEl.Касса.Selected()=0 Then
    Exit "Для ККМ "+aEl+" не задан элемент справочника кассы!";
  EndIf;
  
  //Подключение ККМ
  Try
    Стр:=глВыполнитьФункциюДрайвера("DriverConnect",спНастройкиККМ);
    If Стр<>"" Then
      Raise Стр;
    EndIf;
  Except
    Exit "Ошибка подключения драйвера ККМ: "+PopError();
  EndTry;
  //Подключение остальных драйверов
  For i:=1 To спПодключенныеДрайверы.Size() Do
    Сп:=спПодключенныеДрайверы[i];
    If Сп["Оборудование"]<>спНастройкиККМ["Оборудование"] Then
      Try
        Стр:=глВыполнитьФункциюДрайвера("DriverConnect",Сп);
        If Стр<>"" Then
          Raise Стр;
        EndIf;
      Except
        Exit "Ошибка подключения драйвера для устройства "+Сп["Оборудование"]+": "+PopError();
      EndTry;
    EndIf;
  EndDo;
    
  //Инициализация дополнительных касс
  ОтключитьДополнительныеКассы();
  If ФлТипДиалога=0 Then
    РабочееМесто:=глПользователь.РабочееМесто.Copy();
    aTab:=РабочееМесто.LineParts("Оборудование");
    aTab.Select();
    While aTab.Next() Do
      aEl:=aTab.Оборудование;
      If _Or(aEl.DBName()<>"рознМагазины",IsEmpty(aTab.РабочееМесто)) Then
        Continue;
      EndIf;
      bTab:=aEl.LineParts("Номенклатура");
      If bTab.Size()=0 Then
        Continue;
      EndIf;    
      спДрайверы:=0;
      Стр:=глЗагрузитьДрайверыДругогоМагазина(aTab.РабочееМесто,спДрайверы);
      If Not IsEmpty(Стр) Then
        Exit "Для подчиненного магазина "+aEl+" произошла ошибка при загрузке драйверов: "+Стр;
      EndIf;
      спИнф:=List.Create();
      спИнф["РабочееМесто"]:=aTab.РабочееМесто;
      спИнф["Магазин"]:=aEl;
      спИнф["спНастройкиККМ"]:=0;
      спИнф["спПлатежныеТерминалы"]:=List.Create();
      спИнф["спДисплеиПокупателя"]:=List.Create();
      For i:=1 To спДрайверы.Size() Do
        спДрайвер:=спДрайверы[i];
        Стр:=спДрайвер["ТипОборудования"];
        If Стр=Enum.GetCaption("рознТипыОборудования.ККТ") Then
          If спИнф["спНастройкиККМ"]<>0 Then
            спИнф["спНастройкиККМ"]:=1;
          Else
            спИнф["спНастройкиККМ"]:=спДрайвер;
          EndIf;
        ElseIf Стр=Enum.GetCaption("рознТипыОборудования.ПлатежныеТерминалы") Then
          спИнф["спПлатежныеТерминалы"].Add(спДрайвер);
        ElseIf Стр=Enum.GetCaption("рознТипыОборудования.ДисплеиПокупателя") Then
          спИнф["спДисплеиПокупателя"].Add(спДрайвер);
        EndIf;
      EndDo;      
      спДрайверы.Insert(1,спИнф);
      спДополнительныеКассы.Add(спДрайверы);
      If спИнф["спНастройкиККМ"]=0 Then
        Exit "Для подчиненного магазина "+aEl+" не задано ни одного драйвера ККМ!";
      ElseIf спИнф["спНастройкиККМ"]=1 Then
        Exit "Для подчиненного магазина "+aEl+" задано более одной ККМ!";
      EndIf;
      
      //Подключение ККМ
      локСпНастройкиККМ:=спИнф["спНастройкиККМ"];
      Try
        Стр:=глВыполнитьФункциюДрайвера("DriverConnect",локСпНастройкиККМ);
        If Стр<>"" Then
          Raise Стр;
        EndIf;
      Except
        Exit "Для подчиненного магазина "+aEl+" ошибка подключения драйвера ККМ: "+PopError();
      EndTry;
      //Подключение остальных драйверов
      For i:=2 To спДрайверы.Size() Do
        Сп:=спДрайверы[i];
        If Сп["Оборудование"]<>локСпНастройкиККМ["Оборудование"] Then
          Try
            Стр:=глВыполнитьФункциюДрайвера("DriverConnect",Сп);
            If Стр<>"" Then
              Raise Стр;
            EndIf;
          Except
            Exit "Для подчиненного магазина "+aEl+" ошибка подключения драйвера для устройства "+Сп["Оборудование"]+": "+PopError();
          EndTry;
        EndIf;
      EndDo;
    EndDo;
  EndIf;
  
  НакопленноеСообщение:="";
  Form.OnTimerInterval:=глСканерыКлавиатурыТаймерИнтервал;
EndFunction

Function ОбновитьИнформацию(ФлБыстро=0)
  If not ФлБыстро Then
    Try
      стрСмена:="Смена ?";
      Цвет:=_CLR_RED;
      If глВыполнитьФункциюДрайвера("ShiftInfo",спНастройкиККМ)="" Then
        стрСмена:="Смена "+?(TypeStr(спНастройкиККМ["НомерСмены"])<>"NUMBER","?:","№"+спНастройкиККМ["НомерСмены"]+":")+" ";
        aNum:=Number(спНастройкиККМ["СменаСостояние"]);
        //-1 -- ошибка, 0 -- закрыта, 1 -- открыта, 2 -- истекла, 3 -- другое
        if aNum=0 Then
          стрСмена:=стрСмена+"закрыта";
          Цвет:=_CLR_RED;
        Elseif aNum=1 Then
          стрСмена:=стрСмена+"открыта";
          Цвет:=_CLR_WINDOWTEXT;
        Elseif aNum=2 Then
          стрСмена:=стрСмена+"истекла";
          Цвет:=_CLR_RED;
        Else
          стрСмена:=стрСмена+"?";
          Цвет:=_CLR_RED;
        EndIf;
      EndIf;
    Except
      Exit "Ошибка подключения драйвера ККМ: "+PopError();
    EndTry;
  Else
    стрСмена:=Form.тСмена.Caption;
    стрСмена:=Trim(TearStr(стрСмена,","));
    Цвет:=Form.тСмена.FontColor;
  EndIf;
  СтрКассир:=ТекущийКассир;
  If _And(not IsEmpty(ТекущийКассир),not IsEmpty(ТекущийКассир.Контрагент)) Then
    СтрКассир:=ТекущийКассир.Контрагент;
  EndIf;
  If лкПользователь=глПользователь Then
    стрСмена:=стрСмена+", кассир: "+СтрКассир;
  Else
    стрСмена:=стрСмена+", кассир: "+СтрКассир+", права: "+лкПользователь;
  EndIf;
  If стрСмена<>Form.тСмена.Caption Then
    Form.тСмена.Caption:=стрСмена;
  EndIf;
  If Form.тСмена.FontColor<>Цвет Then
    Form.тСмена.FontColor:=Цвет;
  EndIf;
  СтрОперация:="операция: продажа";
  Цвет:=_CLR_WINDOWTEXT;
  Фон:=_CLR_BTNFACE;
  If ТекущаяОперация=1 Then
    СтрОперация:="операция: возврат";
    Цвет:=_CLR_WHITE;
    Фон:=_CLR_RED;
  ElseIf ТекущаяОперация<>0 Then
    СтрОперация:="операция: ошибка ("+ТекущаяОперация+")!";
    Цвет:=_CLR_WHITE;
    Фон:=_CLR_RED;
  ElseIf not IsEmpty(КонтрагентЗакрытияАванса) Then
    СтрОперация:="операция: закрытие аванса";
    Цвет:=_CLR_BLUE;
  EndIf;
  If Form.тОперация.Caption<>СтрОперация Then
    Form.тОперация.Caption:=СтрОперация;
    Form.тОперация.FontColor:=Цвет;
    Form.тОперация.Color:=Фон;
    If Цвет<>_CLR_WINDOWTEXT Then
      Form.тОперация.FontStyle:=1;
    Else
      Form.тОперация.FontStyle:=0;
    EndIf;
  EndIf;
EndFunction


Function ОбновитьИнформациюТекущейСтроки()
  If IsEmpty(спДисплеиПокупателя) Then
    Exit;
  EndIf;
  
  ТабПозиции:=Form.ТабПозиции.Value;
  If ТабПозиции.SelectedLine=0 Then
    If Form.тПозиция.Caption<>"" Then
      Form.тПозиция.Caption:="";
    EndIf;
    If Form.тСумма.Caption<>"" Then
      Form.тСумма.Caption:="";
    EndIf;
  Else
    ТабПозиции.CurLine:=ТабПозиции.SelectedLine;
    Стр:=""+ТабПозиции.Номенклатура+" ("+Lowercase(ТабПозиции.Номенклатура.базЕдиница)+")"+
      ?(ТабПозиции.флМарки=1,", марочный учет")+?(ТабПозиции.Номенклатура.флВесовойТовар=1,", весовой товар");
    If Form.тПозиция.Caption<>Стр Then
      Form.тПозиция.Caption:=Стр;
    EndIf;
    Стр:=глФРМ(ТабПозиции.Сумма)+" руб."+?(ТабПозиции.Количество<>1," за "+Round(ТабПозиции.Количество,3)+" ("+Lowercase(ТабПозиции.Номенклатура.базЕдиница)+")");
    If Form.тСумма.Caption<>Стр Then
      Form.тСумма.Caption:=Стр;
    EndIf;
  EndIf;
  
  Стр:=ТабПозиции.SUM("Сумма");
  If Стр=0 Then
    If Form.тСуммаИтого.Caption<>"" Then
      Form.тСуммаИтого.Caption:="";
    EndIf;
  Else
    Стр:="Итого: "+глФРМ(Стр)+" руб., позиций: "+ТабПозиции.Size();
    If Form.тСуммаИтого.Caption<>Стр Then
      Form.тСуммаИтого.Caption:=Стр;
    EndIf;
  EndIf;
  
  //TODO: Добавить информацию по акциям
  Стр:=ТабПозиции.SUM("Скидка");
  If Стр=0 Then
    If Form.тИнформация.Caption<>"" Then
      Form.тИнформация.Caption:="";
    EndIf;
  Else
    Стр:="Итого скидка: "+глФРМ(Стр)+" руб.";
    If Form.тИнформация.Caption<>Стр Then
      Form.тИнформация.Caption:=Стр;
    EndIf;
  EndIf;

  If _And(_Or(ВремяПоследнейИнициализацииДисплея=0,ТабПозиции.Size()>0),спДисплеиПокупателя.Size()>0) Then
    //Вызвать обновление информации на дисплее покупателя (обычно по последней позиции в таблице)
    For i:=1 To спДисплеиПокупателя.Size() Do
      спНастройки:=спДисплеиПокупателя[i];
      спНастройки["ТабПозиции"]:=ТабПозиции;
      Try
        глВыполнитьФункциюДрайвера("UpdateDisplayInfo",спНастройки);
      Except
      EndTry;
      спНастройки["ТабПозиции"]:=0;
    EndDo;
  EndIf;
EndFunction

Function ОбновитьУсловияПродаж()
  аДата:=BegOfDay(Date());
  тУсловияПродаж:=Tab.Create("Условие,Переменные,Модуль");
  Try
    СпУсловияПродаж:=Ref.рознУсловияПродажИМаркетинговыеАкции.Load(0,"~(@Parent=ТекущийМагазин)And(@Status<>1)And(ДатаНачалаДействия<аДата)And((ДатаОкончанияДействия<='01.01.1981')Or(ДатаОкончанияДействия>аДата))");
    СпУсловияПродаж.CopyTo(тУсловияПродаж,,,"Условие");
  Except
  EndTry;
EndFunction

Function ПроверитьОперациюПоУсловиямПродаж(ТипОперации,ByRef НомерСтроки)
  If тУсловияПродаж.Size()=0 Then
    Exit 1;
  EndIf;
  If not IsEmpty(ПоискТабПозиции) Then
    ТабПозиции:=ПоискТабПозиции;
  Else
    ТабПозиции:=Form.ТабПозиции.Value;
  EndIf;
  СпОперация:=List.Create();
  СпОперация["ТипОперации"]:=ТипОперации;
  СпОперация["НомерСтроки"]:=НомерСтроки;
  тУсловияПродаж.Select();
  While тУсловияПродаж.Next() Do
    //TODO: Поддержать маркетинговые акции
    If тУсловияПродаж.Модуль=1 Then //Ошибка компиляции
      Continue;
    EndIf;
    aEl:=тУсловияПродаж.Условие;
    If aEl.ТипУсловия<>Enum.рознТипыУсловийПродаж.ПрограммноеУсловие Then
      Continue;
    EndIf;
    If IsEmpty(aEl.Условие) Then
      Continue;
    EndIf;
    СпОперация["Результат"]:=0;
    СпОперация["Сообщение"]:="";
    СпОперация["ТипСообщения"]:=0;
    СпОперация["ЭлементУсловие"]:=aEl;
    If IsEmpty(тУсловияПродаж.Переменные) Then
      тУсловияПродаж.Переменные:=List.Create();
    EndIf;
    СпОперация["Переменные"]:=тУсловияПродаж.Переменные;    
    Модуль:=тУсловияПродаж.Модуль;
    If IsEmpty(Модуль) Then
      Try
        Модуль:=Compile(aEl.Условие,0,,aEl.Условие);
      Except
        тУсловияПродаж.Модуль:=1;
        Box("Условие "+aEl+" вызвало ошибку "+PopError()+"! Операция отменена!",Q_STOP);
        Exit 0;
      EndTry;
      тУсловияПродаж.Модуль:=Модуль;
    EndIf;
    Try
      Exec(Модуль);
    Except
      Box("Условие "+aEl+" вызвало ошибку "+PopError()+"! Операция отменена!",Q_STOP);
      Exit 0;
    EndTry;
    //Сообщение?
    If not IsEmpty(СпОперация["Сообщение"]) Then
      Тип:=?(СпОперация["ТипСообщения"]=1,Q_WARNING,?(СпОперация["ТипСообщения"]=2,Q_INFORMATION,Q_STOP));
      Box(СпОперация["Сообщение"],Тип);
    EndIf;
    If СпОперация["Результат"]=1 Then
      Exit 0;
    EndIf;
    НомерСтроки:=СпОперация["НомерСтроки"];
  EndDo;
  Exit 1;
EndFunction


//Результат 0 или 1, вызывается только из основной формы
Function ДобавитьТоварВТаблицуТоваров(ТабПозиции,ФлИзДругойФормы,аНоменклатура,аПартия,аМарка,аКоличество,ФлСпроситьМарку=0,ЦеныНаДату=0,МаксимальнаяРозничнаяЦена=0);

  Function ОбновитьЦветаСтроки()
    If Number(ТабПозиции.флМарки)=1 Then
      If not ТабПозиции.Column("Статус").isVisible Then
        ТабПозиции.Column("Статус").isVisible:=1;
      EndIf;
      ТМарки:=ТабПозиции.ТМарки;
      Чл:=?(IsEmpty(ТМарки),0,ТМарки.Size());
      If Чл<>ТабПозиции.Количество Then
        ТабПозиции.Статус:=?(ТабПозиции.Количество=1,1,ТабПозиции.Количество-Чл);
        ТабПозиции.BackgroundColor(ТабПозиции.CurLine,"Статус",MixColors(_CLR_WINDOW,_CLR_RED,10));
      Else
        ТабПозиции.Статус:="";
        ТабПозиции.BackgroundColor(ТабПозиции.CurLine,"Статус",_CLR_WINDOW);
      EndIf;
    EndIf;
    If ТабПозиции.Остаток<=0 Then
      ТабПозиции.BackgroundColor(ТабПозиции.CurLine,"Остаток",MixColors(_CLR_WINDOW,_CLR_RED,10));
    EndIf;
    If not ФлИзДругойФормы Then
      ОбновитьИнформациюТекущейСтроки();
    EndIf;
  EndFunction

  Function ОбновитьПартииИМарки()
    If not IsEmpty(аПартия) Then
      If IsEmpty(ТабПозиции.ТПартии) Then
        ТПартии:=Tab.Create("Партия,Количество");
        ТабПозиции.ТПартии:=ТПартии;
      Else
        ТПартии:=ТабПозиции.ТПартии;
      EndIf;
      If ТПартии.FindAndGoto(аПартия,,"Партия")=0 Then
        ТПартии.AddLine("Партия,Количество",аПартия,0);
      EndIf;
      ТПартии.Количество:=ТПартии.Количество+аКоличество;
    EndIf;
    
    If not IsEmpty(аМарка) Then
      If IsEmpty(ТабПозиции.ТМарки) Then
        ТМарки:=Tab.Create("Партия,Марка");
        ТабПозиции.ТМарки:=ТМарки;
      Else
        ТМарки:=ТабПозиции.ТМарки;
      EndIf;
      ТМарки.AddLine("Партия,Марка",аПартия,аМарка);
    EndIf;
  EndFunction  

  If _And(not лкПользователь.бухГлавныйБухгалтер,ТекущаяОперация=1) Then
    Box("Вам запрещено добавлять позиции в возврат, возврат можно создать только выбрав докумет реализации!",Q_STOP);
    Exit;
  EndIf;
  
  //Определим, марочный ли это учет
  Result:=0;
  ФлМарочная:=аНоменклатура.флПодлежитПрослеживаемости;
  If not IsEmpty(аПартия) Then
    аНоменклатура:=аПартия.Parent();
    ФлМарочная:=Max(ФлМарочная,аПартия.флМарочныйУчет);
  ElseIf аНоменклатура.флАлкогольнаяПродукция Then
    aEl:=Ref.тмцПартииТМЦ;
    aEl.UseOrder("Code-");
    aList:=aEl.Load(2,"~(@Status=0)And(@Parent=аНоменклатура)");
    If aList.Size()>1 Then
      ФлМарочная:=Max(ФлМарочная,aList[1].флМарочныйУчет,aList[2].флМарочныйУчет);
    ElseIf aList.Size()>0 Then
      ФлМарочная:=Max(ФлМарочная,aList[1].флМарочныйУчет);
    EndIf;
  EndIf;
  аКоличество:=?(аКоличество=0,1,аКоличество);
  If _And(аКоличество=1,ФлСпроситьМарку,ФлМарочная,IsEmpty(аМарка)) Then
    While 1 Do //Цикл сканирования марки
      глСброситьСостояниеСканеров(НакопленноеСообщение);
      aList:=List.Create();
      aList["Заголовок"]:="Марка от "+аНоменклатура;
      LoadModule(10,"Modules\FreeForms\ВнутренниеОбработки\СпециальныеОбработки\СканированиеШтрихкода",aList,0,"Module","Form");
      If aList["Ответ"]<>1 Then
        Exit;
      EndIf;
      аМарка:=aList["Результат"];
      If not ContainsOnlyCharacters(аМарка,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz;:<=>?!""#$%&'(){}*+,-./@_"+Chr($1D,1)) Then
        аМарка:=ReplaceCharacters(аМарка,"йцукенгшщзхъфывапролджэячсмитьбюЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ","qwertyuiop[]asdfghjkl;'zxcvbnm,.QWERTYUIOP{}ASDFGHJKL:""ZXCVBNM<>");
        If not ContainsOnlyCharacters(аМарка,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz;:<=>?!""#$%&'(){}*+,-./@_"+Chr($1D,1)) Then
          Box("Отсканированный код содержит международные символы, которые недопустимы в кодах марок товара! Переключите язык на латиницу при сканировании марки, если сканер подключен в режиме клавиатуры!",Q_STOP);
          Continue;
        EndIf;
      EndIf;
      
      аМарка2:=глУдалитьКрипточасть(аМарка);
      аМар:=Ref.тмцМаркировкаПозиций;
      If not аМар.Find("~(@Status=0)And(КодМарки=аМарка2)And(флСостояние=1)And(@IsFolder=0)And(@Parent.@Parent=аНоменклатура)") Then
        If not ТекущийМагазин.флНеПроверятьНаличиеМарочногоТовара Then
          Box("Отсканированная марка отсутствует на балансе организации или не привязана к товару "+аНоменклатура+"!",Q_STOP);
          Exit;
        Else
          //Длины строк марок: ЕГАИС: 150 (новая), пример: 131400????341710180014DCYW2VRDVFBPQRKDDZW5NLZTUWRUJSA6Y54UFQGXUYS4CDHAR4KNNSBA2QDP23T4SKTKL5JP5ZOKOSUNLHVTFHRCXXKFSDLBJP7O63CGPU2LBKRJW4C7WRML????????
          //                          68 (старая), пример: 22N00000????AVMSNOB0OCJ908220010499919QVAMSX3XMVAQJWMMJU0HG6MZQU????
          //                   ИС МП: 29 (сигареты) без Chr(29), пример: 010460043994001221????????005125000 или 010460043994027221????????005125000
          //                          любой размер (другие группы) с Chr(29)
          ФлВернаяМарка:=_And(аНоменклатура.флАлкогольнаяПродукция,_Or(Length(аМарка)=150,_And(Length(аМарка)=68,аМарка[3]="N"))) Or _And(аНоменклатура.флПодлежитПрослеживаемости,_Or(Length(аМарка)=29,Pos(Chr(29),аМарка)>0));
          If not ФлВернаяМарка Then
            Box("Отсканированный код ("+Length(аМарка)+" символов) не совпадает по длине с кодами марок! Пожалуйста отсканируйте именно марку, а не штрихкод товара, либо закройте диалог!",Q_STOP);
            Continue;
          EndIf;
        
          If isEmpty(аПартия) Then
            //Найдем первую попавшуюся партию
            аПартия:=Ref.тмцПартииТМЦ;
            аПартия.UseOrder("Code-");
            If not аПартия.Find("~(@Parent=аНоменклатура)And(@Status<>1)") Then
              Box("Для позиции "+аНоменклатура+" нет ни одной рабочей партии! Невозможно реализовать такой товар!",Q_STOP);
              Exit;
            EndIf;
            ФлМарочная:=1;
          EndIf;
        EndIf;
      Else
        аПартия:=аМар.Parent();
        ФлМарочная:=Max(ФлМарочная,аПартия.флМарочныйУчет);
      EndIf;
      
      //Проверка, не были ли эта марка уже списана
      If аМар.Find("~(@Status=0)And(КодМарки=аМарка)And(флСостояние=2)And(@IsFolder=0)") Then
        If лкПользователь.общиеАдминистратор Then
          If AskQuestion("Отсканированная марка уже была реализована"+?(not isEmpty(аМар.Документ)," "+аМар.Документ.DocDate+" документом "+аМар.Документ.DocNum)+"! "+
              "Игнорировать (может стать причиной штрафа гос. органов)?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
            Continue;
          EndIf;
        Else
          Box("Отсканированная марка уже была реализована"+?(not isEmpty(аМар.Документ)," "+аМар.Документ.DocDate+" документом "+аМар.Документ.DocNum)+"!",Q_STOP);
          Continue;
        EndIf;
      EndIf;
      
      Break;
    EndDo;//Цикл сканирования марки
  ElseIf not IsEmpty(аМарка) Then
    If not ContainsOnlyCharacters(аМарка,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz;:<=>?!""#$%&'(){}*+,-./@_"+Chr($1D,1)) Then
      аМарка:=ReplaceCharacters(аМарка,"йцукенгшщзхъфывапролджэячсмитьбюЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ","qwertyuiop[]asdfghjkl;'zxcvbnm,.QWERTYUIOP{}ASDFGHJKL:""ZXCVBNM<>");
      If not ContainsOnlyCharacters(аМарка,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz;:<=>?!""#$%&'(){}*+,-./@_"+Chr($1D,1)) Then
        Box("Отсканированный код содержит международные символы, которые недопустимы в кодах марок товара! Переключите язык на латиницу при сканировании марки, если сканер подключен в режиме клавиатуры!",Q_STOP);
        Exit;
      EndIf;
    EndIf;
  EndIf;
  
  If not IsEmpty(аМарка) Then
    If not ФлМарочная Then
      Box("Для товара "+аНоменклатура+" была отсканирована марка, однако на партии товара отсутствует признак марочного учета! Исправьте ошибку до реализации товара!",Q_STOP);
      Exit;
    EndIf;
    If аКоличество<>1 Then
      Box("Для товара "+аНоменклатура+" была отсканирована марка, однако количество товара не равно единице!",Q_STOP);
      Exit;
    EndIf;
  EndIf;
  
  If ТабПозиции.FindAndGoto(аНоменклатура,,"Номенклатура")=0 Then
    ФлМРЦ:=0;
    зЧл:=Stor.ОстаткиТМЦ.Gross1("Количество",,0,"Склад,Номенклатура",ТекущийМагазин.Склад,аНоменклатура);
    If МаксимальнаяРозничнаяЦена>0 Then
      зЦ:=МаксимальнаяРозничнаяЦена;
      ФлМРЦ:=1;
    ElseIf _And(аНоменклатура.флПодлежитПрослеживаемости,Not IsEmpty(аПартия),аПартия.ЦенаМаксимальнаяПродажная>0) Then
      зЦ:=аПартия.ЦенаМаксимальнаяПродажная;
      ФлМРЦ:=1;
    Else
      зЦ:=Max(0,глПолучитьРозничнуюЦену(аНоменклатура,ТекущийМагазин.ТипЦенРеализации,ТекущийМагазин,1,ЦеныНаДату));
    EndIf;
    If зЦ=0 Then
      Стр:="Для товара "+аНоменклатура+" не задана розничная цена или не был распечатан ценник! Невозможно реализовать такой товар!";
      Путь:="Temp\Розница\ТоварыБезЦены\";
      If File.CreateDirectory(Путь) Then
        StringToFile(Стр,Путь+"problem_"+FormatDate(Date(),"YYYYmmddhhttss")+".txt",1200,0);
      EndIf;
      Box(Стр,Q_STOP);
      Exit;
    EndIf;
    зСм:=аКоличество*зЦ;
    //Округление
    If _And(аНоменклатура.флВесовойТовар,ТекущийМагазин.флПараметрыОкругленияВесовыхПозиций>0) Then
      Чл:=спОкруглениеЦен[ТекущийМагазин.флПараметрыОкругленияВесовыхПозиций];
      зСм:=((Round(зСм*100)+(Чл-1)) div Чл)*Чл/100;
    EndIf;

    Фл:=ТабПозиции.IsLocked();
    If not Фл Then
      ТабПозиции.Lock();
    EndIf;
    Try
      ТабПозиции.AddLine("Номенклатура,Остаток,Количество,Цена,флМарки,ФлМРЦ,Сумма",аНоменклатура,зЧл,аКоличество,зЦ,ФлМарочная,ФлМРЦ,зСм);
      ТабПозиции.СуммаБезСкидки:=ТабПозиции.Цена*ТабПозиции.Количество;
      ТабПозиции.Скидка:=ТабПозиции.СуммаБезСкидки-ТабПозиции.Сумма;
      
      аСтрока:=ТабПозиции.Size();
      If ПроверитьОперациюПоУсловиямПродаж(0,аСтрока) Then
        ОбновитьПартииИМарки();
        Result:=1;
        ТабПозиции.SelectedLine:=ТабПозиции.Size();
        ОбновитьЦветаСтроки();
      Else
        ТабПозиции.Remove(аСтрока);
      EndIf;
    Finally
      If not Фл Then
        ТабПозиции.UnLock();
      EndIf;
    EndTry;
  Else
    //Проверим, что марка уже сканировалась
    If not IsEmpty(аМарка) Then
      If not IsEmpty(ТабПозиции.ТМарки) Then
        ТМарки:=ТабПозиции.ТМарки;
        If ТМарки.Find(аМарка,,"Марка")>0 Then
          Box("Данная марка уже была отсканирована, будьте внимательны!",Q_STOP);
          Exit;
        EndIf;
      EndIf;
    EndIf;
  
    Фл:=ТабПозиции.IsLocked();
    If not Фл Then
      ТабПозиции.Lock();
    EndIf;
    Try
      //Сдвигаем в конец списка
      If ТабПозиции.CurLine<ТабПозиции.Size() Then
        ТабПозиции.Move(ТабПозиции.CurLine,ТабПозиции.Size()-ТабПозиции.CurLine);
        ТабПозиции.CurLine:=ТабПозиции.Size();
      EndIf;
      ТабПозиции.SelectedLine:=ТабПозиции.Size();
      ФлНеУвеличивать:=0;
      ТабПозиции.флМарки:=Max(ТабПозиции.флМарки,ФлМарочная);
      If not IsEmpty(аМарка) Then
        If _And(IsEmpty(ТабПозиции.ТМарки),ТабПозиции.Количество>0) Then
          ФлНеУвеличивать:=1;
        ElseIf _And(not IsEmpty(ТабПозиции.ТМарки),ТабПозиции.ТМарки.Size()<ТабПозиции.Количество) Then
          ФлНеУвеличивать:=1;
        EndIf;
      EndIf;
      ОбновитьПартииИМарки();
      
      If not ФлНеУвеличивать Then
        аСтрока:=ТабПозиции.CurLine;
        бКоличество:=ТабПозиции.Количество;
        бСуммаБезСкидки:=ТабПозиции.СуммаБезСкидки;
        бСумма:=ТабПозиции.Сумма;
        
        //TODO: текущие скидки
        ТабПозиции.Количество:=ТабПозиции.Количество+аКоличество;
        ФлМРЦ:=0;
        If МаксимальнаяРозничнаяЦена>0 Then
          зЦ:=МаксимальнаяРозничнаяЦена;
          ФлМРЦ:=1;
        ElseIf _And(аНоменклатура.флПодлежитПрослеживаемости,Not IsEmpty(аПартия),аПартия.ЦенаМаксимальнаяПродажная>0) Then
          зЦ:=аПартия.ЦенаМаксимальнаяПродажная;
          ФлМРЦ:=1;
        Else
          зЦ:=ТабПозиции.Цена;
        EndIf;
        Сумма:=ТабПозиции.Сумма+аКоличество*зЦ;
        If ФлМРЦ Then
          ТабПозиции.ФлМРЦ:=1;
        EndIf;
        
        //Округление
        If _And(аНоменклатура.флВесовойТовар,ТекущийМагазин.флПараметрыОкругленияВесовыхПозиций>0) Then
          Чл:=спОкруглениеЦен[ТекущийМагазин.флПараметрыОкругленияВесовыхПозиций];
          Сумма:=((Round(Сумма*100)+(Чл-1)) div Чл)*Чл/100;
        EndIf;
        
        ТабПозиции.Сумма:=Сумма;
        ТабПозиции.СуммаБезСкидки:=ТабПозиции.Цена*ТабПозиции.Количество;
        ТабПозиции.Скидка:=ТабПозиции.СуммаБезСкидки-ТабПозиции.Сумма;
        
        If ПроверитьОперациюПоУсловиямПродаж(2,аСтрока) Then
          Result:=1;
        Else
          //Отменим изменения
          ТабПозиции.Количество:=бКоличество;
          ТабПозиции.СуммаБезСкидки:=бСуммаБезСкидки;
          ТабПозиции.Сумма:=бСумма;
          Exit;
        EndIf;
      EndIf;
      ОбновитьЦветаСтроки();
    Finally
      If not Фл Then
        ТабПозиции.UnLock();
      EndIf;
    EndTry;
  EndIf;
EndFunction


Function ВыбратьМаксимальнуюПродажнуюЦену(Номенклатура)
  //Подготовка
  aTab:=Stor.ОстаткиТМЦ.Gross("Партия","Количество",,0,"Склад,Номенклатура",ТекущийМагазин.Склад,Номенклатура);
  СпПартии:=List.Create();
  aTab.CopyTo(СпПартии,,,"Партия");
  aEl:=Ref.тмцПартииТМЦ;
  aEl.UseOrder("Дата-");
  ДатаНач:=Date()-365;
  aList:=aEl.Load(0,"~(@Status=0)And(@Parent=Номенклатура)And((Дата<ДатаНач)Or(@ELEMENT IN СпПартии))And(ЦенаМаксимальнаяПродажная>0)");
  For i:=1 To aList.Size() Do
    aList[i]:=aList[i].ЦенаМаксимальнаяПродажная;
  EndDo;
  aList.Group();
  aList.RemoveValue(0);
  If aList.Size()=0 Then
    Exit 0;
  EndIf;
  
  aTab.AddColumn("Цена");
  aTab.Select();
  While aTab.Next() Do
    aTab.Цена:=aTab.Партия.ЦенаМаксимальнаяПродажная;
  EndDo;
  aTab.Group("Цена","Количество");
  
  Таб:=Tab.Create("Номенклатура,Остаток,Количество,Элемент,Цена");
  For i:=1 To aList.Size() Do
    Таб.AddLine("Номенклатура,Элемент,Цена,Остаток",Номенклатура,aList[i],aList[i],Number(aTab.FindAndGet("Количество",aList[i],0,"Цена")));
  EndDo;
  aList:=List.Create();
  aList.Add(Таб,"Номенклатура");
  aList.Add(ТекущийМагазин.Склад,"Склад");
  aList.Add(ТекущийМагазин.ТипЦенРеализации,"ТипЦен");
  aList.Add(ТекущийМагазин,"Магазин");
  aList.Add(1,"ФлПартии");
  aList.Add(1,"БезПоиска");
  LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборТовараИзСписка");
  If aList["Ответ"]<>1 Then
    Exit -1;
  EndIf;
  Exit aList["Элемент"];
EndFunction


//Результат: 0 -- код не найден
//           1 -- код найден, результат в переменных
//           2 -- пользователь вызвал диалог "поиск"
//           3 -- пользователь отказался от сканирования (мгновенная отмена)
//           4 -- найден ящик с товаром ЕГАИС, возвращает таблицу в аНоменклатура с столбцами "Номенклатура,Партия,Марка,Количество" 
Function РазобратьТоварныйШтрихкод(СтрКод,ByRef аНоменклатура,ByRef аПартия,ByRef аМарка,ByRef аКоличество,ByRef аМРЦ)

  Function ПроверитьМаску(Стр,СтрМаска,ByRef РезКод,ByRef РезМасса)
    If Length(Стр)<>Length(СтрМаска) Then
      Exit 0;
    EndIf;
    //Стр2:=ReplaceCharacters(СтрМаска,"PKGC","????");
    СтрМаска:=ReplaceCharacters(СтрМаска,"C","P");
    РезКод:="";
    РезМасса:=0;
    РезМассаГраммы:=0;
    РезМассаГраммыД:=1;
    For i:=1 To Length(СтрМаска) Do
      Симв:=СтрМаска[i];
      If Симв="?" Then
        Continue;
      ElseIf Симв="P" Then
        РезКод:=РезКод+Стр[i];
      ElseIf Симв="K" Then
        РезМасса:=РезМасса*10+Number(Стр[i]);
      ElseIf Симв="G" Then
        РезМассаГраммы:=РезМассаГраммы*10+Number(Стр[i]);
        РезМассаГраммыД:=РезМассаГраммыД*10;
      ElseIf Симв<>Стр[i] Then
        Exit 0;
      EndIf;
    EndDo;
    РезМасса:=РезМасса+РезМассаГраммы/РезМассаГраммыД;
  EndFunction
  
  //Пример маски весового товара: 
  //22PPPPPKKGGG? - PPPPP - PLU -- код товара, KK.GGG -- масса товара (в ед. товара), ? -- контрольная цифра
  //Пример маски штучного товара:
  //23CCCCCCCCCC? - CCCCCCCCCC - Код товара (невозможно кодировать товары с кодами больше 9999999999), ? -- контрольная цифра
  аМРЦ:=0;
  СтрМаска:=ТекущийМагазин.МаскаВесовогоТовара;
  СтрМаска2:=ТекущийМагазин.МаскаВесовогоТовара2;
  СтрМаска3:=ТекущийМагазин.МаскаШтучногоТовара;
  Код:=0;
  Масса:=0;
  If _Or(_And(СтрМаска<>"",ПроверитьМаску(СтрКод,СтрМаска,Код,Масса)),_And(СтрМаска2<>"",ПроверитьМаску(СтрКод,СтрМаска2,Код,Масса))) Then
    aPLU:=Number(Код);
    If aPLU>0 Then
      aEl:=Ref.тмцPLUКоды;
      If Not aEl.Find("~(Магазин=ТекущийМагазин)And(PLUКод=aPLU)") Then
        Box("Весовой товар с этим штрихкодом не найден в базе!",Q_STOP);
        Exit 0;
      EndIf;
      аНоменклатура:=aEl.Parent();
      аКоличество:=Масса;
    EndIf;
  ElseIf _And(СтрМаска3<>"",ПроверитьМаску(СтрКод,СтрМаска3,Код,Масса)) Then
    Дл:=Struct.Ref("тмцНоменклатура").Props("Code").DataType;
    TearStr(Дл,"STRING.");
    Код:=Right("000000000000000"+Trim(Код),Number(Дл));
    aEl:=Ref.тмцНоменклатура;
    If aEl.Find("Code",Код) Then
      аНоменклатура:=aEl;
    EndIf;
  EndIf;
  
  //Обычный штрихкод
  If IsEmpty(аПартия)+IsEmpty(аНоменклатура)=2 Then
    аШК:=Ref.тмцШтрихкоды;
    Сп:=аШК.Load(0,"~(@Status=0)And(Name=СтрКод)And((Коэффициент=1)Or(Коэффициент=0))");    
    If Сп.Size()=1 Then
      аШК:=Сп[1];
      аПартия:=?(аШК.Parent().DBName()="тмцПартииТМЦ",аШК.Parent(),0);
      аНоменклатура:=?(аШК.Parent().DBName()="тмцНоменклатура",аШК.Parent(),?(IsEmpty(аПартия),0,аПартия.Parent()));
      If _And(IsEmpty(аПартия),not IsEmpty(аНоменклатура),аНоменклатура.флПодлежитПрослеживаемости,аНоменклатура.ГИСМТТоварнаяГруппа.ВнешнееНаименование="tobacco") Then
        аМРЦ:=ВыбратьМаксимальнуюПродажнуюЦену(аНоменклатура);
        If аМРЦ<0 Then
          Exit 3;
        EndIf;
      EndIf;
    ElseIf Сп.Size()>1 Then
      Сп2:=List.Create();
      For i:=1 To Сп.Size() Do
        aEl:=Сп[i].Parent();
        Сп2.Add(?(aEl.DBName()="тмцПартииТМЦ",aEl.Parent(),aEl));
      EndDo;
      Сп2.Group();
      If Сп2.Size()>1 Then
        аНоменклатура:=0;
        Таб:=Tab.Create("Номенклатура,Количество,Элемент,Цена");
        For i:=1 To Сп2.Size() Do
          зН:=Сп2[i];
          зЦ:=Max(0,глПолучитьРозничнуюЦену(зН,ТекущийМагазин.ТипЦенРеализации,ТекущийМагазин,1));
          If зЦ>0 Then
            Таб.AddLine("Номенклатура,Цена",зН,зЦ);
          EndIf;
        EndDo;
        If Таб.Size()>1 Then
          aList:=List.Create();
          aList.Add(Таб,"Номенклатура");
          aList.Add(ТекущийМагазин.Склад,"Склад");
          aList.Add(ТекущийМагазин.ТипЦенРеализации,"ТипЦен");
          aList.Add(ТекущийМагазин,"Магазин");
          LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборТовараИзСписка");
          If aList["Ответ"]=2 Then
            Exit 2;
          ElseIf aList["Ответ"]<>1 Then
            Exit 3;
          EndIf;
          аНоменклатура:=aList["Номенклатура"];
        ElseIf Таб.Size()=1 Then
          аНоменклатура:=Таб["Номенклатура",1];
        EndIf;
        If _And(not IsEmpty(аНоменклатура),аНоменклатура.флПодлежитПрослеживаемости,аНоменклатура.ГИСМТТоварнаяГруппа.ВнешнееНаименование="tobacco") Then
          аМРЦ:=ВыбратьМаксимальнуюПродажнуюЦену(аНоменклатура);
          If аМРЦ<0 Then
            Exit 3;
          EndIf;
        EndIf;
        If _And(not IsEmpty(аПартия),аПартия.Parent()<>аНоменклатура) Then
          аПартия:=0;
        EndIf;
      Else
        аНоменклатура:=Сп2[1];
        If _And(аНоменклатура.флПодлежитПрослеживаемости,аНоменклатура.ГИСМТТоварнаяГруппа.ВнешнееНаименование="tobacco") Then
          аМРЦ:=ВыбратьМаксимальнуюПродажнуюЦену(аНоменклатура);
          If аМРЦ<0 Then
            Exit 3;
          EndIf;
        EndIf;
      EndIf;
    EndIf;
    
    If _And(not IsEmpty(аНоменклатура),аНоменклатура.флВесовойТовар=1) Then
      aList:=List.Create();
      aList.Add(аНоменклатура,"Номенклатура");
      LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВвестиМассу");  
      If aList["Ответ"]=1 Then
        аКоличество:=Max(0,Number(aList["Количество"]));
      Else
        аНоменклатура:=0;
        аПартия:=0;
        Exit 3;
      Endif;    
    EndIf;
  EndIf;
  
  //Марочный товар
  If IsEmpty(аПартия)+IsEmpty(аНоменклатура)=2 Then
    аКодМарки:=глУдалитьКрипточасть(СтрКод);
    аМар:=Ref.тмцМаркировкаПозиций;
    If аМар.Find("~(@Status=0)And(КодМарки=аКодМарки)And(флСостояние=1)And(@IsFolder=0)") Then
      аПартия:=аМар.Parent();
      аМарка:=СтрКод;
      аНоменклатура:=аПартия.Parent();
      
      //Проверка, не были ли эта марка уже списана
      If аМар.Find("~(@Status=0)And(КодМарки=СтрКод)And(флСостояние=2)And(@IsFolder=0)") Then
        If лкПользователь.общиеАдминистратор Then
          If AskQuestion("Отсканированная марка уже была реализована"+?(not isEmpty(аМар.Документ)," "+аМар.Документ.DocDate+" документом "+аМар.Документ.DocNum)+"! "+
              "Игнорировать (может стать причиной штрафа гос. органов)?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
            аНоменклатура:=0;
            аПартия:=0;
            Exit 3;
          EndIf;
        Else
          Box("Отсканированная марка уже была реализована"+?(not isEmpty(аМар.Документ)," "+аМар.Документ.DocDate+" документом "+аМар.Документ.DocNum)+"!",Q_STOP);
          аНоменклатура:=0;
          аПартия:=0;
          Exit 3;
        EndIf;
      EndIf;
      
    Else
      //Сканирование ящиков: получить последние 26 ящиков с этим кодом, если их 26, вывести сообщение
      аМар.UseOrder("@CODE-");
      aList:=аМар.Load(26,"~(@Status=0)And(КодМарки=аКодМарки)And(флСостояние=0)And(@IsFolder=1)");
      If aList.Size()=26 Then
        Box("Невозможно использовать штрихкод этого ящика, так как в базе данных найдено не менее 25 других ящиков с подобным штрихкодом!",Q_WARNING);
        Exit 3;
      ElseIf aList.Size()>0 Then
        //Из выбранных ящиков оставим только те, марки которых частично или полностью есть в наличии
        аМар:=Ref.тмцМаркировкаПозиций;
        bList:=аМар.Load(0,"~(@Status=0)And(флСостояние=1)And(@IsFolder=0)And(@ELEMENT IN aList)");
        //Сортировка таблицы
        Таб:=Tab.Create("Номенклатура,Партия,Марка,Количество");
        For i:=1 To bList.Size() Do
          aEl:=bList[i];
          bEl:=aEl.Parent();
          Таб.AddLine("Номенклатура,Партия,Марка,Количество",bEl.Parent(),bEl,aEl.КодМарки,1);
        EndDo;
        Таб2:=Таб.Copy();
        Таб2.Group("Номенклатура,Партия","Количество");
        Сп:=List.Create();
        Таб2.Select();
        While Таб2.Next() Do
          If Сп.Find(Таб2.Номенклатура)>0 Then
            Box("Невозможно использовать штрихкод этого ящика, так как в базе данных найдено несколько партий одной позиции с таким кодом (возможна путаница при отпуске товара)!",Q_WARNING);
            Exit 3;
          EndIf;
          Сп.Add(Таб2.Номенклатура);
        EndDo;
        
        If Таб2.Size()=0 Then
          Exit 0;
        EndIf;
        
        If Таб2.Size()>1 Then
          aList:=List.Create();
          aList.Add(Таб2,"Таблица");
          aList.Add(ТекущийМагазин.ТипЦенРеализации,"ТипЦен");
          aList.Add(ТекущийМагазин,"Магазин");
          aList.Add(СтрКод,"Ящик");
          LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборЯщикаИзСписка");
          If aList["Ответ"]<>1 Then
            Exit 3;
          EndIf;
          Партия:=aList["Партия"];
        Else
          Партия:=Таб2["Партия",1];
        EndIf;
        зН:=Партия.Parent();
        аНоменклатура:=Tab.Create("Номенклатура,Партия,Марка,Количество");
        Таб.Select();
        While Таб.Next() Do
          If Таб.Партия=Партия Then
            аНоменклатура.AddLine("Номенклатура,Партия,Марка,Количество",зН,Партия,Таб.Марка,1);
          EndIf;
        EndDo;
        Box("В чек были добавлены "+аНоменклатура.Size()+" марок(и), имеющиеся в остатках позиции "+зН+" для ящика с кодом "+аКодМарки+". Необходимо реализовать клиенту продукцию именно из этого ящика!",Q_WARNING);
        Exit 4;
      EndIf;
    EndIf;
    
    If IsEmpty(аПартия)+IsEmpty(аНоменклатура)=2 Then
      //Длины строк марок: ЕГАИС: 150 (новая), пример: 131400????341710180014DCYW2VRDVFBPQRKDDZW5NLZTUWRUJSA6Y54UFQGXUYS4CDHAR4KNNSBA2QDP23T4SKTKL5JP5ZOKOSUNLHVTFHRCXXKFSDLBJP7O63CGPU2LBKRJW4C7WRML????????
      //                          68 (старая), пример: 22N00000????AVMSNOB0OCJ908220010499919QVAMSX3XMVAQJWMMJU0HG6MZQU????
      //                   ИС МП: 29 (сигареты) без Chr(29), пример: 010460043994001221????????005125000 или 010460043994027221????????005125000
      //                          любой размер (другие группы) с Chr(29)
      If _Or(Length(СтрКод)=150,Length(СтрКод)=68,Length(СтрКод)=29,pos(Chr(29),СтрКод)>0) Then
        Box("Отсканированная марка не найдена на остатках, перед ее сканированием необходимо отсканировать штрихкод товара, чтобы программа знала, к какому товару она относится!",Q_WARNING);
        Exit 3;
      EndIf;
    EndIf;
  EndIf;
  
  Exit IsEmpty(аПартия)+IsEmpty(аНоменклатура)<2;
EndFunction

Function ПринятьРезультатСканирования(СтрКод)
  ВремяПоследнегоНажатия:=0;
  аПартия:=0;
  аНоменклатура:=0;
  аМарка:=0;
  аКоличество:=0;
  аМРЦ:=0;
  Фл:=РазобратьТоварныйШтрихкод(СтрКод,аНоменклатура,аПартия,аМарка,аКоличество,аМРЦ);
  If Фл=2 Then
    //Вызвать диалог Поиск
    Form.кнПоиск.InvokeEventAsync("OnClick");  
    Exit;
  ElseIf Фл=3 Then
    Exit;
  ElseIf Фл=0 Then
    //Скидочная карта или карта регистрации другого продавца
    //TODO: 
    
    //Радиочип RFID
    //TODO: 
    
    //Активные весы
    //TODO: 
  ElseIf Фл=4 Then //Группа товаров в таблице аНоменклатура: "Номенклатура,Партия,Марка,Количество" 
    ФлБылаОтменаТовара:=0;
    аНоменклатура.Select();
    While аНоменклатура.Next() Do
      ДобавитьТоварВТаблицуТоваров(Form.ТабПозиции.Value,0,аНоменклатура.Номенклатура,аНоменклатура.Партия,аНоменклатура.Марка,аНоменклатура.Количество,,,аМРЦ);
    EndDo;
    Exit;
  EndIf;
  
  If IsEmpty(аПартия)+IsEmpty(аНоменклатура)=2 Then
    Box("Объект или товар со штрихкодом """+Left(СтрКод,200)+""" в базе не найден!",Q_STOP);
    глСброситьСостояниеСканеров(НакопленноеСообщение);
    Exit;
  EndIf;
  
  //Добавим строку к товарам, если она не последняя, переместим ее в конец таблицы
  ФлБылаОтменаТовара:=0;
  ДобавитьТоварВТаблицуТоваров(Form.ТабПозиции.Value,0,аНоменклатура,аПартия,аМарка,аКоличество,1,0,аМРЦ);
EndFunction

Function ОчиститьТаблицуТоваров(ФлУдаление=1)
  ТабПозиции:=Form.ТабПозиции.Value;
  If ФлУдаление Then
    ТабПозиции.ClearLines();
    ТабПозиции.Column("Статус").isVisible:=0;
  ElseIf _And(ТабПозиции.Size()>0,ТабПозиции.SelectedLine=0) Then
    ТабПозиции.SelectedLine:=1;
  EndIf;
  СкидочнаяКартаЧека:=0;
  ФлБылаОтменаТовара:=0;
  ВремяПоследнегоНажатия:=0;
  ТекущаяОперация:=0;
  КонтрагентЗакрытияАванса:=0;
  лкПользователь:=глПользователь;
  ОбновитьИнформацию(1);
  ОбновитьИнформациюТекущейСтроки();
EndFunction

Function ЗагрузитьДокументВЧек(зДок,ЦеныНаДату=0)
  //If not лкПользователь.рознУдалениеПозицийПриПродаже Then
  //  Box("Вам запрещено использовать эту функцию, обратитесь к оператору с большими правами!",Q_STOP);
  //  Exit;
  //EndIf;
  ТабПозиции:=Form.ТабПозиции.Value;
  If ТабПозиции.Size()>0 Then
    If AskQuestion("Текущий чек уже содержит позиции, если загрузить выбранный документ, позиции документа будут добавлены к позициям текущего чека. Вы уверены?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
      Exit;
    EndIf;
  EndIf;
  aTab:=зДок.LineParts("Номенклатура");
  If aTab.Size()=0 Then
    Box("Выбранный документ не содержит позиций!",Q_INFORMATION);
    Exit;
  EndIf;

  ТМарки:=глМаркиЗагрузитьДокумент(зДок);
  If _And(not IsEmpty(ТМарки),ТМарки.Size()>0) Then
    Фл:=AskQuestion("Выбранный документ содержит марки! Вы можете загрузить их в текущий чек, если отложенный товар находится перед вами, однако, "+
        "рекомендуется не загружать марки и выполнить их сканирование снова, чтобы избежать возможных ошибок. Загрузить марки все равно?",Q_WARNING+Q_YESNOCANCEL,R_YES);
    If Фл=R_CANCEL Then
      Exit;
    ElseIf Фл=R_NO Then
      ТМарки:=0;
    Else
      ТМарки.AddColumn("Номенклатура");
      ТМарки.Select();
      While ТМарки.Next() Do
        ТМарки.Номенклатура:=ТМарки.Партия.Parent();
      EndDo;
    EndIf;
  EndIf;
  
  Фл:=1;
  ТабПозиции.Lock();
  Try
    aTab.Select();
    While aTab.Next() Do
      While _And(aTab.Количество>0,not IsEmpty(ТМарки),ТМарки.FindAndGoto(aTab.Номенклатура,,"Номенклатура")>0) Do
        aTab.Количество:=aTab.Количество-1;
        ТМарки.Номенклатура:=0;
        If not ДобавитьТоварВТаблицуТоваров(ТабПозиции,0,aTab.Номенклатура,ТМарки.Партия,ТМарки.Марка,1,0,ЦеныНаДату) Then
          Фл:=0;
        EndIf;
      EndDo;
      
      If aTab.Количество>0 Then
        If not ДобавитьТоварВТаблицуТоваров(ТабПозиции,0,aTab.Номенклатура,aTab.Партия,0,aTab.Количество,0,ЦеныНаДату) Then
          Фл:=0;
        EndIf;
      EndIf;
    EndDo;
  Finally
    ТабПозиции.UnLock();
  EndTry;
  ОбновитьИнформацию();
  ОбновитьИнформациюТекущейСтроки();
  
  If not Фл Then
    Box("Не все позиции были добавлены в чек из загружаемого документа!",Q_WARNING);
  Else
    Box("Загрузка информации в чек произведена успешно!",Q_INFORMATION);
  EndIf;
EndFunction

Function ВыполнитьПечатьДокумента(Документ,Элемент)
  спФормы:=List.Create();
  aList:=File.LoadFiles("Modules\FreeForms\ПечатныеФормы\Документ.Реализация\*.ini",0,1);
  aList.SortByNames();
  For i:=1 To aList.Size() Do
    Ини:=Ini.Create();
    Try
      If not Ини.AddFromString(aList[i]) Then
        Continue;
      EndIf;
    Except
      Continue;
    EndTry;
    If _Or(Number(Ини.GetData("FrontOffice","0"))<>1,not Ини.DoesExist("Description"),not Ини.DoesExist("Caption")) Then
      Continue;
    EndIf;
    спФормы.Add(aList.GetName(i),Ини.GetData("Description","?"));
  EndDo;
  If спФормы.Size()=0 Then
    Box("В проекте нет ни одной печатной формы, подходящей для печати розничных чеков!",Q_WARNING);
    Exit;
  EndIf;
  aNum:=спФормы.Select(,Элемент,"Выберите требуемую печатную форму:");
  If aNum=0 Then
    Exit;
  EndIf;
  
  bList:=GetInstalledPrinters();
  If bList.Size()=0 Then
    Box("В системе не установлен ни один принтер!",Q_WARNING);
    Exit;
  EndIf;
  For i:=1 To bList.Size() Do
    bList.SetName(i,"");
  EndDo;
  bNum:=bList.Select(,0,"Выберите принтер для печати:");
  If bNum=0 Then
    Exit;
  EndIf;
  
  Сп:=List.Create();
  Сп.Add(Документ,"Object");
  Сп.Add(1,"ПечататьБезВывода");
  Сп.Add(1,"КоличествоКопий");
  Сп.Add(1,"АвтоматическаяПечать");
  Сп.Add(bList[bNum],"Принтер");
  Путь:=RemoveBackslash(GetPath(спФормы[aNum]));
  LoadModule(10,Путь,Сп,0);
  Box("Операция печати выполнена успешно!",Q_INFORMATION);
EndFunction

Function ОтложитьТекущийЧек(ФлВопрос=0)
  ТабПозиции:=Form.ТабПозиции.Value;
  If ТабПозиции.Size()=0 Then
    Exit;
  EndIf;
  If not лкПользователь.рознУдалениеПозицийПриПродаже Then
    Box("Вам запрещено использовать эту функцию, обратитесь к оператору с большими правами!",Q_STOP);
    Exit;
  EndIf;
  If ФлВопрос Then
    If AskQuestion("Отложить текущий чек, вы уверены? Содержимое чека можно загрузить и продолжить работать с ним из меню ""операции""!",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
      Exit;
    EndIf;
  EndIf;

  BeginTransaction();
  Try
    aDoc:=Doc.Реализация;
    aDoc.New();
    aDoc.DocDate:=Date();
    aDoc.Автор:=лкПользователь;
    aDoc.ЮрЛицо:=ТекущийМагазин.ЮрЛицо;
    aDoc.Магазин:=ТекущийМагазин;
    глУстановитьНовыйНомер(aDoc);
    aDoc.Склад:=ТекущийМагазин.Склад;
    aDoc.КодОперации:=Enum.коРеализация.РеализацияРозничная;
    aDoc.УчитыватьВНалоговомУчете:=1;
    aDoc.УникальныйИдентификатор3:="=";
    aDoc.Контрагент:=ТекущийМагазин.ДоговорРозничногоПокупателя.Parent();
    aDoc.Договор:=ТекущийМагазин.ДоговорРозничногоПокупателя;
    aDoc.ТипЦен:=ТекущийМагазин.ТипЦенРеализации;
    ТМаркиДокумента:=Tab.Create("Партия,Ящик,Марка");
    aTab:=aDoc.LineParts("Номенклатура");
    ТабПозиции.Select();
    While ТабПозиции.Next() Do
      ТПартии:=ТабПозиции.ТПартии;
      Количество:=ТабПозиции.Количество;
      Сумма:=ТабПозиции.Сумма;
      ЦенаБезСкидки:=ТабПозиции.СуммаБезСкидки/Количество;
      Цена:=Round(Сумма/Количество,2);
      If _And(not IsEmpty(ТПартии),ТПартии.Size()>0) Then
        //ТПартии:"Партия,Количество";
        ТПартии.Select();
        While ТПартии.Next() Do
          Кл:=Min(ТПартии.Количество,Количество);
          Количество:=Round(Количество-Кл,6);
          См:=?(Количество=0,Сумма,Round(Кл*Цена,2));
          Сумма:=Сумма-См;
          aTab.AddLine("Номенклатура,Партия,Количество,ЦенаБезСкидки,Цена,Сумма,СтавкаНДС",ТабПозиции.Номенклатура,ТПартии.Партия,Кл,ЦенаБезСкидки,Цена,См,ТабПозиции.Номенклатура.СтавкаНДС);
          глПересчитатьСтроку(aDoc,aTab,"Количество2@СуммаНДС");
          If Количество=0 Then
            Break;
          EndIf;
        EndDo;
      EndIf;
      If Количество>0 Then
        aTab.AddLine("Номенклатура,Количество,ЦенаБезСкидки,Цена,Сумма,СтавкаНДС",ТабПозиции.Номенклатура,Количество,ЦенаБезСкидки,Цена,Сумма,ТабПозиции.Номенклатура.СтавкаНДС);
        глПересчитатьСтроку(aDoc,aTab,"Количество2@СуммаНДС");
      EndIf;
      //Марки
      ТМарки:=ТабПозиции.ТМарки;
      If _And(not IsEmpty(ТМарки),ТМарки.Size()>0) Then
        ТМарки.Select();
        While ТМарки.Next() Do
          ТМаркиДокумента.AddLine("Партия,Ящик,Марка",ТМарки.Партия,"",ТМарки.Марка);
        EndDo;
      EndIf;
    EndDo;
    aDoc.СуммаВзаиморасчетов:=aTab.Sum("Сумма");
    aDoc.Save();
    If ТМаркиДокумента.Size()>0 Then
      If not глМаркиЗарегистрироватьДокумент(aDoc,ТМаркиДокумента,2) Then
        Box("Ошибка сохранения марок документа!",Q_STOP);
        Exit;
      EndIf;
    EndIf;
    
    CommitTransaction();
  Except
    RollbackTransaction();
    Box("Ошибка при создании документа: "+PopError()+"!",Q_STOP);
    Exit;
  EndTry;
  ОчиститьТаблицуТоваров();
  Box("Операция выполнена успешно!",Q_INFORMATION);
EndFunction

Function ПродолжитьЧек()
  aList:=List.Create();
  aList["ТипДокумента"]:="Doc.Реализация";
  aList["КодОперации"]:=Enum.коРеализация.РеализацияРозничная;
  aList["Магазин"]:=ТекущийМагазин;
  aList["Статус"]:=100;
  aList["Заголовок"]:="Выберите документ отложенного чека для продолжения:";
  LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборДокументаИзСписка");
  If aList["Ответ"]<>1 Then
    Exit;
  EndIf;  
  ЗагрузитьДокументВЧек(aList["ВыбранныйДокумент"]);  
EndFunction

Function ПечатьЧекаСВыбором()
  aList:=List.Create();
  aList["ТипДокумента"]:="Doc.Реализация";
  aList["КодОперации"]:=Enum.коРеализация.РеализацияРозничная;
  aList["ТекущийДокумент"]:=ПоследнийЧекДокумент;
  aList["Магазин"]:=ТекущийМагазин;
  aList["Заголовок"]:="Выберите документ для печати чека:";
  LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборДокументаИзСписка");
  If aList["Ответ"]<>1 Then
    Exit;
  EndIf;  
  ВыполнитьПечатьДокумента(aList["ВыбранныйДокумент"],0);  
EndFunction

Function ПревратитьВЧекВозврата()
  If ТекущаяОперация=1 Then
    Box("Текущий чек уже находится в режиме создания возврата!",Q_INFORMATION);
    Exit;
  EndIf;
  //Возврат
  If not лкПользователь.рознСозданиеВозвратов Then
    Box("Вам запрещено использовать эту функцию, обратитесь к оператору с большими правами!",Q_STOP);
    Exit;
  EndIf;
  ТабПозиции:=Form.ТабПозиции.Value;
  If ТабПозиции.Size()>0 Then
    If not лкПользователь.бухГлавныйБухгалтер Then
      Box("Для создания возврата удалите все позиции из чека или отложите его, после чего выберите операцию возврата снова!",Q_STOP);
      Exit;
    EndIf;
    If AskQuestion("Текущий чек со всеми набранными позициями будет превращен в чек возврата! Подобная операция строго не рекомендуется. "+
        "Если вы возвращаете алкогольный товар, который уже был списан в ЕГАИС, это списание нельзя будет отменить, и "+
        "в магазине появится недостача товара по ЕГАИС! Разрешить свободный возврат с текущим товаром?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
      Exit;
    EndIf;
    ТекущаяОперация:=1;
    ОбновитьИнформацию(1);
  Else
    Фл:=AskQuestion("Желаете выбрать реализацию, на основе которой будет создан возврат (да) или подобрать товары в возврат с помощью сканера (нет)?",Q_WARNING+Q_YESNOCANCEL,R_YES);
    If Фл=R_CANCEL Then
      Exit;
    ElseIf Фл=R_YES Then
      aList:=List.Create();
      aList["ТипДокумента"]:="Doc.Реализация";
      aList["КодОперации"]:=Enum.коРеализация.РеализацияРозничная;
      aList["Магазин"]:=ТекущийМагазин;
      aList["Статус"]:=102;
      aList["Заголовок"]:="Выберите документ реализации для заполнения возврата:";
      LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборДокументаИзСписка");
      If aList["Ответ"]<>1 Then
        Exit;
      EndIf;  
      aEl:=aList["ВыбранныйДокумент"];
      ЗагрузитьДокументВЧек(aEl,aEl.DocDate);
    ElseIf not лкПользователь.бухГлавныйБухгалтер Then
      Box("Вам запрещена операция свободного возврата, обратитесь к бухгалтеру!",Q_STOP);
      Exit;
    Else
      If AskQuestion("Операция свободного возврата строго не рекомендуется. Если вы возвращаете алкогольный товар, который уже был списан в ЕГАИС, это списание нельзя будет отменить, и "+
          "в магазине появится недостача товара по ЕГАИС! Разрешить свободный возврат?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
        Exit;
      EndIf;
    EndIf;
    ТекущаяОперация:=1;
    ОбновитьИнформацию(1);
  EndIf;
EndFunction

Function ПревратитьВЧекЗакрытияАванса();
  aList:=List.Create();
  aList["ТипДокумента"]:="Doc.Реализация";
  aList["КодОперации"]:=Enum.коРеализация.РеализацияЗаявка;
  aList["Магазин"]:=ТекущийМагазин;
  aList["Статус"]:=102;
  aList["Заголовок"]:="Выберите документ аванса для продолжения:";
  LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборДокументаИзСписка");
  If aList["Ответ"]<>1 Then
    Exit;
  EndIf;
  aEl:=aList["ВыбранныйДокумент"];
  ЗагрузитьДокументВЧек(aEl);
  КонтрагентЗакрытияАванса:=aEl.Контрагент;
  ОбновитьИнформацию();
EndFunction

Function ПревратитьВЧекГашенияКредита()
  ТабПозиции:=Form.ТабПозиции.Value;
  If ТабПозиции.Size()>0 Then
    Box("Для выполнения операции необходимо, чтобы чек не содержал никаких позиций!",Q_STOP);
    Exit;
  EndIf;
  
  aList:=List.Create();
  aList["ТипДокумента"]:="Doc.Реализация";
  aList["КодОперации"]:=Enum.коРеализация.РеализацияРозничная;
  aList["Магазин"]:=ТекущийМагазин;
  aList["Статус"]:=102;
  aList["Заголовок"]:="Выберите документ, отпущенный в кредит:";
  LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборДокументаИзСписка");
  If aList["Ответ"]<>1 Then
    Exit;
  EndIf;
  aEl:=aList["ВыбранныйДокумент"];
  If aEl.Контрагент=ТекущийМагазин.ДоговорРозничногоПокупателя.Parent() Then
    Box("Документы, выписываемые в кредит, должны иметь заведенного в базе покупателя!",Q_STOP);
    Exit;
  EndIf;
  ЗагрузитьДокументВЧек(aEl);
  
  aList:=List.Create();
  aList.Add(ТабПозиции,"ТабПозиции");
  aList.Add(ТекущийКассир,"ТекущийКассир");
  aList.Add(ТекущийМагазин,"ТекущийМагазин");
  aList.Add(ТекущееРабочееМесто,"ТекущееРабочееМесто");
  aList.Add(спНастройкиККМ,"спНастройкиККМ");
  aList.Add(спПодключенныеДрайверы,"спПодключенныеДрайверы");
  aList.Add(спПлатежныеТерминалы,"спПлатежныеТерминалы");
  aList.Add(спДисплеиПокупателя,"спДисплеиПокупателя");
  aList.Add(спВесы,"спВесы");
  aList.Add(5,"ТекущаяОперация");
  aList.Add(aEl.Контрагент,"КонтрагентЗакрытияАванса");
  aList.Add(aEl,"ДокументЗакрытияКредита");
  aList.Add(лкПользователь,"лкПользователь");
  LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","МенюЗакрытьЧек");
  ВремяПоследнегоНажатия:=0;
  ОчиститьТаблицуТоваров();
  ОбновитьИнформацию(1);
EndFunction

Function ВскрытиеАлкогольнойТары()
  ТабПозиции:=Form.ТабПозиции.Value;
  If ТабПозиции.Size()<>1 Then
    Box("Для вскрытия тары алкогольной продукции, в чек необходимо выбрать единственную позицию!",Q_STOP);
    Exit;
  EndIf;
  ТабПозиции.CurLine:=1;
  If Number(ТабПозиции.флМарки)=1 Then
    If _Or(IsEmpty(ТабПозиции.ТМарки),ТабПозиции.ТМарки.Size()<>ТабПозиции["Количество",1]) Then
      Box("Для вскрытия тары позиций с марочным учетом необходимо также отсканировать все марки позиции!",Q_STOP);
      Exit;
    EndIf;
  EndIf;
  зН:=ТабПозиции.Номенклатура;
  If not зН.флАлкогольнаяПродукция Then
    Box("Обработка может использоваться только для алкогольной продукции!",Q_STOP);
    Exit;
  EndIf;
  зКл0:=ТабПозиции["Количество",1];
  
  //Нахождение способа комплектации
  аКм:=Ref.рознКомплектацияНоменклатуры;
  aList:=аКм.Load(0,"~(@Status<>1)And(ВходящаяНоменклатура.Номенклатура=зН)And(ВходящаяНоменклатура.Количество=1)");
  ТабРезультат:=Tab.Create("Номенклатура,Количество,Элемент,Цена");
  For i:=1 To aList.Size() Do
    aTab:=aList[i].LineParts("ВходящаяНоменклатура");
    bTab:=aList[i].LineParts("ИсходящаяНоменклатура");
    If _Or(aTab.Size()>1,bTab.Size()>1) Then
      Continue;
    EndIf;
    зН2:=aList[i].Parent();
    зКл:=зКл0;
    If bTab.Size()>0 Then
      зН2:=bTab["Номенклатура",1];
      зКл:=bTab["Количество",1]*зКл0;
    EndIf;
    зЦ:=Max(0,глПолучитьРозничнуюЦену(зН2,ТекущийМагазин.ТипЦенРеализации,ТекущийМагазин,1));
    If зЦ=0 Then
      Continue;
    EndIf;
    ТабРезультат.AddLine("Номенклатура,Количество,Элемент,Цена",зН2,зКл,aList[i],зЦ);
  EndDo;
  If ТабРезультат.Size()=0 Then
    Box("Выбранная номенклатура не входит ни в один подходящий способ комплектации или не задана цена результирующей номенклатуры! Создайте способ комплектации, прежде чем пользоваться этой функцией!",Q_STOP);
    Exit;
  EndIf;
  
  aList:=List.Create();
  aList.Add(ТабРезультат,"Номенклатура");
  aList.Add(ТекущийМагазин.Склад,"Склад");
  aList.Add(ТекущийМагазин.ТипЦенРеализации,"ТипЦен");
  aList.Add(ТекущийМагазин,"Магазин");
  aList.Add(1,"БезПоиска");
  aList.Add(зКл0,"Количество");
  aList.Add("Выберите товар после вкрытия тары:","Заголовок");
  LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборТовараИзСписка");
  If aList["Ответ"]<>1 Then
    Exit;
  EndIf;
  Элемент:=aList["Элемент"];
  If Number(ТабПозиции.флМарки)=1 Then
    If AskQuestion("Выполнить запрос в ЕГАИС для списания марочного товара и превратить его в результирующий товар, вы уверены?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
      Exit;
    EndIf;
  Else
    If AskQuestion("Создать документ комплектации товара для дальнейшей выгрузки в ЕГАИС списания с регистра 2, вы уверены?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
      Exit;
    EndIf;
  EndIf;
  //Создание документа
  aDoc:=Doc.КомплектацияТовара;
  aDoc.New();
  aDoc.DocDate:=Date();
  aDoc.Автор:=лкПользователь;
  aDoc.ЮрЛицо:=ТекущийМагазин.ЮрЛицо;
  aDoc.Магазин:=ТекущийМагазин;
  глУстановитьНовыйНомер(aDoc);
  aDoc.Склад:=ТекущийМагазин.Склад;
  aDoc.КодОперации:=Enum.коКомплектацияТовара.КомплектацияТовара;
  aDoc.СпособКомплектации:=Элемент;
  aDoc.ТипЦен:=ТекущийМагазин.ТипЦенРеализации;
  
  ТМаркиДокумента:=Tab.Create("Партия,Ящик,Марка");
  ТабМарки:=Tab.Create("Партия,Марка,Цена");
  aTab:=aDoc.LineParts("ВходящаяНоменклатура");
  ТПартии:=ТабПозиции.ТПартии;
  ТМарки:=ТабПозиции.ТМарки;
  Партия:=0;
  If _And(not IsEmpty(ТМарки),ТМарки.Size()>0) Then
    Партия:=ТПартии["Партия",1];
    ТМарки.Select();
    While ТМарки.Next() Do
      ТМаркиДокумента.AddLine("Партия,Ящик,Марка",ТМарки.Партия,"",ТМарки.Марка);
      ТабМарки.AddLine("Партия,Марка,Цена",ТМарки.Партия,ТМарки.Марка,Round(ТабПозиции.Сумма/ТабПозиции.Количество,2));
    EndDo;
  ElseIf _And(not IsEmpty(ТПартии),ТПартии.Size()>0) Then
    Партия:=ТПартии["Партия",1];
  EndIf;
  Количество:=ТабПозиции.Количество;
  Сумма:=ТабПозиции.Сумма;
  Цена:=Round(Сумма/Количество,2);
  aTab.AddLine("Номенклатура,Партия,Количество,Цена,Сумма,СтавкаНДС",ТабПозиции.Номенклатура,Партия,Количество,Цена,Сумма,ТабПозиции.Номенклатура.СтавкаНДС);
  глПересчитатьСтроку(aDoc,aTab,"Количество2@СуммаНДС");
  
  //Исходящая номенклатура
  bTab:=aDoc.LineParts("ИсходящаяНоменклатура");
  bTab2:=Элемент.LineParts("ИсходящаяНоменклатура");
  зН:=Элемент.Parent();
  зКл:=зКл0;
  If bTab2.Size()>0 Then
    зН:=bTab2["Номенклатура",1];
    зКл:=bTab2["Количество",1]*зКл0;
  EndIf;
  aDoc.КомплектуемыйТовар:=зН;
  зЦ:=Max(0,глПолучитьРозничнуюЦену(зН,ТекущийМагазин.ТипЦенРеализации,ТекущийМагазин,1,Date()));
  bTab.AddLine("Номенклатура,Количество,Цена,Сумма,СтавкаНДС",зН,зКл,зЦ,зЦ*зКл,зН.СтавкаНДС);
  глПересчитатьСтроку(aDoc,bTab,"Количество2@СуммаНДС");
  aDoc.СуммаВзаиморасчетов:=aTab.Sum("Сумма");
  
  ФлОк:=0;
  BeginTransaction();
  Try
    aDoc.Save();
    If ТМаркиДокумента.Size()>0 Then
      If not глМаркиЗарегистрироватьДокумент(aDoc,ТМаркиДокумента,3,,1) Then
        Raise "Невозможно сохранить марки в документе!";
        Exit;
      EndIf;
    EndIf;
    If not глОбработать(aDoc,1) Then
      Raise "Невозможно обработать документ!";
      Exit;
    EndIf;
      
    If ТМаркиДокумента.Size()=0 Then
      If not ТекущийМагазин.флНеСоздаватьСписанияСРегистра2 Then
        If глВыгрузитьДокументПеремещенияВЕГАИС(aDoc.Магазин,aDoc) Then
          If aDoc.Selected()<>1 Then
            aDoc.Save();
          EndIf;
        Else
          Raise "Произошла ошибка при выгрузке в ЕГАИС!";
        EndIf;
      EndIf;
    Else
      //Номер смены, номер ККТ
      НомерККТ:=0;
      НомерСмены:=0;
      ККМНомерДокумента:=0;
      Try
        спНастройкиККМ["ДополнительнаяИнформация"]:=1;
        Стр:=глВыполнитьФункциюДрайвера("ShiftInfo",спНастройкиККМ);
        If not IsEmpty(Стр) Then
          Raise Стр;
        EndIf;
        НомерСмены:=Number(спНастройкиККМ["НомерСмены"]);
        НомерККТ:=спНастройкиККМ["НомерККТ"];
        ККМНомерДокумента:=спНастройкиККМ["НомерДокумента"];
      Except
        Raise "Невозможно получить номер смены ККТ или другую информацию: "+PopError()+"!";
      EndTry;
      If IsEmpty(ККМНомерДокумента) Then
        ККМНомерДокумента:=Number(Mid(aDoc.DocNum,4));
      EndIf;
    
      СтрОтвет:="";
      СпНастройки:=List.Create();
      СпНастройки["ТабМарки"]:=ТабМарки;
      СпНастройки["НомерККТ"]:=НомерККТ;
      СпНастройки["НомерСмены"]:=НомерСмены;
      СпНастройки["НомерДокумента"]:=ККМНомерДокумента;
      СпНастройки["Дата"]:=BegOfDay(Date());
      СпНастройки["НомерВерсии"]:=3;
      If not глВыгрузитьСписаниеМарокВЕГАИС(ТекущийМагазин,СпНастройки,СтрОтвет) Then
        //Очистка текста ошибки
        If pos("<error>",СтрОтвет)>0 Then
          TearStr(СтрОтвет,"<error>");
          СтрОтвет:=TearStr(СтрОтвет,"</error>");
        EndIf;
        Raise "Невозможно фиксировать списание марок в ЕГАИС, ошибка: "+СтрОтвет+"!";
      EndIf;
      Logs.Write("Выполнено списание марок в ЕГАИС",aDoc,"ЕГАИС",0);
      aDoc.УникальныйИдентификатор3:="=";
      aDoc.Save();
    EndIf;
    
    флОк:=1;
  Finally
    If флОк Then
      CommitTransaction();
      ОчиститьТаблицуТоваров();
      Box("Операция вскрытия тары выполнена удачно!",Q_INFORMATION);
    Else
      Стр:=PopError();
      SuppressException();
      RollbackTransaction();
      If not IsEmpty(Стр) Then
        Box(Стр,Q_STOP);
      EndIf;
    EndIf;
  EndTry;
EndFunction

Function ВыполнитьПечатьОтчетаПлатежногоТерминала(спНастройкиККМ,спПлатежныеТерминалы,ТипОтчета,СтрТипОтчета)
  For i:=1 To спПлатежныеТерминалы.Size() Do
    спПлатежныйТерминал:=спПлатежныеТерминалы[i];
    спПлатежныйТерминал["Кассир"]:=ТекущийКассир.Контрагент;
    спПлатежныйТерминал["ДополнительнаяИнформация"]:="";
    спПлатежныйТерминал["ДополнительнаяИнформацияНаЭкран"]:="";
    Стр:=глВыполнитьФункциюДрайвера(ТипОтчета,спПлатежныйТерминал);
    If IsEmpty(Стр) Then
      If Trim(спНастройкиККМ["ДополнительнаяИнформация"])<>"" Then
        спНастройкиККМ["ДополнительнаяИнформация"]:=спПлатежныйТерминал["ДополнительнаяИнформация"];
        глВыполнитьФункциюДрайвера("PrintText",СпНастройкиККМ);
      ElseIf Trim(спПлатежныйТерминал["ДополнительнаяИнформацияНаЭкран"])<>"" Then
        aList:=List.Create();
        aList.Add(СтрТипОтчета+" банковского терминала:","Заголовок");
        aList.Add(спПлатежныйТерминал["ДополнительнаяИнформацияНаЭкран"],"Сообщение");
        LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ТекстовоеСообщение");  
      EndIf;
    Else
      Box("Невозможно выполнить "+СтрТипОтчета+" в терминале: "+спПлатежныйТерминал["Оборудование"]+", ошибка: "+Стр,Q_STOP);          
    EndIf;
  EndDo;
EndFunction



Function ЗакрытьКассовуюСмену(локТекущийМагазин,локСпНастройкиККМ,Кнопка=0)
  Try
    Стр:=?(not локТекущийМагазин.флНеСоздаватьСписанияСРегистра2,"Операция также создаст документ списания в ЕГАИС для всех товаров, проданных за текущую смену, операция может занять некоторое время. ","");
    If AskQuestion("Закрыть кассовую смену для "+локТекущийМагазин+"? "+Стр+"Вы уверены?",Q_QUESTION+Q_YESNO,R_YES)=R_NO Then
      Exit 0;
    EndIf;
    If not локТекущийМагазин.флНеСоздаватьСписанияСРегистра2 Then
      Стр:="";
      If not глСоздатьКонсолидированноеСписаниеСРегистра2ЕГАИС(локТекущийМагазин,Кнопка,Стр) Then
        Box("Ошибка при создании списания ЕГАИС: "+Стр+"!",Q_STOP);
        Exit 0;
      EndIf;
      If Стр<>"" Then
        Box(Стр,Q_WARNING);
      EndIf;
    EndIf;
    If Кнопка<>0 Then
      Кнопка.Caption:="Закрытие...";
    EndIf;
    локСпНастройкиККМ["Кассир"]:=ТекущийКассир.Контрагент;
    Стр:=глВыполнитьФункциюДрайвера("CloseShift",локСпНастройкиККМ);
    If IsEmpty(Стр) Then
      If локТекущийМагазин=ТекущийМагазин Then
        //Закрываем смену в платежных терминалах только, если закрывается смена основной ККМ
        ВыполнитьПечатьОтчетаПлатежногоТерминала(локСпНастройкиККМ,спПлатежныеТерминалы,"CloseShift","закрытие смены");
      EndIf;
      Exit 1;
    EndIf;
  Except
    Стр:=PopError();
  EndTry;
  Box("Не удалось закрыть смену, ошибка: "+Стр+"!",Q_STOP);
  Exit 0;
EndFunction

Function ОткрытьКассовуюСмену(локТекущийМагазин,локСпНастройкиККМ,Кнопка=0)
  Try
    If AskQuestion("Открыть кассовую смену для "+локТекущийМагазин+", вы уверены?",Q_QUESTION+Q_YESNO,R_YES)=R_NO Then
      Exit 0;
    EndIf;
    If Кнопка<>0 Then
      Кнопка.Caption:="Открытие...";
    EndIf;
    локСпНастройкиККМ["Кассир"]:=ТекущийКассир.Контрагент;
    Стр:=глВыполнитьФункциюДрайвера("OpenShift",локСпНастройкиККМ);
    If IsEmpty(Стр) Then
      If локТекущийМагазин=ТекущийМагазин Then
        //Открываем смену в платежных терминалах только, если открывается смена основной ККМ
        ВыполнитьПечатьОтчетаПлатежногоТерминала(локСпНастройкиККМ,спПлатежныеТерминалы,"OpenShift","открытие смены");
      EndIf;
      Exit 1;
    EndIf;
  Except
    Стр:=PopError();
  EndTry;
  Box("Не удалось открыть смену, ошибка: "+Стр+"!",Q_STOP);
  Exit 0;
EndFunction


Function ПодборТоваровДобавитьТовар(Номенклатура)
  Фл:=0;
  аКоличество:=1;
  If _And(not IsEmpty(Номенклатура),Номенклатура.флВесовойТовар=1) Then
    Фл:=1;
    aList:=List.Create();
    aList.Add(Номенклатура,"Номенклатура");
    LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВвестиМассу");  
    If aList["Ответ"]<>1 Then
      Exit;
    Endif;    
    аКоличество:=Max(0,Number(aList["Количество"]));
  EndIf;
  аМРЦ:=0;
  If _And(Номенклатура.флПодлежитПрослеживаемости,Номенклатура.ГИСМТТоварнаяГруппа.ВнешнееНаименование="tobacco") Then
    аМРЦ:=ВыбратьМаксимальнуюПродажнуюЦену(Номенклатура);
    If аМРЦ<0 Then
      Exit;
    EndIf;
  EndIf;
  
  If ДобавитьТоварВТаблицуТоваров(ПоискТабПозиции,1,Номенклатура,0,0,аКоличество,ТекущийМагазин.флНеПроверятьНаличиеМарочногоТовара,,аМРЦ) Then
    If not Фл Then
      Box("Позиция добавлена в реализацию!",Q_INFORMATION);
    EndIf;
  EndIf;
EndFunction

Function ПодборТоваровДобавитьТаблицуТоваров(aTab)
  aNum:=0;
  ПоискТабПозиции.Lock();
  Try
    aNum:=aNum+ДобавитьТоварВТаблицуТоваров(ПоискТабПозиции,1,aTab.Номенклатура,?(IsEmpty(aTab.Партия),0,aTab.Партия),0,aTab.Количество);
  Finally
    ПоискТабПозиции.UnLock();
  EndTry;
  Box("Позиций добавлено в реализацию: "+aNum+"!",Q_INFORMATION);
EndFunction

Function ЗакрытьЧекОбновитьСуммы(ФлПолноеОбновление=0)
  If ФлПолноеОбновление=1 Then
    If ТекущаяОперация=3 Then
      //Кредит, запретить все способы оплаты
      Form.тСуммаНаличные.Value:=0;
      Form.тСуммаНаличные.IsDisabled:=1;
      Form.тСуммаНаличныеТекст.IsDisabled:=1;
      Form.тСуммаНаличныеТекст.Caption:="Сумма наличными:";
      
      Form.тСуммаКарта.Value:=0;
      СкидочнаяКартаЧека:=0;
      Form.тСуммаКарта.IsDisabled:=1;
      Form.тСуммаКартаТекст.IsDisabled:=1;
      
      Form.тСуммаСертификатов.Value:=0;
      ТабСертификатыЧека.ClearLines();
      Form.тСуммаСертификатов.IsDisabled:=1;
      Form.тСуммаСертификатовТекст.IsDisabled:=1;
    ElseIf ТекущаяОперация=2 Then
      //Аванс
      См:=Max(Form.тСуммаЧека.Value-Form.тСуммаСкидочныхКарт.Value-Form.тСуммаСкидок.Value,0);
      Form.тСуммаНаличные.Value:=См;
      Form.тСуммаНаличные.IsDisabled:=0;
      Form.тСуммаНаличныеТекст.IsDisabled:=0;
      Form.тСуммаНаличныеТекст.Caption:="Сумма аванса:";
      
      Form.тСуммаКарта.Value:=0;
      СкидочнаяКартаЧека:=0;
      Form.тСуммаКарта.IsDisabled:=1;
      Form.тСуммаКартаТекст.IsDisabled:=1;
      
      Form.тСуммаСертификатов.Value:=0;
      ТабСертификатыЧека.ClearLines();
      Form.тСуммаСертификатов.IsDisabled:=1;
      Form.тСуммаСертификатовТекст.IsDisabled:=1;
    ElseIf ТекущаяОперация=1 Then
      //Возврат
      Form.тСуммаНаличные.IsDisabled:=0;
      Form.тСуммаНаличныеТекст.IsDisabled:=0;
      Form.тСуммаНаличныеТекст.Caption:="Сумма наличными:";
      
      Form.тСуммаКарта.IsDisabled:=0;
      Form.тСуммаКартаТекст.IsDisabled:=0;
      
      Form.тСуммаСертификатов.Value:=0;
      ТабСертификатыЧека.ClearLines();
      Form.тСуммаСертификатов.IsDisabled:=1;
      Form.тСуммаСертификатовТекст.IsDisabled:=1;
    Else
      Form.тСуммаНаличные.IsDisabled:=0;
      Form.тСуммаНаличныеТекст.IsDisabled:=0;
      Form.тСуммаНаличныеТекст.Caption:="Сумма наличными:";
      
      Form.тСуммаКарта.IsDisabled:=0;
      Form.тСуммаКартаТекст.IsDisabled:=0;
      
      Form.тСуммаСертификатов.IsDisabled:=0;
      Form.тСуммаСертификатовТекст.IsDisabled:=0;
    EndIf;
  EndIf;

  If Form.тСуммаНаличные.Value<0 Then
    Form.тСуммаНаличные.Value:=0;
  EndIf;
  If Form.тСуммаКарта.Value<0 Then
    Form.тСуммаКарта.Value:=0;
  EndIf;
  
  //Нахождение долга покупателя
  If ФлПолноеОбновление Then
    Стр:="Покупатель:";
    ДолгПокупателя:=0;
    If Form.зК.Value.Selected()<>0 Then
      Контрагент:=ТекущийМагазин.ДоговорРозничногоПокупателя.Parent();
      If Form.зК.Value<>Контрагент Then
        ДолгПокупателя:=Storage.Взаиморасчеты.Gross1("Сумма",,0,"~(Договор.@Parent=Form.зК.Value)And(Договор.ЮрЛицо=ТекущийМагазин.ЮрЛицо)");
        If ДолгПокупателя<0 Then
          If ТекущаяОперация=0 Then
            ТекущаяОперация:=4;
          EndIf;
          Стр:="Покупатель (аванс "+глФРМ(-ДолгПокупателя)+"):";
        ElseIf ДолгПокупателя>0 Then
          Стр:="Покупатель (кредит "+глФРМ(ДолгПокупателя)+"):";
        ElseIf ТекущаяОперация=4 Then
          ТекущаяОперация:=0;
        EndIf;
      EndIf;
    EndIf;
    If Form.тПокупательТекст.Caption<>Стр Then
      Form.тПокупательТекст.Caption:=Стр;
    EndIf;
  EndIf;
    
  //См:=Form.тСуммаСкидочныхКарт.Value+Form.тСуммаСкидок.Value;
  См2:=Form.тСуммаНаличные.Value+Form.тСуммаКарта.Value+Form.тСуммаСертификатов.Value;
  Form.тИтогоСдача.Value:=Abs(См2-Form.тСуммаЧека.Value);
  Form.тИтого.Value:=См2;
  
  См:=Sign(См2-Form.тСуммаЧека.Value);
  If ТекущаяОперация=3 Then
    //Кредит
    If Form.тИтогоСдачаТекст.Caption<>"Сумма документа:" Then
      Form.тИтогоСдачаТекст.FontColor:=_CLR_GREEN;
      Form.тИтогоСдачаТекст.Caption:="Сумма документа:";
      Form.тИтогоСдача.Color:=_CLR_BTNFACE;
    EndIf;
  ElseIf (ТекущаяОперация=4)And(См<0) Then
    If Form.тИтогоСдачаТекст.Caption<>"Сумма закрытия аванса:" Then
      Form.тИтогоСдачаТекст.FontColor:=_CLR_GREEN;
      Form.тИтогоСдачаТекст.Caption:="Сумма закрытия аванса:";
      Form.тИтогоСдача.Color:=_CLR_BTNFACE;
    EndIf;   
  ElseIf См<0 Then
    If Form.тИтогоСдачаТекст.FontColor<>_CLR_RED Then
      Form.тИтогоСдачаТекст.FontColor:=_CLR_RED;
      Form.тИтогоСдачаТекст.Caption:="Итого осталось оплатить:";
      Form.тИтогоСдача.Color:=MixColors(_CLR_BTNFACE,_CLR_RED,10);
    EndIf;   
  Else
    If Form.тИтогоСдачаТекст.FontColor<>_CLR_WINDOWTEXT Then
      Form.тИтогоСдачаТекст.FontColor:=_CLR_WINDOWTEXT;
      Form.тИтогоСдачаТекст.Caption:="Итого сдача:";
      Form.тИтогоСдача.Color:=_CLR_BTNFACE;
    EndIf;   
  EndIf;
  
  If ТекущаяОперация=0 Then
    Стр:="Продажа";
    Цвет:=_CLR_WINDOWTEXT;
    ЦветФона:=_CLR_BTNFACE;
  ElseIf ТекущаяОперация=1 Then
    Стр:="Возврат";
    Цвет:=_CLR_WHITE;
    ЦветФона:=_CLR_RED;
  ElseIf ТекущаяОперация=2 Then
    Стр:="Аванс (товар не выдается!)";
    Цвет:=_CLR_WHITE;
    ЦветФона:=_CLR_RED;
  ElseIf ТекущаяОперация=3 Then
    Стр:="Кредит (без получения денег)";
    Цвет:=_CLR_BLUE;
    ЦветФона:=_CLR_BTNFACE;
  ElseIf ТекущаяОперация=4 Then
    Стр:="Закрытие аванса"+?(ДолгПокупателя<0," в "+глФРМ(-ДолгПокупателя));
    Цвет:=_CLR_BLUE;
    ЦветФона:=_CLR_BTNFACE;
  ElseIf ТекущаяОперация=5 Then
    Стр:="Закрытие кредита"+?(ДолгПокупателя>0," в "+глФРМ(ДолгПокупателя));
    Цвет:=_CLR_BLUE;
    ЦветФона:=_CLR_BTNFACE;
  EndIf;  
  If Form.тОперация.Caption<>Стр Then
    Form.тОперация.FontColor:=Цвет;
    Form.тОперация.Color:=ЦветФона;
    Form.тОперация.Caption:=Стр;
  EndIf;
  If КорректировочныеСвойстваЧека<>0 Then
    If Form.тОперацияТекст.Caption<>"Операция (КОРРЕКТИРОВКА):" Then
      Form.тОперацияТекст.Caption:="Операция (КОРРЕКТИРОВКА):";
      Form.тОперацияТекст.Color:=_CLR_RED;
      Form.тОперацияТекст.FontColor:=_CLR_WHITE;
    EndIf;
  ElseIf Form.тОперацияТекст.Caption<>"Операция:" Then
    Form.тОперацияТекст.Caption:="Операция:";
    Form.тОперацияТекст.Color:=_CLR_WINDOWTEXT;
    Form.тОперацияТекст.FontColor:=_CLR_BTNFACE;
  EndIf;
  
  If _And(ФлПолноеОбновление,спДисплеиПокупателя.Size()>0) Then
    //Вызвать обновление информации на дисплее покупателя
    For i:=1 To спДисплеиПокупателя.Size() Do
      спНастройки:=спДисплеиПокупателя[i];
      спНастройки["ТабПозиции"]:=ПоискТабПозиции;
      спНастройки["СуммаЧека"]:=Form.тСуммаЧека.Value;
      спНастройки["СуммаНаличные"]:=Form.тСуммаНаличные.Value;
      спНастройки["СуммаКарта"]:=Form.тСуммаКарта.Value;
      спНастройки["СуммаСертификатов"]:=Form.тСуммаСертификатов.Value;
      спНастройки["СуммаСкидок"]:=Form.тСуммаСкидок.Value;
      спНастройки["СуммаСкидочныхКарт"]:=Form.тСуммаСкидочныхКарт.Value;
      спНастройки["Итого"]:=Form.тИтого.Value;
      См:=Form.тСуммаСкидочныхКарт.Value+Form.тСуммаСкидок.Value;
      См2:=Form.тСуммаНаличные.Value+Form.тСуммаКарта.Value+Form.тСуммаСертификатов.Value;
      спНастройки["ИтогоСкидки"]:=См;
      спНастройки["ИтогоОплата"]:=См2;
      спНастройки["ИтогоСдача"]:=См2-Form.тСуммаЧека.Value;
      спНастройки["Магазин"]:=ТекущийМагазин;
      спНастройки["ОперацияОплаты"]:=ТекущаяОперация;
      спНастройки["Покупатель"]:=Form.зК.Value;
      спНастройки["ЭтапОперации"]:=-1;//Ожидание оплаты
      Try
        глВыполнитьФункциюДрайвера("UpdateDisplayInfoPayment",спНастройки);
      Except
      EndTry;
      спНастройки["ТабПозиции"]:=0;
      спНастройки["Магазин"]:=0;
    EndDo;
  EndIf;  
EndFunction

Function ЗакрытьЧекОбновитьАкции()
  ТабПозиции:=ПоискТабПозиции;
  Form.тСуммаЧека.Value:=ТабПозиции.Sum("Сумма");
  СмАкции:=0;
  СмКарта:=0;
  ТабАкцииЧека:=Tab.Create("Акция,Сумма");
  ТабСертификатыЧека:=Tab.Create("Сертификат,Сумма");
  ТабПозиции.Select();
  While ТабПозиции.Next() Do
    If ТабПозиции.Сумма<ТабПозиции.СуммаБезСкидки Then
      ТАкции:=ТабПозиции.ТАкции;
      СмСкидка:=Round(ТабПозиции.СуммаБезСкидки-ТабПозиции.Сумма,2);
      СмАкции:=СмАкции+СмСкидка;
      If not IsEmpty(ТАкции) Then
        ТАкции.Select();
        While _And(СмСкидка>0,ТАкции.Next()) Do
          См:=Min(ТАкции.Сумма,СмСкидка);
          If См>0 Then
            If _And(not IsEmpty(СкидочнаяКартаЧека),ТАкции.Акция=СкидочнаяКартаЧека) Then
              СмКарта:=Round(СмКарта+См,2);
              СмАкции:=Round(СмАкции-См,2);
            Else
              If ТабАкцииЧека.FindAndGoto(ТАкции.Акция,,"Акция")=0 Then
                ТабАкцииЧека.AddLine("Акция,Сумма",ТАкции.Акция,0);
              EndIf;
              ТабАкцииЧека.Сумма:=Round(ТабАкцииЧека.Сумма+См,2);
            EndIf;
            СмСкидка:=Round(СмСкидка-См,2);
          EndIf;
        EndDo;
        If СмСкидка>0 Then
          If ТабАкцииЧека.FindAndGoto("Ручная скидка",,"Акция")=0 Then
            ТабАкцииЧека.AddLine("Акция,Сумма","Ручная скидка",0);
          EndIf;
          ТабАкцииЧека.Сумма:=ТабАкцииЧека.Сумма+СмСкидка;
        EndIf;
      EndIf;
    EndIf;
  EndDo;
  Form.тСуммаСкидок.Value:=СмАкции;
  Form.тСуммаСкидочныхКарт.Value:=СмКарта;
EndFunction

Function ЗакрытьЧекОбновитьПочту(ИзменилсяКонтрагент=0)
  If ИзменилсяКонтрагент Then
    If ПочтаИлиТелефон="" Then
      ВремКонтрагент:=?(Form.зК.Value.Selected()=0,ТекущийМагазин.ДоговорРозничногоПокупателя.Parent(),Form.зК.Value);
      If ВремКонтрагент.Телефоны<>"" Then
        ПочтаИлиТелефон:=Trim(Replace(ВремКонтрагент.Телефоны,",",_NEWLINE));
        While Pos(_NEWLINE,ПочтаИлиТелефон)>0 Do
          TearStr(ПочтаИлиТелефон,_NEWLINE);
        EndDo;
        ПочтаИлиТелефон:=Trim(ПочтаИлиТелефон);
      EndIf;
    EndIf;
  EndIf;
  //Исправление параметра
  If ПочтаИлиТелефон<>"" Then
    If (ПочтаИлиТелефон[1]="+")And(Length(ПочтаИлиТелефон)=12)And(ContainsOnlyCharacters(ПочтаИлиТелефон,"+0123456789")) Then
      //Телефон
    ElseIf (ПочтаИлиТелефон[1]="8")And(Length(ПочтаИлиТелефон)=11)And(ContainsOnlyCharacters(ПочтаИлиТелефон,"0123456789")) Then
      ПочтаИлиТелефон:="+7"+Mid(ПочтаИлиТелефон,2);
    ElseIf _And(Pos("@",ПочтаИлиТелефон)>0,Pos(".",ПочтаИлиТелефон)>0,ContainsOnlyCharacters(ПочтаИлиТелефон,"@.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&'*+-/=?^_`{|}~")) Then
      //Почта
    Else
      ПочтаИлиТелефон:="";
    EndIf;
  EndIf;
  
  If ПочтаИлиТелефон<>"" Then
    Form.кнПочта.Color:=MixColors(_CLR_BTNFACE,_CLR_BLUE,10);
  Else
    Form.кнПочта.Color:=MixColors(_CLR_BTNFACE,_CLR_BTNHIGHLIGHT,10);
  EndIf;
EndFunction


Function ЗакрытьЧекПринятиеЧека()
  //ТекущаяОперация: 0 -- продажа, 1 -- возврат, 2 -- аванс (только в диалоге оплаты), 3 -- кредит (только в диалоге оплаты), 4 -- закрытие аванса (только в диалоге оплаты), 5 -- закрытие кредита (только в диалоге оплаты)
  //КорректировочныеСвойстваЧека (биты): 0 -- без выгрузки в ЕГАИС, 1 -- без банк. терминала, 2 -- без выгрузки в ККМ, 3 -- без создания лок. документов
  Form.тСтатусОбмена.Caption:="Подготовка оборудования...";
  Form.кнПринять.IsDisabled:=1;
  
  If not ПроверитьОперациюПоУсловиямПродаж(4,0) Then
    Exit 0;
  EndIf;
  
  ТабПозиции:=ПоискТабПозиции;
  спПлатежныйТерминал:=0;
  If (Form.тСуммаКарта.Value>0)And(КорректировочныеСвойстваЧека and 2=0) Then
    If спПлатежныеТерминалы.Size()>1 Then
      aList:=List.Create();
      aList.Add(спПлатежныеТерминалы,"спПлатежныеТерминалы");
      LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВыборПлатежногоТерминала");
      If aList["Ответ"]<>1 Then
        Exit 0;
      EndIf;
      спПлатежныйТерминал:=aList["ОтветТерминал"];
    ElseIf спПлатежныеТерминалы.Size()=1 Then
      спПлатежныйТерминал:=спПлатежныеТерминалы[1];
    EndIf;
  EndIf;
  
  If спДисплеиПокупателя.Size()>0 Then
    //Вызвать обновление информации на дисплее покупателя
    For i:=1 To спДисплеиПокупателя.Size() Do
      спНастройки:=спДисплеиПокупателя[i];
      спНастройки["ТабПозиции"]:=ТабПозиции;
      спНастройки["СуммаЧека"]:=Form.тСуммаЧека.Value;
      спНастройки["СуммаНаличные"]:=Form.тСуммаНаличные.Value;
      спНастройки["СуммаКарта"]:=Form.тСуммаКарта.Value;
      спНастройки["СуммаСертификатов"]:=Form.тСуммаСертификатов.Value;
      спНастройки["СуммаСкидок"]:=Form.тСуммаСкидок.Value;
      спНастройки["СуммаСкидочныхКарт"]:=Form.тСуммаСкидочныхКарт.Value;
      спНастройки["Итого"]:=Form.тИтого.Value;
      См:=Form.тСуммаСкидочныхКарт.Value+Form.тСуммаСкидок.Value;
      См2:=Form.тСуммаНаличные.Value+Form.тСуммаКарта.Value+Form.тСуммаСертификатов.Value;
      спНастройки["ИтогоСкидки"]:=См;
      спНастройки["ИтогоОплата"]:=См2;
      спНастройки["ИтогоСдача"]:=Form.тИтогоСдача.Value;
      спНастройки["Магазин"]:=ТекущийМагазин;
      спНастройки["ОперацияОплаты"]:=ТекущаяОперация;
      спНастройки["Покупатель"]:=Form.зК.Value;
      спНастройки["ЭтапОперации"]:=0;//Попытка оплаты
      Try
        глВыполнитьФункциюДрайвера("UpdateDisplayInfoPayment",спНастройки);
      Except
      EndTry;
      спНастройки["ТабПозиции"]:=0;
      спНастройки["Магазин"]:=0;
    EndDo;
  EndIf;
  
  Form.тСтатусОбмена.Caption:="Проверка продукции чека...";
  ФлРегистр2:=0;
  ТабМарки:=Tab.Create("Партия,Марка,Цена");
  ТабИСМП:=Tab.Create("Номенклатура,Партия,Марка,ФлНеПрошлаПроверку,Причина,Поле1,Поле2");
  ТабПозиции.Select();
  While ТабПозиции.Next() Do
    If ТабПозиции.флМарки=1 Then
      ТМарки:=ТабПозиции.ТМарки;
      If _Or(IsEmpty(ТМарки),ТМарки.Size()<ТабПозиции.Количество) Then
        Box("Неверное количество марок или марки не заданы для позиции "+ТабПозиции.Номенклатура+"!",Q_STOP);
        Exit 0;
      EndIf;
      If ТабПозиции.Номенклатура.флПодлежитПрослеживаемости Then
        If ТабПозиции.Номенклатура.флАлкогольнаяПродукция Then
          Box("Для позиции "+ТабПозиции.Номенклатура+" установлены признаки алкогольной продукции и прослеживаемости, такая установка некорректна! Исправьте положение, прежде чем реализовывать этот товар!",Q_STOP);
          Exit 0;
        EndIf;
        ТМарки.CopyTo(ТабИСМП,,,"Партия,Марка");
      Else
        If not ТабПозиции.Номенклатура.флАлкогольнаяПродукция Then
          Box("Для позиции с марочным учетом "+ТабПозиции.Номенклатура+" не установлены признаки алкогольной продукции или прослеживаемости, такая установка некорректна! Исправьте положение, прежде чем реализовывать этот товар!",Q_STOP);
          Exit 0;
        EndIf;
        aNum:=ТабМарки.Size()+1;
        ТМарки.CopyTo(ТабМарки,,,"Партия,Марка");
        Цена:=Round(ТабПозиции.Сумма/ТабПозиции.Количество,2);
        For i:=aNum To ТабМарки.Size() Do
          ТабМарки["Цена",i]:=Цена;
        EndDo;
      EndIf;
    ElseIf ТабПозиции.Номенклатура.флАлкогольнаяПродукция Then
      ФлРегистр2:=1;
    EndIf;
  EndDo;
  
  ФлБанковскийТерминал:=0;
  ФлЕГАИСМарки:=0;
  ФлОперацияОтказ:=-1;
  
  Контрагент:=ТекущийМагазин.ДоговорРозничногоПокупателя.Parent();
  Договор:=ТекущийМагазин.ДоговорРозничногоПокупателя;
  
  
  If ТекущаяОперация>1 Then
    If Form.зК.Value.Selected()<>0 Then
      Контрагент:=Form.зК.Value;
      Договор:=ref.кнтДоговоры;
      If not Договор.FindEx(3,,"~(@Parent=Контрагент)And(ЮрЛицо=ТекущийМагазин.ЮрЛицо)And(@Status<>1)") Then
        If not Договор.FindEx(3,,"~(@Parent=Контрагент)And(ЮрЛицо=ТекущийМагазин.ЮрЛицо)") Then
          Договор.New();
          Договор.Name:=Trim(ТекущийМагазин.ЮрЛицо);
          Договор.Parent(Контрагент);
          Договор.ЮрЛицо:=ТекущийМагазин.ЮрЛицо;
          Try
            Договор.Save();
          Except
            Box("Невозможно создать договор выбранного покупателя: "+PopError()+"!",Q_STOP);
            Exit 0;
          EndTry;
        EndIf;
      EndIf;
    Else
      Box("Для выполнение этой операции необходимо выбрать покупателя!",Q_STOP);
      Exit 0;
    EndIf;
  EndIf;
  
  //Номер смены, номер ККТ
  Form.тСтатусОбмена.Caption:="Получение статуса ККМ...";
  НомерККТ:=0;
  НомерСмены:=0;
  ККМНомерДокумента:=0;
  ФлБумагаЗаканчивается:=0;
  ФлОбщаяПроблемаККМ:=0;
  Try
    спНастройкиККМ["ДополнительнаяИнформация"]:=1;
    Стр:=глВыполнитьФункциюДрайвера("ShiftInfo",спНастройкиККМ);
    If not IsEmpty(Стр) Then
      Raise Стр;
    EndIf;
    aNum:=Number(спНастройкиККМ["СменаСостояние"]);
    If aNum<>1 Then
      Raise "Смена не открыта или ошибочное состояние смены!";
    EndIf;
    НомерСмены:=Number(спНастройкиККМ["НомерСмены"]);
    НомерККТ:=спНастройкиККМ["НомерККТ"];
    ККМНомерДокумента:=спНастройкиККМ["НомерДокумента"];
    ФлБумагаЗаканчивается:=Number(спНастройкиККМ["БумагаЗаканчивается"]);
    ФлОбщаяПроблемаККМ:=Number(спНастройкиККМ["ОбщаяПроблемаККМ"]);
  Except
    Box("Невозможно получить номер смены ККТ или другую информацию: "+PopError()+"!",Q_STOP);
    Exit 0;
  EndTry;
  If ФлБумагаЗаканчивается Then
    If AskQuestion("Чековая лента кассовой машины закончилась или заканчивается. Рекомендуется сменить чековую ленту сейчас, после чего выполнить оплату. "+
        "Остановить оплату документа сейчас для замены чековой ленты?",Q_WARNING+Q_YESNO,R_YES)=R_YES Then
      Exit 0;
    EndIf;
  EndIf;
  If ФлОбщаяПроблемаККМ Then
    If AskQuestion("ККМ возвратила статус общей ошибки. Это могут быть проблемы с принтером, блокировка ККМ, или другая аппаратная ошибка. Рекомендуется "+
        "исправить ошибку, прежде чем производить печать. Остановить оплату документа сейчас для исправления проблем с ККМ?",Q_WARNING+Q_YESNO,R_YES)=R_YES Then
      Exit 0;
    EndIf;
  EndIf;
  

  //Начало конструкции отправки данных в разные источники и позже транзации создания локальных документов 
  СтрПоказатьОшибку:="";//Не выводим диалог внутри транзакции, чтобы не мешать другим кассам магазина
  Таблица:=0;
  флОк:=0;  
  Try
  
    //Отправка марок в ЕГАИС
    ЕГАИСсылка:="";
    ЕГАИСПодпись:="";
    ФлЕГАИСМарки:=0;
    If (ТабМарки.Size()>0)And(ТекущаяОперация<>5)And(ТекущаяОперация<>2)And(КорректировочныеСвойстваЧека and 1=0) Then
      Form.тСтатусОбмена.Caption:="Отправка информации в ЕГАИС...";
      ЕГАИСДатаДокумента:=Date();
      //Номер "следующего документа"
      ККМНомерДокумента:=Number(ККМНомерДокумента);
      If IsEmpty(ККМНомерДокумента) Then
        aDoc:=?(ТекущаяОперация<>1,Doc.Реализация,Doc.ВозвратОтПокупателя);
        aDoc.UseOrder("DocDate-");
        If aDoc.Find("Магазин",ТекущийМагазин) Then
          ККМНомерДокумента:=Number(Mid(aDoc.DocNum,4))+1;
        EndIf;
      EndIf;
      ККМНомерДокумента:=ККМНомерДокумента+1;
      
      //ФлПопытка:=1;
      While 1 Do
        СтрОтвет:="";
        СпНастройки:=List.Create();
        СпНастройки["ТабМарки"]:=ТабМарки;
        СпНастройки["НомерККТ"]:=НомерККТ;
        СпНастройки["НомерСмены"]:=НомерСмены;
        СпНастройки["НомерДокумента"]:=ККМНомерДокумента;
        СпНастройки["Дата"]:=ЕГАИСДатаДокумента;
        СпНастройки["НомерВерсии"]:=3;//?(Form.тСуммаНаличные.Value=0,3,1);
        
        //СтрОтвет:="<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?><A><url>https://146.120.90.148:1444?id=ab43d5e0-855c-4b54-b1d8-ddeb34d1d110&amp;dt=1503271510&amp;cn=00040218</url>"+
        //  "<sign>32B7136A7BCEAFEBE4DA92D9510C196CC42DC56260E1E2802B8C24A8C3EA75F3978EA6963F370F3165B89DBF98FD94F2F0C7F4803965B62A6616A12D8159A5D3</sign><ver>2</ver></A>";
        If not глВыгрузитьСписаниеМарокВЕГАИС(ТекущийМагазин,СпНастройки,СтрОтвет,ТекущаяОперация=1) Then
          //<A><error>1: Проверка не пройдена: продукция не внесена в поштучный учет (197300668497251120001J7QWREV6ABDMVUBCTXH4DI26EQI3SBLUKF57E6RMMUI7CKFR3O7WGHSQVJDJBMUVMJ4QALJEKJPSHT7P345UQXEJHRGPYH4Y22AJNT2NXG2JTO5MVZVSZWDP4557YA6RI), ...</error><ver>2</ver></A>
          //Очистка текста ошибки
          If pos("<error>",СтрОтвет)>0 Then
            TearStr(СтрОтвет,"<error>");
            СтрОтвет:=TearStr(СтрОтвет,"</error>");
            If (Pos("(",СтрОтвет)>0)or(Pos("[",СтрОтвет)>0) Then
              //Если в ответе указаны отдельные марки, выведем их в специальный диалог для удобства: ... (...), ... (...), ... [...,...,...]
              ТабМаркиСОшибками:=Tab.Create("Марка,Ошибка");
              Стр:=СтрОтвет;
              While Стр<>"" Do
                Символ:=Pos("(",СтрОтвет);
                Символ2:=Pos("[",СтрОтвет);
                If (Символ2=0)Or((Символ<Символ2)And(Символ>0)) Then
                  Символ:="(";
                  Символ2:=")";
                Else
                  Символ:="[";
                  Символ2:="]";
                EndIf;
                Стр3:=Trim(TearStr(Стр,Символ));
                Стр2:=Trim(TearStr(Стр,Символ2));
                While Стр2<>"" Do
                  Стр4:=Trim(TearStr(Стр2,","));
                  If Length(Стр4)=150 Then
                    ТабМаркиСОшибками.AddLine("Марка,Ошибка",Стр4,Стр3);
                  EndIf;
                EndDo;
              EndDo;
              If ТабМаркиСОшибками.Size()>0 Then
                aList:=List.Create();
                aList["ТабПозиции"]:=ТабПозиции;
                aList["ТабМаркиСОшибками"]:=ТабМаркиСОшибками;
                //"РазрешитьПопытку" исходила из предпосылки, что ЕГАИС отдает всю информацию по маркам в первом запросе, оказывается, это не так.
                //ЕГАИС останавливается не первой найденной неверной марке. Для запроса с несколькими неверными марками, вопрос придется повторять несколько раз.
                //aList["РазрешитьПопытку"]:=ФлПопытка;
                LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","СписокНеверныхМарок");
                If aList["Ответ"]=1 Then
                  СпУдаленные:=aList["СпУдаленные"];
                  For i:=1 To СпУдаленные.Size() Do
                    While ТабПозиции.FindAndGoto(СпУдаленные[i],,"Номенклатура")>0 Do
                      ТабПозиции.Remove(ТабПозиции.CurLine);
                    EndDo;
                  EndDo;
                  Form.тСуммаНаличные.Value:=0;
                  Form.тСуммаКарта.Value:=0;
                  ЗакрытьЧекОбновитьАкции();
                  ЗакрытьЧекОбновитьСуммы(1);
                  If ТабПозиции.Size()>0 Then
                    СтрПоказатьОшибку:="Некоторые позиции были удалены из чека, проверьте корректность общей суммы!";
                  EndIf;
                  Exit 0;
                ElseIf aList["Ответ"]=2 Then
                  //Удалим из списания ЕГАИС указанные здесь марки
                  //ФлПопытка:=0;
                  Фл:=0;
                  ТабМаркиСОшибками.Select();
                  While ТабМаркиСОшибками.Next() Do
                    СтрМарка:=ТабМаркиСОшибками.Марка;
                    If ТабМарки.FindAndGoto(СтрМарка,,"Марка")>0 Then
                      ТабМарки.Remove(ТабМарки.CurLine);
                      Фл:=1;
                    EndIf;
                  EndDo;
                  If ТабМарки.Size()=0 Then
                    Break;//Нечего оправлять
                  EndIf;
                  If Фл Then
                    Continue;//Новая попытка
                  EndIf;
                EndIf;
              EndIf;
            EndIf;//Указание на марки в ответе
          EndIf;
          СтрПоказатьОшибку:="Невозможно фиксировать списание марок в ЕГАИС, ошибка: "+СтрОтвет+"!";
          Exit 0;
        EndIf;
        
        //СтрОтвет:
        //<?xml version="1.0" encoding="UTF-8" standalone="no"?>
        //<A>
        //<url>https://146.120.90.148:1444?id=ab43d5e0-855c-4b54-b1d8-ddeb34d1d110&amp;dt=1503271510&amp;cn=00040218</url>
        //<sign>32B7136A7BCEAFEBE4DA92D9510C196CC42DC56260E1E2802B8C24A8C3EA75F3978EA6963F370F3165B89DBF98FD94F2F0C7F4803965B62A6616A12D8159A5D3</sign>
        //<ver>2</ver>
        //</A>
        If _Or(Pos("<url>",СтрОтвет)=0,Pos("<sign>",СтрОтвет)=0) Then
          СтрПоказатьОшибку:="Ошибка фиксации списания марок в ЕГАИС, неизвестный ответ ЕГАИС!";
          Exit 0;
        EndIf;
        ФлЕГАИСМарки:=1;
        Стр0:=СтрОтвет;
        TearStr(Стр0,"<url>");
        ЕГАИСсылка:=DecodeHTMLString(TearStr(Стр0,"</url>"));
        TearStr(СтрОтвет,"<sign>");
        ЕГАИСПодпись:=DecodeHTMLString(TearStr(СтрОтвет,"</sign>"));
        Break;
      EndDo;
    EndIf;
    
    
    //Отправка в платежный терминал
    спНастройкиККМ["ДополнительнаяИнформация"]:="";
    If (спПлатежныйТерминал<>0)And(Form.тСуммаКарта.Value>0)And(ТекущаяОперация<>3)And(КорректировочныеСвойстваЧека and 2=0) Then
      Form.тСтатусОбмена.Caption:="Отправка информации в банковский терминал...";
      спПлатежныйТерминал["Сумма"]:=Form.тСуммаКарта.Value;
      спПлатежныйТерминал["Магазин"]:=ТекущийМагазин;
      спПлатежныйТерминал["ТабПозиции"]:=ТабПозиции;
      спПлатежныйТерминал["Покупатель"]:=Form.зК.Value;
      спПлатежныйТерминал["Кассир"]:=ТекущийКассир.Контрагент;
      //ТипОперации: приход для 0, 2, 4 (частично), 5
      //             возврат для 1
      спПлатежныйТерминал["ТипОперации"]:=?(ТекущаяОперация=1,1,0);
      спПлатежныйТерминал["ИнформацияПоТранзакции"]:=0;      
      спПлатежныйТерминал["ДополнительнаяИнформация"]:="";
      СтрОшибка:="";
      Try
        СтрОшибка:=глВыполнитьФункциюДрайвера("RegisterTransaction",спПлатежныйТерминал);
      Except
        СтрОшибка:=PopError();
      EndTry;
      If СтрОшибка<>"" Then
        СтрПоказатьОшибку:="Ошибка отправки информации на банковский терминал: "+СтрОшибка+"!";
        Exit 0;
      EndIf;
      спНастройкиККМ["ДополнительнаяИнформация"]:=спПлатежныйТерминал["ДополнительнаяИнформация"];
      ФлБанковскийТерминал:=1;
    EndIf;
  
    
    //Отправка в ККМ  
    If КорректировочныеСвойстваЧека and 4=0 Then
      ФлОперацияОтказ:=2;
      Try
        Form.тСтатусОбмена.Caption:="Отправка информации в ККМ...";
        ТабИСМП.Select();
        While ТабИСМП.Next() Do
          ТабИСМП.Номенклатура:=ТабИСМП.Партия.Parent();
        EndDo;
        ТабИСМП.Sort("Номенклатура");
        
        Таблица:=Tab.Create("Номенклатура,Количество,Сумма");
        ТабПозиции.CopyTo(Таблица,,,"Номенклатура,Количество,Сумма");
        Таблица.Group("Номенклатура","Количество,Сумма");
        Таблица.AddColumn("СтавкаНДС");
        Таблица.Select();
        While Таблица.Next() Do
          Таблица.СтавкаНДС:=Таблица.Номенклатура.СтавкаНДС;
        EndDo;
        Сумма:=Round(Таблица.Sum("Сумма"),2);
        ЭлектроннаяСумма:=Form.тСуммаКарта.Value;
        ДругаяБезналичнаяСумма:=Form.тСуммаСертификатов.Value;
        
        спНастройкиККМ["СуммаЗакрытияАванса"]:=0;
        ФлОперация:=1;
        ФлОперацияОтказ:=2;
        If ТекущаяОперация=1 Then //Возврат
          ФлОперация:=2;
          ФлОперацияОтказ:=1;
        ElseIf ТекущаяОперация=2 Then //Аванс
          ФлОперация:=10;
          ФлОперацияОтказ:=11;
        ElseIf ТекущаяОперация=3 Then //Кредит
          ФлОперация:=12;
          ФлОперацияОтказ:=13;
        ElseIf ТекущаяОперация=4 Then //Закрытие аванса
          ДолгПокупателя:=Storage.Взаиморасчеты.Gross1("Сумма",,0,"~(Договор.@Parent=Form.зК.Value)And(Договор.ЮрЛицо=ТекущийМагазин.ЮрЛицо)");
          спНастройкиККМ["СуммаЗакрытияАванса"]:=Min(Max(-ДолгПокупателя,0),Сумма);
          ФлОперация:=11;
          ФлОперацияОтказ:=10;
        ElseIf ТекущаяОперация=5 Then //Закрытие кредита
          ФлОперация:=13;
          ФлОперацияОтказ:=12;
        EndIf;
        
        спНастройкиККМ["ТипЧека"]:=ФлОперация;
        спНастройкиККМ["ФлРозничныйПокупатель"]:=Form.зК.Value.Selected()=0;
        If Form.зК.Value.Selected()<>0 Then
          спНастройкиККМ["Контрагент"]:=Form.зК.Value;
        EndIf;
        спНастройкиККМ["ЮрЛицо"]:=ТекущийМагазин.ЮрЛицо;
        спНастройкиККМ["ЕГАИССылка"]:=ЕГАИСсылка;
        спНастройкиККМ["ЕГАИСПодпись"]:=ЕГАИСПодпись;
        спНастройкиККМ["ТабИСМП"]:=ТабИСМП;
        спНастройкиККМ["Сумма"]:=Сумма;
        спНастройкиККМ["ЭлектроннаяСумма"]:=ЭлектроннаяСумма;
        спНастройкиККМ["ДругаяБезналичнаяСумма"]:=ДругаяБезналичнаяСумма;
        спНастройкиККМ["Таблица"]:=Таблица;
        спНастройкиККМ["Кассир"]:=ТекущийКассир.Контрагент;
        спНастройкиККМ["ПочтаИлиТелефонКлиента"]:=ПочтаИлиТелефон;
        //Ускорение, номера запрошены раньше
        спНастройкиККМ["НомерСмены"]:=НомерСмены;
        спНастройкиККМ["НомерДокумента"]:=ККМНомерДокумента;
        
        Стр:=глВыполнитьФункциюДрайвера("PrintReceipt",спНастройкиККМ);
        спНастройкиККМ["Таблица"]:=0;
        спНастройкиККМ["ДополнительнаяИнформация"]:="";
        If not IsEmpty(Стр) Then
          ФлОперацияОтказ:=-1;
          Raise Стр;
        EndIf;
      Except
        спНастройкиККМ["Таблица"]:=0;
        спНастройкиККМ["ДополнительнаяИнформация"]:="";
        СтрПоказатьОшибку:="Ошибка отправки информации в кассовый терминал: "+PopError()+"!";
        Exit 0;
      EndTry;
    EndIf;
    
    
    //"Подтверждение" в банковских терминалах, если необходимо (не рекомендуется)
    If (ФлБанковскийТерминал)And(КорректировочныеСвойстваЧека and 2=0) Then
      Form.тСтатусОбмена.Caption:="Отправка подтверждения в банковский терминал...";
      спПлатежныйТерминал["ТипОперации"]:=100;
      СтрОшибка:="";
      Try
        СтрОшибка:=глВыполнитьФункциюДрайвера("RegisterTransaction",спПлатежныйТерминал);
      Except
        СтрОшибка:=PopError();
      EndTry;
      If СтрОшибка<>"" Then
        ФлБанковскийТерминал:=0;
        //Отправка отказа в ККМ  
        If КорректировочныеСвойстваЧека and 4=0 Then
          Try
            спНастройкиККМ["Таблица"]:=Таблица;
            спНастройкиККМ["ТипЧека"]:=ФлОперацияОтказ;
            ФлОперацияОтказ:=-1;
            Стр:=глВыполнитьФункциюДрайвера("PrintReceipt",спНастройкиККМ);
            спНастройкиККМ["Таблица"]:=0;
            If not IsEmpty(Стр) Then
              Raise Стр;
            EndIf;
          Except
            спНастройкиККМ["Таблица"]:=0;
            СтрОшибка2:=PopError();
            СтрПоказатьОшибку:="Внимание! Не удалось зафиксировать оплату в банковском терминале, однако при отмене ее в кассовом оборудование также произошла ошибка! Товар в этом случае отдавать нельзя, "+
              "убедительная просьба обратиться прямо сейчас к техническому специалисту!";
            Logs.Write("Невозможно подтвердить транзакцию в банковском терминале "+СтрОшибка+"!",,"USER",0);
            Logs.Write("Невозможно отменить транзакцию в ККМ "+СтрОшибка2+", утерянная сумма: "+Сумма+"!",,"USER",0);
            
            Стр:="После ошибки подтверждения транзакции в банковском терминале произошла ошибка отмены чека в ККМ. "+_NEWLINE+
              "Ошибка банковского терминала: "+СтрОшибка+_NEWLINE+
              "Ошибка ККМ: "+СтрОшибка2+_NEWLINE+
              "Тип транзакции ККМ: "+ТекущаяОперация+_NEWLINE+
              "Сумма транзакции: "+Сумма;
            Путь:="Temp\Розница\ОшибкиЧеков\";
            If File.CreateDirectory(Путь) Then
              StringToFile(Стр,Путь+"БанковскийТерминал_"+FormatDate(Date(),"YYYYmmddhhttss")+".txt",1200,0);
            EndIf;
            Exit 0;
          EndTry;
        EndIf;
        СтрПоказатьОшибку:="Ошибка отправки информации на банковский терминал: "+СтрОшибка+"!";
        Exit 0;
      EndIf;
    EndIf;

    
    //Начало транзакции изменения таблиц БД
    BeginTransaction();
    
        
    //Создание локальных документов выполняется после всех других операций, чтобы уменьшить время блокировки таблиц до минимума
    If (ТекущаяОперация<5)And(КорректировочныеСвойстваЧека and 8=0) Then
      Form.тСтатусОбмена.Caption:="Создание документа продажи...";
  
      If ТекущаяОперация<>1 Then
        aDoc:=Doc.Реализация;
      Else
        aDoc:=Doc.ВозвратОтПокупателя;
      EndIf;
      aDoc.New();
      aDoc.DocDate:=Date();
      aDoc.Автор:=лкПользователь;
      aDoc.ЮрЛицо:=ТекущийМагазин.ЮрЛицо;
      aDoc.Магазин:=ТекущийМагазин;
      глУстановитьНовыйНомер(aDoc);
      aDoc.Склад:=ТекущийМагазин.Склад;
      If ТекущаяОперация<>1 Then
        aDoc.КодОперации:=?(ТекущаяОперация<>2,Enum.коРеализация.РеализацияРозничная,Enum.коРеализация.РеализацияЗаявка);
      Else
        aDoc.КодОперации:=Enum.коВозвратОтПокупателя.ВозвратРозничный;
      EndIf;
      aDoc.УчитыватьВНалоговомУчете:=1;
      aDoc.Контрагент:=Контрагент;
      aDoc.Договор:=Договор;
      aDoc.ТипЦен:=ТекущийМагазин.ТипЦенРеализации;
      ФлРеал:=aDoc.DBName()="Реализация";
      ТМаркиДокумента:=Tab.Create("Партия,Ящик,Марка");
      aTab:=aDoc.LineParts("Номенклатура");
      ТабПозиции.Select();
      While ТабПозиции.Next() Do
        ТПартии:=ТабПозиции.ТПартии;
        Количество:=ТабПозиции.Количество;
        Сумма:=ТабПозиции.Сумма;
        ЦенаБезСкидки:=ТабПозиции.СуммаБезСкидки/Количество;
        Цена:=Round(Сумма/Количество,2);
        
        //Марки
        ТМарки:=ТабПозиции.ТМарки;
        If _And(not IsEmpty(ТМарки),ТМарки.Size()>0) Then
          ТПартии:=Tab.Create("Партия,Количество");
          ТМарки.Select();
          While ТМарки.Next() Do
            ТМаркиДокумента.AddLine("Партия,Ящик,Марка",ТМарки.Партия,"",ТМарки.Марка);
            ТПартии.AddLine("Партия,Количество",ТМарки.Партия,1);
          EndDo;
          ТПартии.Group("Партия","Количество");
        EndIf;
        If _And(not IsEmpty(ТПартии),ТПартии.Size()>0) Then
          //ТПартии:"Партия,Количество";
          ТПартии.Select();
          While ТПартии.Next() Do
            Кл:=Min(ТПартии.Количество,Количество);
            Количество:=Round(Количество-Кл,6);
            См:=?(Количество=0,Сумма,Round(Кл*Цена,2));
            Сумма:=Сумма-См;
            aTab.AddLine("Номенклатура,Партия,Количество,ЦенаБезСкидки,Цена,Сумма,СтавкаНДС",ТабПозиции.Номенклатура,ТПартии.Партия,Кл,ЦенаБезСкидки,Цена,См,ТабПозиции.Номенклатура.СтавкаНДС);
            глПересчитатьСтроку(aDoc,aTab,"Количество2@СуммаНДС");
            If Количество=0 Then
              Break;
            EndIf;
          EndDo;
        EndIf;
        If Количество>0 Then
          If _And(not IsEmpty(ТМарки),ТМарки.Size()>0) Then
            СтрПоказатьОшибку:="Внутреняя ошибка подсчета марок для позиции "+ТабПозиции.Номенклатура+"!";
            Exit 0;
          Else
            aTab.AddLine("Номенклатура,Количество,ЦенаБезСкидки,Цена,Сумма,СтавкаНДС",ТабПозиции.Номенклатура,Количество,ЦенаБезСкидки,Цена,Сумма,ТабПозиции.Номенклатура.СтавкаНДС);
            глПересчитатьСтроку(aDoc,aTab,"Количество2@СуммаНДС");
          EndIf;
        EndIf;
      EndDo;
      aDoc.СуммаВзаиморасчетов:=aTab.Sum("Сумма");
      aDoc.УникальныйИдентификатор3:="=";
      aDoc.Save();
      If ТекущаяОперация<>2 Then //В документах, связанных с авансами, марки не сохраняем
        If ТМаркиДокумента.Size()>0 Then
//          Form.тСтатусОбмена.Caption:="Сохранение марок документа продажи...";
          If not глМаркиЗарегистрироватьДокумент(aDoc,ТМаркиДокумента,3,,1) Then
            СтрПоказатьОшибку:="Ошибка сохранения марок документа!";
            Exit 0;
          EndIf;
        EndIf;
      EndIf;
//      Form.тСтатусОбмена.Caption:="Обработка документа...";
      If not глОбработать(aDoc,1) Then
        СтрПоказатьОшибку:="Невозможно обработать документ!";
        Exit 0;
      EndIf;
    EndIf;
    
    См:=Form.тСуммаЧека.Value;//Сумма чека
    СмПКО:=Min(Max(См-Form.тСуммаКарта.Value-Form.тСуммаСертификатов.Value,0),Form.тСуммаНаличные.Value);
    If (СмПКО>0)And(ТекущаяОперация<>3)And(КорректировочныеСвойстваЧека and 8=0) Then
//      Form.тСтатусОбмена.Caption:="Создание кассового документа...";
      If ТекущаяОперация<>1 Then
        bDoc:=Doc.ПКО;
      Else
        bDoc:=Doc.РКО;
      EndIf;
      bDoc.New();
      bDoc.DocDate:=Date();
      bDoc.ЮрЛицо:=ТекущийМагазин.ЮрЛицо;
      bDoc.Магазин:=ТекущийМагазин;
      глУстановитьНовыйНомер(bDoc);
      If ТекущаяОперация<>5 Then
        bDoc.ДокОснование:=aDoc;
      Else
        bDoc.ДокОснование:=Param["ДокументЗакрытияКредита"];
      EndIf;
      bDoc.Автор:=лкПользователь;
      bDoc.КодОперации:=?(ТекущаяОперация<>1,Enum.коПКО.ОплатаПокупателя,Enum.коРКО.ВозвратПокупателю);
      bDoc.УчитыватьВНалоговомУчете:=1;
      bDoc.СуммаВзаиморасчетов:=СмПКО;
      aEl:=спНастройкиККМ["Оборудование"];
      bDoc.Касса:=aEl.Касса;
      bDoc.Контрагент:=Контрагент;
      bDoc.Договор:=Договор;
      bDoc.Основание:="Через "+ТекущийКассир;
      If ТекущаяОперация=1 Then
        зЦЗ:=Ref.зтЦентрыЗатрат;
        If not зЦЗ.Find("Name,ВнутреннееПеремещение","Внутренние перемещения",1) Then
          If not зЦЗ.Find("ВнутреннееПеремещение",1) Then
            зЦЗ.New();
            зЦЗ.Name:="Внутренние перемещения";
            зЦЗ.ВнутреннееПеремещение:=1;
            зЦЗ.Save();
          EndIf;
        EndIf;
        зСЗ:=Ref.зтСтатьиЗатрат;
        If not зСЗ.Find("@Parent,Name",зЦЗ,"Возвраты покупателям") Then
          зСЗ.New();
          зСЗ.Parent(зЦЗ);
          зСЗ.Name:="Возвраты покупателям";
          зСЗ.Save();
        EndIf;
        bDoc.ЦентрЗатрат:=зЦЗ;
        bDoc.СтатьяЗатрат:=зСЗ;
      EndIf;
//      Form.тСтатусОбмена.Caption:="Обработка документа ПКО...";
      If not глОбработать(bDoc,1) Then
        СтрПоказатьОшибку:="Невозможно обработать документ ПКО!";
        Exit 0;
      EndIf;
    EndIf;
    
    флОк:=1;
  Finally
    If флОк Then
//      Form.тСтатусОбмена.Caption:="Завершение транзакции...";
      CommitTransaction();
      //Запись информации об ошибках проверки марок
      ТабОшибкиПроверкиМарок:=спНастройкиККМ["ТабОшибкиПроверкиМарок"];
      If not IsEmpty(ТабОшибкиПроверкиМарок) Then
        Стр:="";
        ТабОшибкиПроверкиМарок.Select();
        While ТабОшибкиПроверкиМарок.Next() Do
          If Стр="" Then
            Стр:="Документ: "+aDoc;
          EndIf;
          AppendStringToBufferedString(Стр,_NEWLINE+"Марка "+ТабОшибкиПроверкиМарок.Марка+" -- "+ТабОшибкиПроверкиМарок.Причина);
        EndDo;
        If Стр<>"" Then
          Путь:="Temp\Розница\ОшибкиИСМП\";
          If File.CreateDirectory(Путь) Then
            StringToFile(Стр,Путь+"problem_"+FormatDate(Date(),"YYYYmmddhhttss")+".txt",1200,0);
          EndIf;
        EndIf;
      EndIf;
      
      Form.тСтатусОбмена.Caption:="Операция выполнена успешно";
      If (ТекущаяОперация<>5)And(КорректировочныеСвойстваЧека and 8=0) Then
        Param["ПоследнийЧекДокумент"]:=aDoc;
        ПоследнийЧекДокумент:=aDoc;
      EndIf;
      Param["Ответ"]:=1;
     
      If спДисплеиПокупателя.Size()>0 Then
        //Вызвать обновление информации на дисплее покупателя
        For i:=1 To спДисплеиПокупателя.Size() Do
          спНастройки:=спДисплеиПокупателя[i];
          спНастройки["Магазин"]:=ТекущийМагазин;
          спНастройки["ТабПозиции"]:=ТабПозиции;
          спНастройки["ЭтапОперации"]:=2;//1 -- отмена оплаты, 2 -- удачно
          Try
            глВыполнитьФункциюДрайвера("UpdateDisplayInfoPayment",спНастройки);
          Except
          EndTry;
          спНастройки["Магазин"]:=0;
          спНастройки["ТабПозиции"]:=0;
        EndDo;
      EndIf;
      //Визуально показать, что чек закрыт
      ТабПозиции.ClearLines();
      ТабПозиции.Column("Статус").isVisible:=0;
    Else
      ИмяФайлаОшибок:="Temp\Розница\ОшибкиЧеков\Чек_"+FormatDate(Date(),"YYYYmmdd_hhttssppp")+".txt";
      ТОшибкиЧека:=Text.Create(1);
      If СтрПоказатьОшибку<>"" Then
        ТОшибкиЧека.AddString(СтрПоказатьОшибку);
      EndIf;
      
      Стр:=PopError();
      If not IsEmpty(Стр) Then
        СтрПоказатьОшибку:="Исключение при закрытии чека: "+Стр+"!";
        If СтрПоказатьОшибку<>"" Then
          ТОшибкиЧека.AddString(СтрПоказатьОшибку);
        EndIf;
      EndIf;
      SuppressException();
      
      СтрОшибкаОтмены:="";
      спНастройкиККМ["ДополнительнаяИнформация"]:="";
      If (ФлБанковскийТерминал)And(КорректировочныеСвойстваЧека and 2=0) Then
        спПлатежныйТерминал["Магазин"]:=ТекущийМагазин;
        спПлатежныйТерминал["ТабПозиции"]:=ТабПозиции;
        спПлатежныйТерминал["ТипОперации"]:=101;
        спПлатежныйТерминал["ДополнительнаяИнформация"]:="";
        СтрОшибка:="";
        Try
          СтрОшибка:=глВыполнитьФункциюДрайвера("RegisterTransaction",спПлатежныйТерминал);
        Except
          СтрОшибка:=PopError();
        EndTry;
        If СтрОшибка<>"" Then
          Logs.Write("Ошибка выгрузки возврата на банковский терминал, сумма "+глФРМ(Form.тСуммаКарта.Value),,"USER",0);
          СтрОшибкаОтмены:="Ошибка выгрузки возврата на банковский терминал: "+СтрОшибка+"! Выполните возврат вручную, сумма "+глФРМ(Form.тСуммаКарта.Value)+"!";
          ТОшибкиЧека.AddString("======");
          ТОшибкиЧека.AddString("Ошибка выгрузки возврата на банковский терминал, сумма "+глФРМ(Form.тСуммаКарта.Value));
        EndIf;
        спНастройкиККМ["ДополнительнаяИнформация"]:=спПлатежныйТерминал["ДополнительнаяИнформация"];
      EndIf;
    
      //Обратная операция в ККМ
      If (ФлОперацияОтказ<>-1)And(КорректировочныеСвойстваЧека and 4=0) Then
        //Отправка отказа в ККМ  
        Try
          спНастройкиККМ["Таблица"]:=Таблица;
          спНастройкиККМ["ТипЧека"]:=ФлОперацияОтказ;
          Стр:=глВыполнитьФункциюДрайвера("PrintReceipt",спНастройкиККМ);
          спНастройкиККМ["Таблица"]:=0;
          спНастройкиККМ["ДополнительнаяИнформация"]:="";
          If not IsEmpty(Стр) Then
            Raise Стр;
          EndIf;
        Except
          спНастройкиККМ["Таблица"]:=0;
          спНастройкиККМ["ДополнительнаяИнформация"]:="";
          СтрОшибка2:=PopError();
          СтрОшибкаОтмены:=СтрОшибкаОтмены+?(СтрОшибкаОтмены<>"",_NEWLINE)+"Внимание! При отмене операции в кассовом оборудование произошла ошибка "+СтрОшибка2+"! Проверьте корректность сумм чеков в ОФД!";
          Logs.Write("Невозможно отменить транзакцию в ККМ, утерянная сумма: "+спНастройкиККМ["Сумма"]+"!",,"USER",0);
          ТОшибкиЧека.AddString("======");
          ТОшибкиЧека.AddString("Произошла ошибка отмены чека в ККМ, сумма "+спНастройкиККМ["Сумма"]);
          ТОшибкиЧека.AddString("Ошибка ККМ: "+СтрОшибка2);
          ТОшибкиЧека.AddString("Тип транзакции ККМ: "+ФлОперацияОтказ);
        EndTry;
      EndIf;
      
      //Возврат чека ЕГАИС
      If (ФлЕГАИСМарки)And(КорректировочныеСвойстваЧека and 1=0) Then
        СтрОтвет:="";
        СпНастройки:=List.Create();
        СпНастройки["ТабМарки"]:=ТабМарки;
        СпНастройки["НомерККТ"]:=НомерККТ;
        СпНастройки["НомерСмены"]:=НомерСмены;
        СпНастройки["НомерДокумента"]:=ККМНомерДокумента;
        СпНастройки["Дата"]:=ЕГАИСДатаДокумента;
        СпНастройки["НомерВерсии"]:=3;//?(Form.тСуммаНаличные.Value=0,3,1);
        
        Фл:=глВыгрузитьСписаниеМарокВЕГАИС(ТекущийМагазин,СпНастройки,СтрОтвет,ТекущаяОперация<>1);
        If Фл Then
          If _Or(Pos("<url>",СтрОтвет)=0,Pos("<sign>",СтрОтвет)=0) Then
            Фл:=0;
          EndIf;
        EndIf;
        If not Фл Then
          Logs.Write("Невозможно фиксировать возврат марок в ЕГАИС!",,"USER",0);
          СтрОшибкаОтмены:="Невозможно фиксировать возврат марок в ЕГАИС!";
          ТОшибкиЧека.AddString("======");
          ТОшибкиЧека.AddString("Невозможно фиксировать возврат марок в ЕГАИС, пакет или ошибка:");
          ТОшибкиЧека.AddString(СтрОтвет);
          ТОшибкиЧека.AddString("");
          ТОшибкиЧека.AddString("Список позиций для возврата (цена, марка):");
          ТабМарки.Select();
          While ТабМарки.Next() Do
            ТОшибкиЧека.AddString(""+ГлФРМ(ТабМарки.Цена)+", "+ТабМарки.Марка);
          EndDo;
        EndIf;
      EndIf;

      Try
        RollbackTransaction();
      Except
      EndTry;
      Form.тСтатусОбмена.Caption:=СтрОшибкаОтмены;
      
      If ТОшибкиЧека.Size()>0 Then
        Каталог:="Temp\Розница\ОшибкиЧеков\";
        File.CreateDirectory(Каталог);
        If not ТОшибкиЧека.Save(ИмяФайлаОшибок,65001,1) Then
          Logs.Write("Невозможно сохранить файл ошибок отмены чека "+ИмяФайлаОшибок,,"USER",0);
          СтрОшибкаОтмены:="Невозможно сохранить файл ошибок отмены чека "+ИмяФайлаОшибок+"!";
        EndIf;
      EndIf;
      
      
      If спДисплеиПокупателя.Size()>0 Then
        //Вызвать обновление информации на дисплее покупателя
        For i:=1 To спДисплеиПокупателя.Size() Do
          спНастройки:=спДисплеиПокупателя[i];
          спНастройки["Магазин"]:=ТекущийМагазин;
          спНастройки["ТабПозиции"]:=ТабПозиции;
          спНастройки["ЭтапОперации"]:=1;//1 -- отмена оплаты, 2 -- удачно
          Try
            глВыполнитьФункциюДрайвера("UpdateDisplayInfoPayment",спНастройки);
          Except
          EndTry;
          спНастройки["Магазин"]:=0;
          спНастройки["ТабПозиции"]:=0;
        EndDo;
      EndIf;      
      
      If СтрПоказатьОшибку<>"" Then
        Box(Left(СтрПоказатьОшибку,512)+?(Length(СтрПоказатьОшибку)>512,"..."),Q_STOP);//Ограничим, чтобы не выходило за пределы экрана
        Form.тСтатусОбмена.Caption:=СтрПоказатьОшибку;
      EndIf;
      
      If СтрОшибкаОтмены<>"" Then
        Box(Left(СтрОшибкаОтмены,512)+?(Length(СтрОшибкаОтмены)>512,"..."),Q_STOP);
      EndIf;
    EndIf;
  EndTry;
  
  Exit флОк;
EndFunction


Function ЗакрытьЧекПринятьРезультатСканирования(Стр)
  //TODO: Применить скидочные, накопительные или подарочные карты в основной таблице ПоискТабПозиции и в форме закрытия
EndFunction

Function СписокДокументовПрименитьОбновить()
  НачДата:=спСписокДокументовОтбор["НачДата"];
  КонДата:=спСписокДокументовОтбор["КонДата"];

  Фильтры:=">=DocDate,<DocDate";
  Значения:="'"+BegOfDay(НачДата)+"','"+BegOfDay(КонДата+1)+"'";
  Form.пПериод.Caption:="с "+FormatDate(НачДата,"DD MMM YYYY")+" по "+FormatDate(КонДата,"DD MMM YYYY");
  
  аКонтрагент:=0;
  аАвтор:=0;
  аМагазин:=0;
  аЮрЛицо:=0;
  аСклад:=0;
  аКодОперации:=0;
  аВид:=0;
  аСтатус:=0;
  If not isEmpty(спСписокДокументовОтбор["ТипДокумента"]) Then
    Фильтры:=Фильтры+",=@LINKTYPE";
    аВид:=спСписокДокументовОтбор["ТипДокумента"];
    Значения:=Значения+",аВид";
  EndIf;
  If not isEmpty(спСписокДокументовОтбор["КодОперации"]) Then
    Фильтры:=Фильтры+",=КодОперации";
    аКодОперации:=спСписокДокументовОтбор["КодОперации"];
    Значения:=Значения+",аКодОперации";
  EndIf;
  If not isEmpty(спСписокДокументовОтбор["Магазин"]) Then
    Фильтры:=Фильтры+",->Магазин";
    аМагазин:=спСписокДокументовОтбор["Магазин"];
    Значения:=Значения+",аМагазин";
  EndIf;
  If not isEmpty(спСписокДокументовОтбор["ЮрЛицо"]) Then
    Фильтры:=Фильтры+",->ЮрЛицо";
    аЮрЛицо:=спСписокДокументовОтбор["ЮрЛицо"];
    Значения:=Значения+",аЮрЛицо";
  EndIf;
  If not isEmpty(спСписокДокументовОтбор["Статус"]) Then
    Фильтры:=Фильтры+",->@Status";
    аСтатус:=спСписокДокументовОтбор["Статус"]-100;
    Значения:=Значения+",аСтатус";
  EndIf;
  
  ТекущийДокумент:=спСписокДокументовОтбор["ТекущийДокумент"];
  If not isEmpty(ТекущийДокумент) Then
    Try
      спСписокДокументовОтбор["ТекущийДокумент"]:=0;
      Exec("Form.MainTab.SetFiltersAndPositionOnElement(ТекущийДокумент,"""+Фильтры+""","+Значения+")");
    Except
    EndTry;  
  Else
    Exec("Form.MainTab.SetFilters("""+Фильтры+""","+Значения+")");
  EndIf;
EndFunction

Function ВвестиСуммуОбновитьДоступность()
  КодОперации:=Form.КодОперации.Value;
  If КодОперации.SelectedLine=4 Then
    Form.тКонтрагент.IsDisabled:=1;
    Form.оКонтрагент.IsDisabled:=1;
  Else
    Form.тКонтрагент.IsDisabled:=0;
    Form.оКонтрагент.IsDisabled:=0;
    If КодОперации.SelectedLine=1 Then
      Form.тКонтрагент.Caption:="Контрагент:";
    ElseIf КодОперации.SelectedLine=3 Then
      Form.тКонтрагент.Caption:="Инкассатор:";
    Else
      Form.тКонтрагент.Caption:="Подотчетник:";
    EndIf;
  EndIf;
EndFunction

Function МенюККМОбновитьСтатус(Магазин,спНастройкиККМ)
  Form.тМагазин.Caption:=Магазин;
  //Определим смену
  ФлОткрыта:=0;
  Try
    If глВыполнитьФункциюДрайвера("ShiftInfo",спНастройкиККМ)="" Then
      //-1 -- ошибка, 0 -- закрыта, 1 -- открыта, 2 -- истекла, 3 -- другое
      ФлОткрыта:=Number(спНастройкиККМ["СменаСостояние"]);
    EndIf;
  Except
    ФлОткрыта:=-1;
  EndTry;
  
  If (ФлОткрыта=1)or(ФлОткрыта=2) Then
    Form.кнСмена.Color:=MixColors(_CLR_BTNFACE,_CLR_RED,10);
    Form.кнСмена.Caption:="Закрыть смену";
    Form.кнСмена.Tag:=0;
    Form.кнОтчет.Caption:="X-отчет";
    Form.кнОтчет.Tag:=0;
  ElseIf ФлОткрыта=0 Then
    Form.кнСмена.Color:=MixColors(_CLR_BTNFACE,_CLR_GREEN,10);
    Form.кнСмена.Caption:="Открыть смену";
    Form.кнСмена.Tag:=1;
    Form.кнОтчет.Caption:="Z-отчет";
    Form.кнОтчет.Tag:=1;
  Else
    Form.кнСмена.Color:=_CLR_BTNFACE;
    Form.кнСмена.Caption:="Статус смены ?";
    Form.кнОтчет.Caption:="Отчеты недоступны";
    Form.кнСмена.IsDisabled:=1;
    Form.кнОтчет.IsDisabled:=1;
  EndIf;
EndFunction

Function ВвестиСуммуОбновитьФорму(Магазин,СпНастройкиККМ)
  aEl:=спНастройкиККМ["Оборудование"];
  Касса:=aEl.Касса;
  Сумма:=Storage.Касса.Gross1("Сумма",,0,"ЮрЛицо,Касса",Магазин.ЮрЛицо,Касса);
  Form.тСумма1.Caption:=глФРМ(Сумма,"");
  ВвестиСуммуОбновитьДоступность();
  
  //Определим сумму в ККМ
  Сумма2:=-1;
  Try
    If глВыполнитьФункциюДрайвера("CashDrawerInfo",спНастройкиККМ)="" Then
      Сумма2:=Number(спНастройкиККМ["ДенежныйЯщикСумма"]);
    EndIf;
  Except
  EndTry;
  Form.тСумма2.Caption:=?(Сумма2<0,"ошибка!",глФРМ(Сумма2,""));
  If Сумма<>Сумма2 Then
    Form.тСумма2.FontColor:=_CLR_RED;
  EndIf;
EndFunction

Function ОкруглениеИтогоЧека(ТабПозиции)
  If ТекущийМагазин.флПараметрыОкругленияИтогоЧека=0 Then
    Exit;
  EndIf;
  Чл:=спОкруглениеЦен[ТекущийМагазин.флПараметрыОкругленияИтогоЧека];
  Кл:=0;
  Сумма0:=0;
  ТабПозиции.Select();
  While ТабПозиции.Next() Do
    If ТабПозиции.ФлМРЦ<>1 Then
      Кл:=Кл+1;
      Сумма0:=Round(Сумма0+ТабПозиции.Сумма,2);
    EndIf;
  EndDo;
  If Кл=0 Then
    Exit;
  EndIf;
  Сумма:=Round(((Round(Сумма0*100)+(Чл-1)) div Чл)*Чл/100,2);
  If Сумма-Сумма0>0 Then
    См0:=Сумма-Сумма0;
    Кф:=(Сумма-Сумма0)/Сумма0;
    ТабПозиции.Select();
    While ТабПозиции.Next() Do
      If ТабПозиции.ФлМРЦ=1 Then
        Continue;
      EndIf;
      If Кл=1 Then
        ТабПозиции.Сумма:=ТабПозиции.Сумма+См0;
      Else
        См1:=Round(ТабПозиции.Сумма*Кф,2);
        ТабПозиции.Сумма:=Round(ТабПозиции.Сумма+См1,2);
        См0:=Round(См0-См1,2);
      EndIf;
      ТабПозиции.Скидка:=ТабПозиции.СуммаБезСкидки-ТабПозиции.Сумма;
    EndDo;
  EndIf;
EndFunction


Function ОбновлениеИндикацииДоступности(Магазин,Форма)
  //Проверка рабочего режима УТМ, раз в полминуты
  //Проверка доступности 8.8.8.8:53, раз в полминуты
  СтрИндикация:="";
  While 1 Do
    СтрУТМ:="";
    Try
      If Магазин.АдресЕГАИС="TEST" Then
        СтрУТМ:="Тестовый УТМ";
      ElseIf Магазин.АдресЕГАИС<>"" Then
        Прокси:="";
        Сервер:=Магазин.АдресЕГАИС;
        Сервер:=глРазделитьАдресИПрокси(Сервер,Прокси);
        If Сервер<>"" Then
          If Прокси<>"" Then
            //<ProxyType>@<ProxyIP>@<User>@<Password>
            aTCP:=IPConnection.Create();
            ПроксиТип:=TearStr(Прокси,"@");
            ПроксиАдр:=TearStr(Прокси,"@");
            ПроксиПольз:=TearStr(Прокси,"@");
            aTCP.UseProxy(ПроксиАдр,ПроксиТип,ПроксиПольз,Прокси);
            aTCP.Connect(Сервер);
          Else
            aTCP:=IPConnection.Connect(Сервер);
          EndIf;
          if Not aTCP.IsConnected Then
            СтрУТМ:="УТМ не работает";
          Else
            aTCP.HTTPSetOperation("GET /opt/in HTTP/1.0");
            aTCP.HTTPSetHeaderField("Host",Сервер);
            aTCP.HTTPSetHeaderField("User-Agent","Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)");
            aTCP.HTTPSetHeaderField("Accept","text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
            aTCP.HTTPSetHeaderField("Accept-Language","en");
            aTCP.HTTPSetHeaderField("Connection","Close");
            If not aTCP.HTTPSendAndReceive Then
              СтрУТМ:="Проблемы с УТМ";
            Else
              Стр:=aTCP.HTTPGetOperation();
              TearStr(Стр," ");
              Стр:=TearStr(Стр," ");
              If Стр<>"200" Then
                СтрУТМ:="Проблемы с УТМ";
              EndIf;
            EndIf;
          EndIf;
        EndIf;
      EndIf;
    Except
    EndTry;
    
    СтрИнтернет:="";
    Try
      aTCP:=IPConnection.Connect("8.8.8.8:53");
      if Not aTCP.IsConnected Then
        aTCP:=IPConnection.Connect("8.8.8.8:443");
        if Not aTCP.IsConnected Then
          СтрИнтернет:="Нет Интернета";
        EndIf;
      EndIf;
      aTCP.Disconnect();
    Except
    EndTry;
    
    Стр:=СтрИнтернет+?((СтрИнтернет<>"")And(СтрУТМ<>""),", ")+СтрУТМ;
    If СтрИндикация<>Стр Then
      Try
        PostMessageToForm(Форма,10002,Стр);
        СтрИндикация:=Стр;
      Except
      EndTry;
    EndIf;
    
    For i:=1 To 120 Do
      Sleep(250);
    EndDo;
  EndDo;
EndFunction

Function ПереподключениеОборудования()
  ТабПозиции:=Form.ТабПозиции.Value;
  If ТабПозиции.Size()>0 Then
    Box("Операция переподключения оборудования может быть выполнена только в случае, если чек не содержит никаких позиций!",Q_STOP);
    Exit;
  EndIf;
  
  If AskQuestion("Данная операция позволит подключить все оборудование заново. Вы уверены?",Q_WARNING+Q_YESNO,R_YES)<>R_YES Then
    Exit;
  EndIf;
  Try
    глЗагрузитьДрайверы();
  Except
    Box("Произошла ошибка при переподключении оборудования ("+PopError()+")! Обработка будет закрыта!",Q_STOP);
    Form.Close(0);
    Exit;
  EndTry;
  спПодключенныеДрайверы:=List.Create();
  
  Стр:=ИнициализироватьОборудование();
  If not IsEmpty(Стр) Then
    Box(Стр,Q_STOP);
    Form.Close(0);
    Exit;
  EndIf;
  
  НакопленноеСообщение:="";
  Form.OnTimerInterval:=глСканерыКлавиатурыТаймерИнтервал;
  ОбновитьИнформацию();
  ОбновитьИнформациюТекущейСтроки();
  Box("Переподключение оборудования выполнено успешно!",Q_INFORMATION);
EndFunction


Function ВыполнитьДействиеГорячейКлавиши(СтрКод,ФлМенюЗакрытияЧека=0)
  If СтрКод="" Then
    Exit;
  EndIf;
  //ТабПозиции,СпПеременные,ТабДобавить
  If not ФлМенюЗакрытияЧека Then
    ТабПозиции:=Form.ТабПозиции.Value;
  Else
    ТабПозиции:=ПоискТабПозиции;
  EndIf;
  ТабДобавить:=Tab.Create("Номенклатура,Партия,Марка,Количество,Сумма,СуммаБезСкидки");
  СпПеременные:=List.Create();
  СпПеременные["ФлТипДиалога"]:=ФлТипДиалога;
  СпПеременные["МестоВызова"]:=ФлМенюЗакрытияЧека;
  СпПеременные["Магазин"]:=ТекущийМагазин;
  СпПеременные["РабочееМесто"]:=ТекущееРабочееМесто;
  СпПеременные["Кассир"]:=ТекущийКассир;
  СпПеременные["Операция"]:=ТекущаяОперация;
  СпПеременные["Пользователь"]:=лкПользователь;
  СпПеременные["спПодключенныеДрайверы"]:=спПодключенныеДрайверы;
  СпПеременные["спДополнительныеКассы"]:=спДополнительныеКассы;
  СпПеременные["спНастройкиККМ"]:=спНастройкиККМ;
  СпПеременные["спПлатежныеТерминалы"]:=спПлатежныеТерминалы;
  СпПеременные["спДисплеиПокупателя"]:=спДисплеиПокупателя;
  СпПеременные["спВесы"]:=спВесы;
  СпПеременные["Ответ"]:=0;
  Try
    Exec(СтрКод);
  Except
    Box("Ошибка действия горячей клавиши и кнопки: "+PopError(),Q_STOP);
    Exit;
  EndTry;
  If ТабДобавить.Size()>0 Then
    If ТабДобавить.Size()>5 Then
      ТабПозиции.Lock();
    EndIf;
    Try
      ТабДобавить.Select();
      While ТабДобавить.Next() Do
        //Номенклатура,Партия,Марка,Количество,Сумма,СуммаБезСкидки
        //TODO: Учесть передаваемые Сумма и СуммаБезСкидки
        аМРЦ:=0;
        ДобавитьТоварВТаблицуТоваров(ТабПозиции,0,ТабДобавить.Номенклатура,Coalesce(ТабДобавить.Партия,0),Coalesce(ТабДобавить.Марка,0),ТабДобавить.Количество,ТекущийМагазин.флНеПроверятьНаличиеМарочногоТовара,,аМРЦ);
      EndDo;
    Finally
      If ТабДобавить.Size()>5 Then
        ТабПозиции.UnLock();
      EndIf;
    EndTry;
  EndIf;
  Чл:=Number(СпПеременные["Ответ"]);
  
  If ФлМенюЗакрытияЧека Then
    If Чл=0 Then
      Exit;
    ElseIf Чл=101 Then //Превратить в наличную
      См2:=Round(Form.тСуммаЧека.Value-Form.тСуммаСертификатов.Value,2);
      If См2<=0 Then
        Exit;
      Else
        Form.тСуммаКарта.Value:=0;
        Form.тСуммаНаличные.Value:=См2;
        ЗакрытьЧекОбновитьСуммы();
      EndIf;
    ElseIf Чл=102 Then //Превратить в безналичную
      См2:=Round(Form.тСуммаЧека.Value-Form.тСуммаСертификатов.Value,2);
      If См2<=0 Then
        Exit;
      Else
        Form.тСуммаНаличные.Value:=0;
        Form.тСуммаКарта.Value:=См2;
        ЗакрытьЧекОбновитьСуммы();
      EndIf;
    ElseIf Чл=303 Then //Превратить в чек возврата
      //TODO: ?
    ElseIf Чл=304 Then //Превратить в чек продажи
      //TODO: ?
    EndIf;
    Exit;
  EndIf;
  
  If Чл=0 Then
    Exit;
  ElseIf Чл=1 Then
    Form.Close();
  ElseIf Чл=2 Then
    ФлФорсирование:=1;
    Form.Close();
  ElseIf Чл=3 Then
    If ТабПозиции.Size()=0 Then
      Exit;
    EndIf;
    If not лкПользователь.рознУдалениеПозицийПриПродаже Then
      Box("Вам запрещено использовать удалять позиции чека, обратитесь к оператору с большими правами!",Q_STOP);
      Exit;
    EndIf;
    If AskQuestion("Удалить все строки из чека?",Q_WARNING+Q_YESNO,R_NO)=R_NO Then
      Exit;
    EndIf;
    If ПроверитьОперациюПоУсловиямПродаж(1,0) Then
      ОчиститьТаблицуТоваров();
    EndIf;
  ElseIf Чл=4 Then
    If ТабПозиции.Size()=0 Then
      Exit;
    EndIf;
    If ПроверитьОперациюПоУсловиямПродаж(1,0) Then
      ОчиститьТаблицуТоваров();
    EndIf;
  ElseIf Чл=100 Then
    Form.кнЗакрытьЧек.InvokeEventAsync("OnClick");  
  ElseIf Чл=101 Then
    ФлФорсирование:=2;
    Form.кнЗакрытьЧек.InvokeEventAsync("OnClick");  
  ElseIf Чл=102 Then
    ФлФорсирование:=3;
    Form.кнЗакрытьЧек.InvokeEventAsync("OnClick");  
  ElseIf Чл=200 Then
    Form.кнОтменитьЧек.InvokeEventAsync("OnClick");  
  ElseIf Чл=201 Then
    ОчиститьТаблицуТоваров();
  ElseIf Чл=202 Then
    ОтложитьТекущийЧек(0);
  ElseIf Чл=300 Then
    ПродолжитьЧек();
  ElseIf Чл=301 Then
    ПечатьЧекаСВыбором();
  ElseIf Чл=302 Then
    ПереподключениеОборудования();
  ElseIf Чл=303 Then
    ПревратитьВЧекВозврата();
  ElseIf Чл=304 Then
    If ТекущаяОперация<>1 Then
      Exit;
    EndIf;
    ТекущаяОперация:=0;
    ОбновитьИнформацию(1);
  ElseIf Чл=305 Then
    ПревратитьВЧекЗакрытияАванса();
  ElseIf Чл=306 Then
    ПревратитьВЧекГашенияКредита();
  ElseIf Чл=307 Then
    aList:=List.Create();
    LoadModule(10,"Modules\FreeForms\ВнутренниеОбработки\СпециальныеОбработки\ИдентификацияПользователя",aList,0,"Module","Form");
    If aList["Результат"]<>1 Then
      Exit;
    EndIf;  
    лкПользователь:=aList["Пользователь"];
    ОбновитьИнформацию(1);
    Box("Операция замены прав выполнена успешно!",Q_INFORMATION);
  ElseIf Чл=308 Then
    ВскрытиеАлкогольнойТары();
  ElseIf Чл=400 Then
    Form.кнПоиск.InvokeEventAsync("OnClick");  
  ElseIf Чл=401 Then
    глСброситьСостояниеСканеров(НакопленноеСообщение);
    aList:=List.Create();
    LoadModule(10,"Modules\FreeForms\ВнутренниеОбработки\СпециальныеОбработки\СканированиеШтрихкода",aList,0,"Module","Form");
    If aList["Ответ"]<>1 Then
      Exit;
    EndIf;
    Стр:=aList["Результат"];
    ВремяПоследнегоНажатия:=0;
    аПартия:=0;
    аНоменклатура:=0;
    аМарка:=0;
    аКоличество:=0;
    аМРЦ:=0;
    ФлНайден:=РазобратьТоварныйШтрихкод(Стр,аНоменклатура,аПартия,аМарка,аКоличество,аМРЦ);
    If ФлНайден=0 Then
      Box("Объект или товар со штрихкодом """+Left(Стр,200)+""" в базе не найден!",Q_STOP);
      глСброситьСостояниеСканеров(НакопленноеСообщение);
      Exit;
    ElseIf ФлНайден>1 Then
      Exit;//Поиск
    EndIf;
    ДобавитьТоварВТаблицуТоваров(ПоискТабПозиции,1,аНоменклатура,аПартия,аМарка,аКоличество,ТекущийМагазин.флНеПроверятьНаличиеМарочногоТовара,,аМРЦ);
  ElseIf Чл=402 Then
    aList:=List.Create();
    LoadModule(10,"Modules\FreeForms\ВнутренниеОбработки\СпециальныеОбработки\ПодборСТорговогоОборудования",aList,0,"Module","Form");
    Таб:=aList.GetByName("Результат");
    If _And(not isEmpty(Таб),Таб.Size()>0) Then
      ПодборТоваровДобавитьТаблицуТоваров(Таб);
    EndIf;
  ElseIf Чл=500 Then
    Form.кнЧастыеТовары.InvokeEventAsync("OnClick");  
  ElseIf Чл=700 Then
    If спДополнительныеКассы.Size()>0 Then
      For i:=1 To спДополнительныеКассы.Size() Do
        спДрайверы:=спДополнительныеКассы[i];
        спИнф:=спДрайверы[1];
        If not ОткрытьКассовуюСмену(спИнф["Магазин"],спИнф["спНастройкиККМ"]) Then
          Exit;
        EndIf;
      EndDo;
    EndIf;
    ОткрытьКассовуюСмену(ТекущийМагазин,СпНастройкиККМ);
  ElseIf Чл=701 Then
    If спДополнительныеКассы.Size()>0 Then
      For i:=1 To спДополнительныеКассы.Size() Do
        спДрайверы:=спДополнительныеКассы[i];
        спИнф:=спДрайверы[1];
        If not ЗакрытьКассовуюСмену(спИнф["Магазин"],спИнф["спНастройкиККМ"]) Then
          Exit;
        EndIf;
      EndDo;
    EndIf;
    ЗакрытьКассовуюСмену(ТекущийМагазин,СпНастройкиККМ);
  ElseIf Чл=702 Then
    ФлОткрыта:=0;
    Try
      If глВыполнитьФункциюДрайвера("ShiftInfo",спНастройкиККМ)="" Then
        ФлОткрыта:=Number(спНастройкиККМ["СменаСостояние"]);
      EndIf;
    Except
      ФлОткрыта:=-1;
    EndTry;
    //-1 -- ошибка, 0 -- закрыта, 1 -- открыта, 2 -- истекла, 3 -- другое
    If ФлОткрыта=0 Then
      //Z-отчет
      Try
        If AskQuestion("Выполнить печать Z-отчета?",Q_QUESTION+Q_YESNO,R_YES)=R_NO Then
          Exit;
        EndIf;
        СпНастройкиККМ["Кассир"]:=ТекущийКассир.Контрагент;
        Стр:=глВыполнитьФункциюДрайвера("PrintReportZ",СпНастройкиККМ);
        If IsEmpty(Стр) Then
          //Печать Z-отчета для платежных терминалов
          ВыполнитьПечатьОтчетаПлатежногоТерминала(локСпНастройкиККМ,спПлатежныеТерминалы,"ReportZ","Z-отчет");
        EndIf;
      Except
        Стр:=PopError();
      EndTry;
      Box("Не удалось выполнить печать Z-отчета, ошибка: "+Стр+"!",Q_STOP);
    ElseIf (ФлОткрыта=1)Or(ФлОткрыта=2) Then
      //X-отчет
      Try
        If AskQuestion("Выполнить печать X-отчета?",Q_QUESTION+Q_YESNO,R_YES)=R_NO Then
          Exit;
        EndIf;
        СпНастройкиККМ["Кассир"]:=ТекущийКассир.Контрагент;
        Стр:=глВыполнитьФункциюДрайвера("PrintReportX",СпНастройкиККМ);
        If IsEmpty(Стр) Then
          //Печать X-отчета для платежных терминалов
          ВыполнитьПечатьОтчетаПлатежногоТерминала(локСпНастройкиККМ,спПлатежныеТерминалы,"ReportX","X-отчет");
        EndIf;
      Except
        Стр:=PopError();
      EndTry;
      Box("Не удалось выполнить печать X-отчета, ошибка: "+Стр+"!",Q_STOP);
    Else
      Box("Неверное состояние смены ККМ не позволяет выполнить печать X или Z отчета!",Q_STOP);
    EndIf;  
  ElseIf Чл=703 Then
    Try
      Стр:=глВыполнитьФункциюДрайвера("OpenCashDrawer",СпНастройкиККМ);
      If IsEmpty(Стр) Then
        Exit;
      EndIf;
    Except
      Стр:=PopError();
    EndTry;
    Box("Не удалось открыть денежный ящик, ошибка: "+Стр+"!",Q_STOP);
  ElseIf Чл=704 Then
    aList:=List.Create();
    aList.Add(спНастройкиККМ,"спНастройкиККМ");
    aList.Add(ТекущийМагазин,"ТекущийМагазин");
    aList.Add(ТекущийКассир,"ТекущийКассир");
    aList.Add(1,"НоменМагазина");
    aList.Add(0,"ТекущаяОперация");
    aList.Add(лкПользователь,"лкПользователь");
    aList.Add(спДополнительныеКассы,"ДополнительныеКассы");
    LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВвестиСумму");  
    ВремяПоследнегоНажатия:=0;
  ElseIf Чл=705 Then
    aList:=List.Create();
    aList.Add(спНастройкиККМ,"спНастройкиККМ");
    aList.Add(ТекущийМагазин,"ТекущийМагазин");
    aList.Add(ТекущийКассир,"ТекущийКассир");
    aList.Add(1,"НоменМагазина");
    aList.Add(1,"ТекущаяОперация");
    aList.Add(лкПользователь,"лкПользователь");
    aList.Add(спДополнительныеКассы,"ДополнительныеКассы");
    LoadModule(10,"Modules\FreeForms\УчетныеОтделы\Розница\РабочееМестоПродавца",aList,0,"Module","ВвестиСумму");  
    ВремяПоследнегоНажатия:=0;
  EndIf;
EndFunction


