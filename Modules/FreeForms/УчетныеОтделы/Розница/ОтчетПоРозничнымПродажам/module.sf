//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

Function Группировка(З,ТабФорма,Т,Ном,Ур,спГруппы,ТабКасса)
  If Ном>спГруппы.Size() Then
    Exit;
  EndIf;
  
  оУровни:=глПолучитьУстановку(ТабФорма,"оУровни");
  ИмяПер:=спГруппы[Ном];
  
  While З.Next(Ур) Do
    пЭл:=З.Get(ИмяПер);
    пЭлР:=пЭл;
    If IsEmpty(пЭл) Then
      пЭл:="< Не выбран >";
    EndIf;
    глОбработатьВыводимоеЗначениеВОтчет(пЭл,ИмяПер);
    пДокК:=GetNothing();
    
    If ИмяПер="зДок" Then
      If ТабКасса.FindAndGoto(З.зДок,,"ДокОснование",1) Then
        пДокК:=ТабКасса.зДок;
      EndIf;
    EndIf;
    
    пКод:=глПолучитьКод(пЭлР);
    пСм0:=глФРМ(З.зСм1);
    пСм1:=глФРМ(З.зСм1-З.зСм2-З.зСм3);
    пСм2:=глФРМ(З.зСм2);
    пСм3:=глФРМ(З.зСм3);
    Т.CopyByX("v2",1);
    
    НачВыс:=Т.Height();
    Form.StatusText(НачВыс);
    Form.UpdateProgress(-1,,""+Т.Height());
    глРаскраситьСтроку(Т,1,2,Ур,спГруппы.Size(),2,8,пЭлР);
    Группировка(З,ТабФорма,Т,Ном+1,Ур+1,спГруппы,ТабКасса);

    If (оУровни=1)and(Ур<спГруппы.Size()) Then
      глДобавитьУровень(Т,НачВыс,Т.Height());
    EndIf;
  EndDo;
EndFunction

Function Печать(СпУстановки)
  ТабФорма:=СпУстановки.GetByName("Установки");
  Т:=СпУстановки.GetByName("Таблица");
  НачДата:=BegOfDay(глПолучитьУстановку(ТабФорма,"НачДата"));
  КонДата:=BegOfDay(глПолучитьУстановку(ТабФорма,"КонДата"));
  оУровни:=глПолучитьУстановку(ТабФорма,"оУровни");
  оЮЛ:=глПолучитьУстановку(ТабФорма,"оЮЛ");
  оМг:=глПолучитьУстановку(ТабФорма,"оМг");
  
  ФлЛок:=0;
  If Т=0 Then
    If not глПроверитьДатуВОтчетах(Param,Form.НачДата.Value,Form.КонДата.Value,-1) Then
      Exit;
    EndIf;
    Т:=Table.Create();
    НачДата:=BegOfDay(Form.НачДата.Value);
    КонДата:=BegOfDay(Form.КонДата.Value);
  Else  
    ФлЛок:=1;
    Т.Lock();
    Т.Clear();
  EndIf;  
  
  Try
    //Связанные кассовые документы для оптимизации
    НачДата2:=НачДата-7;
    КонДата2:=КонДата+7;
    ТЗ:="Period From НачДата2 To КонДата2;
    |зДок:=Storage.Касса.@LINK;
    |зЮЛ:=Storage.Касса.ЮрЛицо;
    |Condition(зЮЛ IN оЮЛ.Get(1));
    |Condition(зЮЛ NOT IN оЮЛ.Get(2));
    |зКлП:=Income(Сумма);
    |зКлР:=Expense(Сумма);
    |Group зДок;";
    З2:=Query.Create();
    ТабКасса:=З2.Execute(ТЗ,0);
    ТабКасса.AddColumn("ДокОснование");
    MassLoadObjects(ТабКасса,"зДок",,,1,"ДокОснование");
    ТабКасса.Select();
    While ТабКасса.Next() Do
      If _And(not IsEmpty(ТабКасса.зДок),глЕстьРеквизитДокумента("ДокОснование",ТабКасса.зДок.DBName())) Then
        ТабКасса.ДокОснование:=ТабКасса.зДок.ДокОснование;
      EndIf;
    EndDo;
    MassLoadObjects(ТабКасса,"ДокОснование",,,1);
    ТабКасса.Sort("ДокОснование");
    
    //Основной запрос
    ТЗ:="(зСтатус:=Doc.Реализация.@Status;Condition(зСтатус>1);зДень:=BegOfDay(Doc.Реализация.DocDate);Condition((зДень>=НачДата)And(зДень<=КонДата));
    |зДок:=Doc.Реализация;
    |зКО:=Doc.Реализация.КодОперации;
    |Condition(зКО=Enum.коРеализация.РеализацияРозничная);
    |зСм0:=Doc.Реализация.СуммаВзаиморасчетов;
    |зСм1:=SUM(зСм0);
    |зСм2:=SUM(Doc.Реализация.СуммаБезналичнойПродажи);
    |зСм3:=SUM(Doc.Реализация.СуммаСертификатов);
    |зЮЛ:=Doc.Реализация.ЮрЛицо;
    |Condition(зЮЛ IN оЮЛ.Get(1));
    |Condition(зЮЛ NOT IN оЮЛ.Get(2));
    |зМг:=Doc.Реализация.Магазин;
    |Condition(зМг IN оМг.Get(1));
    |Condition(зМг NOT IN оМг.Get(2));
    |Group зМг,зДень,зДок;) UNION ALL
    |(зСтатус:=Doc.ВозвратОтПокупателя.@Status;Condition(зСтатус>1);зДень:=BegOfDay(Doc.ВозвратОтПокупателя.DocDate);Condition((зДень>=НачДата)And(зДень<=КонДата));
    |зДок:=Doc.ВозвратОтПокупателя;
    |зКО:=Doc.ВозвратОтПокупателя.КодОперации;
    |Condition(зКО=Enum.коВозвратОтПокупателя.ВозвратРозничный);
    |зСм0:=Doc.ВозвратОтПокупателя.СуммаВзаиморасчетов;
    |зСм1:=SUM(-зСм0);
    |зСм2:=SUM(-Doc.ВозвратОтПокупателя.СуммаБезналичногоВозврата);
    |зСм3:=SUM(-Doc.ВозвратОтПокупателя.СуммаСертификатов);
    |зЮЛ:=Doc.ВозвратОтПокупателя.ЮрЛицо;
    |Condition(зЮЛ IN оЮЛ.Get(1));
    |Condition(зЮЛ NOT IN оЮЛ.Get(2));
    |зМг:=Doc.ВозвратОтПокупателя.Магазин;
    |Condition(зМг IN оМг.Get(1));
    |Condition(зМг NOT IN оМг.Get(2));
    |Group зМг,зДень,зДок;)";

    З:=Query.Create();
    З.Execute(ТЗ);
    //aTab:=З.Execute(ТЗ,0);
    //aTab.Select();
    //While aTab.Next() Do
    //  зДок:=aTab.зДок;
    //  If not IsEmpty(зДок) Then
    //    If ТабКасса.FindAndGoto(зДок,,"ДокОснование",1) Then
    //      aTab.зСм2:=ТабКасса.зКлП-ТабКасса.зКлР;
    //    EndIf;
    //  EndIf;
    //EndDo;
    //З.Postprocess();
    
    оЗагол:="Отчет по розничным продажам (сверка кассовой выручки)";
    оСвойства:=глСвойстваПечатиСложные(ТабФорма,НачДата,КонДата,"оЮЛ,оМг");
    
    Сп:=СпУстановки;
    Т.CopyByX("v1",1);
    Т.Options.FixedLine:=Т.Height();
    
    спГруппы:=List.Create("зМг","зДень","зДок");
    Группировка(З,ТабФорма,Т,1,1,спГруппы,ТабКасса);
    
    пСм0:=глФРМ(З.Compute("зСм1"));
    пСм1:=глФРМ(З.Compute("зСм1")-З.Compute("зСм2")-З.Compute("зСм3"));
    пСм2:=глФРМ(З.Compute("зСм2"));
    пСм3:=глФРМ(З.Compute("зСм3"));
    Т.CopyByX("v3",1);
    
    If оУровни=1 Then
      Т.Levels().Close();
    EndIf;
    глПечатнаяФормаОтчета(Т,Param,оЗагол);
  Finally
    If ФлЛок Then
      Т.Unlock();
      Т.EditorMode:=1;
    EndIf;
  EndTry;    
  If not ФлЛок then 
    глЭтоБыстрыйВызовОтчета(Param,1);
  endif;  
EndFunction
  

Function OnDoubleClick(Таб)
  result:=not глРаботаСОсобымиИконкамиТаблицы(Таб);
EndFunction



Function OnExecute(СпУстановки)
  Печать(СпУстановки);
EndFunction

