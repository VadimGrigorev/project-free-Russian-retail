//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

//Функции:
//DriverInit, DriverDeinit, DriverConnect, DriverDisconnect, DocumentsList, LoadDocument
//спНастройки["ДрайверШифрования"] -- указание на драйвер шифрования, должен присутствовать для корректности работы
//спНастройки["Библиотека"] -- путь к библиотекам OpenSSL

//https://sbis.ru/help/integration/api/all_methods/format

Function ВыполнитьОбменССервером(Ссылка,ByRef Стр,спНастройки,ФлОсобый=0,СтрДанные="application/json")
  If pos("//",Ссылка)>0 Then
    TearStr(Ссылка,"//");
  EndIf;  
  Сервер:=IPConnection.HTTPPunycodeEncode(TearStr(Ссылка,"/"));
  If Pos(":",Сервер)=0 Then
    Сервер:=Сервер+":443";
  EndIf;
  Try
    aTCP:=0;
    For i:=1 To 5 Do
      Прокси:=Trim(спНастройки["Прокси"]);
      If Прокси<>"" Then
        //<ProxyType>@<ProxyIP>@<User>@<Password>
        aTCP:=IPConnection.Create();
        ПроксиТип:=TearStr(Прокси,"@");
        ПроксиАдр:=TearStr(Прокси,"@");
        ПроксиПольз:=TearStr(Прокси,"@");
        aTCP.UseProxy(ПроксиАдр,ПроксиТип,ПроксиПольз,Прокси);
        aTCP.Connect(Сервер);
      Else
        aTCP:=IPConnection.Connect(Сервер);
      EndIf;
      if not aTCP.IsConnected Then
        If i=5 Then
          Стр:="Невозможно соединиться с сервером "+Сервер+"!";
          Exit 0;
        EndIf;
        Continue;
      EndIf;
      
      Try
        aTCP.InitEncryption("OpenSSL",спНастройки["Библиотека"]);
        Break;
      Except
        If i=5 Then
          Стр:="Ошибка инициализации SSL: "+PopError();
          Exit 0;
        EndIf;
        Continue;
      EndTry;
    EndDo;

    If Стр<>"" Then
      aTCP.HTTPSetOperation("POST /"+Ссылка+" HTTP/1.1");
    Else
      aTCP.HTTPSetOperation("GET /"+Ссылка+" HTTP/1.1");
    EndIf;
    aTCP.HTTPSetHeaderField("Host",Сервер);
    aTCP.HTTPSetHeaderField("Accept",СтрДанные);
    aTCP.HTTPSetHeaderField("Connection","Close");
    If not ФлОсобый Then
      aTCP.HTTPSetHeaderField("X-SBISSessionID",спНастройки["КлючСессии"]);
    EndIf;
    
    If Стр<>"" Then
      Стр:=UnicodeToUTF8(Стр);
      aTCP.HTTPSetHeaderField("Content-Type","application/json-rpc;charset=utf-8");
      aTCP.HTTPSetHeaderField("Content-Length",Length(Стр));
      aTCP.HTTPSetBody(Стр);
    EndIf;
    If aTCP.HTTPSendAndReceive Then
      aTCP.HTTPDecodeChunked();
      Стр:=aTCP.HTTPHeaderAndBodyAsString;
    Else
      Стр:="Ошибка при отправке пакета!";
      Exit 0;
    EndIf;
    If СтрДанные="application/json" Then
      Стр:=UTF8ToUnicode(Стр);
    EndIf;
    Стр1:=aTCP.HTTPGetOperation();
    TearStr(Стр1," ");
    Стр1:=TearStr(Стр1," ");
    If Стр1<>"200" Then
      Стр:="Ошибка сервера!"+_NEWLINE+Стр;
      Exit 0;
    EndIf;
  Except
    Стр:="Ошибка: "+PopError();
    Exit 0;
  EndTry;  
  Exit 1;
EndFunction

Function РасшифроватьОшибку(Стр)
  If Pos(_NEWLINE+_NEWLINE,Стр)>0 Then
    Стр2:=Стр;
    TearStr(Стр2,_NEWLINE+_NEWLINE);
    If pos("""error"":",Стр2)>0 Then
      TearStr(Стр2,"""error"":");
      TearStr(Стр2,"""message"":");
      Стр2:=TearStr(Стр2,""",");//Немного неверно ("\), но это не так важно
      Exit Стр2;
    EndIf;
  EndIf;
  Exit Стр;
EndFunction

Function ОбновитьСессию(спНастройки,ФлФорсировать=1)
  If _And(not ФлФорсировать,not IsEmpty(спНастройки["КлючСессии"])) Then
    Exit;
  EndIf;
  Стр:="{""jsonrpc"":""2.0"",""method"":""СБИС.Аутентифицировать"",""params"":{""Параметр"":{""Логин"":"""+спНастройки["ЭДОLogin"]+""","+
    """Пароль"":"""+спНастройки["ЭДОPassword"]+""""+?(спНастройки["ЭДОAccountNumber"]<>"",",""НомерАккаунта"":"""+спНастройки["ЭДОAccountNumber"]+"""")+"}},""id"":0}";
  If not ВыполнитьОбменССервером("https://online.sbis.ru/auth/service/",Стр,спНастройки,1) Then
    Стр:=РасшифроватьОшибку(Стр);
    Raise Стр;
  EndIf;
  TearStr(Стр,_NEWLINE+_NEWLINE);
  //Успех:
  //{"jsonrpc":"2.0","result":"0048a9f1-01388b14-0bba-ea916c191880ad9b","id":0}
  //
  //Ошибка:
  //{"jsonrpc": "2.0","error": {"code": -32000,"message": "Проверьте правильность ввода логина и пароля!","details": "Проверьте правильность ввода логина и пароля!",
  //  "data": {"classid": "{afd28339-dc44-4ad9-96dc-55a9789c743a}","addinfo": null}},"id": 0}  
  If pos("""error"":",Стр)>0 Then
    TearStr(Стр,"""error"":");
    TearStr(Стр,"""message"":");
    Стр:=TearStr(Стр,""",");//Немного неверно ("\), но это не так важно
    Raise "Невозможно установить соединение: "+Стр;
  EndIf;
  TearStr(Стр,"""result"":");
  TearStr(Стр,"""");
  Стр:=TearStr(Стр,"""");
  If Стр="" Then
    Raise "Невозможно установить соединение: пустой ключ сессии или неизвестный ответ сервера!";
  EndIf;
  спНастройки["ВремяСессии"]:=Date();
  спНастройки["КлючСессии"]:=Стр;
EndFunction


Function DriverInit(спНастройки)
EndFunction

Function DriverDeinit(спНастройки)
EndFunction

Function DriverConnect(спНастройки)
  Try
    СтрДоп:=спНастройки["ДопУстановки"];
    Ини:=Ini.Create();
    Ини.AddFromString(СтрДоп);
    спНастройки["ЭДОСпособАутентификации"]:=Uppercase(Ини.GetData("Connection","Password"))="CERTIFICATE";
    If спНастройки["ЭДОСпособАутентификации"]=1 Then
      Raise "Способ аутентификации с помощью сертификата пока не поддерживается!";
    EndIf;
    спНастройки["ЭДОLogin"]:=Ини.GetData("Login","");
    спНастройки["ЭДОPassword"]:=Ини.GetData("Password","");
    спНастройки["ЭДОAccountNumber"]:=Ини.GetData("AccountNumber","");
    спНастройки["Прокси"]:=Ини.GetData("Прокси","");
  
    ОбновитьСессию(спНастройки);
  Except
    Exit "Невозможно установить соединение с сервером СБИС: "+PopError();
  EndTry;
EndFunction

Function DriverDisconnect(спНастройки)
  Try
    If not IsEmpty(спНастройки["КлючСессии"]) Then
      Стр:="{""jsonrpc"":""2.0"",""method"":""СБИС.Выход"",""params"":{},""id"":0}";
      If not ВыполнитьОбменССервером("https://online.sbis.ru/auth/service/",Стр,спНастройки) Then
        Стр:=РасшифроватьОшибку(Стр);
        Result:=Стр;
      EndIf;
    EndIf;
  Except
  EndTry;
  спНастройки["ВремяСессии"]:=0;
  спНастройки["КлючСессии"]:=0;
EndFunction

//Параметры (любой можно опустить): СД_НачДата,СД_КонДата,СД_МаксимумСтрокВОтвете ("-1" --все, 0 -- по-умолчанию),СД_ТипДокумента,СД_СостояниеДокумента,СД_НомерДокумента,СД_СписокКонтрагентов
//Типы документов: 0 -- Все доступные
//                 1 -- Поступление (или сч. факт. вх.)      ДокОтгрВх,ФактураВх
//                 2 -- Реализация (или сч. факт. исх.)      ДокОтгрИсх,ФактураИсх
//                 3 -- Заказ или счет                       ЗаказИсх,ЗаказВх,СчетИсх,СчетВх
//                 4 -- Возврат поставщику                   ReturnOut
//                 5 -- Возврат от покупателя                ReturnIn
//                 "???" -- Неизвестный                     (только исходящий)
//Состояния документов: 0 -- Все доступные
//                      1 -- Необработан (не отправлен)
//                      2 -- Ожидает ответа удаленной стороны
//                      3 -- Ожидает нашего ответа
//                      4 -- Подтвежденные (закрытые)
//                      5 -- Отклоненные, удаленные (закрытые)
//                      6 -- С ошибками
//                      7 -- Неизвестное
//Результат (Список списков): Идентификатор,Тип,Статус,Сумма,Комментарий,ПродавецИмя,ПродавецИНН,ПродавецКПП,ПродавецАдрес,ПродавецGLN,ДокНомер,ДокДата,СчФакНомер,СчФакДата,ТСтроки
//  ТСтроки (могут быть опущены): "Наименование,Артикул,Штрихкод,ОКЕИ,Количество,Цена,Сумма,СтавкаНДС,спМаркиУпаковок,спМаркиЕдиниц,ФлМаркиГотовы"
Function DocumentsList(спНастройки)
  Try
    ОбновитьСессию(спНастройки,0);
    СД_НачДата:=?(IsEmpty(спНастройки["СД_НачДата"]),BegOfDay(Date()),спНастройки["СД_НачДата"]);
    СД_КонДата:=спНастройки["СД_КонДата"];
    СД_МаксимумСтрокВОтвете:=Number(спНастройки["СД_МаксимумСтрокВОтвете"]);
    If СД_МаксимумСтрокВОтвете=0 Then
      СД_МаксимумСтрокВОтвете:=250;
    EndIf;
    
    СД_ТипДокумента:=Number(спНастройки["СД_ТипДокумента"]);
    If СД_ТипДокумента=0 Then//Не поддерживается СБИСом
      СД_ТипДокумента:=1;
    EndIf;
    СпТипы:=List.Create("ДокОтгрВх","ДокОтгрИсх","ЗаказИсх","ReturnOut","ReturnIn");
    СпТипыКод:=List.Create();
    СпТипыКод["ДокОтгрИсх"]:=2;
    СпТипыКод["ДокОтгрВх"]:=1;
    СпТипыКод["ЗаказВх"]:=3;
    СпТипыКод["СчетВх"]:=3;
    СпТипыКод["ReturnIn"]:=5;
    СпТипыКод["ReturnOut"]:=4;
    СпТипыКод["УпдСчфДоп"]:=1;
    СпТипыКод["УпдСчфДопПокуп"]:=2;
    
    СД_СостояниеДокумента:=Number(спНастройки["СД_СостояниеДокумента"]);
    СпСостояния:=List.Create("Неотправленные","Не получен ответ","Требующие ответа","Утвержденные","Отклоненные","С ошибками");
    СпСостоянияКод:=List.Create();
    СпСостоянияКод["0"]:=7;
    СпСостоянияКод["1"]:=1;
    СпСостоянияКод["7"]:=4;
    СпСостоянияКод["9"]:=6;
    СпСостоянияКод["10"]:=3;
    СпСостоянияКод["19"]:=5;
    СпСостоянияКод["20"]:=5;
    СпСостоянияКод["22"]:=5;
    СпСостоянияКод["23"]:=2;
    СпСостоянияКод["27"]:=2;
    
    //TODO: СД_НомерДокумента
    
    СД_СписокКонтрагентов:=спНастройки["СД_СписокКонтрагентов"];
    СтрКонтрагенты:="";
    If TypeStr(СД_СписокКонтрагентов)="LIST" Then
      СтрКонтрагенты:=",""Контрагент"":{";
      For i:=1 TO СД_СписокКонтрагентов.Size() Do
        зК:=СД_СписокКонтрагентов[i];
        пИНН:=зК.ИНН;
        пИНН:=TearStr(пИНН,"/");
        If Length(пИНН)=9 Then
          СтрКонтрагенты:=СтрКонтрагенты+"""СвЮЛ"":{""ИНН"":"""+пИНН+"""}"+?(i<СД_СписокКонтрагентов.Size(),",");
        Else
          СтрКонтрагенты:=СтрКонтрагенты+"""СвФЛ"":{""ИНН"":"""+пИНН+"""}"+?(i<СД_СписокКонтрагентов.Size(),",");
        EndIf;
      EndDo;
      СтрКонтрагенты:=СтрКонтрагенты+"}";
    EndIf;
    пФильтр:="""ДатаС"":"""+FormatDate(СД_НачДата,"dd.mm.YYYY")+""""+
      ?(not IsEmpty(СД_КонДата),",""ДатаПо"":"""+FormatDate(СД_КонДата,"dd.mm.YYYY")+"""")+
      ",""Тип"":"""+СпТипы[СД_ТипДокумента]+""""+
      ?(СД_СостояниеДокумента>0,",""Состояние"":"""+СпСостояния["СД_СостояниеДокумента"]+"""")+СтрКонтрагенты+
      ",""Навигация"":{""РазмерСтраницы"":"+?(СД_МаксимумСтрокВОтвете<=0,200,Min(СД_МаксимумСтрокВОтвете,200))+",""Страница"":$$$$}";
    Стр0:="{""jsonrpc"":""2.0"",""method"":""СБИС.СписокДокументов"",""params"":{""Фильтр"":{"+пФильтр+"}},""id"":0}";
    СпДокументы:=List.Create();
    спНастройки["Документы"]:=СпДокументы;
    iPage:=0;
    While 1 Do
      Стр:=Replace(Стр0,"$$$$",iPage);
      iPage:=iPage+1;
      If not ВыполнитьОбменССервером("https://online.sbis.ru/service/?srv=1",Стр,спНастройки) Then
        Стр:=РасшифроватьОшибку(Стр);
        Exit Стр;
      EndIf;
      Стр0:=Стр;
      If Pos("""Документ"":",Стр)>0 Then
        TearStr(Стр,"""Документ"":");
        TearStr(Стр,"[");
        Стр:=Trim(Стр);
        iNum:=0;
        While _And(Стр<>"",Стр[1]="{") Do
          //{"Вложение":[{"ВерсияФормата":"5.01","Дата":"xx.xx.xxxx","Зашифрован":"Нет","Идентификатор":"???","КоличествоОшибок":"0",
          //  "Название":"Счет-фактура и передаточный документ xx.xx.xx № xxxx/xxxx на сумму 784.14 р., в т.ч. НДС 130.69 р.","Направление":"Входящий","Номер":"xxxxx/xxxx",
          //  "ПодверсияФормата":"","Подтип":"1115131","Редакция":{"ДатаВремя":"xx.xx.xxxx xx.xx.xx","Номер":"1"},"Служебный":"Нет","СсылкаВКабинет":"https://online.sbis.ru/...",
          //  "СсылкаНаHTML":"https://online.sbis.ru/...","СсылкаНаPDF":"https://online.sbis.ru/...",
          //  "Сумма":"784.14","СуммаБезНДС":"653.45",
          //  "Тип":"УпдСчфДоп","ТипШифрования":"Отсутствует","Удален":"Нет","Упакован":"Нет","Файл":{
          //    "Имя":"ON_NSCHFDOPPRMARK_..._....XML",
          //    "Ссылка":"https://disk.sbis.ru/disk/api/...","Хеш":""}}],
          //"Дата":"xx.xx.xxxx","ДатаВремяСоздания":"xx.xx.xxxx xx.xx.xx","Идентификатор":"???","ИдентификаторСеанса":"???",
          //"Контрагент":{"Email":"","ИдентификаторИС":"","ИдентификаторСПП":"xxxxx","Описание":"","СвЮЛ":{"АдресЮридический":"...","ИНН":"...","КПП":"...","КодСтраны":"643","Название":"..."},"Телефон":""},
          //"Название":"Поступление № xxxxx/xxxx от xx.xx.xxxx на сумму 784.14","Направление":"Входящий",
          //"НашаОрганизация":{"ИдентификаторИС":"","ИдентификаторСПП":"xxxxx","ПодписаниеОграничено":"Нет","СвЮЛ":{"АдресЮридический":"...","ИНН":"...","КПП":"...","КодСтраны":"643","Название":"..."}},
          //"Номер":"xxxxx/xxx","Ответственный":{"Идентификатор":"Ф.. И.. О..","Имя":"...","Отчество":"...","Фамилия":"..."},"Подтип":"","Примечание":"",
          //"Расширение":{"ЗакрытОтИзменений":"Нет","ОтметкаПлюсом":"Нет"},"Регламент":{"Идентификатор":"???","Название":"Электронно"},"Редакция":[{"Актуален":"Да","ДатаВремя":"xx.xx.xxxx xx.xx.xx","Идентификатор":"???","ПримечаниеИС":""}],
          //"Состояние":{"Код":"7","Название":"Выполнение завершено успешно","НеполнаяОбработка":"Нет","Описание":"","Примечание":"","Сложное":"Нет"},
          //"Срок":"","СсылкаДляКонтрагент":"https://online.sbis.ru/...","СсылкаДляНашаОрганизация":"https://online.sbis.ru/...",
          //"СсылкаНаPDF":"https://online.sbis.ru/...","СсылкаНаАрхив":"https://online.sbis.ru/...",
          //"Сумма":"784.14","Тип":"ДокОтгрВх","Удален":"Нет"},...
          Стр:=Mid(Стр,2);//{
          Tr:=глЗагрузитьДеревоJSON(Стр,"}");
          Tr0:=Tr;
          //Сч.ф?
          Tr2:=Tr.FindByName("Вложение");
          If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
            //Ищем вложение УпдСчфДоп или УпдСчфДопПокуп
            For i:=1 To Tr2.Size() Do
              Tr3:=Tr2.ByIndex(i);
              If _Or(Tr3["Тип"]="УпдСчфДоп",Tr3["Тип"]="УпдСчфДопПокуп") Then
                Tr:=Tr3;
                Break;
              EndIf;
              Tr3:=0;
            EndDo;
          EndIf;
          СпДокумент:=List.Create();
          //пДата:=Tr0["ДатаВремяСоздания"];//ДокДата: xx.xx.xxxx xx.xx.xx
          //If IsEmpty(пДата) Then
          пДата:=Date(Tr0["Дата"]);//ДокДата: xx.xx.xxxx
          СпДокументы.Add(СпДокумент,FormatDate(пДата,"YYYYmmdd"));
          //Else
          //  пДата:=Date(Left(пДата,11)+Mid(пДата,12,2)+":"+Mid(пДата,15,2)+":"+Mid(пДата,18,2));
          //EndIf;
          СпДокумент["ДокДата"]:=пДата;
          СпДокумент["ДокНомер"]:=Tr0["Номер"];//ДокНомер
          СпДокумент["СчФакДата"]:=Date(Tr["Дата"]);//ДокДата: xx.xx.xxxx
          СпДокумент["СчФакНомер"]:=Tr["Номер"];//СчФакНомер
          //ТипДокумента
          //КНД:=Tr["Подтип"];
          пТип:=Number(СпТипыКод[Tr["Тип"]]);
          If IsEmpty(пТип) Then
            пТип:=Tr["Тип"];
          EndIf;
          СпДокумент["Тип"]:=пТип;
          СпДокумент["Сумма"]:=Number(Tr["Сумма"]);//Сумма
          //Tr0["Идентификатор"];//Идентификатор, с пом. которого можно загрузить более подробную информацию о документе
          СпДокумент["Идентификатор"]:=Tr["Файл","Ссылка"];//Ссылка на ON_NSCHF....xml
          //Статус
          ФлУдален:=Tr["Удален"]="Да";//СтатусДокумента
          аКод:=Str(Tr0["Состояние","Код"]);
          аКод:=СпСостоянияКод[аКод];
          If IsEmpty(аКод) Then
            аКод:=СпСостоянияКод["0"];
          EndIf;
          If ФлУдален Then
            аКод:=5;
          EndIf;
          СпДокумент["Статус"]:=аКод;
          СпДокумент["Комментарий"]:=Tr["Примечание"];
          //Контрагент
          Tr2:=Tr0["Контрагент","СвЮЛ"];
          If IsEmpty(Tr2) Then
            Tr2:=Tr0["Контрагент","СвФЛ"];
          EndIf;
          If TypeStr(Tr2)="TREE.BRANCH" Then
            СпДокумент["ПродавецИмя"]:=Tr2["Название"];
            СпДокумент["ПродавецИНН"]:=Tr2["ИНН"];
            СпДокумент["ПродавецКПП"]:=Tr2["КПП"];
            СпДокумент["ПродавецАдрес"]:=Tr2["АдресЮридический"];
            If IsEmpty(СпДокумент["ПродавецАдрес"]) Then
              СпДокумент["ПродавецАдрес"]:=Tr2["АдресФактический"];
            EndIf;
          EndIf;
          iNum:=iNum+1;
          If iNum=СД_МаксимумСтрокВОтвете Then
            Exit;
          EndIf;
            
          Стр:=Trim(Стр);
          If _Or(Стр="",Стр[1]<>",") Then
            Break;
          EndIf;
          //Удалить запятую
          Стр:=Trim(Mid(Стр,2));
        EndDo;
      EndIf;//Блок "Документ"
      
      //Стр: ,"Навигация":{"ЕстьЕще":"Нет","РазмерСтраницы":"200","Страница":"0"}},"id":0}
      If Pos("""Навигация"":",Стр)=0 Then
        Break;
      EndIf;
      TearStr(Стр,"""Навигация"":");
      If Pos("""ЕстьЕще"":",Стр)=0 Then
        Break;
      EndIf;
      TearStr(Стр,"""ЕстьЕще"":");
      TearStr(Стр,"""");
      Стр:=TearStr(Стр,"""");
      If Стр="Да" Then
        Continue;
      EndIf;
      Break;
    EndDo;
    СпДокументы.SortByNames();
  Except
    Exit "Ошибка выполнения команды: "+PopError();
  EndTry;
EndFunction


//спНастройки["СпДокумент"] -- Ссылка на неполное содержимое документа
//          "Идентификатор" -- Ссылка, созданная функцией DocumentsList, может содержать сложный объект (тип списка), если необходимо
//          "Содержимое" -- Файл результата (УПД) для загрузке во внешней обработке
Function LoadDocument(спНастройки)
  Try
    СпДокумент:=спНастройки["СпДокумент"];
    СпДокумент["Содержимое"]:="";
    ОбновитьСессию(спНастройки,0);
    
    //Прочитать полные свойства документа по идентификатору
    //Стр:="{""jsonrpc"":""2.0"",""method"":""СБИС.ПрочитатьДокумент"",""params"":{""Документ"":{""Идентификатор"":"""+EncodeString(СпДокумент["Идентификатор"],"JSON")+""",""ДопПоля"":""ДополнительныеПоля""}},""id"":0}";
    //If not ВыполнитьОбменССервером("https://online.sbis.ru/service/?srv=1",Стр,спНастройки) Then
    //  Стр:=РасшифроватьОшибку(Стр);
    //  Exit Стр;
    //EndIf;
    //https://disk.sbis.ru/disk/api/v1/...?object=simple_file_sd&uuid=...&expire_date=xxxx-xx-xxTxx:xx:xxZ&diskhmac=....
    Ссылка:=СпДокумент["Идентификатор"];
    Стр:="";//GET
    If not ВыполнитьОбменССервером(Ссылка,Стр,спНастройки,0,"application/xml") Then
      Стр:=РасшифроватьОшибку(Стр);
      Exit Стр;
    EndIf;
    TearStr(Стр,_NEWLINE+_NEWLINE);
    If StringTypeStr(Стр)="ANSI" Then
      If _Or(pos("""utf-16",Стр)>0,pos("""UTF-16",Стр)>0) Then
        Стр:=TranslateFrom(Стр,1200);
      ElseIf _Or(pos("""utf-8",Стр)>0,pos(ANSI(Chr($3C,1)+Chr($D0,1)+Chr($A4,1)+Chr($D0,1)+Chr($B0,1)+Chr($D0,1)+Chr($B9,1)+Chr($D0,1)+Chr($BB,1)),Стр)>0) Then
        Стр:=TranslateFrom(Стр,65001);
      ElseIf _Or(pos("""windows-1251",Стр)>0,pos("""Windows-1251",Стр)>0) Then
        Стр:=TranslateFrom(Стр,1251);
      EndIf;
    EndIf;
    СпДокумент["Содержимое"]:=Стр;
  Except
    Exit "Ошибка выполнения команды: "+PopError();
  EndTry;
EndFunction