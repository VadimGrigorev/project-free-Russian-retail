//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

//Функции:
//DriverInit, DriverDeinit, DriverConnect, DriverDisconnect, AcceptKeystroke, ResetKeystrokeBuffer

Function DriverInit(спНастройки)
  Function _РасшифроватьСтроку(Стр)
    Стр2:="";
    i:=1;
    While i<=Length(Стр) Do
      if _And(Стр[i]="#",i<Length(Стр)) Then
        If Стр[i+1]="#" Then
          Стр2:=Стр2+"#";
          i:=i+1;
        Else
          //#<Number>#
          j:=i+1;
          While j<=Length(Стр) Do
            If Стр[j]="#" Then
              Break;
            EndIf;
            j:=j+1;
          EndDo;
          Стр2:=Стр2+Chr(Mid(Стр,i+1,j-i-1));
          i:=j;
        EndIf;
      Else
        Стр2:=Стр2+Стр[i];
      EndIf;
      i:=i+1;
    EndDo;
    Exit Стр2;
  EndFunction
  
  спНастройки["СканерКлавиатура"]:=1;
  СтрДоп:=спНастройки["ДопУстановки"];
  Ини:=Ini.Create();
  Ини.AddFromString(СтрДоп);
  спНастройки["СканерПрефикс"]:=_РасшифроватьСтроку(Ини.GetData("Префикс",""));
  спНастройки["СканерСуффикс"]:=_РасшифроватьСтроку(Ини.GetData("Суффикс",""));
  спНастройки["СканерВремя"]:=Number(Ини.GetData("ВремяСканирования","125"));
  Стр:=Ини.GetData("ТаблицаПерекодирования","");
  Таб:=Tab.Create("Комбинация,Результат");
  While Стр<>"" Do
    //<b64>:<b64>,...
    Стр2:=TearStr(Стр,",");
    Стр3:=TearStr(Стр2,":");
    If Стр3<>"" Then
      Таб.AddLine("Комбинация,Результат",_РасшифроватьСтроку(DecodeString(Стр3,"Base64",1)),_РасшифроватьСтроку(DecodeString(Стр2,"Base64",1)));
    EndIf;
  EndDo;
  спНастройки["ТаблицаПерекодирования"]:=Таб;
EndFunction

Function DriverDeinit(спНастройки)
EndFunction

Function DriverConnect(спНастройки)
  спНастройки["НакопленноеСообщение"]:="";
  спНастройки["ВремяПредыдущегоНажатия"]:=0;
EndFunction

Function DriverDisconnect(спНастройки)
EndFunction

Function ResetKeystrokeBuffer(спНастройки)
  спНастройки["НакопленноеСообщение"]:="";
  спНастройки["ВремяПредыдущегоНажатия"]:=0;
EndFunction

//Работа с такими сканерами происходит сл. образом:
//Форма имеет накопленную буферную строку нажатий и список сканеров с индексами начала получения данных этой строки.
//В обработчике OnTimer (настроенном на удвоенное наименьшее время таймаута сканеров, но не меньше 10 мс.), форма находит таймауты сканеров и передает их сканерам в AcceptKeystroke, далее см. ниже
//В обработчике OnKeyPress форма передает нажатия всем сканерам с помощью AcceptKeystroke,
//  как только появляется нажатие, которое принимается любым из сканеров, форма начинает копить буферную строку нажатий
//  * Если в буферной строке появляется начальная подстрока, которая не принимается ни одним из сканеров, форма передает ее элементам с помощью SysEmulateKeystroke, изменяет все индексы сканеров
//  * Если один из сканеров принимает нажатие как полное сообщение, форма передает SysEmulateKeystroke, начало строки, не вошедшее в принятое сообщение, применяет само сообщение, как сообщение сканера,
//        всем сканерам, имевшим конфликтующее положение из принятых строк, вызывается ResetKeystrokeBuffer, для остальных изменяются индексы сканеров
//Результаты функции:
//0 -- Нажатие не принято, оно может быть передано на форму
//1 -- Нажатие принято, сообщение не полное
//2 -- Нажатие принято, получение сообщения закончено, сообщение находится в спНастройки["Сообщение"]
//спНастройки["ВиртуальныйКод"] -- входящий виртуальный код, 0 -- нажатия не было, вызов по таймауту
//спНастройки["Символ"] -- входящий символ
Function AcceptKeystroke(спНастройки)
  СканерПрефикс:=спНастройки["СканерПрефикс"];
  СканерСуффикс:=спНастройки["СканерСуффикс"];
  Стр:=спНастройки["НакопленноеСообщение"];
  СтрСимвол:=спНастройки["Символ"];
  СтрКод:=Number(спНастройки["ВиртуальныйКод"]);
  
  //Обновление накопленного сообщения
  If СтрСимвол<>"" Then
    Стр:=Стр+СтрСимвол;
  ElseIf СтрКод>0 Then
    Стр:=Стр+Chr(СтрКод);
  Else
    //Таймаут -- отдать все полученное сообщение только если его длина больше 2 и нет суффикса
    спНастройки["НакопленноеСообщение"]:="";
    спНастройки["ВремяПредыдущегоНажатия"]:=0;
    If (_Or(СканерПрефикс="",Pos(СканерПрефикс,Стр)=1))And(СканерСуффикс="")And(Length(Стр)>2) Then
      спНастройки["Сообщение"]:=Mid(Стр,Length(СканерПрефикс)+1);
      Exit 2;
    EndIf;
    Exit 0;
  EndIf;

  //Проверка префикса
  If Length(Стр)<Length(СканерПрефикс) Then
    //Длинный префикс
    If Left(СканерПрефикс,Length(Стр))<>Стр Then
      спНастройки["НакопленноеСообщение"]:="";
      спНастройки["ВремяПредыдущегоНажатия"]:=0;
      Exit 0;
    EndIf;
  ElseIf _And(СканерПрефикс<>"",Pos(СканерПрефикс,Стр)<>1) Then
    спНастройки["НакопленноеСообщение"]:="";
    спНастройки["ВремяПредыдущегоНажатия"]:=0;
    Exit 0;
  EndIf;
  
  //Проверка суффикса
  If СканерСуффикс="" Then
    спНастройки["НакопленноеСообщение"]:=Стр;
    Exit 1;
  EndIf;
  If RightPos(СканерСуффикс,Стр)=Length(Стр)-Length(СканерСуффикс)+1 Then
    //Сообщение окончено
    спНастройки["НакопленноеСообщение"]:="";
    спНастройки["ВремяПредыдущегоНажатия"]:=0;
    Стр:=Mid(Стр,Length(СканерПрефикс)+1);
    спНастройки["Сообщение"]:=Left(Стр,Length(Стр)-Length(СканерСуффикс));
    If спНастройки["Сообщение"]="" Then
      Exit 0;
    Else
      Exit 2;
    EndIf;
  EndIf;
  спНастройки["НакопленноеСообщение"]:=Стр;
  Exit 1;
EndFunction;
