//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

//Функции:
//DriverInit, DriverDeinit, DriverConnect, DriverDisconnect, ShiftInfo, OpenShift, CloseShift, DepositMoney, WithdrawMoney, PrintReportX, PrintReportZ, PrintReceipt, PrintLastReceipt, 
//  DeviceInfo, PrintText, CashDrawerInfo, OpenCashDrawer

//Документация: https://www.incotexkkm.ru/files/kkm/docs/vt-inecrman-exchange.pdf (https://www.incotexkkm.ru/support/inecrman)

Function ОбновитьСессию(спНастройки) Forward;

Function ВыполнитьКоманду(спНастройки,ByRef Стр,ФлБезОбновленияСессии=0)
  For i:=1 to 3 Do
    aTCP:=IPConnection.Connect(спНастройки["АдресДрайвера"]);
    if aTCP.IsConnected Then
      Break;
    ElseIf i=3 Then
      Exit "Невозможно соединиться с сервером "+спНастройки["АдресДрайвера"]+"!";
    EndIf;
  EndDo;
  Try
    Стр0:=Стр;
    If спНастройки["Таймаут"]>100 Then
      aTCP.Timeout(спНастройки["Таймаут"],1);
    EndIf;
    Данные:=UnicodeToUTF8(Стр);
    аДлн:=Length(Данные);
    Данные:=Chr((аДлн shr 24)and $FF,1)+Chr((аДлн shr 16)and $FF,1)+Chr((аДлн shr 8)and $FF,1)+Chr(аДлн and $FF,1)+Данные;  
    If aTCP.SendStrRaw(Данные) Then
      Данные:=aTCP.ReceiveStrRaw(4);
      аДлн:=Asc(Данные[1]) shl 24+Asc(Данные[2]) shl 16+Asc(Данные[3]) shl 8+Asc(Данные[4]);
      If аДлн>104857600 Then //100M
        Exit "Ошибочная длина пакета: "+аДлн;
      EndIf;
      Стр:=UTF8ToUnicode(aTCP.ReceiveStrRaw(аДлн));
      
      //{"result":618,"description":"Неверный ключ сессии"}
      Стр2:=Стр;
      TearStr(Стр2,"""result""");
      TearStr(Стр2,":");
      If Pos(",",Стр2)>0 Then
        КодОшибки:=Number(TearStr(Стр2,","));
      Else
        КодОшибки:=Number(TearStr(Стр2,"}"));
      EndIf;
      
      СтрОшибки:="";
      If КодОшибки<>0 Then
        Стр2:=Стр;
        TearStr(Стр2,"""description""");
        TearStr(Стр2,":");
        TearStr(Стр2,"""");
        i:=1;
        While i<=Length(Стр2) Do
          If Стр2[i]="""" Then
            Break;
          ElseIf Стр2[i]="\" Then//\?
            i:=i+1;
            If i>Length(Стр2) Then
              Break;
            EndIf;
          EndIf;
          i:=i+1;        
        EndDo;
        СтрОшибки:=DecodeString(Left(Стр2,i-1),"JSON");
      EndIf;
      
      If КодОшибки<>0 Then
        //Сессия устарела, открываем ее заново
        If (КодОшибки=618)And(not ФлБезОбновленияСессии) Then
          СтрСтарыйКлюч:="{""sessionKey"":"""+спНастройки["Сессия"]+"""";
          If Pos(СтрСтарыйКлюч,Стр0)=1 Then
            Стр:=ОбновитьСессию(спНастройки);
            If Стр<>"" Then
              Exit "Подключение было разорвано: "+Стр;
            EndIf;
            СтрНовыйКлюч:="{""sessionKey"":"""+спНастройки["Сессия"]+"""";
            Стр:=СтрНовыйКлюч+Mid(Стр0,Length(СтрСтарыйКлюч)+1);
            Exit ВыполнитьКоманду(спНастройки,Стр,1);
          EndIf;        
        EndIf;
        Exit "("+КодОшибки+") "+СтрОшибки;
      EndIf;      
    Else
      Exit "Ошибка команды отсылки информации";
    EndIf;
  Except
    Exit PopError();
  EndTry;  
  Exit "";
EndFunction

Function ОбновитьСессию(спНастройки)
  Стр:=спНастройки["СтрСтрокаСессии"];
  СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр,1);
  If СтрОшибка<>"" Then
    Exit СтрОшибка;
  EndIf;
  //{"result":0,"description":"Описание ошибки","sessionKey":"CAC1A797-6A48-474A-A08E-72A8CD3AEFE2","protocolVer":"2.17"}
  Стр0:=Стр;
  TearStr(Стр,"""sessionKey""");
  TearStr(Стр,":");
  TearStr(Стр,"""");
  спНастройки["Сессия"]:=TearStr(Стр,"""");
  If IsEmpty(спНастройки["Сессия"]) Then
    Exit "Неизвестный ответ сервера на команду установки сессии (ККМ заблокирована или недоступна?): "+Left(Стр0,512);
  EndIf;
  Exit "";
EndFunction

Function DriverInit(спНастройки)
  Try
    СтрДоп:=спНастройки["ДопУстановки"];
    Ини:=Ini.Create();
    Ини.AddFromString(СтрДоп);
    спНастройки["_TaxType"]:=Number(Ини.GetData("TaxType","0"));
    спНастройки["NoPaperWhenUsingEmail"]:=Number(Ини.GetData("NoPaperWhenUsingEmail","0"));
    спНастройки["Соединено"]:=0;
    спНастройки["Сессия"]:="";    
  Except
    Exit PopError()+_NEWLINE+"(1) Драйвер не установлен или в нерабочем состоянии!";
  EndTry;
EndFunction

Function DriverDeinit(спНастройки)
EndFunction


Function DriverConnect(спНастройки)
  Try
    спНастройки["Соединено"]:=0;
    спНастройки["Сессия"]:="";
    СтрДоп:=спНастройки["ДопУстановки"];
    Ини:=Ini.Create();
    Ини.AddFromString(СтрДоп);
    СтрАдрес:=Ини.GetData("DriverAddress","127.0.0.1:50009");
    Стр:=Ини.GetData("Connection","COM3,115200");
    СтрПорт:=TearStr(Стр,",");
    СтрСкорость:=TearStr(Стр,",");
    СтрМодель:=Ини.GetData("Model","");
    СтрСерийныйНомер:=Ини.GetData("SerialNumber","");
    СтрСтрокаСессии:="{""sessionKey"":null,""command"":""OpenSession"",""portName"":"""+СтрПорт+""",""baudRate"":"+СтрСкорость+
      ?(СтрМодель<>"",",""model"":"""+СтрМодель+"""")+?(СтрСерийныйНомер<>"",",""serialNumber"":"""+СтрСерийныйНомер+"""")+"}";
    спНастройки["СтрСтрокаСессии"]:=СтрСтрокаСессии;
    спНастройки["АдресДрайвера"]:=СтрАдрес;
    спНастройки["Таймаут"]:=Number(Ини.GetData("Timeout","30000"));
    Стр:=ОбновитьСессию(спНастройки);
    If Стр<>"" Then
      Exit "Невозможно выполнить подключение: "+Стр;
    EndIf;
    //Получение общей информации
    ТекДата0:=Date();
    Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""GetCommonInfo""}";
    СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
    If СтрОшибка<>"" Then
      Exit "Ошибка получения информации: "+СтрОшибка;
    EndIf;
    аДерево:=LoadJSONFromString(Стр,0);
    спНастройки["НомерККТ0"]:=аДерево["kktNum"];
    спНастройки["ВерсияФФД"]:=аДерево["ffdTotalVer"];
    
    //Исправление текущей даты и времени в ККМ
    ТекДата:=аДерево["dateTime"];//2022-08-16T12:21:02
    ТекДата:=Date(Mid(ТекДата,9,2)+"."+Mid(ТекДата,6,2)+"."+Left(ТекДата,4)+" "+Mid(ТекДата,12,8));
    If not IsEmpty(ТекДата) Then
      If Abs(GetPeriod(ТекДата,ТекДата0,5))>30000 Then //Полминуты
        Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""SetDateTime"",""dateTime"":"""+FormatDate(Date(),"YYYY-mm-dd""T""hh:tt:ss")+"""}";//2021-04-20T09:15:43
        СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
        If СтрОшибка<>"" Then
          Box("Время в ККТ сильно отличается от времени компьютера (на "+Abs(GetPeriod(ТекДата,ТекДата0,5) div 1000)+" с.), однако изменить время не удалось, рекомендуется изменить время в ККМ вручную! "+
            "Ошибка установки времени в ККМ: "+СтрОшибка,Q_WARNING);
        EndIf;
      EndIf;
    EndIf;
    спШтрифты:=List.Create();
    аВетка:=аДерево["cpl"];
    If _And(TypeStr(аВетка)="TREE.BRANCH",аВетка.Size()>0) Then
      For i:=1 To аВетка.Size() Do
        спШтрифты.Add(аВетка[i]);
      EndDo;
    EndIf;
    спНастройки["спШтрифты"]:=спШтрифты;
    спНастройки["Соединено"]:=1;
  Except
    Exit PopError()+_NEWLINE+"(2) Невозможно открыть и настроить TCP-соединение!";
  EndTry;
EndFunction

Function DriverDisconnect(спНастройки)
  Try
    If спНастройки["Соединено"]=1 Then
      Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""CloseSession""}";
      ВыполнитьКоманду(спНастройки,Стр,1);
    EndIf;
  Except
    Exit PopError()+_NEWLINE+"(3) Невозможно закрыть сессию!";
  EndTry;
EndFunction

//Тип запроса в "ТипЗапросаИнформации", поддерживаются: МодельККТ, СерийныйНомерККТ, РегистрационныйНоменККТ, СерийныйНомерФН, ДатаОкончанияФН, ДатаПервогоНеотправленногоДокумента
//Ответ в "ОтветНаЗапросИнформации". Если запрос не удачный или не поддерживается, ответ -- пустая строка.
Function DeviceInfo(спНастройки)
  Try
    спНастройки["ОтветНаЗапросИнформации"]:="";
    If спНастройки["Соединено"]<>1 Then
      Exit;
    EndIf;
    СтрЗапрос:=спНастройки["ТипЗапросаИнформации"];
    
    If СтрЗапрос="МодельККТ" Then
      Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""GetCommonInfo""}";
      СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
      If СтрОшибка<>"" Then
        Exit "Ошибка получения информации: "+СтрОшибка;
      EndIf;
      аДерево:=LoadJSONFromString(Стр,0);
      спНастройки["ОтветНаЗапросИнформации"]:=аДерево["model"]+", прошивка "+аДерево["programVer"]+" от "+аДерево["programDate"];
    ElseIf СтрЗапрос="СерийныйНомерККТ" Then
      Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""GetCommonInfo""}";
      СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
      If СтрОшибка<>"" Then
        Exit "Ошибка получения информации: "+СтрОшибка;
      EndIf;
      аДерево:=LoadJSONFromString(Стр,0);
      спНастройки["ОтветНаЗапросИнформации"]:=аДерево["kktNum"];
    ElseIf СтрЗапрос="РегистрационныйНоменККТ" Then
      Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""GetRegistrationInfo""}";
      СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
      If СтрОшибка<>"" Then
        Exit "Ошибка получения информации: "+СтрОшибка;
      EndIf;
      аДерево:=LoadJSONFromString(Стр,0);
      спНастройки["ОтветНаЗапросИнформации"]:=аДерево["registrationInfo","kkt","regNum"];
    ElseIf СтрЗапрос="СерийныйНомерФН" Then
      Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""GetCommonInfo""}";
      СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
      If СтрОшибка<>"" Then
        Exit "Ошибка получения информации: "+СтрОшибка;
      EndIf;
      аДерево:=LoadJSONFromString(Стр,0);
      спНастройки["ОтветНаЗапросИнформации"]:=аДерево["fnNum"];
    ElseIf СтрЗапрос="ДатаОкончанияФН" Then
      //Не поддерживается
    ElseIf СтрЗапрос="ДатаПервогоНеотправленногоДокумента" Then
      Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""GetStatus""}";
      СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
      If СтрОшибка<>"" Then
        Exit "Ошибка получения информации: "+СтрОшибка;
      EndIf;
      аДерево:=LoadJSONFromString(Стр,0);
      Стр:=аДерево["fnInfo","unsignedDocs","firstDateTime"];
      спНастройки["ОтветНаЗапросИнформации"]:=Date(Mid(Стр,9,2)+"."+Mid(Стр,6,2)+"."+Left(Стр,4)+" "+Mid(Стр,12,8));
      спНастройки["ОтветНаЗапросИнформации"]:=?(IsEmpty(спНастройки["ОтветНаЗапросИнформации"]),"",спНастройки["ОтветНаЗапросИнформации"]);
    EndIf;
  Except
    Exit "Ошибка команды: "+PopError();
  EndTry;
EndFunction

Function CashDrawerInfo(спНастройки)
  Try
    If спНастройки["Соединено"]<>1 Then
      спНастройки["ДенежныйЯщикСостояние"]:=-1;
      спНастройки["ДенежныйЯщикСумма"]:=-1;
      Exit;
    EndIf;
    Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""GetStatus""}";
    СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
    If СтрОшибка<>"" Then
      Exit "Ошибка получения статуса: "+СтрОшибка;
    EndIf;
    аДерево:=LoadJSONFromString(Стр,0);
    спНастройки["ДенежныйЯщикСостояние"]:=0;//драйвер не предоставляет такой информации
    спНастройки["ДенежныйЯщикСумма"]:=Number(аДерево["shiftInfo","cash"]);
  Except
    Exit "Ошибка команды: "+PopError();
  EndTry;
EndFunction

Function OpenCashDrawer(спНастройки)
  Try
    Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""OpenBox""}";
    СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
    If СтрОшибка<>"" Then
      Exit "Ошибка открытия ящика: "+СтрОшибка;
    EndIf;
  Except
    Exit PopError()+_NEWLINE+"Неудачная попытка открытия денежного ящика!";
  EndTry;
EndFunction

Function ShiftInfo(спНастройки)
  Try
    If спНастройки["Соединено"]<>1 Then
      спНастройки["СменаСостояние"]:=-1;
      Exit;
    EndIf;
    //-1 -- ошибка, 0 -- закрыта, 1 -- открыта, 2 -- истекла, 3 -- другое
    Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""GetStatus""}";
    СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
    If СтрОшибка<>"" Then
      Exit "Ошибка получения статуса: "+СтрОшибка;
    EndIf;
    аДерево:=LoadJSONFromString(Стр,0);
    спНастройки["СменаСостояние"]:=Uppercase(аДерево["shiftInfo","isOpen"])="TRUE";
    If _And(спНастройки["СменаСостояние"]=1,Uppercase(аДерево["shiftInfo","is24Expired"])="TRUE") Then
      спНастройки["СменаСостояние"]:=2;
    EndIf;
    спНастройки["НомерСмены"]:=Number(аДерево["shiftInfo","num"]);
    
    If спНастройки["ДополнительнаяИнформация"]=1 Then
      спНастройки["ДополнительнаяИнформация"]:=0;
      спНастройки["НомерДокумента"]:=аДерево["checkInfo","num"];
      спНастройки["НомерККТ"]:=спНастройки["НомерККТ0"];
      спНастройки["БумагаЗаканчивается"]:=Uppercase(аДерево["paperPresence"])<>"TRUE"; 
      //fnInfo.status=1 -- фискальный режим
      спНастройки["ОбщаяПроблемаККМ"]:=Number(аДерево["fnInfo","status"]<>1);
    EndIf;
  Except
    Exit "Ошибка команды: "+PopError();
  EndTry;
EndFunction

Function OpenShift(спНастройки)
  Try
    Кассир:=спНастройки["Кассир"];
    пИНН:=Кассир.ИНН;
    пИНН:=TearStr(пИНН,"/");
    
    Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""OpenShift"",""cashierInfo"":{""cashierName"":"""+EncodeString(Кассир.ПолнНаименование,"JSON")
      +""",""cashierINN"":"""+EncodeString(пИНН,"JSON")+"""}}";
    СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
    If СтрОшибка<>"" Then
      Exit "Ошибка открытия смены: "+СтрОшибка;
    EndIf;
  Except
    Exit PopError()+_NEWLINE+"Неудачная попытка открыть смену!";
  EndTry;
EndFunction

Function CloseShift(спНастройки)
  Try
    Кассир:=спНастройки["Кассир"];
    пИНН:=Кассир.ИНН;
    пИНН:=TearStr(пИНН,"/");
    
    Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""CloseShift"",""cashierInfo"":{""cashierName"":"""+EncodeString(Кассир.ПолнНаименование,"JSON")
      +""",""cashierINN"":"""+EncodeString(пИНН,"JSON")+"""}}";
    СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
    If СтрОшибка<>"" Then
      Exit "Ошибка закрытия смены: "+СтрОшибка;
    EndIf;
  Except
    Exit PopError()+_NEWLINE+"Неудачная попытка закрыть смену!";
  EndTry;
EndFunction

Function DepositMoney(спНастройки)
  Try
    Кассир:=спНастройки["Кассир"];
    пИНН:=Кассир.ИНН;
    пИНН:=TearStr(пИНН,"/");
    Сумма100:=Number(спНастройки["Сумма"])*100;
    
    Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""BringMoney"",""cash"":"+Сумма100+",""cashierInfo"":{""cashierName"":"""+EncodeString(Кассир.ПолнНаименование,"JSON")
      +""",""cashierINN"":"""+EncodeString(пИНН,"JSON")+"""}}";
    СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
    If СтрОшибка<>"" Then
      Exit "Ошибка внесения суммы: "+СтрОшибка;
    EndIf;
  Except
    Exit PopError()+_NEWLINE+"Неудачная выгрузки внесения наличных!";
  EndTry;
EndFunction

Function WithdrawMoney(спНастройки)
  Try
    Кассир:=спНастройки["Кассир"];
    пИНН:=Кассир.ИНН;
    пИНН:=TearStr(пИНН,"/");
    Сумма100:=Number(спНастройки["Сумма"])*100;
    
    Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""WithdrawMoney"",""cash"":"+Сумма100+",""cashierInfo"":{""cashierName"":"""+EncodeString(Кассир.ПолнНаименование,"JSON")
      +""",""cashierINN"":"""+EncodeString(пИНН,"JSON")+"""}}";
    СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
    If СтрОшибка<>"" Then
      Exit "Ошибка изъятия суммы: "+СтрОшибка;
    EndIf;
  Except
    Exit PopError()+_NEWLINE+"Неудачная выгрузки изъятия наличных!";
  EndTry;
EndFunction


Function PrintReportX(спНастройки)
  Try
    //1. Полный отчёт за смену из ФН
    //2. Отчёт за смену по кассирам из ФН
    //3. Отчёт за смену по товарам из ФН
    //4. Отчёт за смену по товарам и кассирам из ФН
    //5. Полный отчёт за смену из ККТ
    Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""PrintReport"",""reportCode"":5}";
    СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
    If СтрОшибка<>"" Then
      Exit "Ошибка печати X-отчета: "+СтрОшибка;
    EndIf;
  Except
    Exit PopError()+_NEWLINE+"Неудачная попытка печати X-отчета!";
  EndTry;
EndFunction

Function PrintReportZ(спНастройки)
  Try
    Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""PrintReport"",""reportCode"":1}";
    СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
    If СтрОшибка<>"" Then
      Exit "Ошибка печати Z-отчета: "+СтрОшибка;
    EndIf;
  Except
    Exit PopError()+_NEWLINE+"Неудачная попытка печати Z-отчета!";
  EndTry;
EndFunction

//спНастройки["НомерДокумента"] -- фискальный номер документа для печати (если пустой -- печать последнего чека)
Function PrintLastReceipt(спНастройки)
  Try
    Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""PrintDocFromFN"""+?(Not IsEmpty(спНастройки["НомерДокумента"]),",""fiscalDocNum"":"""+спНастройки["НомерДокумента"]+"""")+"}";
    СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
    If СтрОшибка<>"" Then
      Exit "Ошибка печати последнего чека: "+СтрОшибка;
    EndIf;
  Except
    Exit PopError()+_NEWLINE+"Неудачная попытка печати копии чека!";
  EndTry;
EndFunction


//ФФД 1.2: https://forum.nalog.ru/index.php?app=core&module=attach&section=attach&attach_id=3772
//Используются поля:
//Агент -- не используется
//ТипЧека -- число (см. ниже)
//ФлРозничныйПокупатель -- число
//Контрагент
//ЮрЛицо
//ЕГАИССылка -- URL типа "https://check.egais.ru?id=cf1b1096-3cbc-11e7-b3c1-9b018b2ba3f7", если не пустая, будет выведено дополнение к чеку.
//ЕГАИСПодпись -- строка типа "79DED4A448069B0BFF602FF646F4E9B24D253D311679EA15307AEF38AEEE7933C9175DE5814C3DCF89BF63853CB75003D9FD979F3BEBBC93AFADF1D9A429623F"
//ДополнительнаяИнформация -- текст для печати после всех чеков
//ТабИСМП -- таблица "Номенклатура,Марка,ФлНеПрошлаПроверку,Причина,Поле1,Поле2" для проверки и прикрепления к чеку
//ТабОшибкиПроверкиМарок -- исходящая таблица со столбцами "Марка,Причина"
//Таблица -- Номенклатура,Количество,Сумма,СтавкаНДС
//Сумма -- сумма документа
//ЭлектроннаяСумма -- сумма документа электронной оплатой
//ДругаяБезналичнаяСумма -- сумма документа с особыми оплатами (подарочные сертификаты и пр.)
//СуммаЗакрытияАванса -- при операции закрытия аванса (11), сумма указывает на часть суммы документа, которая ушла на закрытие аванса
//ЭлектроннаяСумма+ДругаяБезналичнаяСумма должны быть меньше или равны параметру Сумма
Function PrintReceipt(спНастройки)
  ФлОтменитьЧек:=0;
  Try
    //Отменить предыдущий документ, если он открыт в данный момент
    Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""GetStatus""}";
    СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
    If СтрОшибка<>"" Then
      Exit "Ошибка получения статуса: "+СтрОшибка;
    EndIf;
    аДерево:=LoadJSONFromString(Стр,0);
    If Uppercase(аДерево["checkInfo","isOpen"])="TRUE" Then
      Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""ResetCheck""}";
      СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
      If СтрОшибка<>"" Then
        Exit "Ошибка отмены незакрытого чека: "+СтрОшибка;
      EndIf;
    EndIf;
  
  
    //Версия ФФД
    ФФД12:=Number(спНастройки["ВерсияФФД"])>=1.2;
    ФФД11:=Number(спНастройки["ВерсияФФД"])>=1.1;
    ФФД10:=Number(спНастройки["ВерсияФФД"])<1.05;
    аТип0:=спНастройки["ТипЧека"];
    If (аТип0<>10)And(аТип0<>13)And(ФФД12) Then
      Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""AbortMarkingCodeChecking""}";
      ВыполнитьКоманду(спНастройки,Стр);
    
      Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""ClearMarkingCodeValidationTable""}";
      ВыполнитьКоманду(спНастройки,Стр);
    EndIf;
    
    //Единица измерения (2108)
    //0 -- шт    (796)
    //10 - г
    //11 - кг    (166)
    //12 - т
    //20 - см
    //21 - дм
    //22 - м     (006)
    //30 - см2
    //31 - дм2
    //32 - м2    (055)
    //40 - мл
    //41 - л     (112)
    //42 - м3    (113)
    //...
    If ФФД12 Then
      спЕдиница:=List.Create();
      спЕдиница.Add(0);
      спЕдиница["166"]:=11;
      спЕдиница["006"]:=22;
      спЕдиница["055"]:=32;
      спЕдиница["112"]:=41;
      спЕдиница["113"]:=42;
    EndIf;
    
    //Тип чека:
    //1 -- ПКО (продажа)                      = 0
    //2 -- РКО (возврат продажи)              = 1
    //3 -- Коррекция ПКО (продажи)            = 4
    //4 -- Коррекция РКО (возврата продажи)   = 6
    //5 -- РКО (покупка)                      = 2
    //6 -- ПКО (возврат покупки)              = 3
    //7 -- Коррекция РКО (покупки)            = 5
    //8 -- Коррекция ПКО (возврата покупки)   = 7
    //10 -- Аванс (товар не отдается)         = 0, 1214=4, 1212=10, Количество = 1, Наименование "Аванс за товары"
    //11 -- Закрытие аванса                   = 0, 1214=4, 1212=1
    //12 -- Кредит                            = 0, 1214=5, 1212=1
    //13 -- Закрытие кредита                  = 0, 1214=7, 1212=10, Количество = 1, Наименование "Закрытие кредита за товары"
    
    //Признак предмена расчета (1212):
    //[+] 1. "ТОВАР"                      //Кроме акцизного и марочного, алкоголь марочным товаром не считается ("не такой" марочный)
    //[+] 2. "ПОДАКЦИЗНЫЙ ТОВАР"          //Для ФФД 1.05,1.1
    //3. "РАБОТА"
    //4. "УСЛУГА"
    //5. "СТАВКА АЗАРТНОЙ ИГРЫ"
    //6. "ВЫИГРЫШ АЗАРТНОЙ ИГРЫ"
    //7. "ЛОТЕРЕЙНЫЙ БИЛЕТ"
    //8. "ВЫИГРЫШ ЛОТЕРЕИ"
    //9. "ПРЕДОСТАВЛЕ-НИЕ РИД"
    //[+] 10. "ПЛАТЕЖ"                    //об авансе, задатке, предоплате, кредите
    //11. "АГЕНТСКОЕ ВОЗНАГРАЖДЕНИЕ"
    //12. "ВЫПЛАТА"
    //13. "ИНОЙ ПРЕДМЕТ РАСЧЕТА"
    //14. "ИМУЩЕСТВЕННОЕ ПРАВО"
    //15. "ВНЕРЕАЛИЗАЦИОННЫЙ ДОХОД"
    //16. "ИНЫЕ ПЛАТЕЖИ И ВЗНОСЫ"
    //17. "ТОРГОВЫЙ СБОР"
    //18. "КУРОРТНЫЙ СБОР"
    //19. "ЗАЛОГ"
    //20. "РАСХОД"
    //21. "ВЗНОСЫ НА ОБЯЗАТЕЛЬНОЕ ПЕНСИОННОЕ СТРАХОВАНИЕ ИП"
    //22. "ВЗНОСЫ НА ОБЯЗАТЕЛЬНОЕ ПЕНСИОННОЕ СТРАХОВАНИЕ"
    //23. "ВЗНОСЫ НА ОБЯЗАТЕЛЬНОЕ МЕДИЦИНСКОЕ СТРАХОВАНИЕ ИП"
    //24. "ВЗНОСЫ НА ОБЯЗАТЕЛЬНОЕ МЕДИЦИНСКОЕ СТРАХОВАНИЕ"
    //25. "ВЗНОСЫ НА ОБЯЗАТЕЛЬНОЕ СОЦИАЛЬНОЕ СТРАХОВАНИЕ"
    //26. "ПЛАТЕЖ КАЗИНО"
    //27. "ВЫДАЧА ДЕНЕЖНЫХ СРЕДСТВ"
    //30. подакцизном товаре, подлежащем маркировке средством идентификации, не имеющем кода маркировки
    //31. подакцизном товаре, подлежащем маркировке средством идентификации, имеющем код маркировки
    //32. товаре, подлежащем маркировке средством идентификации, не имеющем кода маркировки, за исключением подакцизного товара
    //[+] 33. товаре, подлежащем маркировке средством идентификации, имеющем код маркировки, за исключением подакцизного товара
        
    //Признаки способа расчета (1214):
    //1 -- Предоплата 100%
    //2 -- Предоплата
    //3 -- Аванс
    //4 -- Полная оплата (+ аванс)
    //5 -- Частичная оплата (+кредит)
    //6 -- Полный кредит
    //7 -- Оплата кредита

    //Ставки НДС:
    //1. Ставка НДС 20%
    //2. Ставка НДС 10%
    //3. Ставка НДС расчётная 20/120
    //4. Ставка НДС расчётная 10/110
    //5. Ставка НДС 0%
    //6. НДС не облагается
    спНДС:=List.Create(6,5,2,1,1);
    
    ТабИСМП:=спНастройки["ТабИСМП"];
    //Описание Меркурий предлагает проводить проверку кодов маркировки до начала создания чека
    спНастройки["ТабОшибкиПроверкиМарок"]:=0;
    If (аТип0<>10)And(аТип0<>13)And(ФФД12) Then
      ТабОшибкиПроверкиМарок:=Tab.Create("Марка,Причина");
      спНастройки["ТабОшибкиПроверкиМарок"]:=ТабОшибкиПроверкиМарок;
      ФлВозврат:=(аТип0=2)Or(аТип0=5);
      
      ТабИСМП.Select();
      While ТабИСМП.Next() Do
        //1 -Штучный товар, подлежащий обязательной маркировке средством идентификации, реализован
        //2 -Мерный товар, подлежащий обязательной маркировке средством идентификации, в стадии реализации
        //3 -Штучный товар, подлежащий обязательной маркировке средством идентификации, возвращен
        //4 -Часть товара, подлежащего обязательной маркировке средством идентификации, возвращена
        //255 -Статус товара, подлежащего обязательной маркировке средством идентификации, не изменился
        ТабИСМП.Поле1:=?(ФлВозврат,"3","1");
        ТабИСМП.Поле2:=0;
        //Количество умножается на 10000
        //спЕдиница здесь всегда используется, как 0
        Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""CheckMarkingCode"",""mc"":"""+EncodeString(ТабИСМП.Марка,"JSON")+
          """,""plannedStatus"":"+ТабИСМП.Поле1+",""qty"":10000,""measureUnit"":0,""processingMode"":0,""timeout"":5}";
        СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
        If СтрОшибка<>"" Then
          //Exit "Ошибка проверки марки марочного товара: "+СтрОшибка;
          ТабОшибкиПроверкиМарок.AddLine("Марка,Причина",ТабИСМП.Марка,"Ошибка проверки марки марочного товара: "+СтрОшибка);
          Continue;
        EndIf;
        аДерево:=LoadJSONFromString(Стр,0);
        ФлРезультат:=Number(аДерево["fnCheck","checkResult"]);
        
        If Uppercase(аДерево["isOfflineMode"])<>"TRUE" Then
          аДата:=Date();
          While 1 Do
            Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""GetMarkingCodeCheckResult""}";
            СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
            If СтрОшибка<>"" Then
              Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""AbortMarkingCodeChecking""}";
              ВыполнитьКоманду(спНастройки,Стр);
              //Exit "Ошибка получения статуса проверки марки марочного товара: "+СтрОшибка;
              ТабОшибкиПроверкиМарок.AddLine("Марка,Причина",ТабИСМП.Марка,"Ошибка получения статуса проверки марки марочного товара: "+СтрОшибка);
              Continue;
            EndIf;
            аДерево:=LoadJSONFromString(Стр,0);
            If Uppercase(аДерево["isCompleted"])="TRUE" Then
              ФлРезультат:=Number(аДерево["onlineCheck","mcCheckResultRaw"]);
              Break;
            EndIf;
            If GetPeriodMs(аДата)>7000 Then //7 с. максимум (в CheckMarkingCode указывался таймаут в 5 секунд)
              Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""AbortMarkingCodeChecking""}";
              ВыполнитьКоманду(спНастройки,Стр);
              //Exit "GetMarkingCodeCheckResult не возвращает готовность длительное время!";
              ТабОшибкиПроверкиМарок.AddLine("Марка,Причина",ТабИСМП.Марка,"GetMarkingCodeCheckResult не возвращает готовность длительное время!");
              Continue;
            EndIf;
            Sleep(100);
          EndDo;
        EndIf;
        
        //биты 2106 (LIBFPTR_PARAM_MARKING_CODE_ONLINE_VALIDATION_RESULT):
        //бит 0: был проверен
        //бит 1: проверка успешна
        //бит 2: проверка ОИСМ выполнена
        //бит 3: планируемый статус (реализация или возврат) корректен, иначе -- нет
        //бит 4: 0 -- онлайн режим ККТ, 1 -- автономно
        Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""AcceptMarkingCode""}";
        СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
        If СтрОшибка<>"" Then
          //Exit "Ошибка выполнения принятия результата проверки марки марочного товара: "+СтрОшибка;
          ТабОшибкиПроверкиМарок.AddLine("Марка,Причина",ТабИСМП.Марка,"Ошибка выполнения принятия результата проверки марки марочного товара: "+СтрОшибка);
          Continue;
        EndIf;
        
        ТабИСМП.Поле2:=ФлРезультат;
        If ((ФлРезультат And 1<>0)And(ФлРезультат And 2=0))Or(ФлРезультат And 5=0)Or((ФлРезультат And 4<>0)And(ФлРезультат And 8=0)) Then
          Стр:=аДерево["onlineCheck","description"];
          Стр:=?(Стр<>"",Стр+". ","")+"Код проверки марки: "+ФлРезультат;
          ТабОшибкиПроверкиМарок.AddLine("Марка,Причина",ТабИСМП.Марка,Стр);
        EndIf;
      EndDo;
    EndIf;
    
    ФлРозничныйПокупатель:=Number(спНастройки["ФлРозничныйПокупатель"]);
    спТипыЧека:=List.Create(0,1,4,6,2,3,5,7,0,0,0,0);
    аТип:=?(аТип0>спТипыЧека.Size(),0,спТипыЧека[аТип0]);
    СтрПеч:="";
    If _And(спНастройки["NoPaperWhenUsingEmail"]=1,Trim(спНастройки["ПочтаИлиТелефонКлиента"])<>"") Then
      СтрПеч:=",""printDoc"":false";
    EndIf;
    Кассир:=спНастройки["Кассир"];
    пИНН:=Кассир.ИНН;
    пИНН:=TearStr(пИНН,"/");
    
    СтрКоррекция:="";
    If (аТип0=3)Or(аТип0=4)Or(аТип0=7)Or(аТип0=8) Then
      //TODO: Необходимо получить данные "основание чека коррекции" -- номер и дату корректируемого документа или сам документ
      зДок:=спНастройки["КорректируемыйДокумент"];
      зНомер:=спНастройки["КорректируемыйДокументНомер"];
      зДата:=Date(спНастройки["КорректируемыйДокументДата"]);
      зОснование:=спНастройки["КорректируемыйДокументОснование"];
      If IsEmpty(зОснование) Then
        зОснование:="Ошибка в документе";
      EndIf;
      If not IsEmpty(зДок) Then
        СтрКоррекция:=",""correctionInfo"":{""correctionType"":0,""causeName"":"""+EncodeString(зОснование,"JSON")+""",""causeDocDate"":"""+
          FormatDate(зДок.DocDate,"YYYY-mm-dd")+""",""causeDocNum"":"""+зДок.DocNum+"""}";
      ElseIf (IsEmpty(зНомер))or(IsEmpty(зДата)) Then
        Exit "Для создания чека коррекции не передан документ коррекции или номер и дата документа";
      Else
        СтрКоррекция:=",""correctionInfo"":{""correctionType"":0,""causeName"":"""+EncodeString(зОснование,"JSON")+""",""causeDocDate"":"""+
          FormatDate(зДата,"YYYY-mm-dd")+""",""causeDocNum"":"""+EncodeString(зНомер,"JSON")+"""}";
      EndIf;  
    EndIf;
    
    СтрКонтрагент:="";
    If not ФлРозничныйПокупатель Then
      //Заполняем: 1227, 1228
      зК:=спНастройки["Контрагент"];
      пИНН2:=Trim(зК.ИНН);
      пИНН2:=TearStr(пИНН2,"/");
      СтрКонтрагент:=",""buyerInfo"":{""buyerName"":"""+EncodeString(зК.ПолнНаименование,"JSON")+""",""buyerINN"":"""+EncodeString(пИНН2,"JSON")+"""}";
    EndIf;

    Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""OpenCheck"",""checkType"":"+аТип+
      ",""taxSystem"":"+спНастройки["_TaxType"]+СтрПеч+",""cashierInfo"":{""cashierName"":"""+EncodeString(Кассир.ПолнНаименование,"JSON")
      +""",""cashierINN"":"""+EncodeString(пИНН,"JSON")+"""}"+СтрКонтрагент+СтрКоррекция+"}";
    СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
    If СтрОшибка<>"" Then
      Exit "Ошибка создания нового чека: "+СтрОшибка;
    EndIf;
    ФлОтменитьЧек:=1;
    
    //Позиции
    ФлНДС:=спНастройки["ЮрЛицо"].УчитыватьНДС<>0;
    См:=0;
    If (аТип0=10)Or(аТип0=13) Then
      См:=спНастройки["Сумма"];
      
      //paymentFormCode:
      //1. Полная предварительная оплата до момента передачи предмета расчета
      //2. Частичная предварительная оплата до момента передачи предмета расчета
      //3. Аванс
      //4. Полная оплата, в том числе с учетом аванса (предварительной оплаты) в момент передачи предмета расчета
      //5. Частичная оплата предмета расчета в момент его передачи с последующей оплатой вкредит
      //6. Передача предмета расчета без его оплаты в момент его передачи с последующейоплатой в кредит
      //7. Оплата предмета расчета после его передачи с оплатой в кредит (оплата кредита)        
      Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""AddGoods"",""productName"":"""+EncodeString(?(аТип0=10,"Аванс за товары","Закрытие кредита за товары"),"JSON")+
        """,""qty"":10000,""taxCode"":"+?(ФлНДС,"1","6")+",""paymentFormCode"":"+?(аТип0=13,7,3)+",""productTypeCode"":10,""price"":"+Round(См*100)+",""sum"":"+Round(См*100)+"}";
      СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
      If СтрОшибка<>"" Then
        Exit "Невозможно зарегистрировать товар. Ошибка: "+СтрОшибка;
      EndIf;
    Else
      aTab:=спНастройки["Таблица"];
      aTab.Select();
      While aTab.Next() Do
        If (not aTab.Номенклатура.флПодлежитПрослеживаемости)or(aTab.Номенклатура.ГИСМТТоварнаяГруппа.Selected()=0)or(ФФД10) Then
          зЦ:=Round(aTab.Сумма/aTab.Количество*100);
          аНДС:=?(ФлНДС,спНДС[aTab.СтавкаНДС.Index()],6);
          пТип:=?((aTab.Номенклатура.флПодлежитПрослеживаемости)And(not ФФД10),"2","1");
          Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""AddGoods"",""productName"":"""+EncodeString(aTab.Номенклатура.Name,"JSON")+
            """,""qty"":"+Round(aTab.Количество*10000)+",""taxCode"":"+аНДС+",""paymentFormCode"":"+?(аТип0=12,5,4)+",""productTypeCode"":"+пТип+",""price"":"+зЦ+",""sum"":"+Round(aTab.Сумма*100)+"}";
          СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
          If СтрОшибка<>"" Then
            Exit "Невозможно зарегистрировать товар. Ошибка: "+СтрОшибка;
          EndIf;
        Else
          //Для марочного ГИС МТ товара необходимо передавать каждую марку
          аНДС:=?(ФлНДС,спНДС[aTab.СтавкаНДС.Index()],6);
          зЦ:=Round(aTab.Сумма/aTab.Количество*100);
          зК:=aTab.Количество;
          While зК>0 Do
            If not ТабИСМП.FindAndGoto(aTab.Номенклатура,,"Номенклатура",1) Then
              Exit "Не все марки заданы для позиции "+aTab.Номенклатура+", внутренняя ошибка!";
            EndIf;
            If ФФД12 Then
              Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""AddGoods"",""mcInfo"":{""mc"":"""+EncodeString(ТабИСМП.Марка,"JSON")+
                """,""processingMode"":0,""plannedStatus"":"+ТабИСМП.Поле1+"},productName"":"""+EncodeString(aTab.Номенклатура.Name,"JSON")+
                """,""qty"":10000,""measureUnit"":0,""taxCode"":"+аНДС+",""paymentFormCode"":"+?(аТип0=12,5,4)+",""productTypeCode"":33,""price"":"+зЦ+",""sum"":"+зЦ+"}";
            Else //1.1 и 1.05
              Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""AddGoods"",""markingCode"":"""+EncodeString(ТабИСМП.Марка,"JSON")+
                """,productName"":"""+EncodeString(aTab.Номенклатура.Name,"JSON")+
                """,""qty"":10000,""measureUnit"":0,""taxCode"":"+аНДС+",""paymentFormCode"":"+?(аТип0=12,5,4)+",""productTypeCode"":2,""price"":"+зЦ+",""sum"":"+зЦ+"}";
            EndIf;
            зК:=зК-1;
            ТабИСМП.Remove(ТабИСМП.CurLine);
            СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
            If СтрОшибка<>"" Then
              Exit "Невозможно зарегистрировать товар. Ошибка: "+СтрОшибка;
            EndIf;
          EndDo;
        EndIf;
        См:=См+aTab.Сумма;
      EndDo;
    EndIf;
    If Round(спНастройки["Сумма"],2)<>Round(См,2) Then
      Exit "Неверная сумма строк "+См+", не совпадает с суммой документа "+спНастройки["Сумма"];
    EndIf;
    
    //Оплата
    //LIBFPTR_PT_CASH, LIBFPTR_PT_ELECTRONICALLY, LIBFPTR_PT_PREPAID, LIBFPTR_PT_CREDIT, LIBFPTR_PT_OTHER...
    ЭлектроннаяСумма:=Number(спНастройки["ЭлектроннаяСумма"]);
    ДругаяБезналичнаяСумма:=Number(спНастройки["ДругаяБезналичнаяСумма"]);
    СуммаЗакрытияАванса:=Number(спНастройки["СуммаЗакрытияАванса"]);
    If Round(ЭлектроннаяСумма,2)+Round(ДругаяБезналичнаяСумма,2)>Round(См,2) Then
      Exit "Безналичные суммы оплаты "+ЭлектроннаяСумма+" больше суммы документа "+спНастройки["Сумма"];
    EndIf;
    
    СтрПочта:="";
    If Trim(спНастройки["ПочтаИлиТелефонКлиента"])<>"" Then
      //"client@mail.ru" или "+79161234567"
      СтрПочта:=",""sendCheckTo"":"""+EncodeString(спНастройки["ПочтаИлиТелефонКлиента"],"JSON")+"""";
    EndIf;
    
    //Закрытие чека
    If (аТип0=10)or(аТип0=12) Then
      Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""CloseCheck"""+СтрПочта+",""payment"":{"""+?(аТип0=10,"prepayment","credit")+""":"+Round(См*100)+"}}";
    ElseIf (аТип0=11)And(СуммаЗакрытияАванса>0) Then
      If Round(СуммаЗакрытияАванса,2)>Round(См,2) Then
        Exit "Сумма закрытия аванса "+СуммаЗакрытияАванса+" больше суммы документа "+спНастройки["Сумма"];
      EndIf;
      Стр:="";
      См:=СуммаЗакрытияАванса;//Round(См-СуммаЗакрытияАванса,2);
      If (См>0)And(ЭлектроннаяСумма>0) Then
        ЭлектроннаяСумма:=Min(ЭлектроннаяСумма,См);
        См:=Round(См-ЭлектроннаяСумма,2);
        Стр:="""ecash"":"+Round(ЭлектроннаяСумма*100);
      EndIf;
      If (См>0)And(ДругаяБезналичнаяСумма>0) Then
        ДругаяБезналичнаяСумма:=Min(ДругаяБезналичнаяСумма,См);
        См:=Round(См-ДругаяБезналичнаяСумма,2);
        Стр:=Стр+?(Стр<>"",",")+"""consideration"":"+Round(ДругаяБезналичнаяСумма*100);
      EndIf;
      If См>0 Then
        Стр:=Стр+?(Стр<>"",",")+"""cash"":"+Round(См*100);
      EndIf;  
      Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""CloseCheck"""+СтрПочта+",""payment"":{"+Стр+"}}";
    Else
      Стр:="";
      If ЭлектроннаяСумма>0 Then
        См:=Round(См-ЭлектроннаяСумма,2);
        Стр:="""ecash"":"+Round(ЭлектроннаяСумма*100);
      EndIf;
      If ДругаяБезналичнаяСумма>0 Then
        См:=Round(См-ДругаяБезналичнаяСумма,2);
        Стр:=Стр+?(Стр<>"",",")+"""consideration"":"+Round(ДругаяБезналичнаяСумма*100);
      EndIf;
      If См>0 Then
        Стр:=Стр+?(Стр<>"",",")+"""cash"":"+Round(См*100);
      EndIf;
      Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""CloseCheck"""+СтрПочта+",""payment"":{"+Стр+"}}";
    EndIf;
    СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
    If СтрОшибка<>"" Then
      Exit "Невозможно закрыть чек. Ошибка: "+СтрОшибка;
    EndIf;
    ФлОтменитьЧек:=0;
    аДерево:=LoadJSONFromString(Стр,0);
    спНастройки["НомерДокумента"]:=аДерево["fiscalDocNum"];
    стрДок:=аДерево["checkNum"];
    НомерСмены:=Number(аДерево["shiftNum"]);
      
    Try
      ЕГАИССылка:=спНастройки["ЕГАИССылка"];
      ЕГАИСПодпись:=спНастройки["ЕГАИСПодпись"];
      If Trim(ЕГАИССылка)<>"" Then      
        //ЕГАИССылка -- URL типа "https://check.egais.ru?id=cf1b1096-3cbc-11e7-b3c1-9b018b2ba3f7", если не пустая, будет выведено дополнение к чеку.
        //ЕГАИСПодпись -- строка типа "79DED4A448069B0BFF602FF646F4E9B24D253D311679EA15307AEF38AEEE7933C9175DE5814C3DCF89BF63853CB75003D9FD979F3BEBBC93AFADF1D9A429623F"
        
        //Номер смены
        If НомерСмены<=0 Then
          Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""GetStatus""}";
          СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
          If СтрОшибка<>"" Then
            Raise "Ошибка получения номера смены: "+СтрОшибка;
          EndIf;
          аДерево:=LoadJSONFromString(Стр,0);
          НомерСмены:=Number(аДерево["shiftInfo","num"]);
        EndIf;
        зЮЛ:=спНастройки["ЮрЛицо"];
        стрКПП:=Trim(зЮЛ.ИНН);
        стрИНН:=TearStr(стрКПП,"/");
        
        Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""PrintEgaisSlip"",""shiftNum"":"+НомерСмены+",""checkNum"":"+стрДок+
          ",""kpp"":"""+стрКПП+""",""inn"":"""+стрИНН+""",""url"":"""+EncodeString(спНастройки["ЕГАИССылка"],"JSON")+""",""sign"":"""+EncodeString(спНастройки["ЕГАИСПодпись"],"JSON")+"""}";
        СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
        If СтрОшибка<>"" Then
          Raise "Ошибка выполнения печати квитанции ЕГАИС: "+СтрОшибка;
        EndIf;
      EndIf;
      
      //Печать дополнительной информации (банковская квитанция и т.п.)
      ДополнительнаяИнформация:=спНастройки["ДополнительнаяИнформация"];
      If Trim(ДополнительнаяИнформация)<>"" Then
        Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""PrintText"",""text"":"" "",""forcePrint"":false}";
        СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
        If СтрОшибка<>"" Then
          Raise СтрОшибка;
        EndIf;
        While ДополнительнаяИнформация<>"" Do
          Стр:=TearStr(ДополнительнаяИнформация,_NEWLINE);
          If Стр="" Then
            Стр:=" ";
          EndIf;
          Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""PrintText"",""text"":"""+EncodeString(Стр,"JSON")+""",""forcePrint"":false}";
          СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
          If СтрОшибка<>"" Then
            Raise СтрОшибка;
          EndIf;
        EndDo;
        
        Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""PrintText"",""text"":"" "",""forcePrint"":true}";
        СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
        If СтрОшибка<>"" Then
          Raise СтрОшибка;
        EndIf;
      EndIf;
    Except
      Message("Ошибка печати нефискальной части чека: "+PopError(),"!");
    EndTry;
  Except
    If ФлОтменитьЧек Then
      Try
        Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""ResetCheck""}";
        ВыполнитьКоманду(спНастройки,Стр);
      Except
      EndTry;
    EndIf;
    Exit PopError()+_NEWLINE+"Неудачная попытка выгрузки чека!";
  EndTry;
EndFunction

//ДополнительнаяИнформация -- строка для печати
Function PrintText(спНастройки)
  Try
    //Печать дополнительной информации (банковская квитанция и т.п.)
    ДополнительнаяИнформация:=спНастройки["ДополнительнаяИнформация"];
    If Trim(ДополнительнаяИнформация)<>"" Then
      Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""PrintText"",""text"":"" "",""forcePrint"":false}";
      СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
      If СтрОшибка<>"" Then
        Raise СтрОшибка;
      EndIf;
    
      While ДополнительнаяИнформация<>"" Do
        Стр:=TearStr(ДополнительнаяИнформация,_NEWLINE);
        If Стр="" Then
          Стр:=" ";
        EndIf;
        Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""PrintText"",""text"":"""+EncodeString(Стр,"JSON")+""",""forcePrint"":false}";
        СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
        If СтрОшибка<>"" Then
          Raise СтрОшибка;
        EndIf;
      EndDo;
      
      Стр:="{""sessionKey"":"""+спНастройки["Сессия"]+""",""command"":""PrintText"",""text"":"" "",""forcePrint"":true}";
      СтрОшибка:=ВыполнитьКоманду(спНастройки,Стр);
      If СтрОшибка<>"" Then
        Raise СтрОшибка;
      EndIf;
    EndIf;
  Except
    Exit PopError()+_NEWLINE+"Неудачная попытка печати нефискальной информации!";
  EndTry;
EndFunction


