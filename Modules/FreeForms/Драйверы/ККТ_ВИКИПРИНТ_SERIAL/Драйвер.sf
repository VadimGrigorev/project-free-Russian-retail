//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

//Функции:
//DriverInit, DriverDeinit, DriverConnect, DriverDisconnect, ShiftInfo, OpenShift, CloseShift, DepositMoney, WithdrawMoney, PrintReportX, PrintReportZ, PrintReceipt, PrintLastReceipt, 
//  DeviceInfo, PrintText, CashDrawerInfo, OpenCashDrawer

//Документация: https://htmlpreview.github.io/?https://github.com/dreamkas/pirit_documentation/blob/master/output/documentation_fm16_1_2.html       (устарело)
//              https://help.dreamkas.ru/upload/support/%D0%92%D0%B8%D0%BA%D0%B8%20%D0%9C%D0%B8%D0%BD%D0%B8%20%D0%A4%20(%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%20003)%20%D0%A0%D0%AD.pdf
//              https://help.dreamkas.ru/kb/viki-printy/integratsii-viki-print/biblioteka-piritlib-dlya-pirit-i-viki-print-f/

Function TranslateError(aKernel32,КодОшибки)
  FORMAT_MESSAGE_FROM_SYSTEM:=$1000;
  FORMAT_MESSAGE_IGNORE_INSERTS:=$200;
  FORMAT_MESSAGE_ARGUMENT_ARRAY:=$2000;
  аБуф:=Buffer.Create(2048);//1024 символов
  i:=aKernel32.FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM or FORMAT_MESSAGE_IGNORE_INSERTS or FORMAT_MESSAGE_ARGUMENT_ARRAY,0,КодОшибки,0,аБуф,1024,0);
  Exit аБуф.GetStringW(0);
EndFunction

Function ExecuteCommand(спНастройки,iCmd,iStr="",ФлВнутренний=0)
  aKernel32:=спНастройки["aKernel32"];
  aHandle:=спНастройки["aHandle"];
  аПакет:=Chr(Random(209)+$20,1);//$20..$7E
  аКоманда:=DecToHex(iCmd,2);
  Стр:=Chr(2,1)+Ansi(спНастройки["_Password"])+аПакет+Ansi(аКоманда)+Ansi(iStr)+Chr(3,1);
  CRC:=0;
  For i:=2 To Length(Стр) Do
    CRC:=CRC Xor Asc(Стр[i]);
  EndDo;
  Стр:=Стр+DecToHex(CRC,2);
  
  //<STX>:        1b      $02
  //<Password>    4b
  //<Packet ID>   1b
  //<Command>     2b
  //<Data>        ?b
  //<ETX>         1b      $03
  //<CRC>         2b
  b:=0;
  Buf:=Buffer.Create(Length(Стр));
  Buf.SetString(0,Стр);
  If not aKernel32.WriteFile(aHandle,Buf,Length(Стр),b,0) Then
    Raise "ExecuteCommand: Ошибка связи с ККМ (1): "+TranslateError(aKernel32,aKernel32.GetLastError);
  EndIf;
  If b<>Length(Стр) Then
    Raise "ExecuteCommand: Невозможно передать всю команду в ККМ ("+b+" из "+Length(Стр)+")!";
  EndIf;
  
  //Чтение ответа
  //<STX>:        1b      $02
  //<Packet ID>   1b
  //<Command>     2b
  //<Error>       2b
  //<Data>        ?b
  //<ETX>         1b      $03
  //<CRC>         2b
  
  Стр:="";
  Buf:=Buffer.Create(6);
  аДлина:=5;//Начало
  While 1 Do
    b:=0;
    If not aKernel32.ReadFile(aHandle,Buf,аДлина,b,0) Then
      Raise "ExecuteCommand: Ошибка чтения из ККМ (1): "+TranslateError(aKernel32,aKernel32.GetLastError);
    EndIf;
    If b=0 Then
      Raise "ExecuteCommand: Ошибка чтения из ККМ -- таймаут (1)";
    EndIf;
    аДлина:=Max(1,аДлина-b);
    AppendStringToBufferedString(Стр,Buf.GetString(0,b));
    If Buf[0]=3 Then
      Break;
    EndIf;
  EndDo;
  аДлина:=2;//CRC
  While аДлина>0 Do
    //CRC
    If not aKernel32.ReadFile(aHandle,Buf,аДлина,b,0) Then
      Raise "ExecuteCommand: Ошибка чтения из ККМ (2): "+TranslateError(aKernel32,aKernel32.GetLastError);
    EndIf;
    If b=0 Then
      Raise "ExecuteCommand: Ошибка чтения из ККМ -- таймаут (2)";
    EndIf;
    AppendStringToBufferedString(Стр,Buf.GetString(0,b));
    аДлина:=аДлина-b;
  EndDo;
  //Отладка
  //Message(Replace(Replace(Replace(Стр,Chr($1C),"<$1C>"),Chr(2),"<$02>"),Chr(3),"<$03>"));
  
  //Иногда касса отдает в начале пакета мусор, состоящий из нескольких байтов $5 (проверка связи, пакеты были отосланы за время простоя), нужно отцепить этот мусор перед обработкой
  If Pos(Chr(2),Стр)>1 Then
    TearStr(Стр,Chr(2));
    Стр:=Chr(2)+Стр;
  EndIf;
  While Стр[Length(Стр)]=Chr(5) Do
    Стр:=Left(Стр,Length(Стр)-1);
  EndDo;
  If _Or(Стр[1]<>Chr(2),Стр[2]<>аПакет,Mid(Стр,3,2)<>аКоманда) Then
    Raise "ExecuteCommand: Получен неверный пакет из ККМ! Произведите соединение с ККМ заново!";
  EndIf;
  CRC:=0;
  For i:=2 To Length(Стр)-2 Do
    CRC:=CRC Xor Asc(Стр[i]);
  EndDo;
  If DecToHex(CRC,2)<>Right(Стр,2) Then
    Raise "ExecuteCommand: Получен неверный пакет из ККМ с неверной контрольной суммой! Подключение нестабильно! Произведите соединение с ККМ заново!";
  EndIf;
  аОшибка:=BaseToDec(Uppercase(Mid(Стр,5,2)),16);
  If аОшибка=0 Then
    Exit Mid(Стр,7,Length(Стр)-6-3);
  EndIf;
  If ((аОшибка=1)or(аОшибка=3))And(ФлВнутренний=0) Then
    //Получение доп. информации об ошибке
    Фл:=0;
    Try
      Результат:=ExecuteCommand(спНастройки,$06,"1",1);
      Фл:=1;
    Except
    EndTry;
    If Фл Then
      СтрОшибка:=TranslateFrom(Результат,866);
      TearStr(СтрОшибка,Chr($1C));
      СтрОшибка:=Replace(СтрОшибка,Chr($1C),", ");
      Raise "Ошибка "+аОшибка+" (команда "+iCmd+"): "+СтрОшибка;
    EndIf;
  EndIf;
  спОшибки:=спНастройки["_Ошибки"];
  СтрОшибка:=спОшибки[Str(аОшибка)];
  If IsEmpty(СтрОшибка) Then
    СтрОшибка:="Неизвестная ошибка";
  EndIf;
  Raise "Ошибка "+аОшибка+" (команда "+iCmd+"): "+СтрОшибка;
EndFunction

Function EncodeStringKKT(Стр)
  Exit TranslateTo(ReplaceCharacters(Стр,Chr(1)+Chr(2)+Chr(3),"   "),866);
EndFunction

Function DriverInit(спНастройки)
  Try
    СтрДоп:=спНастройки["ДопУстановки"];
    Ини:=Ini.Create();
    Ини.AddFromString(СтрДоп);
    спНастройки["_Password"]:=Left(Ини.GetData("Password","PIRI")+"PIRI",4);
    спНастройки["_Timeout"]:=Max(Min(Number(Ини.GetData("Timeout","5000")),500000),500);
    спНастройки["_PaperWidth"]:=Min(Max(Number(Ини.GetData("PaperWidth","42")),30),72);
    
    спОшибки:=List.Create();
    спОшибки["1"]:="Функция невыполнима при данном статусе ККТ";//+вызвать 0x06/1
    спОшибки["2"]:="В команде указан неверный номер функции";
    спОшибки["3"]:="Некорректный формат или параметр команды";//+вызвать 0x06/1
    спОшибки["4"]:="Переполнение буфера коммуникационного порта";
    спОшибки["5"]:="Таймаут при передаче байта информации";
    спОшибки["6"]:="В протоколе указан неверный пароль";
    спОшибки["7"]:="Ошибка контрольной суммы в команде";
    спОшибки["8"]:="Конец бумаги";
    спОшибки["9"]:="Принтер не готов";
    спОшибки["10"]:="Текущая смена больше 24 часов. Установка даты времени больше чем на 24 часа";
    спОшибки["11"]:="Разница во времени, ККТ и указанной в команде начала работы, больше 8 минут";
    спОшибки["12"]:="Вводимая дата более ранняя, чем дата последней фискальной операции";
    спОшибки["13"]:="Неверный пароль доступа к ФП";
    спОшибки["14"]:="Отрицательное значение результирующего счетчика (недостаточная сумма денег в ККТ)";
    спОшибки["15"]:="Для выполнения команды необходимо закрыть смену";
    спОшибки["16"]:="Нет данных в журнале";
    спОшибки["17"]:="Ошибка контрольной ленты";
    спОшибки["18"]:="Ошибка посылки данных в ОФД";
    спОшибки["19"]:="Критическая ошибка обновления";
    спОшибки["32"]:="Фатальная ошибка ККТ";
    спОшибки["33"]:="Нет свободного места в фискальной памяти ККТ";
    спОшибки["65"]:="Некорректный формат или параметр команды ФН";
    спОшибки["66"]:="Некорректное состояние ФН";
    спОшибки["67"]:="Ошибка ФН";
    спОшибки["68"]:="Ошибка КС (Криптографического сопроцессора) в составе ФН";
    спОшибки["69"]:="Исчерпан временной ресурс использования ФН";
    спОшибки["70"]:="ФН переполнен";
    спОшибки["71"]:="Неверные дата или время в ФН";
    спОшибки["72"]:="Нет запрошенных данных в ФН";
    спОшибки["73"]:="Некорректное значение параметров команды ФН";
    спОшибки["74"]:="Некорректная команда ФН";
    спОшибки["75"]:="ККТ передает в ФН данные, которые должен формировать ФН";
    спОшибки["76"]:="ККТ передает в ФН данные, которые уже были переданы в составе данного документа";
    спОшибки["77"]:="Отсутствуют данные, необходимые для корректного учета в ФН";
    спОшибки["78"]:="Количество позиций в документе ФН превысило допустимый предел";
    спОшибки["80"]:="Превышен размер данных TLV";
    спОшибки["81"]:="Нет транспортного соединения";
    спОшибки["82"]:="Исчерпан ресурс КС";
    спОшибки["84"]:="Ресурс ОФД исчерпан или архив переполнен";
    спОшибки["85"]:="Время нахождения в очереди самого старого сообщения на выдачу более 30 календарных дней";
    спОшибки["86"]:="Продолжительность смены ФН более 24 часов";
    спОшибки["87"]:="Разница более чем на 5 минут отличается от разницы, определенной по внутреннему таймеру ФН";
    спОшибки["88"]:="Некорректный реквизит, переданный ККТ в ФН";
    спОшибки["89"]:="Переданный в ФН реквизит не соответствует установкам при регистрации";
    спОшибки["96"]:="Неверное сообщение от ОФД";
    спОшибки["97"]:="Нет связи с ФН";
    спОшибки["98"]:="Ошибка обмена с ФН";
    спОшибки["99"]:="Слишком длинная команда для посылки в ФН";
    спОшибки["100"]:="Неизвестный ответ сервиса обновления ключей проверки";
    спОшибки["114"]:="Запрещена работа с маркированным товарами";
    спОшибки["115"]:="Нарушена правильная последовательность подачи команд для обработки товаров, имеющих КМ";
    спОшибки["116"]:="Работа с маркированными товарами временно заблокирована. Необходимо отослать или выгрузить сформированные уведомления";
    спОшибки["117"]:="Переполнена таблица хранения КМ";
    спОшибки["124"]:="В переданном блоке данных, который должен содержать реквизиты в TLV формате, отсутствуют необходимые реквизиты";
    спОшибки["126"]:="В реквизите 2007 содержится КМ, который ранее не проверялся в ФН";
    спНастройки["_Ошибки"]:=спОшибки;
    
    аТип:=Number(Ини.GetData("TaxType","0"));
    спНастройки["_TaxType"]:=аТип;
    спНастройки["NoPaperWhenUsingEmail"]:=Number(Ини.GetData("NoPaperWhenUsingEmail","0"));
    
    //Загрузка требуемых библиотек
    aKernel32:=Lib.Load("kernel32.dll");
    aKernel32.RegisterFunction("CreateFileW","stdcall","^SZW,UI32,UI32,P,UI32,UI32,UN","UN");
    aKernel32.RegisterFunction("ReadFile","stdcall","UN,P,UI32,@UI32,P","UI32");
    aKernel32.RegisterFunction("WriteFile","stdcall","UN,P,UI32,@UI32,P","UI32");
    aKernel32.RegisterFunction("CloseHandle","stdcall","UN","UI32");
    aKernel32.RegisterFunction("GetCommState","stdcall","UN,P","UI32");
    aKernel32.RegisterFunction("SetCommState","stdcall","UN,P","UI32");
    aKernel32.RegisterFunction("SetCommTimeouts","stdcall","UN,P","UI32");
    aKernel32.RegisterFunction("SetCommMask","stdcall","UN,UI32","UI32");
    aKernel32.RegisterFunction("WaitCommEvent","stdcall","UN,@UI32,P","UI32");
    aKernel32.RegisterFunction("GetLastError","stdcall",,"UI32");
    aKernel32.RegisterFunction("FormatMessageW","stdcall","UI32,P,UI32,UI32,P,UI32,P","UI32");
    
    rDCB:=MemoryRecord.Create("DCBlength:UI32,BaudRate:UI32,Flags:UI32,wReserved:UI16,XonLim:UI16,XoffLim:UI16,ByteSize:UI8,Parity:UI8,"+
      "StopBits:UI8,XonChar:UI8,XoffChar:UI8,ErrorChar:UI8,EofChar:UI8,EvtChar:UI8,wReserved1:UI16");
      
    rCOMMTIMEOUTS:=MemoryRecord.Create("ReadIntervalTimeout:UI32,ReadTotalTimeoutMultiplier:UI32,ReadTotalTimeoutConstant:UI32,WriteTotalTimeoutMultiplier:UI32,"+
      "WriteTotalTimeoutConstant:UI32");
      
    спНастройки["aKernel32"]:=aKernel32;
    спНастройки["rDCB"]:=rDCB;
    спНастройки["rCOMMTIMEOUTS"]:=rCOMMTIMEOUTS;
    спНастройки["Соединено"]:=0;
  Except
    Exit PopError()+_NEWLINE+"(1) Невозможно инициализировать требуемые библиотеки!";
  EndTry;
EndFunction

Function DriverDeinit(спНастройки)
EndFunction


Function DriverConnect(спНастройки)
  Try
    спНастройки["Соединено"]:=0;
    спНастройки["aHandle"]:=0;
    СтрДоп:=спНастройки["ДопУстановки"];
    Ини:=Ini.Create();
    Ини.AddFromString(СтрДоп);
    Стр:=Ини.GetData("Connection","3,57600,n,8,1");
    ИмяПорта:="\\.\COM"+TearStr(Стр,",");
    aKernel32:=спНастройки["aKernel32"];
  
    спЧетность:=List.Create("n","o","e","m","s");//0..5
    спБит:=List.Create("1","1.5","2");//0..2
    rDCB:=спНастройки["rDCB"];
    rCOMMTIMEOUTS:=спНастройки["rCOMMTIMEOUTS"];
    GENERIC_READ:=$80000000;
    GENERIC_WRITE:=$40000000;
    OPEN_EXISTING:=3;
    INVALID_HANDLE_VALUE=$FFFFFFFF;
    MAXDWORD:=$FFFFFFFF;
    //Попытка открыть порт
    aHandle:=aKernel32.CreateFileW(ИмяПорта,GENERIC_READ or GENERIC_WRITE,0,0,OPEN_EXISTING,0,0);
    If aHandle=INVALID_HANDLE_VALUE Then
      Exit "Ошибка открытия COM-порта: "+TranslateError(aKernel32,aKernel32.GetLastError);
    EndIf;
    Try
      //Установка параметров связи
      rDCB.Allocate();
      rDCB.DCBlength:=rDCB.Size();
      If Not aKernel32.GetCommState(aHandle,rDCB) Then
        Exit "Ошибка настройки COM-порта (1): "+TranslateError(aKernel32,aKernel32.GetLastError);
      EndIf;
      rDCB.BaudRate:=Number(TearStr(Стр,","));
      аЧет:=спЧетность.Find(LowerCase(TearStr(Стр,",")));
      аЧет:=Max(аЧет-1,0);
      rDCB.Parity:=аЧет;
      rDCB.ByteSize:=Number(TearStr(Стр,","));
      аБит:=спБит.Find(LowerCase(TearStr(Стр,",")));
      аБит:=Max(аБит-1,0);
      rDCB.StopBits:=аБит;    //StopBits = 1
      If Not aKernel32.SetCommState(aHandle,rDCB) Then
        Exit "Ошибка настройки COM-порта (2): "+TranslateError(aKernel32,aKernel32.GetLastError);
      EndIf;
      
      //Установка времени ожидания 
      rCOMMTIMEOUTS.Allocate();
      rCOMMTIMEOUTS.ReadIntervalTimeout:=MAXDWORD;
      rCOMMTIMEOUTS.ReadTotalTimeoutMultiplier:=MAXDWORD;
      rCOMMTIMEOUTS.ReadTotalTimeoutConstant:=спНастройки["_Timeout"];
      rCOMMTIMEOUTS.WriteTotalTimeoutMultiplier:=0;//спНастройки["_Timeout"];
      rCOMMTIMEOUTS.WriteTotalTimeoutConstant:=спНастройки["_Timeout"];
      If not aKernel32.SetCommTimeouts(aHandle,rCOMMTIMEOUTS) Then
        Exit "Ошибка настройки COM-порта (3): "+TranslateError(aKernel32,aKernel32.GetLastError);
      EndIf;
      
      //Проверка связи
      Buf:=Buffer.Create(1);
      Buf[0]:=$05;
      b:=0;
      If not aKernel32.WriteFile(aHandle,Buf,1,b,0) Then
        Exit "Ошибка проверки связи с ККМ (1): "+TranslateError(aKernel32,aKernel32.GetLastError);
      EndIf;
      
      If not aKernel32.ReadFile(aHandle,Buf,1,b,0) Then
        Exit "Ошибка проверки связи с ККМ (2): "+TranslateError(aKernel32,aKernel32.GetLastError);
      EndIf;
      
      If Buf[0]<>$06 Then
        Exit "Неизвестный ответ ККМ ("+Buf[0]+") на запрос проверки связи!";
      EndIf;
      спНастройки["aHandle"]:=aHandle;
      
      //Начало работы
      аДата:=Date();
      ExecuteCommand(спНастройки,$10,Ansi(FormatDate(аДата,"ddmmyy"))+Chr($1C,1)+Ansi(FormatDate(аДата,"hhttss")));
      
      спНастройки["Соединено"]:=1;
    Finally
      if спНастройки["Соединено"]<>1 Then
        aKernel32.CloseHandle(aHandle);
        спНастройки["aHandle"]:=0;
      EndIf;
    EndTry;
  Except
    Exit PopError()+_NEWLINE+"(2) Невозможно открыть и настроить COM-порт!";
  EndTry;
EndFunction

Function DriverDisconnect(спНастройки)
  Try
    aKernel32:=спНастройки["aKernel32"];
    aHandle:=спНастройки["aHandle"];
    aKernel32.CloseHandle(aHandle);
    спНастройки["aHandle"]:=0;
    спНастройки["Соединено"]:=0;
  Except
    Exit PopError()+_NEWLINE+"(3) Невозможно закрыть COM-порт!";
  EndTry;
EndFunction

//Тип запроса в "ТипЗапросаИнформации", поддерживаются: МодельККТ, СерийныйНомерККТ, РегистрационныйНоменККТ, СерийныйНомерФН, ДатаОкончанияФН, ДатаПервогоНеотправленногоДокумента
//Ответ в "ОтветНаЗапросИнформации". Если запрос не удачный или не поддерживается, ответ -- пустая строка.
Function DeviceInfo(спНастройки)
  Try
    спНастройки["ОтветНаЗапросИнформации"]:="";
    If спНастройки["Соединено"]<>1 Then
      Exit;
    EndIf;
    СтрЗапрос:=спНастройки["ТипЗапросаИнформации"];
    
    If СтрЗапрос="МодельККТ" Then
      СпМодели:=List.Create("Viki Mini","Viki Tower","Viki Print 57","Viki Print 57+","Viki Print 80+");
      Результат:=ExecuteCommand(спНастройки,$02,"21");//21|<Модель>
      TearStr(Результат,Chr($1C));
      Результат:=Number(TearStr(Результат,Chr($1C)));
      спНастройки["ОтветНаЗапросИнформации"]:=?((Результат<1)Or(Результат>СпМодели.Size()),"Неизвестная модель",СпМодели[Результат]);
      Результат:=ExecuteCommand(спНастройки,$02,"70");//70|<Прошивка>
      TearStr(Результат,Chr($1C));
      Результат:=TearStr(Результат,Chr($1C));
      спНастройки["ОтветНаЗапросИнформации"]:=спНастройки["ОтветНаЗапросИнформации"]+?(Результат<>"",", прошивка "+Результат);
    ElseIf СтрЗапрос="СерийныйНомерККТ" Then
      Результат:=ExecuteCommand(спНастройки,$02,"1");//1|<Заводской номер>
      TearStr(Результат,Chr($1C));
      спНастройки["ОтветНаЗапросИнформации"]:=TearStr(Результат,Chr($1C));
    ElseIf СтрЗапрос="РегистрационныйНоменККТ" Then
      Результат:=ExecuteCommand(спНастройки,$02,"4");//4|<Рег. номер>
      TearStr(Результат,Chr($1C));
      спНастройки["ОтветНаЗапросИнформации"]:=TearStr(Результат,Chr($1C));
    ElseIf СтрЗапрос="СерийныйНомерФН" Then
      Результат:=ExecuteCommand(спНастройки,$78,"1");//1|<Вернуть регистрационный номер ФН>
      TearStr(Результат,Chr($1C));
      спНастройки["ОтветНаЗапросИнформации"]:=TearStr(Результат,Chr($1C));
    ElseIf СтрЗапрос="ДатаОкончанияФН" Then
      Результат:=ExecuteCommand(спНастройки,$02,"14");//14|<Дата>|<Число дней>
      TearStr(Результат,Chr($1C));
      Результат:=TearStr(Результат,Chr($1C));//ddmmyy
      спНастройки["ОтветНаЗапросИнформации"]:=Date(Left(Результат,2)+"."+Mid(Результат,3,2)+"."+Right(Результат,2));
      спНастройки["ОтветНаЗапросИнформации"]:=?(IsEmpty(спНастройки["ОтветНаЗапросИнформации"]),"",спНастройки["ОтветНаЗапросИнформации"]);
    ElseIf СтрЗапрос="ДатаПервогоНеотправленногоДокумента" Then
      //Не поддерживается
    EndIf;
  Except
    Exit "Ошибка команды: "+PopError();
  EndTry;
EndFunction

Function CashDrawerInfo(спНастройки)
  Try
    If спНастройки["Соединено"]<>1 Then
      спНастройки["ДенежныйЯщикСостояние"]:=-1;
      спНастройки["ДенежныйЯщикСумма"]:=-1;
      Exit;
    EndIf;
    //Состояние д.я.
    Результат:=Number(TearStr(ExecuteCommand(спНастройки,$81),Chr($1C)));
    спНастройки["ДенежныйЯщикСостояние"]:=Результат=1;//Открыт
    //Сведения о ККТ
    Результат:=ExecuteCommand(спНастройки,$02,"7");//7|<Сумма>
    TearStr(Результат,Chr($1C));
    Результат:=Number(TearStr(Результат,Chr($1C)));
    спНастройки["ДенежныйЯщикСумма"]:=Результат;
  Except
    Exit "Ошибка команды: "+PopError();
  EndTry;
EndFunction

Function OpenCashDrawer(спНастройки)
  Try
    ExecuteCommand(спНастройки,$80);
  Except
    Exit PopError()+_NEWLINE+"Неудачная попытка открытия денежного ящика!";
  EndTry;
EndFunction

Function ShiftInfo(спНастройки)
  Try
    If спНастройки["Соединено"]<>1 Then
      спНастройки["СменаСостояние"]:=-1;
      Exit;
    EndIf;
    //-1 -- ошибка, 0 -- закрыта, 1 -- открыта, 2 -- истекла, 3 -- другое
    спНастройки["СменаСостояние"]:=3;
    //Получение информации об ФН
    Результат:=ExecuteCommand(спНастройки,$78,"6");//6|<Номен смены>|<Открыта>|<Номер чека>
    TearStr(Результат,Chr($1C));
    спНастройки["НомерСмены"]:=Number(TearStr(Результат,Chr($1C)));
    ФлОткрыта:=Number(TearStr(Результат,Chr($1C)));
    НомерДокумента:=Number(TearStr(Результат,Chr($1C)));
    спНастройки["СменаСостояние"]:=ФлОткрыта;
    //Проверяем, истекла ли смена
    Результат:=ExecuteCommand(спНастройки,$00,"6");//<Фатальное состояние>|<Текущие флаги>|<Статус документа>
    TearStr(Результат,Chr($1C));
    Фл:=Number(TearStr(Результат,Chr($1C)));
    //...
    //2 -- смена открыта
    //3 -- смена больше 24 часов
    //...
    //8 -- Не было завершено закрытие смены, необходимо повторить операцию
    //...
    If Фл=3 Then
      спНастройки["СменаСостояние"]:=2;
    ElseIf Фл=8 Then
      спНастройки["СменаСостояние"]:=3;
    EndIf;
      
    If спНастройки["ДополнительнаяИнформация"]=1 Then
      спНастройки["ДополнительнаяИнформация"]:=0;
      //Номер последнего документа
      Результат:=ExecuteCommand(спНастройки,$03,"2");//2|<Тип чека>|<Оп счетчик>|<Номер чека>|<Номер документа>|<Сумма чека>|<Сумма скидки>|0|<Строка ФП>|<Номер ФД>
      TearStr(Результат,Chr($1C));
      TearStr(Результат,Chr($1C));
      TearStr(Результат,Chr($1C));
      спНастройки["НомерДокумента"]:=Number(TearStr(Результат,Chr($1C)))+1;
      
      Результат:=ExecuteCommand(спНастройки,$02,"1");//1|<Заводской номер ККТ>
      TearStr(Результат,Chr($1C));
      спНастройки["НомерККТ"]:=TearStr(Результат,Chr($1C));
      
      //Запрос состояния печатающего устройства
      Результат:=Number(TearStr(ExecuteCommand(спНастройки,$04),Chr($1C)));//<Состояние>: 0 -- не готов (???), 1 -- нет бумаги, 2 -- открыта крышка, 3 -- ошибка резчика, 7 -- нет связи с принтером
      спНастройки["БумагаЗаканчивается"]:=Результат=1; 
      спНастройки["ОбщаяПроблемаККМ"]:=(Результат=2)or(Результат=3)or(Результат=7);
    EndIf;
  Except
    Exit "Ошибка команды: "+PopError();
  EndTry;
EndFunction

Function OpenShift(спНастройки)
  Try
    Кассир:=спНастройки["Кассир"];
    ExecuteCommand(спНастройки,$23,EncodeStringKKT(Кассир.ПолнНаименование));
  Except
    Exit PopError()+_NEWLINE+"Неудачная попытка открыть смену!";
  EndTry;
EndFunction

Function CloseShift(спНастройки)
  Try
    Кассир:=спНастройки["Кассир"];
    //<Пользователь>|<Опции>|...
    //<Опции>: бит 0: с суммой итога на начало смены
    //         бит 1: с нарастающим итогом
    //         бит 2: информация об отложенных чеках
    //         бит 3: информация о скидках
    //         бит 4: информация о д.я.
    //         бит 5: не печатать инфо. о неиспользованных платежных средствах
    //         бит 6: дата и время начала смены
    //         бит 7: секции на отчете
    ExecuteCommand(спНастройки,$21,EncodeStringKKT(Кассир.ПолнНаименование)+Chr($1C,1)+Ansi("3"));
  Except
    Exit PopError()+_NEWLINE+"Неудачная попытка закрыть смену!";
  EndTry;
EndFunction

Function DepositMoney(спНастройки)
  Try
    //<Тип документа>|<Номер отдела>|<Имя оператора>|<Номер документа>|<Система налогообложения>|<Адрес пользователя>
    //<Тип документа>: бит 0..3: 1 -- сервисный, 2 -- продажа, 3 -- возврат, 4 -- внесение в кассу, 5 -- инкассация, 6 -- покупка, 7 -- возврат покупки
    //                 бит 4: 0 -- обычный режим, 1 -- пакетный
    //                 бит 5: 0 -- обычная печать, 1 -- отложеная печать
    Кассир:=спНастройки["Кассир"];
    ExecuteCommand(спНастройки,$30,"4"+Chr($1C,1)+Chr($1C,1)+EncodeStringKKT(Кассир.ПолнНаименование)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1));
    
    //<Тип купюры>|<Сумма>
    ExecuteCommand(спНастройки,$48,Chr($1C,1)+Round(Number(спНастройки["Сумма"]),2));
    //<Отрезка>|<Адрес покупателя>|<Флаги>|<Место расчётов 1187>|<Адрес отправителя чеков 1117>|<Номер автомата 1036>|<Тег 1085>|<Тег 1086>|<Покупатель 1227>|<ИНН покупателя 1228>|
    //          <Дата рождения покупателя 1243>|<Гражданство 1244>|<Код вида документа, удостоверяющего личность 1245>|<Данные документа, удостоверяющего личность 1246>|
    //          <Адрес покупателя (клиента) 1254>
    //Ответ:
    //<Сквозной номер документа>|<Операционный счетчик>|<Строка ФД и ФП>|<ФД - номер фискального документа>|<ФП - фискальный признак>|<Номер смены>|<Номер документа в смене>|
    //          <Дата документа>|<Время документа>
    ExecuteCommand(спНастройки,$31);
  Except
    Exit PopError()+_NEWLINE+"Неудачная выгрузки внесения наличных!";
  EndTry;
EndFunction

Function WithdrawMoney(спНастройки)
  Try
    //<Тип документа>|<Номер отдела>|<Имя оператора>|<Номер документа>|<Система налогообложения>|<Адрес пользователя>
    //<Тип документа>: бит 0..3: 1 -- сервисный, 2 -- продажа, 3 -- возврат, 4 -- внесение в кассу, 5 -- инкассация, 6 -- покупка, 7 -- возврат покупки
    //                 бит 4: 0 -- обычный режим, 1 -- пакетный
    //                 бит 5: 0 -- обычная печать, 1 -- отложеная печать
    Кассир:=спНастройки["Кассир"];
    ExecuteCommand(спНастройки,$30,"5"+Chr($1C,1)+Chr($1C,1)+EncodeStringKKT(Кассир.ПолнНаименование)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1));
    //<Тип купюры>|<Сумма>
    ExecuteCommand(спНастройки,$48,Chr($1C,1)+Round(Number(спНастройки["Сумма"]),2));
    //<Отрезка>|<Адрес покупателя>|<Флаги>|<Место расчётов 1187>|<Адрес отправителя чеков 1117>|<Номер автомата 1036>|<Тег 1085>|<Тег 1086>|<Покупатель 1227>|<ИНН покупателя 1228>|
    //          <Дата рождения покупателя 1243>|<Гражданство 1244>|<Код вида документа, удостоверяющего личность 1245>|<Данные документа, удостоверяющего личность 1246>|
    //          <Адрес покупателя (клиента) 1254>
    //Ответ:
    //<Сквозной номер документа>|<Операционный счетчик>|<Строка ФД и ФП>|<ФД - номер фискального документа>|<ФП - фискальный признак>|<Номер смены>|<Номер документа в смене>|
    //          <Дата документа>|<Время документа>
    ExecuteCommand(спНастройки,$31);
  Except
    Exit PopError()+_NEWLINE+"Неудачная выгрузки изъятия наличных!";
  EndTry;
EndFunction


Function PrintReportX(спНастройки)
  Try
    Результат:=ExecuteCommand(спНастройки,$78,"6");//6|<Номен смены>|<Открыта>|<Номер чека>
    TearStr(Результат,Chr($1C));
    спНастройки["НомерСмены"]:=Number(TearStr(Результат,Chr($1C)));
    ФлОткрыта:=Number(TearStr(Результат,Chr($1C)));
    If ФлОткрыта<>1 Then
      Exit "Смена не открыта!";
    EndIf;
    Кассир:=спНастройки["Кассир"];
    Результат:=ExecuteCommand(спНастройки,$20,EncodeStringKKT(Кассир.ПолнНаименование));
  Except
    Exit PopError()+_NEWLINE+"Неудачная попытка печати X-отчета!";
  EndTry;
EndFunction

Function PrintReportZ(спНастройки)
  Try
    Результат:=ExecuteCommand(спНастройки,$78,"6");//6|<Номен смены>|<Открыта>|<Номер чека>
    TearStr(Результат,Chr($1C));
    спНастройки["НомерСмены"]:=Number(TearStr(Результат,Chr($1C)));
    ФлОткрыта:=Number(TearStr(Результат,Chr($1C)));
    If ФлОткрыта=1 Then
      Exit "Смена не закрыта!";
    EndIf;
    Кассир:=спНастройки["Кассир"];
    //0xA1 вместо $59? 
    Результат:=ExecuteCommand(спНастройки,$59,EncodeStringKKT(Кассир.ПолнНаименование));
  Except
    Exit PopError()+_NEWLINE+"Неудачная попытка печати Z-отчета!";
  EndTry;
EndFunction

//спНастройки["НомерДокумента"] -- фискальный номер документа для печати (если пустой -- печать последнего чека)
Function PrintLastReceipt(спНастройки)
  Try
    //<ТипЧека>|<Номер отдела>|<Оператор>|<Номер чека>|<Номер кассы>|<Дата чека>|<Время чека>|<Номер ФД>|<СНО>
    //<ТипЧека>: 2 -- приход, 3 -- возврат прихода, 6 -- расход, 7 -- возврат расхода
    Кассир:=спНастройки["Кассир"];
    Результат:=ExecuteCommand(спНастройки,$53,"2"+Chr($1C,1)+Chr($1C,1)+EncodeStringKKT(Кассир.ПолнНаименование)+Chr($1C,1)+
      Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+?(IsEmpty(спНастройки["НомерДокумента"]),"",спНастройки["НомерДокумента"])+Chr($1C,1));
  Except
    Exit PopError()+_NEWLINE+"Неудачная попытка печати Z-отчета!";
  EndTry;
EndFunction


//ФФД 1.2: https://forum.nalog.ru/index.php?app=core&module=attach&section=attach&attach_id=3772
//Используются поля:
//Агент -- не используется
//ТипЧека -- число (см. ниже)
//ФлРозничныйПокупатель -- число
//Контрагент
//ЮрЛицо
//ЕГАИССылка -- URL типа "https://check.egais.ru?id=cf1b1096-3cbc-11e7-b3c1-9b018b2ba3f7", если не пустая, будет выведено дополнение к чеку.
//ЕГАИСПодпись -- строка типа "79DED4A448069B0BFF602FF646F4E9B24D253D311679EA15307AEF38AEEE7933C9175DE5814C3DCF89BF63853CB75003D9FD979F3BEBBC93AFADF1D9A429623F"
//ДополнительнаяИнформация -- текст для печати после всех чеков
//ТабИСМП -- таблица "Номенклатура,Марка,ФлНеПрошлаПроверку,Причина,Поле1,Поле2,Тег1262,Тег1263,Тег1264,Тег1265" для проверки и прикрепления к чеку
//ТабОшибкиПроверкиМарок -- исходящая таблица со столбцами "Марка,Причина"
//Таблица -- Номенклатура,Количество,Сумма,СтавкаНДС,ФлЛитры
//Сумма -- сумма документа
//ЭлектроннаяСумма -- сумма документа электронной оплатой
//ДругаяБезналичнаяСумма -- сумма документа с особыми оплатами (подарочные сертификаты и пр.)
//СуммаЗакрытияАванса -- при операции закрытия аванса (11), сумма указывает на часть суммы документа, которая ушла на закрытие аванса
//ЭлектроннаяСумма+ДругаяБезналичнаяСумма должны быть меньше или равны параметру Сумма
Function PrintReceipt(спНастройки)
  ФлОтменитьЧек:=0;
  Try
    //Версия ФФД
    ФФД12:=0;
    ФФД11:=0;
    ФФД10:=0;
    Try
      Результат:=ExecuteCommand(спНастройки,$78,"22");//22|<Текущая версия>|<Макс. поддерживаемая версия>
      TearStr(Результат,Chr($1C));
      //2 = 1.05, 4 = 1.2
      ФлТек:=Number(TearStr(Результат,Chr($1C)));
      ФлМакс:=Number(TearStr(Результат,Chr($1C)));
      ФФД12:=(ФлТек>=4)And(ФлМакс>=4);
      ФФД11:=(ФлТек>=3)And(ФлМакс>=3);
    Except
      ФФД12:=0;
      ФФД11:=0;
      ФФД10:=1;
    EndTry;
    
    //Единица измерения (2108)
    //0 -- шт    (796)
    //10 - г
    //11 - кг    (166)
    //12 - т
    //20 - см
    //21 - дм
    //22 - м     (006)
    //30 - см2
    //31 - дм2
    //32 - м2    (055)
    //40 - мл
    //41 - л     (112)
    //42 - м3    (113)
    //...
    спЕдиница:=List.Create();
    If ФФД12 Then
      спЕдиница.Add(0);
      спЕдиница["166"]:=11;
      спЕдиница["006"]:=22;
      спЕдиница["055"]:=32;
      спЕдиница["112"]:=41;
      спЕдиница["113"]:=42;
    EndIf;
    
    //Тип чека:
    //1 -- ПКО (продажа)                      = $30,2
    //2 -- РКО (возврат продажи)              = $30,3
    //3 -- Коррекция ПКО (продажи)            = $58
    //4 -- Коррекция РКО (возврата продажи)   = $58
    //5 -- РКО (покупка)                      = $30,6
    //6 -- ПКО (возврат покупки)              = $30,7
    //7 -- Коррекция РКО (покупки)            = $58
    //8 -- Коррекция ПКО (возврата покупки)   = $58
    //10 -- Аванс (товар не отдается)         = $30,2, 1214=4, 1212=10, Количество = 1, Наименование "Аванс за товары"
    //11 -- Закрытие аванса                   = $30,2, 1214=4, 1212=1
    //12 -- Кредит                            = $30,2, 1214=5, 1212=1
    //13 -- Закрытие кредита                  = $30,2, 1214=7, 1212=10, Количество = 1, Наименование "Закрытие кредита за товары"
    
    //Признак предмена расчета (1212):
    //[+] 1. "ТОВАР"                      //Кроме акцизного и марочного, алкоголь марочным товаром не считается ("не такой" марочный)
    //[+] 2. "ПОДАКЦИЗНЫЙ ТОВАР"          //Для ФФД 1.05,1.1
    //3. "РАБОТА"
    //4. "УСЛУГА"
    //5. "СТАВКА АЗАРТНОЙ ИГРЫ"
    //6. "ВЫИГРЫШ АЗАРТНОЙ ИГРЫ"
    //7. "ЛОТЕРЕЙНЫЙ БИЛЕТ"
    //8. "ВЫИГРЫШ ЛОТЕРЕИ"
    //9. "ПРЕДОСТАВЛЕ-НИЕ РИД"
    //[+] 10. "ПЛАТЕЖ"                    //об авансе, задатке, предоплате, кредите
    //11. "АГЕНТСКОЕ ВОЗНАГРАЖДЕНИЕ"
    //12. "ВЫПЛАТА"
    //13. "ИНОЙ ПРЕДМЕТ РАСЧЕТА"
    //14. "ИМУЩЕСТВЕННОЕ ПРАВО"
    //15. "ВНЕРЕАЛИЗАЦИОННЫЙ ДОХОД"
    //16. "ИНЫЕ ПЛАТЕЖИ И ВЗНОСЫ"
    //17. "ТОРГОВЫЙ СБОР"
    //18. "КУРОРТНЫЙ СБОР"
    //19. "ЗАЛОГ"
    //20. "РАСХОД"
    //21. "ВЗНОСЫ НА ОБЯЗАТЕЛЬНОЕ ПЕНСИОННОЕ СТРАХОВАНИЕ ИП"
    //22. "ВЗНОСЫ НА ОБЯЗАТЕЛЬНОЕ ПЕНСИОННОЕ СТРАХОВАНИЕ"
    //23. "ВЗНОСЫ НА ОБЯЗАТЕЛЬНОЕ МЕДИЦИНСКОЕ СТРАХОВАНИЕ ИП"
    //24. "ВЗНОСЫ НА ОБЯЗАТЕЛЬНОЕ МЕДИЦИНСКОЕ СТРАХОВАНИЕ"
    //25. "ВЗНОСЫ НА ОБЯЗАТЕЛЬНОЕ СОЦИАЛЬНОЕ СТРАХОВАНИЕ"
    //26. "ПЛАТЕЖ КАЗИНО"
    //27. "ВЫДАЧА ДЕНЕЖНЫХ СРЕДСТВ"
    //30. подакцизном товаре, подлежащем маркировке средством идентификации, не имеющем кода маркировки
    //31. подакцизном товаре, подлежащем маркировке средством идентификации, имеющем код маркировки
    //32. товаре, подлежащем маркировке средством идентификации, не имеющем кода маркировки, за исключением подакцизного товара
    //[+] 33. товаре, подлежащем маркировке средством идентификации, имеющем код маркировки, за исключением подакцизного товара
        
    //Признаки способа расчета (1214):
    //1 -- Предоплата 100%
    //2 -- Предоплата
    //3 -- Аванс
    //4 -- Полная оплата (+ аванс)
    //5 -- Частичная оплата (+кредит)
    //6 -- Полный кредит
    //7 -- Оплата кредита
    
    //0 - НДС 20%
    //1 - НДС 10%
    //2 - НДС 0%
    //3 - Без НДС
    //4 - НДС 20/120
    //5 - НДС 10/110
    //6 - НДС 5%
    //7 - НДС 7%
    //8 - НДС 5/105
    //9 - НДС 7/107
    //Без, 0%, 5%, 7%, 10%, 18%, 20%
    зЮЛ:=спНастройки["ЮрЛицо"];
    If глСпециальнаяСтавкаУСН(зЮЛ,Date())=5 Then
      спНДС:=List.Create("3","2","6","6","6","6","6");
    ElseIf глСпециальнаяСтавкаУСН(зЮЛ,Date())=7 Then
      спНДС:=List.Create("3","2","7","7","7","7","7");
    Else
      спНДС:=List.Create("3","2","6","7","1","0","0");
    EndIf;
    
    
    аТип0:=спНастройки["ТипЧека"];
    ФлРозничныйПокупатель:=Number(спНастройки["ФлРозничныйПокупатель"]);
    ФлДобавкаСНО:=0;
    аТип:=2;
    аТипКоманды:=$30;
    If аТип0=1 Then
      аТип:=2;
    ElseIf аТип0=2 Then
      аТип:=3;
    ElseIf аТип0=3 Then
      ФлДобавкаСНО:=0;
      аТипКоманды:=$58;
    ElseIf аТип0=4 Then
      ФлДобавкаСНО:=0b1000000;
      аТипКоманды:=$58;
    ElseIf аТип0=5 Then
      аТип:=6;
    ElseIf аТип0=6 Then
      аТип:=7;
    ElseIf аТип0=7 Then
      ФлДобавкаСНО:=0b10;
      аТипКоманды:=$58;
    ElseIf аТип0=8 Then
      ФлДобавкаСНО:=0b1000010;
      аТипКоманды:=$58;
    ElseIf аТип0=10 Then
      аТип:=2;
    ElseIf аТип0=11 Then
      аТип:=2;
    ElseIf аТип0=12 Then
      аТип:=2;
    ElseIf аТип0=13 Then
      аТип:=2;
    EndIf;
    Кассир:=спНастройки["Кассир"];
    
    СтрСистемаНО:="";
    If not IsEmpty(спНастройки["_TaxType"]) Then
      СтрСистемаНО:=спНастройки["_TaxType"];
    EndIf;
    If (аТипКоманды=$58)And(СтрСистемаНО="") Then
      //Для чека коррекции укажен первый СНО, если не указан
      Результат:=ExecuteCommand(спНастройки,$02,"23");//23|<СНО>|<Режим работы>|<Доп. режим работы>
      //бит: 0 -- общая
      //бит: 1 -- упрощенная (доход) 
      //бит: 2 -- упрощенная (доход - расход) 
      //бит: 3 -- ЕНВД
      //бит: 4 -- ЕСХН
      //бит: 5 -- патентная      
      TearStr(Результат,Chr($1C));
      Фл:=Number(TearStr(Результат,Chr($1C)));
      СтрСистемаНО:=0;
      If (Фл%2=0)And(Фл>0) Then
        Repeat
          Фл:=Фл shr 1;
          СтрСистемаНО:=СтрСистемаНО+1;
          If Фл%2=1 Then
            Break;
          EndIf;
        Until Фл=0;
      EndIf;
    EndIf;
    
    If аТипКоманды=$58 Then
      //<Имя оператора>||||||<Тип коррекции>|<Дата документа-основания>|<Номер документа-основания>
      //<Тип коррекции> (биты): 0: 0 -- самостоятельная, 1 -- по предписанию
      //                        1: 1 -- расход
      //                        2..4: СНО
      //                        5: 0
      //                        6: 1 -- возврат
      СтрСистемаНО:=СтрСистемаНО*4+ФлДобавкаСНО;
      ExecuteCommand(спНастройки,$58,EncodeStringKKT(Кассир.ПолнНаименование)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+СтрСистемаНО+Chr($1C,1)+Chr($1C,1));
    Else
      //Не печатать чек?
      If _And(спНастройки["NoPaperWhenUsingEmail"]=1,Trim(спНастройки["ПочтаИлиТелефонКлиента"])<>"") Then
        аТип:=аТип or 0b10000000;
      EndIf;
    
      //<Тип документа>|<Номер отдела>|<Имя оператора>|<Номер документа>|<Система налогообложения>|<Адрес пользователя>
      //<Тип документа>: бит 0..3: 1 -- сервисный, 2 -- продажа, 3 -- возврат, 4 -- внесение в кассу, 5 -- инкассация, 6 -- покупка, 7 -- возврат покупки
      //                 бит 4: 0 -- обычный режим, 1 -- пакетный
      //                 бит 5: 0 -- обычная печать, 1 -- отложеная печать
      //                 бит 7: 0 - Обычный режим печати чека, 1 - Чек не печатается; Реализована , начиная с версий 565.1.13 и 665.4.13
      ExecuteCommand(спНастройки,$30,Ansi(аТип)+Chr($1C,1)+Chr($1C,1)+EncodeStringKKT(Кассир.ПолнНаименование)+Chr($1C,1)+Chr($1C,1)+СтрСистемаНО+Chr($1C,1));
    EndIf;
    ФлОтменитьЧек:=1;
  
    ТабИСМП:=спНастройки["ТабИСМП"];
    If ТабИСМП.GetColumnIndex("Поле3")=0 Then
      ТабИСМП.AddColumn("Поле3");
    EndIf;
    
    //Проверка кодов марок ГИС МТ
    спНастройки["ТабОшибкиПроверкиМарок"]:=0;
    If (аТип0<>10)And(аТип0<>13)And(ФФД12) Then
      ТабОшибкиПроверкиМарок:=Tab.Create("Марка,Причина");
      спНастройки["ТабОшибкиПроверкиМарок"]:=ТабОшибкиПроверкиМарок;
      ФлВозврат:=(аТип0=2)Or(аТип0=5);
      //Прервать предыдущие запросы по валидации, если они проходят в данный момент
      Try
        ExecuteCommand(спНастройки,$79,"3"+Chr($1C,1)+"0");
      Except
      EndTry;
      ТабИСМП.Select();
      While ТабИСМП.Next() Do
        //ТабИСМП.Марка - символы 0..$1F передаются как $??, символ $ передается как $24 (не описано в документации, но, видимо, подразумевается)
        Стр:=ТабИСМП.Марка;
        СтрМарка:="";
        For i:=1 To Length(Стр) Do
          If (Asc(Стр[i])<$20)or(Стр[i]="$") Then
            AppendStringToBufferedString(СтрМарка,"$"+DecToHex(Asc(Стр[i]),2));
          Else
            AppendStringToBufferedString(СтрМарка,Стр[i]);
          EndIf;
        EndDo;
        ТабИСМП.Поле3:=СтрМарка;
      
        //Поле1:
        //1 -Штучный товар, подлежащий обязательной маркировке средством идентификации, реализован
        //2 -Мерный товар, подлежащий обязательной маркировке средством идентификации, в стадии реализации
        //3 -Штучный товар, подлежащий обязательной маркировке средством идентификации, возвращен
        //4 -Часть товара, подлежащего обязательной маркировке средством идентификации, возвращена
        //255 -Статус товара, подлежащего обязательной маркировке средством идентификации, не изменился
        
        //1023: для марок упаковки при продаже единицы может записываться как "1/x", где x -- количество в упаковке
        //<Номер запроса>|<Код маркировки>|<Режим=0>|<Планируемый статус товара 2003>|<Количество товара 1023>|<Мера количества 2108>|<Режим работы>
        //<Режим работы>: 1 -- проверять онлайн, даже если оффлайн проверка не пройдена (требуется, если покупатель "принял" факт того, что марка может быть некорректной)
        If ТабИСМП.Номенклатура.флВесовойТовар Then
          ТабИСМП.Поле1:=?(ФлВозврат,"4","2");
          аЕдиница:=спЕдиница[ТабИСМП.Номенклатура.базЕдиница.ВнешнийКод];
          If IsEmpty(аЕдиница) Then
            аЕдиница:=0;
          EndIf;
          Результат:=ExecuteCommand(спНастройки,$79,"1"+Chr($1C,1)+Ansi(СтрМарка)+Chr($1C,1)+"0"+Chr($1C,1)+ТабИСМП.Поле1+Chr($1C,1)+Round(ТабИСМП.Количество,9)+Chr($1C,1)+аЕдиница+Chr($1C,1)+"1");
        Else
          ТабИСМП.Поле1:=?(ФлВозврат,"3","1");
          Результат:=ExecuteCommand(спНастройки,$79,"1"+Chr($1C,1)+Ansi(СтрМарка)+Chr($1C,1)+"0"+Chr($1C,1)+ТабИСМП.Поле1+Chr($1C,1)+"1"+Chr($1C,1)+"0"+Chr($1C,1)+"1");
        EndIf;
        //Результат:
        //<Номер запроса>|<Результат проверки КМ в ФН 2106>|<Причина того, что КМ не проверен в ФН>|<Результаты обработки запроса 2005>|<Код обработки запроса 2105>|<Сведения о статусе товара 2109>
        TearStr(Результат,Chr($1C));
        ФлРезультат:=Number(TearStr(Результат,Chr($1C)));
        ФлПричина:=Number(TearStr(Результат,Chr($1C)));
        ФлРезультат2:=Number(TearStr(Результат,Chr($1C)));
        ФлПричина2:=Number(TearStr(Результат,Chr($1C)));
        ФлПричина3:=Number(TearStr(Результат,Chr($1C)));
        
        //биты 2106 (LIBFPTR_PARAM_MARKING_CODE_ONLINE_VALIDATION_RESULT):
        //бит 0: был проверен
        //бит 1: проверка успешна
        //бит 2: проверка ОИСМ выполнена
        //бит 3: планируемый статус (реализация или возврат) корректен, иначе -- нет
        //бит 4: 0 -- онлайн режим ККТ, 1 -- автономно
        ТабИСМП.Поле2:=ФлРезультат;
        
        //<Номер запроса>|<Принять=1>
        Результат:=ExecuteCommand(спНастройки,$79,"2"+Chr($1C,1)+"1");
        
        If ФлПричина>0 Then
          If ФлПричина>1 Then
            СпРезультат:=List.Create("КМ данного типа не подлежит проверке в ФН","ФН не содержит ключ проверки кода проверки этого КМ",
              "Проверка невозможна, так как отсутствуют теги 91 и/или 92 или их формат неверный","Внутренняя ошибка в ФН при проверке этого КМ");
            Стр:=?(СпРезультат.Size()<=ФлПричина,СпРезультат[ФлПричина],"Неизвестная ошибка ККМ: "+ФлПричина);
            ТабОшибкиПроверкиМарок.AddLine("Марка,Причина",ТабИСМП.Марка,Стр);
          EndIf;
        ElseIf ФлПричина2>0 Then
          //тег 2105:
          //0 - Запрос имеет корректный формат, в том числе корректный формат кода маркировки
          //1 - Запрос имеет некорректный формат
          //2 - Указанный в запросе код маркировки имеет некорректный формат (не распознан)        
          СпРезультат:=List.Create("Запрос имеет некорректный формат","Указанный в запросе код маркировки имеет некорректный формат (не распознан)");
          Стр:=?(СпРезультат.Size()<=ФлПричина2,СпРезультат[ФлПричина2],"Неизвестная ошибка ИСМП: "+ФлПричина2);
          ТабОшибкиПроверкиМарок.AddLine("Марка,Причина",ТабИСМП.Марка,Стр);
        ElseIf ФлПричина3>1 Then
          //тег 2109:
          //1 - Планируемый статус товара корректен
          //2 - Планируемый статус товара некорректен
          //3 - Оборот товара приостановлен        
          СпРезультат:=List.Create("Планируемый статус товара некорректен"+?(ФлВозврат," (возврат)"," (списание)"),"Оборот товара приостановлен");
          Стр:=?(СпРезультат.Size()<=ФлПричина3-1,СпРезультат[ФлПричина3-1],"Неизвестный статус товара ИСМП: "+ФлПричина3);
          ТабОшибкиПроверкиМарок.AddLine("Марка,Причина",ТабИСМП.Марка,Стр);
        EndIf;
      EndDo;
    EndIf;
    
    
    //Позиции
    ФлНДС:=глУчитыватьНДС(зЮЛ,Date())<>0;
    См:=0;
    If (аТип0=10)Or(аТип0=13) Then
      См:=спНастройки["Сумма"];
      //<Название товара (256)>|<Артикул товара>|<Количество товара в товарной позиции>|<Цена товара>|<Номер ставки налога>|<Номер товарной позиции>|<Номер секции>|<Тип скидки/наценки>|
      //    <Единица измерения>|<Сумма скидки>|<Признак способа расчета 1214>|<Признак предмета расчета 1212>|<Код страны происхождения товара 1230 (3)>|<Номер таможенной декларации 1231 (32)>|
      //    <Сумма акциза 1229>
      //<Тип скидки/наценки>: 0 или пусто - нет скидки; 2 - скидка; 4 - наценка
      ExecuteCommand(спНастройки,$42,EncodeStringKKT(?(аТип0=10,"Аванс за товары","Закрытие кредита за товары"))+Chr($1C,1)+Chr($1C,1)+
        +"1"+Chr($1C,1)+Round(См,2)+Chr($1C,1)+?(ФлНДС,спНДС[5],спНДС[1])+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+
        ?(аТип0=13,"7","4")+Chr($1C,1)+"10"+Chr($1C,1)+Chr($1C,1)+Chr($1C,1));
    Else
      aTab:=спНастройки["Таблица"];
      aTab.Select();
      While aTab.Next() Do
//Удалить ТабИСМП.FindAndGoto 01.01.2025
        If _Or(not aTab.Номенклатура.флПодлежитПрослеживаемости,aTab.Номенклатура.ГИСМТТоварнаяГруппа.Selected()=0,ФФД10,ТабИСМП.FindAndGoto(aTab.Номенклатура,,"Номенклатура",1)=0) Then
//Удалить ТабИСМП.FindAndGoto 01.01.2025
          //<Название товара (256)>|<Артикул товара>|<Количество товара в товарной позиции>|<Цена товара>|<Номер ставки налога>|<Номер товарной позиции>|<Номер секции>|<Тип скидки/наценки>|
          //    <Единица измерения>|<Сумма скидки>|<Признак способа расчета 1214>|<Признак предмета расчета 1212>|<Код страны происхождения товара 1230 (3)>|<Номер таможенной декларации 1231 (32)>|
          //    <Сумма акциза 1229>
          //<Тип скидки/наценки>: 0 или пусто - нет скидки; 2 - скидка; 4 - наценка
          аЕдиница:=спЕдиница[aTab.Номенклатура.базЕдиница.ВнешнийКод];
          If IsEmpty(аЕдиница) Then
            аЕдиница:=0;
          EndIf;
          аКоличество:=aTab.Количество;
          If (aTab.ФлЛитры=1)And(ФФД12) Then
            аЕдиница:=41;//Литр
            аКоличество:=aTab.Количество*aTab.Номенклатура.ОбъемЛитров;
          EndIf;
          ExecuteCommand(спНастройки,$42,EncodeStringKKT(Left(aTab.Номенклатура.Name,256))+Chr($1C,1)+Chr($1C,1)+
            +Round(аКоличество,9)+Chr($1C,1)+Round(aTab.Сумма/аКоличество,2)+Chr($1C,1)+?(ФлНДС,спНДС[?(aTab.СтавкаНДС.Index()=0,5,aTab.СтавкаНДС.Index())],спНДС[1])+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+
            ?(ФФД12,аЕдиница)+Chr($1C,1)+Chr($1C,1)+?(аТип0=12,"5","4")+Chr($1C,1)+?((aTab.Номенклатура.флПодлежитПрослеживаемости)And(not ФФД10),"2","1")+Chr($1C,1)+Chr($1C,1)+Chr($1C,1));
        Else
          //Для марочного ГИС МТ товара необходимо передавать каждую марку
          зЦ:=Round(aTab.Сумма/aTab.Количество,2);
          зК:=aTab.Количество;
          While зК>0 Do
            If not ТабИСМП.FindAndGoto(aTab.Номенклатура,,"Номенклатура",1) Then
              Exit "Не все марки заданы для позиции "+aTab.Номенклатура+", внутренняя ошибка!";
            EndIf;
            аЕдиница:=спЕдиница[aTab.Номенклатура.базЕдиница.ВнешнийКод];
            If IsEmpty(аЕдиница) Then
              аЕдиница:=0;
            EndIf;
            ТипТовара:=?(ФФД12,"33","2");//"Марочный товар" или "Подакцизный товар"
          
            //Включить в чек
            If ФФД12 Then
              //<Номер запроса>|<Код маркировки>|<Присвоенный статус товара 2110>|<Режим = 0>|<Результат проведенной проверки КМ 2106>|<Мера количества 2108>
              ExecuteCommand(спНастройки,$79,"15"+Chr($1C,1)+ТабИСМП.Поле3+Chr($1C,1)+ТабИСМП.Поле1+Chr($1C,1)+"0"+Chr($1C,1)+ТабИСМП.Поле2+Chr($1C,1)+аЕдиница);
              
              If not IsEmpty(ТабИСМП.Тег1265) Then
                //ТипТовара:="31";
                //<Код 1162>|<Тег 1191>|<>|<Тег 1222>|<Тег 1226>|<Тег 1171>|<Тег 1225>|<Тег 1005>|<Тег 1016>|<Тег 1026>|<Тег 1075>|<Тег 1044>|<Тег 1073>|<Тег 1074>|<Тег 1262>|<Тег 1263>|<Тег 1264>|<Тег 1265>
                Стр:=Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+
                  ТабИСМП.Тег1262+Chr($1C,1)+Replace(ТабИСМП.Тег1263,".","")+Chr($1C,1)+ТабИСМП.Тег1264+Chr($1C,1)+ТабИСМП.Тег1265;
                ExecuteCommand(спНастройки,$24,Стр);
              EndIf;
            Else
              //<Код 1162>|<Тег 1191>|<>|<Тег 1222>|<Тег 1226>|<Тег 1171>|<Тег 1225>|<Тег 1005>|<Тег 1016>|<Тег 1026>|<Тег 1075>|<Тег 1044>|<Тег 1073>|<Тег 1074>|<Тег 1262>|<Тег 1263>|<Тег 1264>|<Тег 1265>
              Стр:=Chr($44,1)+Chr($4D,1)+Left(Ansi(ТабИСМП.Поле3),30);//Макс. размер 1162 до 30 байт
              ExecuteCommand(спНастройки,$24,Стр);
            EndIf;
            //<Название товара (256)>|<Артикул товара>|<Количество товара в товарной позиции>|<Цена товара>|<Номер ставки налога>|<Номер товарной позиции>|<Номер секции>|<Тип скидки/наценки>|
            //    <Единица измерения>|<Сумма скидки>|<Признак способа расчета 1214>|<Признак предмета расчета 1212>|<Код страны происхождения товара 1230 (3)>|<Номер таможенной декларации 1231 (32)>|
            //    <Сумма акциза 1229>
            //<Тип скидки/наценки>: 0 или пусто - нет скидки; 2 - скидка; 4 - наценка
            ExecuteCommand(спНастройки,$42,EncodeStringKKT(Left(aTab.Номенклатура.Name,256))+Chr($1C,1)+Chr($1C,1)+
              ?(aTab.Номенклатура.флВесовойТовар,Round(aTab.Количество,9),"1")+Chr($1C,1)+зЦ+Chr($1C,1)+?(ФлНДС,спНДС[?(aTab.СтавкаНДС.Index()=0,5,aTab.СтавкаНДС.Index())],спНДС[1])+
              Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+?(ФФД12,аЕдиница,"0")+Chr($1C,1)+Chr($1C,1)+
              ?(аТип0=12,"5","4")+Chr($1C,1)+ТипТовара+Chr($1C,1)+Chr($1C,1)+Chr($1C,1));
              
            If aTab.Номенклатура.флВесовойТовар Then
              зК:=0;
            Else
              зК:=зК-1;
            EndIf;
            ТабИСМП.Remove(ТабИСМП.CurLine);
          EndDo;
        EndIf;
        См:=См+aTab.Сумма;
      EndDo;
    EndIf;
    If Round(спНастройки["Сумма"],2)<>Round(См,2) Then
      Exit "Неверная сумма строк "+См+", не совпадает с суммой документа "+спНастройки["Сумма"];
    EndIf;
    
    //Оплата
    ЭлектроннаяСумма:=Number(спНастройки["ЭлектроннаяСумма"]);
    ДругаяБезналичнаяСумма:=Number(спНастройки["ДругаяБезналичнаяСумма"]);
    СуммаЗакрытияАванса:=Number(спНастройки["СуммаЗакрытияАванса"]);
    If Round(ЭлектроннаяСумма,2)+Round(ДругаяБезналичнаяСумма,2)>Round(См,2) Then
      Exit "Безналичные суммы оплаты "+ЭлектроннаяСумма+" больше суммы документа "+спНастройки["Сумма"];
    EndIf;
    
    //Коды типов платежей:
    //0 - “НАЛИЧНЫМИ”
    //1 - “ЭЛЕКТРОННЫМИ”
    //2..12 - Пользовательские строки наименования платежа
    //13 - "ПРЕДВАРИТЕЛЬНАЯ ОПЛАТА (АВАНС)"
    //14 - "ПОСЛЕДУЮЩАЯ ОПЛАТА (КРЕДИТ)"
    //15 - "ИНАЯ ФОРМА ОПЛАТЫ"
    If аТип0=10 Then
      //<Код типа платежа>|<Сумма>|<Доп. текст>
      ExecuteCommand(спНастройки,$47,"13"+Chr($1C,1)+Round(См,2)+Chr($1C,1));
    ElseIf аТип0=12 Then
      //<Код типа платежа>|<Сумма>|<Доп. текст>
      ExecuteCommand(спНастройки,$47,"14"+Chr($1C,1)+Round(См,2)+Chr($1C,1));
    ElseIf (аТип0=11)And(СуммаЗакрытияАванса>0) Then
      If Round(СуммаЗакрытияАванса,2)>Round(См,2) Then
        Exit "Сумма закрытия аванса "+СуммаЗакрытияАванса+" больше суммы документа "+спНастройки["Сумма"];
      EndIf;
      См:=СуммаЗакрытияАванса;//Round(См-СуммаЗакрытияАванса,2);
      If (См>0)And(ЭлектроннаяСумма>0) Then
        ЭлектроннаяСумма:=Min(ЭлектроннаяСумма,См);
        См:=Round(См-ЭлектроннаяСумма,2);
        //<Код типа платежа>|<Сумма>|<Доп. текст>
        ExecuteCommand(спНастройки,$47,"1"+Chr($1C,1)+Round(ЭлектроннаяСумма,2)+Chr($1C,1));
      EndIf;
      If (См>0)And(ДругаяБезналичнаяСумма>0) Then
        ДругаяБезналичнаяСумма:=Min(ДругаяБезналичнаяСумма,См);
        См:=Round(См-ДругаяБезналичнаяСумма,2);
        ExecuteCommand(спНастройки,$47,"15"+Chr($1C,1)+Round(ДругаяБезналичнаяСумма,2)+Chr($1C,1));
      EndIf;
      If См>0 Then
        ExecuteCommand(спНастройки,$47,"0"+Chr($1C,1)+Round(См,2)+Chr($1C,1));
      EndIf;  
    Else
      If ЭлектроннаяСумма>0 Then
        См:=Round(См-ЭлектроннаяСумма,2);
        ExecuteCommand(спНастройки,$47,"1"+Chr($1C,1)+Round(ЭлектроннаяСумма,2)+Chr($1C,1));
      EndIf;
      If ДругаяБезналичнаяСумма>0 Then
        См:=Round(См-ДругаяБезналичнаяСумма,2);
        ExecuteCommand(спНастройки,$47,"15"+Chr($1C,1)+Round(ДругаяБезналичнаяСумма,2)+Chr($1C,1));
      EndIf;
      If См>0 Then
        ExecuteCommand(спНастройки,$47,"0"+Chr($1C,1)+Round(См,2)+Chr($1C,1));
      EndIf;  
    EndIf;
    
    СтрДоп:=Chr($1C,1);
    If not ФлРозничныйПокупатель Then
      //Заполняем: 1227, 1228
      зК:=спНастройки["Контрагент"];
      стрИНН:=Trim(зК.ИНН);
      стрИНН:=TearStr(стрИНН,"/");
      СтрДоп:=EncodeStringKKT(Left(зК.ПолнНаименование,128))+Chr($1C,1)+стрИНН;
    EndIf;
    СтрАдрес:=EncodeStringKKT(Left(Trim(спНастройки["ПочтаИлиТелефонКлиента"]),256));
    
    //<Отрезка>|<Адрес покупателя (1008)>|<Флаги>|<Место расчётов 1187>|<Адрес отправителя чеков 1117>|<Номер автомата 1036>|<Тег 1085>|<Тег 1086>|<Покупатель 1227>|<ИНН покупателя 1228>|
    //          <Дата рождения покупателя 1243>|<Гражданство 1244>|<Код вида документа, удостоверяющего личность 1245>|<Данные документа, удостоверяющего личность 1246>|
    //          <Адрес покупателя (клиента) 1254>
    //Ответ:
    //<Сквозной номер документа>|<Операционный счетчик>|<Строка ФД и ФП>|<ФД - номер фискального документа>|<ФП - фискальный признак>|<Номер смены>|<Номер документа в смене>|
    //          <Дата документа>|<Время документа>
    Результат:=ExecuteCommand(спНастройки,$31,СтрАдрес+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+СтрДоп+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1));
    стрДок:=TearStr(Результат,Chr($1C));
    TearStr(Результат,Chr($1C));
    TearStr(Результат,Chr($1C));
    спНастройки["НомерДокумента"]:=TearStr(Результат,Chr($1C));
    
    Try
      ЕГАИССылка:=спНастройки["ЕГАИССылка"];
      ЕГАИСПодпись:=спНастройки["ЕГАИСПодпись"];
      If Trim(ЕГАИССылка)<>"" Then
        //ЕГАИССылка -- URL типа "https://check.egais.ru?id=cf1b1096-3cbc-11e7-b3c1-9b018b2ba3f7", если не пустая, будет выведено дополнение к чеку.
        //ЕГАИСПодпись -- строка типа "79DED4A448069B0BFF602FF646F4E9B24D253D311679EA15307AEF38AEEE7933C9175DE5814C3DCF89BF63853CB75003D9FD979F3BEBBC93AFADF1D9A429623F"
        ШирБумаги:=спНастройки["_PaperWidth"];
        
        НомерСмены:=спНастройки["НомерСмены"];
        If IsEmpty(НомерСмены) Then
          Результат:=ExecuteCommand(спНастройки,$78,"6");//6|<Номен смены>|<Открыта>|<Номер чека>
          TearStr(Результат,Chr($1C));
          НомерСмены:=Number(TearStr(Результат,Chr($1C)));
        EndIf;

        //<Тип документа>|<Номер отдела>|<Имя оператора>|<Номер документа>|<Система налогообложения>|<Адрес пользователя>
        //<Тип документа>: бит 0..3: 1 -- сервисный, 2 -- продажа, 3 -- возврат, 4 -- внесение в кассу, 5 -- инкассация, 6 -- покупка, 7 -- возврат покупки
        //                 бит 4: 0 -- обычный режим, 1 -- пакетный
        //                 бит 5: 0 -- обычная печать, 1 -- отложеная печать
        ExecuteCommand(спНастройки,$30,"1"+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1));
                
        стрКПП:=Trim(зЮЛ.ИНН);
        стрИНН:=TearStr(стрКПП,"/");
        
        //<Текст (72)>|<Атрибуты>
        //<Атрибуты> (биты): 0..3 -- номер шрифта (0 - Шрифт 12х24, 1 - Шрифт 9х17, 2 - Шрифт 8х14 (не везде))
        //                   4 -- двойная высота
        //                   5 -- двойная ширина
        ExecuteCommand(спНастройки,$40,EncodeStringKKT(Left("ИНН: "+стрИНН+?(стрКПП<>""," КПП: "+стрКПП),72))+Chr($1C,1)+"1");
        ExecuteCommand(спНастройки,$40,EncodeStringKKT(Left("СМЕНА: "+НомерСмены,72))+Chr($1C,1)+"1");
        ExecuteCommand(спНастройки,$40,EncodeStringKKT(Left("ЧЕК: "+стрДок+" ДАТА: "+FormatDate(Date(),"dd.mm.YYYY hh:tt"),72))+Chr($1C,1)+"1");
      
        //<Опции вывода>|<Ширина штрих-кода>|<Высота штрих-кода>|<Тип штрих-кода>|<Данные>
        ExecuteCommand(спНастройки,$41,Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+"8"+Chr($1C,1)+EncodeStringKKT(ЕГАИССылка));
      
        ExecuteCommand(спНастройки,$40," "+Chr($1C,1)+"1");
      
        While ЕГАИССылка<>"" Do
          Стр:=Left(ЕГАИССылка,ШирБумаги);
          ЕГАИССылка:=Mid(ЕГАИССылка,ШирБумаги+1);
          ExecuteCommand(спНастройки,$40,EncodeStringKKT(Left(Стр,72))+Chr($1C,1)+"1");
        EndDo;
      
        ExecuteCommand(спНастройки,$40," "+Chr($1C,1)+"1");
      
        ЕГАИСПодпись:=Trim(ЕГАИСПодпись);
        Стр:="";
        While ЕГАИСПодпись<>"" Do
          Стр:=Стр+?(Стр="",""," ")+Left(ЕГАИСПодпись,2);
          ЕГАИСПодпись:=Mid(ЕГАИСПодпись,3);
          If Length(Стр)>ШирБумаги-3 Then
            ExecuteCommand(спНастройки,$40,EncodeStringKKT(Left(Стр,72))+Chr($1C,1)+"1");
            Стр:="";
          EndIf;
        EndDo;

        ExecuteCommand(спНастройки,$31,Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1));
      EndIf;
      
      //Печать дополнительной информации (банковская квитанция и т.п.)
      ДополнительнаяИнформация:=спНастройки["ДополнительнаяИнформация"];
      If Trim(ДополнительнаяИнформация)<>"" Then
        ExecuteCommand(спНастройки,$30,"1"+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1));
        
        ExecuteCommand(спНастройки,$40," "+Chr($1C,1)+"1");
        While ДополнительнаяИнформация<>"" Do
          Стр:=TearStr(ДополнительнаяИнформация,_NEWLINE);
          If Стр="" Then
            ExecuteCommand(спНастройки,$40," "+Chr($1C,1)+"1");
            Continue;
          EndIf;
          ExecuteCommand(спНастройки,$40,EncodeStringKKT(Left(Стр,72))+Chr($1C,1)+"1");
        EndDo;
        
        ExecuteCommand(спНастройки,$31,Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1));
      EndIf;
    Except
      Message("Ошибка печати нефискальной части чека: "+PopError(),"!");
    EndTry;
  Except
    If ФлОтменитьЧек Then
      Try
        ExecuteCommand(спНастройки,$32);
      Except
      EndTry;
    EndIf;
    Exit PopError()+_NEWLINE+"Неудачная попытка выгрузки чека!";
  EndTry;
EndFunction

//ДополнительнаяИнформация -- строка для печати
Function PrintText(спНастройки)
  Try
    //Печать дополнительной информации (банковская квитанция и т.п.)
    ДополнительнаяИнформация:=спНастройки["ДополнительнаяИнформация"];
    If Trim(ДополнительнаяИнформация)<>"" Then
      ExecuteCommand(спНастройки,$30,"1"+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1));
    
      While ДополнительнаяИнформация<>"" Do
        Стр:=TearStr(ДополнительнаяИнформация,_NEWLINE);
        If Стр="" Then
          ExecuteCommand(спНастройки,$40," "+Chr($1C,1)+"1");
          Continue;
        EndIf;
        ExecuteCommand(спНастройки,$40,EncodeStringKKT(Left(Стр,72))+Chr($1C,1)+"1");
      EndDo;
      
      ExecuteCommand(спНастройки,$31,Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1)+Chr($1C,1));
    EndIf;
  Except
    Exit PopError()+_NEWLINE+"Неудачная попытка печати нефискальной информации!";
  EndTry;
EndFunction


