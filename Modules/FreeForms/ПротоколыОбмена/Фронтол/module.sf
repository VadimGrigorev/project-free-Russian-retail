//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var Ини Export;
Var Версия Export, Способ Export, ПутьПротокола Export, Период Export, РасписаниеВыгрузки Export, РасписаниеЗагрузки Export, КодыНоменклатуры Export;
Var ФайлВыгрузки Export, ФайлЗагрузки Export, ФайлЗапросаВыгрузки Export, КорневаяПапка Export, БезОстатков Export, НеВыгружатьБезЗапроса Export, УстановкаЦен Export, Комплектация512 Export;
Var МутантPLUКодов Export;
Var Магазин Export;
Var Элемент Export;
Var НачДата Export, КонДата Export;
Var спТипыДокументов Export;
Var ФлФорсирование Export;

Function ПолучитьУстановку(Имя)
  aEl:=Ref.рознУстановкиОбменаМагазинов;
  If aEl.Find("~(@Parent=Элемент)And(@Status=0)And(Name=Имя)") Then
    Exit aEl.Установка; 
  EndIf;
  Exit "";
EndFunction

Function MessageVisual(Стр,Тип="")
  If not IsExecutingInSeparateThread Then
    Message(Стр,Тип);
  EndIf;
EndFunction

Function ДобавитьУстановку(Имя,Код,ФлОбновить=0)
  aEl:=Ref.рознУстановкиОбменаМагазинов;
  If Not aEl.Find("~(@Parent=Элемент)And(@Status=0)And(Name=Имя)") Then
    aEl.New();
    aEl.Parent(Элемент);
    aEl.Name:=Имя;
    aEl.Установка:=Код;
    aEl.Save();
  ElseIf ФлОбновить Then
    aEl.Установка:=Код;
    aEl.Save();
  EndIf;
EndFunction

Function СохранитьУстановки(ФлЗакрыть=0)
  Ини.AddLeaf("Версия",Form.оВерсия.Value.SelectedLine);
  Ини.AddLeaf("Способ",Form.оСпособ.Value.SelectedLine);
  Ини.AddLeaf("Путь",Form.оПуть.Value);
  Ини.AddLeaf("Период",Form.оДней.Value);
  Ини.AddLeaf("РасписаниеВыгрузки",Form.оРасписаниеВыгрузки.Value);
  Ини.AddLeaf("РасписаниеЗагрузки",Form.оРасписаниеЗагрузки.Value);
  Ини.AddLeaf("КодыНоменклатуры",Form.оКодыНоменклатуры.Value.Code);
  Ини.AddLeaf("КорневаяПапка",Form.оКорневаяПапка.Value.Code);
  Ини.AddLeaf("ФайлВыгрузки",Form.оФайлВыгрузки.Value);
  Ини.AddLeaf("ФайлЗапросаВыгрузки",Form.оФайлЗапросаВыгрузки.Value);
  Ини.AddLeaf("ФайлЗагрузки",Form.оФайлЗагрузки.Value);
  Ини.AddLeaf("БезОстатков",Form.оБезОстатков.Value);
  Ини.AddLeaf("УстановкаЦен",Form.оУстановкаЦен.Value);
  Ини.AddLeaf("Комплектация512",Form.оКомплектация512.Value);
  Ини.AddLeaf("НеВыгружатьБезЗапроса",Form.оНеВыгружатьБезЗапроса.Value);
  Элемент.Настройки:=Ини.StoreToString("");

  //Добавление видов оплат, так как 1С не будет загружать корректно без оных
  ДобавитьУстановку("ВО:Наличная оплата","0000000001");
  ДобавитьУстановку("ВО:Безналичная оплата","0000000002");
  ДобавитьУстановку("Последний выгруженный день","");
  
  глОбновитьРасписаниеПротоколаОбмена(Элемент,"Фронтол","Modules\FreeForms\ПротоколыОбмена\Фронтол\",Form.оРасписаниеВыгрузки.Value,Form.оРасписаниеЗагрузки.Value);
  
  If ФлЗакрыть Then
    Form.IsChanged(0);
    Form.Close();
  EndIf;
EndFunction

Function ПолучитьНомерДокумента(зДок)
  //Номер документа: ZZYYXXXXXX (целое число)
  //XXXXXX -- сам номер
  //YY -- год даты
  //ZZ -- тип документа
  Нум:=спТипыДокументов.Find(зДок.DBName());
  Нум:=?(Нум=0,спТипыДокументов.Size()+1,Нум);
  Exit Str(Нум)+Right(GetYear(зДок.DocDate),2)+Right("000000"+Number(Mid(зДок.DocNum,5)),6);
EndFunction

Function ОбновитьВремяЗапуска(Ид)
  Элемент.SetValue(Ид,Date());
  Элемент.Save();
EndFunction


Function НайтиКодТовара(зН,тКодыНоменклатуры,ByRef КодТовара,ByRef СтрШтрихкод)
  If not тКодыНоменклатуры.FindAndGoto(зН.Code,,"Код",1) Then
    аСв:=Ref.общДополнительныеСвойства;
    аШК:=Ref.тмцШтрихкоды;
    КодТовара:="";
    СтрШтрихкод:="";
    If аСв.Find("~(ТипСвойства=КодыНоменклатуры)And(Элемент=зН)And(@Status=0)") Then
      КодТовара:=аСв.Name;
    EndIf;
    If аШК.Find("~(@Status=0)And(@Parent=зН)And((Коэффициент=1)Or(Коэффициент=0))") Then
      СтрШтрихкод:=аШК.Name;
    EndIf;
    тКодыНоменклатуры.AddLineSorted("Код","Код,ВнешнийКод,Штрихкод",зН.Code,КодТовара,СтрШтрихкод);
  EndIf;
  КодТовара:=тКодыНоменклатуры.ВнешнийКод;
  If IsEmpty(КодТовара) Then
    MessageVisual("Позиция "+зН+" ("+зН.Code+") не сопоставлена с удаленной базой, но присутствует в документах выгрузки! Выгрузка остановлена!","!");
    Exit 0;
  EndIf;
  СтрШтрихкод:=тКодыНоменклатуры.Штрихкод;
  Exit 1;
EndFunction


Function ВыполнитьОтправку()
  //Руководство интегратора Фронтол 5, п. 16.2.2
  //
  //Даты в формате: DD.MM.YYYY
  //Время в формате: HH:MM:SS
  //Разделитель дробной части -- точка
  //Тип товара: 0 -- обычный, 1 -- алкогольная продукция, 2 -- маркированная продукция, 4 -- ИС МП, табак, ...
  //Тип транзакции: 1,11 -- продажа товара               + (11 -- по свободной цене)
  //                2,12 -- возврат товара               + (12 -- по свободной цене)
  //                3 -- установка спец. цены
  //                4,14 -- налог на продажу             + (14 -- по свободной цене)
  //                6,16 (xPos) -- регистрация в ККТ под новый порядок (16 -- по свободной цене)
  //                9 -- начисление бонуса
  //               10 -- возврат бонуса
  //               15 -- скидка суммой
  //               17 -- скидки в процентах
  //               21,23 -- регистрация купюр              (23 -- по свободной цене)
  //               22,24 -- возврат купюр                  (24 -- по свободной цене)
  //               25 -- регистрация сотрудников
  //               26 -- учет сотрудников
  //               27 -- изменение статуса карты
  //               29 -- учет сотрудников по позиции
  //               30 -- регистрация модификаторов
  //               31 -- сторнирование модификаторов
  //               32 -- оплата бонусом
  //               33 -- возврат оплаты бонусом
  //               34 -- предоплата документом
  //               35 -- скидка суммой на документ
  //               36 -- нефискальная оплата
  //               37 -- скидка % на документ
  //               40 -- оплата с вводом суммы клиента
  //               41 -- оплата без ввода суммы клиента
  //               42 -- открытие документа              + поступление, возврат поставщику, расход, оприходование, списание
  //               43 -- распределение оплаты по ГП
  //               45 -- закрытие документа в ККМ
  //               49 -- закрытие документа по ГП
  //               50 -- внесение
  //               51 -- выплата
  //               55 -- закрытие документа
  //               57 -- изменение счетчика
  //               58 -- нефинансовое закрытие
  //               60 -- отчет без гашения
  //               61 -- закрытие смены                  +
  //               62 -- открытие смены
  //               63 -- отчет с гашением
  //               64 -- документ открытия смены         + (первый)
  //               65 -- информация о клиентах
  //               82 -- распределение оплаты бонусом по позициям
  //               83 -- распределение возврата оплаты бонусом по позициям
  //               84 -- распределение предоплаты по позициям
  //               85 -- скидка суммой, распределенная по позициям
  //               86 -- нефискальная оплата, распределенная по позициям
  //               87 -- скидка %, распределенная по позициям
  //               120 -- отправка в ЕГАИС товаров с указанной группой печати
  //               512 -- комплектация товара, списание
  //               513 -- комплектация товара, приход
  //Операция: 0 -- продажа
  //          1 -- возврат
  //          2 -- аннулирование
  //          4 -- внесение
  //          5 -- выплата
  //          6 -- пользовательская
  //          8 -- открытие смены
  //          9 -- операция в ККМ
  //         10 -- закрытие смены
  //         11 -- закр. смены плат. систем
  //         12 -- ред. списка сотрудников
  //         13 -- служебная операция
  //         14 -- приход
  //         15 -- расход
  //         16 -- инвентаризация
  //         17 -- переоценка
  //         18 -- вскрытие тары
  //Выгружаемые документы: ПКО,РКО,Реализация,ВозвратОтПокупателя     ?ВыпискаБанкаПриход,ВыпискаБанкаРаход?
  //                       Поступление,ВозвратПоставщику
  
  Способ:=Max(1,Способ);
  If Способ<>1 Then
    Raise "В данный момент поддерживается только способ выгрузки в локальную папку!";
  EndIf;
  
  СпДни:=0;
  ФлБылФлаг:=0;
  //Флаг выгрузки может содержать информацию по периоду выгрузки
  If not IsEmpty(ФайлЗапросаВыгрузки) Then
    //Возможные команды: 
    //$$$NEWTRANSACTIONS -- не используется
    //$$$ALLTRANSACTIONS -- весь период базы
    //$$$CURSESSIONTRANSACTIONS -- не используется
    //$$$LASTSESSIONTRANSACTIONS -- не используется
    //$$$TRANSACTIONSBYTRANSRANGE -- не используется
    //$$$TRANSACTIONSBYCHECKRANGE -- не используется
    //$$$TRANSACTIONSBYREPORTRANGE -- не используется
    //$$$TRANSACTIONSBYSESSIONSRANGE -- не используется
    //$$$TRANSACTIONSBYOPERDAYRANGE -- указанный период
    //$$$TRANSACTIONSBYDATERANGE -- указанный период
    //$$$TRANSACTIONSBYDATELIST -- (дополнение) указанные дни
    //$$$TRANSACTIONSBYDATETIMERANGE -- не используется    
    Ф:=File.Create();
    Ф.FindOpen(Trim(ПутьПротокола)+ФайлЗапросаВыгрузки);
    While Ф.FindNextFile()<>"" Do
      ФлБылФлаг:=1;
      Файл:=Trim(ПутьПротокола)+Ф.FileName;
      тФайл:=Text.Create();
      тФайл.Load(Файл,0);
      For i:=1 to тФайл.Size() Do
        Стр:=тФайл.GetLine(i);
        If Left(Стр,3)<>"$$$" Then
          Continue;
        EndIf;
        If Стр="$$$ALLTRANSACTIONS" Then
          НачДата:=Max(DBVar.НачалоПериодаБазы,'01.01.1980');
        ElseIf (Стр="$$$TRANSACTIONSBYOPERDAYRANGE")or(Стр="$$$TRANSACTIONSBYDATERANGE") Then
          If i<тФайл.Size() Then
            Стр:=тФайл.GetLine(i+1);
            //01.06.08;07.06.08
            //01.06.2008;07.06.2008
            НачДата2:=Date(TearStr(Стр,";"));
            КонДата2:=Date(TearStr(Стр,";"));
            If IsEmpty(НачДата2)+IsEmpty(КонДата2)=0 Then
              НачДата:=НачДата2;
              КонДата:=КонДата2;
            EndIf;
          EndIf;
        ElseIf Стр="$$$TRANSACTIONSBYDATELIST" Then
          If i<тФайл.Size() Then
            Стр:=тФайл.GetLine(i+1);
            //02.06.08;02.06.08;07.06.08;...
            //01.06.2008;02.06.2008;07.06.2008;...
            аНом:=0;
            СпДни:=List.Create();
            While Стр<>"" Do
              аДата:=Date(TearStr(Стр,";"));
              If not IsEmpty(аДата) Then
                аНом:=аНом+1;
                If аНом=1 Then
                  НачДата:=аДата;
                  КонДата:=аДата;
                Else
                  НачДата:=Min(аДата,НачДата);
                  КонДата:=Max(аДата,КонДата);
                EndIf;
                СпДни.Add(аДата);
              EndIf;
            EndDo;
            СпДни.Group();
            СпДни.Sort();
            If СпДни.Size()=0 Then
              MessageVisual("Файл "+Файл+" содержит неверный список дней для выгрузки!","!");
              СпДни:=0;
            EndIf;
          EndIf;
        Else
          MessageVisual("Файл "+Файл+" содержит неподдерживаемую команду "+Стр+", файл пропущен!","!");
          Break;
        EndIf;
      EndDo;
      File.DeleteFile(Файл);
    EndDo;
  EndIf;
  
  If _And(not ФлБылФлаг,НеВыгружатьБезЗапроса,not ФлФорсирование) Then
    MessageVisual("Установлена опция выгрузки только по флагу, однако флаг выгрузки не найден, выгрузка не будет выполнена...","I");
    Exit 1;
  EndIf;
  
  //Найти все кассы данного магазина
  ОбновитьВремяЗапуска("ПоследняяВыгрузка");
  спКассы:=List.Create();
  аОбор:=Ref.рознОборудованиеМагазинов;
  аОбор.Select("~(@Parent=Магазин)And(Not IsEmpty(Касса))And(@Status<>1)");
  While аОбор.Next() Do
    спКассы.Add(аОбор.Касса);
  EndDo;
  спКассы.Group();
  
  спН:=List.Create();
  aTab:=Магазин.LineParts("Номенклатура");
  aTab.CopyTo(спН,,,"Номенклатура");
  ТЗ:="Period From НачДата To КонДата;
  |зМг:=Storage.ОстаткиТМЦ.Склад.Магазин;
  |Condition(зМг=Магазин);
  |Документ:=Storage.ОстаткиТМЦ.@LINK;
  |зДень:=Storage.ОстаткиТМЦ.@DAY;
  |зН:=Storage.ОстаткиТМЦ.Номенклатура;
  |зКлП:=Income(Количество);
  |зКлР:=Expense(Количество);
  |Condition(зН IN спН);
  |Group зДень,Документ;";//,зН
  З:=Query.Create();
  З.Execute(ТЗ,2);
  
{  
  З2:=0;
  If спКассы.Size()=0 Then
    MessageVisual("Для магазина не задана ни одна касса! Выгрузка кассовых документов не будет выполнена!","!");
  Else
    ТЗ2:="(зСтатус:=Doc.ПКО.@Status;Condition(зСтатус>1);
    |зДень:=BegOfDay(Doc.ПКО.DocDate);Condition((зДень>=НачДата)And(зДень<=КонДата));
    |зКс:=Doc.ПКО.Касса;
    |Condition(зКс IN спКассы);
    |Документ:=Doc.ПКО;
    |Group зДень,Документ;) UNION ALL 
    |(зСтатус:=Doc.РКО.@Status;Condition(зСтатус>1);
    |зДень:=BegOfDay(Doc.РКО.DocDate);Condition((зДень>=НачДата)And(зДень<=КонДата));
    |зКс:=Doc.РКО.Касса;
    |Condition(зКс IN спКассы);
    |Документ:=Doc.РКО;
    |Group зДень,Документ;)";
    З2:=Query.Create();
    З2.Execute(ТЗ2,2);
  EndIf;
}  
  
  //см. Фронтол 6: 16.2.2.1. Список транзакций
  //Обычный лог Фронтол при продаже:
  //64 -- открытие смены                                                           +
  //повторяются для каждого документа (реализации/возврата):
  //  42 -- открытие документа (операция=0 -- продажа)                             +
  //    повторяются для каждой строки:
  //    11 -- продажа                                                              +
  //    14 -- НДС                                                                  +
  //    16 -- регистрация в онлайн ККТ (Фр. 6)                                     +
  //  41 -- оплата (40 для Фр. 6)                                                  +
  //  43 -- распределение оплаты                                                   +
  //  120 -- оправка в ЕГАИС (марок)                                               +
  //  49 -- закрытие документа по ГП
  //  45 -- закрытие документа по ККМ
  //  55 -- закрытие документа
  //63 -- отчет Z
  //61 -- закрытие смены
  
  //Ставки НДС хранятся в доп. свойствах и заполняются при любой полной загрузке
  тСтавкиНДС:=Tab.Create("Ставка,КодГруппы,КодСтавки");
  aEl:=Ref.рознУстановкиОбменаМагазинов;
  aEl.Select("~(@Parent=Элемент)And(@Status=0)And((Left(Name,3)=""НДС"")or(Name=""БезНДС""))");
  While aEl.Next() Do
    Try
      bEl:=Enum.Get("СтавкиНДС."+aEl.Name);
      Стр:=aEl.Установка;
      тСтавкиНДС.AddLine("Ставка,КодСтавки,КодГруппы",bEl,TearStr(Стр,":"),Стр);
      тСтавкиНДС.КодГруппы:=?(IsEmpty(тСтавкиНДС.КодГруппы),тСтавкиНДС.КодСтавки,тСтавкиНДС.КодГруппы);
    Except
    EndTry;
  EndDo;
  aEl:=Enum.СтавкиНДС;
  For i:=1 To aEl.Count() Do
    bEl:=Enum.GetByIndex("СтавкиНДС",i);
    If тСтавкиНДС.Find(bEl,,"Ставка")=0 Then
      тСтавкиНДС.AddLine("Ставка,КодСтавки,КодГруппы",bEl,тСтавкиНДС.Size()+1,тСтавкиНДС.Size()+1);
    EndIf;
  EndDo;
  
  //Элементы:
  //1 -- Наличные
  //2 -- Карта
  спКодыВидовОплат:=List.Create();
  aEl:=Ref.рознУстановкиОбменаМагазинов;
  If aEl.Find("~(@Parent=Элемент)And(@Status=0)And(Name=""ВО:Наличная оплата"")") Then
    спКодыВидовОплат.Add(aEl.Установка);
  Else
    спКодыВидовОплат.Add("0000000001");
  EndIf;
  If aEl.Find("~(@Parent=Элемент)And(@Status=0)And(Name=""ВО:Безналичная оплата"")") Then
    спКодыВидовОплат.Add(aEl.Установка);
  Else
    спКодыВидовОплат.Add("0000000002");
  EndIf;
  
  СпКодированиеГруппГИСМТ:=List.Create();
  СпКодированиеГруппГИСМТ["14"]=2;
  СпКодированиеГруппГИСМТ["15"]=3;
  СпКодированиеГруппГИСМТ["19"]=3;
  СпКодированиеГруппГИСМТ["3"]=4;
  СпКодированиеГруппГИСМТ["16"]=4;
  СпКодированиеГруппГИСМТ["2"]=5;
  //СпКодированиеГруппГИСМТ["?"]=7; -- по умолчанию
  СпКодированиеГруппГИСМТ["6"]=8;
  СпКодированиеГруппГИСМТ["4"]=9;
  СпКодированиеГруппГИСМТ["5"]=10;
  СпКодированиеГруппГИСМТ["1"]=11;
  СпКодированиеГруппГИСМТ["12"]=12;
  СпКодированиеГруппГИСМТ["14"]=8;
  
  ObjC:=ObjectCollector.Create();
  КодТовара:="";
  СтрШтрихкод:="";
  тКодыНоменклатуры:=Tab.Create("Код,ВнешнийКод,Штрихкод");
  Т:=Text.Create(1);
  //Шапка:
  //#       //если @, значит, файл уже был обработан
  //1       //БД ИД
  //111     //Порядковый номер отчета
  Т.AddString("#");
  Т.AddString("1");
  Т.AddString("1");//Порядковый номер отчета
  If СпДни=0 Then
    аДень:=BegOfDay(НачДата)-1;
  EndIf;
  аНомер:=0;
  While 1 Do
    If СпДни=0 Then
      If аДень>=BegOfDay(КонДата) Then
        Break;
      EndIf;
      аДень:=аДень+1;
    Else
      If СпДни.Size()=0 Then
        Break;
      EndIf;
      аДень:=СпДни[1];
      СпДни.Remove(1);
    EndIf;
    
    СмЗаДень:=0;
    //Открытие смены
    аНомер:=аНомер+1;
    //41574;21.12.2021;06:47:02;64;1;4351;000000000002;;;0.00;435787.00;0.00;9;162;;;0;;;;;;;;;0/3325/162;;;;;;;;;;;;;;;;;;
    //<Номер транзакции>;<Дата транзакции>;<Время транзакции>;64;<Код рабочего места>;<Номер документа>;<Код кассира>;;;<Выручка за смену>;
    //      <Наличность в кассе>;<Сменный итог>;;<Номер смены>;;;<Код группы печати>;;;
    //      ;;;;;;<Кассовый номер чека>;<Идентификатор предприятия>;;...
    Т.AddString(""+аНомер+";"+аДень+";00:00:00;64;1;"+аНомер+";1;;;0.00;0.00;0.00;9;1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");
    З.First();
    If З.ResultTable.LocateAndGoto("зДень",аДень)>0 Then
      З.LinearLevelPos:=1;
      While З.Next(2) Do
        зДок:=З.Документ;
        тВремя:=FormatDate(зДок.DocDate,"hh:tt:ss");
        
        If _And(зДок.DBName()<>"ВозвратОтПокупателя",зДок.DBName()<>"Реализация",зДок.DBName()<>"КомплектацияТовара") Then
          MessageVisual("Невозможно выгрузить документ "+зДок+", протокол Фронтол не поддерживает выгрузку таких документов...");
          Continue;
        EndIf;
        
        ТипДокумента:=?(зДок.DBName()="ВозвратОтПокупателя",1,0);//1 - возврат
        ФлКомплектация:=зДок.DBName()="КомплектацияТовара";
        НомДок:=ПолучитьНомерДокумента(зДок);
        //Открытие документа -- 42
        //67635;20.05.2021;10:33:52;42;1;6186;000000000002;;;;;;0;361;;;0;;;;;;0000000001;;;1/361/6186;;;;;;;;;;;;;;;;;;
        //41575;21.12.2021;06:47:02;42;1;4352;000000000002;;;;;;0;162;;;0;;;;;;0000000001;;;1/162/4352;;;;;;;;;;;;;;;;;;
        //<Номер транзакции>;<Дата транзакции>;<Время транзакции>;<Тип транзакции>;<Код рабочего места>;<Номер документа>;<Код кассира>;[<Номера карт клиента ч/з |>];[<Коды значений разрезов>];<Вид документа ЕГАИС>;
        //      [<Количество товара>];[<Сумма со скидкой>];<Операция>;<Номер смены>;<Код клиента>;;<Код группы печати>;[<Сумма бонуса>];<Идентификатор заказа>;
        //      <Код контрагента>;<Количество посетителей>;;<Код вида документа>;<Код комментария>;<Номер документа-основания>;<Информация о документе>;<Идентификатор предприятия>;<Код сотрудника>;
        //      <Номер документа списка сотрудников>;<Код подразделения>;<Код зала>;<Код точки обслуживания>;<Идентификатор резерва>;;
        //      <Комментарий документа>;<Дата и время переоценки>;<Код контрагента>;<Идентификатор подразделения>;<Номер документа ЕГАИС>
        //<Вид документа ЕГАИС>: 0 – приёмка, 1 – возврат, 2 – расход, 3 – постановка на баланс, 4 – списание.
        аНомер:=аНомер+1;
        Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";42;1;"+НомДок+";1;;;;;;"+ТипДокумента+";"+
          //<Номер смены>;<Код клиента>;;<Код группы печати>;[<Сумма бонуса>];<Идентификатор заказа>;
          //<Код контрагента>;<Количество посетителей>;;<Код вида документа>;<Код комментария>;<Номер документа-основания>;<Информация о документе>;<Идентификатор предприятия>;<Код сотрудника>;
          "1;;;0;;;;;;;;;;;;"+
          //<Номер документа списка сотрудников>;<Код подразделения>;<Код зала>;<Код точки обслуживания>;<Идентификатор резерва>;;
          //<Комментарий документа>;<Дата и время переоценки>;<Код контрагента>;<Идентификатор подразделения>;<Номер документа ЕГАИС>
          ";;;;;;;;;;;;;;;");
          
        аМарки:=Ref.тмцМаркировкаПозиций;
        спМарки:=аМарки.Load(0,"~(Документ=зДок)And(флСостояние=2)");
        ТМарки:=Tab.Create("Номенклатура,Партия,Марка");
        If спМарки.Size()>0 Then
          For i:=1 To спМарки.Size() Do
            аМарки:=спМарки[i];
            ТМарки.AddLine("Партия,Марка",аМарки.Parent(),аМарки.КодМарки);
          EndDo;
          MassLoadObjects(ТМарки);
          ТМарки.Select();
          While ТМарки.Next() Do
            ТМарки.Номенклатура:=ObjC.Get(ТМарки.Партия.Parent());
          EndDo;
          MassLoadObjects(ТМарки);
          ТМарки.Sort("Номенклатура");
        EndIf;
      
        ФлМаркиЕГАИС:=0;
        СмДокумента:=0;
        КлДокумента:=0;
        aTab:=?(ФлКомплектация,зДок.LineParts("ВходящаяНоменклатура").Copy(),зДок.LineParts("Номенклатура").Copy());
        aTab.Group("Номенклатура","Сумма,Количество");
        aTab.Select();
        While aTab.Next() Do
          If aTab.Количество<=0 Then
            Continue;
          EndIf;
          зН:=aTab.Номенклатура;
          If _And(спН.Size()>0,not спН.Contains(зН)) Then
            Continue;
          EndIf;
          
          If not НайтиКодТовара(зН,тКодыНоменклатуры,КодТовара,СтрШтрихкод) Then
            Exit 0;
          EndIf;

          стрМаркиЕГАИС:="";
          If _And(зН.флАлкогольнаяПродукция,not зН.флПодлежитПрослеживаемости) Then
            While ТМарки.FindAndGoto(зН,,"Номенклатура",1) Do
              ФлМаркиЕГАИС:=1;
              AppendStringToBufferedString(стрМаркиЕГАИС,?(стрМаркиЕГАИС="","","¤")+ТМарки.Марка);
              ТМарки.Remove(ТМарки.CurLine);
            EndDo;
          EndIf;
          ТипТовара:=?(зН.флАлкогольнаяПродукция=1,0);
          If зН.флПодлежитПрослеживаемости Then
            ТипТовара:=4;
            If зН.ГИСМТТоварнаяГруппа.Selected()<>0 Then
              ТипТовара:=СпКодированиеГруппГИСМТ[зН.ГИСМТТоварнаяГруппа.ВнешнийКод];
              If IsEmpty(ТипТовара) Then
                ТипТовара:=7;
              EndIf;
            EndIf;
          EndIf;
          зЦ:=Round(aTab.Сумма/aTab.Количество,2);
          зК:=Round(aTab.Количество,6);
          зСм:=aTab.Сумма;
          СмДокумента:=СмДокумента+aTab.Сумма;
          КлДокумента:=КлДокумента+Round(aTab.Количество,6);
          
          //Находим налоговые ставки
          НДС:=зН.СтавкаНДС;
          If зДок.ЮрЛицо.УчитыватьНДС=0 Then
            НДС:=Enum.СтавкиНДС.БезНДС;
          EndIf;
          НалогГруппа:=0;
          НалогСтавка:=0;
          If тСтавкиНДС.FindAndGoto(НДС,,"Ставка")>0 Then
            НалогГруппа:=тСтавкиНДС.КодГруппы;
            НалогСтавка:=тСтавкиНДС.КодСтавки;
          EndIf;
          
          Код11:=11;
          If (Комплектация512)And(ФлКомплектация) Then
            Код11:=512;
          EndIf;
          
          //ИС МП выгружается построчно по одной строке на марку товара
          If _And(зН.флПодлежитПрослеживаемости,ТМарки.Size()>0) Then
            While _And(ТМарки.FindAndGoto(зН,,"Номенклатура",1),зК>=1) Do
              зК:=зК-1;
              зСм2:=зЦ;
              If зК=0 Then
                зСм2:=зСм;
              EndIf;
              зСм:=Round(зСм-зСм2,2);
              
              зК2:=?(ТипДокумента=0,1,-1);
              зСм2:=?(ТипДокумента=0,зСм2,-зСм2);
              См2НДС:=Round(зСм2*глКоэффНДС(НДС),2);
              
              //42313;22.12.2021;06:48:24;11;1;4422;000000000002;48314;;137.00;1.000;137.00;0;163;137.00;137.00;0;;4606203099580;137.00;;;0000000001;;;1/163/4422;;;;;;4;04606203099580Hlb8:NnACLUNBsf;;;;;;;;;;;
              //<Номер транзакции>;<Дата транзакции>;<Время транзакции>;<Тип транзакции>;<Код рабочего места>;<Номер документа>;<Код кассира>;[<Код товара>];<Коды значений разрезов>;<Цена без скидки>/<Код налоговой группы>;
              //      <Количество товара>/<Код налоговой ставки>;<Сумма со скидкой>/<Сумма налога>;<Операция>;<Номер смены>;<Цена со скидкой>;<Сумма со скидкой>;<Код группы печати>;[<Артикул товара>];<Штрихкод товара>;
              //      <Сумма без скидки>;[<Секция ККМ>];;<Код вида документа>;<Код комментария>;;<Информация о документе>;<Идентификатор предприятия>;<Код сотрудника>;;;;[<Тип товара>];<Контрольный знак (ИС МП)>;
              //      <Марки, разделенные ¤>;[<Код группы модификаторов>];<Дата фиксации ЕГАИС>;<Алк. код товара ЕГАИС>;<Количество из прихода ЕГАИС>;<Номер справки 1>;<Номер справки 2>
              аНомер:=аНомер+1;
              Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";"+Код11+";1;"+НомДок+";1;"+КодТовара+";;"+зЦ+";"+зК2+";"+зСм2+";"+ТипДокумента+";1;"+зЦ+";"+зСм2+";0;;"+СтрШтрихкод+";"+зСм2+
                //<Секция ККМ>;;<Код вида документа>;<Код комментария>;;<Информация о документе>;<Идентификатор предприятия>;<Код сотрудника>;;;;
                ";;;;;;;;;;;;"+
                //<Тип товара>;<Контрольный знак (ИС МП)>;<Марки, разделенные ¤>;[<Код группы модификаторов>];<Дата фиксации ЕГАИС>;<Алк. код товара ЕГАИС>;<Количество из прихода ЕГАИС>;<Номер справки 1>;<Номер справки 2>
                ТипТовара+";"+Replace(ТМарки.Марка,";","¤")+";;;;;;;;;;;");
              ТМарки.Remove(ТМарки.CurLine);
              
              //67637;20.05.2021;10:33:57;14;1;6186;000000000002;105605;;1;1;0.00;0;361;249.00;249.00;0;;4604794000855;249.00;;;0000000001;;;1/361/6186;;;;;;;;;;;;;;;;;;
              //НДС = 14
              аНомер:=аНомер+1;
              Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";14;1;"+НомДок+";1;"+КодТовара+";;"+НалогГруппа+";"+НалогСтавка+";"+См2НДС+";"+ТипДокумента+";1;"+зЦ+";"+зСм2+";0;;"+СтрШтрихкод+";"+зСм2+";;;;;;;;;;;;;;;;;;;;;;;;");

              If (Версия=2)And((not Комплектация512)Or(not ФлКомплектация)) Then //16
                //7.1.2.2
                //41578;21.12.2021;06:47:04;16;1;4352;000000000002;62056;;;1.000;0.00;0;162;125.00;125.00;0;;4606203103348;;;;0000000001;;;1/162/4352;;;;;;;04606203103348uXB=_xRAB=UAVHu;;;;;;;;;;;
                //41721;21.12.2021;07:45:27;16;1;4366;000000000002;47783;;;1.000;0.00;0;162;154.00;154.00;0;;4604794000831;;;;0000000001;;;1/162/4366;;;;;;;;198302262750100421001UI37IGHIJ3T3Y2JWVPI3H7GCIAARBFVZ6BQEOJ67GPTGW2OBH4TGJG76U247D5VYSKFYQST5TMT4NRNP4MH3IOIF3XUE3TFZRPMNQW3ZA2OENU6DAD2F3G43IMR75O2UY;;;;;;;;;;
                //<Номер транзакции>;<Дата транзакции>;<Время транзакции>;6/16;<Код рабочего места>;<Номер документа>;<Код кассира>;[<Код товара>];<Коды значений разрезов>;;
                //      <Количество товара>;0.00;<Операция>;<Номер смены>;<Цена>;<Сумма>;<Код группы печати>;[<Артикул товара>];<Штрихкод товара>;;
                //      <Секция ККМ>;;<Код вида документа>;;;<Информация о документе>;;;;;;<Тип товара>;<Контрольный знак (ИС МП)>;<Марки, разделенные ¤>;;;;;;;;
                аНомер:=аНомер+1;
                Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";16;1;"+НомДок+";1;"+КодТовара+";;;"+зК2+";0.00;"+ТипДокумента+";1;"+зЦ+";"+зСм2+";0;;"+СтрШтрихкод+";;"+
                  //<Секция ККМ>;;<Код вида документа>;;;<Информация о документе>;;;;;;
                  ";;;;;;;;;;;"+
                  //<Тип товара>;<Контрольный знак (ИС МП)>;<Марки, разделенные ¤>;[<Код группы модификаторов>];<Дата фиксации ЕГАИС>;<Алк. код товара ЕГАИС>;<Количество из прихода ЕГАИС>;<Номер справки 1>;<Номер справки 2>
                  ТипТовара+";"+Replace(ТМарки.Марка,";","¤")+";;;;;;;;;;;");
              EndIf;
            EndDo;            
          EndIf;
          
          If зК>0 Then
            зК:=?(ТипДокумента=0,зК,-зК);
            зСм:=?(ТипДокумента=0,зСм,-зСм);
            СмНДС:=Round(зСм*глКоэффНДС(НДС),2);
            
            //11
            аНомер:=аНомер+1;
            Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";"+Код11+";1;"+НомДок+";1;"+КодТовара+";;"+зЦ+";"+зК+";"+зСм+";"+ТипДокумента+";1;"+зЦ+";"+зСм+";0;;"+СтрШтрихкод+";"+зСм+
              //<Секция ККМ>;;<Код вида документа>;<Код комментария>;;<Информация о документе>;<Идентификатор предприятия>;<Код сотрудника>;;;;
              ";;;;;;;;;;;;"+
              //<Тип товара>;<Контрольный знак (ИС МП)>;<Марки, разделенные ¤>;[<Код группы модификаторов>];<Дата фиксации ЕГАИС>;<Алк. код товара ЕГАИС>;<Количество из прихода ЕГАИС>;<Номер справки 1>;<Номер справки 2>
              ТипТовара+";;"+стрМаркиЕГАИС+";;;;;;;;;;");
            //НДС
            
            //67637;20.05.2021;10:33:57;14;1;6186;000000000002;105605;;1;1;0.00;0;361;249.00;249.00;0;;4604794000855;249.00;;;0000000001;;;1/361/6186;;;;;;;;;;;;;;;;;;
            //НДС = 14
            аНомер:=аНомер+1;
            Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";14;1;"+НомДок+";1;"+КодТовара+";;"+НалогГруппа+";"+НалогСтавка+";"+СмНДС+";"+ТипДокумента+";1;"+зЦ+";"+зСм+";0;;"+СтрШтрихкод+";"+зСм+";;;;;;;;;;;;;;;;;;;;;;;;");
            
            If (Версия=2)And((not Комплектация512)Or(not ФлКомплектация)) Then //16
              аНомер:=аНомер+1;
              Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";16;1;"+НомДок+";1;"+КодТовара+";;;"+зК+";0.00;"+ТипДокумента+";1;"+зЦ+";"+зСм+";0;;"+СтрШтрихкод+";;"+
                //<Секция ККМ>;;<Код вида документа>;;;<Информация о документе>;;;;;;
                ";;;;;;;;;;;"+
                //<Тип товара>;<Контрольный знак (ИС МП)>;<Марки, разделенные ¤>;[<Код группы модификаторов>];<Дата фиксации ЕГАИС>;<Алк. код товара ЕГАИС>;<Количество из прихода ЕГАИС>;<Номер справки 1>;<Номер справки 2>
                ТипТовара+";;"+стрМаркиЕГАИС+";;;;;;;;;;");
            EndIf;
          EndIf;
        EndDo; //По строкам документа
        
        НомерКарты:="";//Номер безнал карты или подарочной карты при оплате
        //0 -- деньгами
        //1 -- банковской картой
        //3 -- внутренней предоплатой
        //6 -- подарочной картой
        См0:=СмДокумента;
        СмДеньгами:=0;
        If ФлКомплектация Then
          //Всегда наличные
          СмДеньгами:=СмДокумента;
          СмДокумента:=0;
        Else
          Вид:=?(ТипДокумента=0,"ПКО","РКО");
          дОплаты:=глНайтиПодчиненныйПоВиду(зДок,Вид,-1);
          If not IsEmpty(дОплаты) Then
            СмДеньгами:=Min(дОплаты.СуммаВзаиморасчетов,СмДокумента);
            СмДокумента:=СмДокумента-СмДеньгами;
          EndIf;
        EndIf;
        СмКартой:=СмДокумента;
        
        //41579;21.12.2021;06:47:07;41;1;4352;000000000002;;0000000001;0;125.00;125.00;0;162;;;0;;;0.00;;;0000000001;;;1/162/4352;;;;;;;;;;;;;;;;;;
        //<Номер транзакции>;<Дата транзакции>;<Время транзакции>;41;<Код рабочего места>;<Номер документа>;<Код кассира>;<Номер карты>;<Коды вида оплаты>;<Операция вида оплаты>;
        //      <Сумма оплаты в валюте>;<Сумма оплаты>;<Операция>;<Номер смены>;<Код акции>;<Код мероприятия>;<Код группы печати>;;<Код валюты>;0.00;
        //      <Код вида счетчика>;<Код счетчика>;<Код вида документа>;;;<Информация о документе>;<Идентификатор предприятия>;;<Номер протокола>;;;;;;;
        //41(40) -- оплата
        //<Операция вида оплаты>: 0–оплата наличными
        //                        1–оплата банковской картой
        //                        3–оплата внутренней предоплатой
        //                        6–оплата внутренней подарочной картой
        //                        7–пользовательская
        //                        8–оплата внешней подарочной картой
        //                        9–оплата банковской картой с выдачей наличных
        
        //41580;21.12.2021;06:47:07;43;1;4352;000000000002;;0000000001;0;125.00;125.00;0;162;;;0;;;;;;0000000001;;;0/3325/162;;;;;;;;;;;;;;;;;;
        //<Номер транзакции>;<Дата транзакции>;<Время транзакции>;43;<Код рабочего места>;<Номер документа>;<Код кассира>;;<Коды вида оплаты>;<Операция вида оплаты>;
        //      <Сумма оплаты в валюте>;<Сумма оплаты>;<Операция>;<Номер смены>;<Код акции>;<Код мероприятия>;<Код группы печати>;;<Код валюты>;0.00;
        //      <Код вида счетчика>;<Код счетчика>;<Код вида документа>;;;<Информация о документе>;<Идентификатор предприятия>;;<Номер протокола>;;;;;;;
        //43 -- распределение оплаты
        
        If (not Комплектация512)Or(not ФлКомплектация) Then
          If СмКартой>0 Then //Операция оплаты = 1
            КодВидаОплаты:=спКодыВидовОплат[2];
            СмКартой:=?(ТипДокумента=0,СмКартой,-СмКартой);
            аНомер:=аНомер+1;
            Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";"+?(Версия=1,41,40)+";1;"+НомДок+";1;"+НомерКарты+";"+КодВидаОплаты+";1;"+СмКартой+";"+СмКартой+";"+ТипДокумента+";1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");
            
            аНомер:=аНомер+1;
            Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";43;1;"+НомДок+";1;;"+КодВидаОплаты+";1;"+СмКартой+";"+СмКартой+";"+ТипДокумента+";1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");
          EndIf;
          If СмДеньгами>0 Then //Операция оплаты = 0
            КодВидаОплаты:=спКодыВидовОплат[1];
            СмДеньгами:=?(ТипДокумента=0,СмДеньгами,-СмДеньгами);
            аНомер:=аНомер+1;
            Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";"+?(Версия=1,41,40)+";1;"+НомДок+";1;;"+КодВидаОплаты+";0;"+СмДеньгами+";"+СмДеньгами+";"+ТипДокумента+";1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");
            
            аНомер:=аНомер+1;
            Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";43;1;"+НомДок+";1;;"+КодВидаОплаты+";0;"+СмДеньгами+";"+СмДеньгами+";"+ТипДокумента+";1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");          
          EndIf;
          
          If ФлМаркиЕГАИС Then
            //41665;21.12.2021;07:25:20;120;1;4360;000000000002;;;0.00;;0.00;0;162;;;0;;;;;;0000000001;;;1/162/4360;;;;;;;;;;;;;;;;;;
            //<Номер транзакции>;<Дата транзакции>;<Время транзакции>;120;<Код рабочего места>;<Номер документа>;<Код кассира>;;;;
            //      ;;<Операция>;<Номер смены>;;;<Код группы печати>;;<Идентификатор заказа>;0.00;
            //      ;;<Код вида документа>;;;<Кассовый номер чека>;<Идентификатор предприятия>;<Код сотрудника>;;;<Код зала>;<Код точки>;<URL ЕГАИС>;;;;;;
            //120 -- оправка в ЕГАИС (марок)
            аНомер:=аНомер+1;
            Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";120;1;"+НомДок+";1;;;0.00;;0.00;"+ТипДокумента+";1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");
          EndIf;
          
          СмДокумента:=?(ТипДокумента=0,СмДокумента,-СмДокумента);
          КлДокумента:=?(ТипДокумента=0,КлДокумента,-КлДокумента);
          СмЗаДень:=Round(СмЗаДень+СмДокумента,2);
          //41656;21.12.2021;07:13:29;49;1;4359;000000000002;;;;;142.00;0;162;;;0;;;;;;0000000001;;;7/3332/162;;;;;;;;;;;;;;;;;;
          //<Номер транзакции>;<Дата транзакции>;<Время транзакции>;49;<Код рабочего места>;<Номер документа>;<Код кассира>;;<Коды значений разрезов>;;
          //      ;<Сумма по группам печати>;<Операция>;<Номер смены>;;;<Код группы печати>;;<Идентификатор заказа>;;
          //      ;;<Код вида документа>;;;<Кассовый номер чека>;<Идентификатор предприятия>;<Код сотрудника>;;;<Код зала>;<Код точки>;;;;;;;
          //49 -- закрытие документа по ГП
          аНомер:=аНомер+1;
          Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";49;1;"+НомДок+";1;;;;;"+СмДокумента+";"+ТипДокумента+";1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");
          
          //41657;21.12.2021;07:13:29;45;1;4359;000000000002;;;;;142.00;0;162;;;0;;;;0005375580009094;9960440300543190;0000000001;3333;1847095552;7/3332/162;;;;;;;;;;;;;;;;;;21.12.2021 07:08:00
          //<Номер транзакции>;<Дата транзакции>;<Время транзакции>;45;<Код рабочего места>;<Номер документа>;<Код кассира>;<Номера карт клиента ч/з |>;<Коды значений разрезов>;;
          //      ;<Сумма по ККМ>;<Операция>;<Номер смены>;;;<Код группы печати>;;<Идентификатор заказа>;;
          //      ;;<Код вида документа>;;;<Кассовый номер чека>;<Идентификатор предприятия>;<Код сотрудника>;;;<Код зала>;<Код точки>;;;;;;;
          //45 -- закрытие документа по ККМ
          аНомер:=аНомер+1;
          Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";45;1;"+НомДок+";1;;;;;"+СмДокумента+";"+ТипДокумента+";1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");
        
          //41658;21.12.2021;07:13:29;55;1;4359;000000000002;;;;1.000;142.00;0;162;;;0;;;;;;0000000001;;;1/162/4359;;;;;;;;;;;;;;;;;;
          //<Номер транзакции>;<Дата транзакции>;<Время транзакции>;45;<Код рабочего места>;<Номер документа>;<Код кассира>;<Номера карт клиента ч/з |>;<Коды значений разрезов>;;
          //      <Количество товара>;<Сумма документа>;<Операция>;<Номер смены>;<Код клиента>;;<Код группы печати>;<Сумма бонуса>;<Идентификатор зала>;<Код контрагента>;
          //      <Количество посетителей>;;<Код вида документа>;<Код комментария>;<Номер документа-основания>;<Информация о документе>;<Идентификатор предприятия>;<Код сотрудника>;
          //      <Номер документа-списка>;<Код подразделения>;<Код зала>;<Код точки>;<Идентификатор резерва>;;<Код протокола бонуса>;;<Код контрагента>;<Идентификатор подразделения>;
          //55 -- закрытие документа
          аНомер:=аНомер+1;
          Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";55;1;"+НомДок+";1;;;;"+КлДокумента+";"+СмДокумента+";"+ТипДокумента+";1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");
        EndIf;
        
        //Для комплектации также добавим получаемый товар, как возврат (или документ 513)
        If ФлКомплектация Then
          Код11:=11;
          If (Комплектация512)And(ФлКомплектация) Then
            Код11:=513;
          Else
            НомДок:="9"+НомДок;
          EndIf;
          If not Комплектация512 Then
            аНомер:=аНомер+1;
            Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";42;1;"+НомДок+";1;;;;;;1;1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");
          EndIf;
          
          aTab:=зДок.LineParts("ИсходящаяНоменклатура").Copy();
          aTab.Group("Номенклатура,Сумма,Количество");
          //Общая сумма возвратов должна совпадать с суммой реализации (См0), для исправления возможной разницы в сумме возврата, найдем коэффициент приведения суммы
          См1:=0;
          aTab.Select();
          While aTab.Next() Do
            If aTab.Количество<=0 Then
              aNum:=aTab.CurLine;
              aTab.Remove(aNum);
              aTab.CurLine:=aNum-1;
              Continue;
            EndIf;
            См1:=Round(См1+aTab.Сумма,2);
          EndDo;
          См1:=?(См1=0,0,См0/См1);
          См2:=См0;
          
          aTab.Select();
          While aTab.Next() Do
            зСм:=-Round(aTab.Сумма*См1,2);
            If aTab.CurLine=aTab.Size() Then
              зСм:=-См2;
            EndIf;
            См2:=Round(См2+зСм,2);
            зК:=-Round(aTab.Количество,6);
            зЦ:=Round(зСм/зК,2);
            
            If not НайтиКодТовара(aTab.Номенклатура,тКодыНоменклатуры,КодТовара,СтрШтрихкод) Then
              Exit 0;
            EndIf;
            
            аНомер:=аНомер+1;
            Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";"+Код11+";1;"+НомДок+";1;"+КодТовара+";;"+зЦ+";"+зК+";"+зСм+";1;1;"+зЦ+";"+зСм+";0;;"+СтрШтрихкод+";"+зСм+";;;;;;;;;;;;0;;;;;;;;;;;;");
            
            If (Версия=2)And((not Комплектация512)Or(not ФлКомплектация)) Then //16
              аНомер:=аНомер+1;
              Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";16;1;"+НомДок+";1;"+КодТовара+";;;"+зК+";0.00;1;1;"+зЦ+";"+зСм+";0;;"+СтрШтрихкод+";;;;;;;;;;;;;0;;;;;;;;;;;;");
            EndIf;
          EndDo;
          
          If not Комплектация512 Then
            зСм:=-См0;
            зКл:=-aTab.SUM("Количество");
          Else
            зСм:=0;
            зКл:=-aTab.SUM("Количество")+Abs(КлДокумента);
          EndIf;
          КодВидаОплаты:=спКодыВидовОплат[1];//Наличные
          аНомер:=аНомер+1;
          Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";"+?(Версия=1,41,40)+";1;"+НомДок+";1;;"+КодВидаОплаты+";1;"+зСм+";"+зСм+";1;1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");
          
          аНомер:=аНомер+1;
          Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";43;1;"+НомДок+";1;;"+КодВидаОплаты+";1;"+зСм+";"+зСм+";1;1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");

          аНомер:=аНомер+1;
          Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";49;1;"+НомДок+";1;;;;;"+зСм+";1;1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");
                    
          аНомер:=аНомер+1;
          Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";45;1;"+НомДок+";1;;;;;"+зСм+";1;1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");
          
          аНомер:=аНомер+1;
          Т.AddString(""+аНомер+";"+аДень+";"+тВремя+";55;1;"+НомДок+";1;;;;"+зКл+";"+зСм+";1;1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");
        EndIf;  
        //Для комплектации также добавим получаемый товар, как возврат
          
      EndDo;//По документам дня
    EndIf;//Найден день
    
    //43146;23.12.2021;17:46:00;63;1;4499;000000000002;;;0.00;454908.00;0.00;9;164;;;0;;;;;;;;;35/3450/164;;;;;;;;;;;;;;;;;;
    //<Номер транзакции>;<Дата транзакции>;<Время транзакции>;63;<Код рабочего места>;<Номер документа>;<Код кассира>;;;<Выручка за смену>;
    //      <Наличность в кассе>;<Сменный итог>;;<Номер смены>;;;<Код группы печати>;;;
    //      ;;;;;;<Кассовый номер чека>;<Идентификатор предприятия>;;...
    //63 -- отчет Z
    аНомер:=аНомер+1;
    Т.AddString(""+аНомер+";"+аДень+";23:59:59;63;1;"+аНомер+";1;;;"+СмЗаДень+";0.00;0.00;9;1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");
    
    //43147;23.12.2021;17:46:00;61;1;4500;000000000002;;;5522.00;;5522.00;10;164;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;
    //<Номер транзакции>;<Дата транзакции>;<Время транзакции>;63;<Код рабочего места>;<Номер документа>;<Код кассира>;;;<Выручка за смену>;
    //      ;<Сменный итог>;;<Номер смены>;;;<Код группы печати>;;;
    //      ;;;;;;<Кассовый номер чека>;<Идентификатор предприятия>;;...
    //61 -- закрытие смены
    аНомер:=аНомер+1;
    Т.AddString(""+аНомер+";"+аДень+";23:59:59;61;1;"+аНомер+";1;;;"+СмЗаДень+";;"+СмЗаДень+";10;1;;;0;;;;;;;;;;;;;;;;;;;;;;;;;;;");
  EndDo;//По дням
  
  ИмяФайла:=ФайлВыгрузки;
  If ИмяФайла="" Then
    ИмяФайла:="goods_report.txt";
  EndIf;
  If ИмяФайла[1]="""" Then
    Try
      ИмяФайла:=Eval(ИмяФайла);
    Except
      ИмяФайла:="goods_report.txt";
    EndTry;
  EndIf;
  
  If Способ=1 Then
    If ПутьПротокола="" Then
      Raise "Не задана папка для выгрузки!";
    EndIf;
    ПутьПротокола:=AddBackSlash(ПутьПротокола);
    If not Т.Save(ПутьПротокола+ИмяФайла,0) Then
      Raise "Невозможно сохранить файл "+ИмяФайла+" в папку "+ПутьПротокола+"!";
    EndIf;
  EndIf;
  
  аДата:=Date(ПолучитьУстановку("Последний выгруженный день"));
  If _Or(IsEmpty(аДата),BegOfDay(КонДата)>аДата) Then
    ДобавитьУстановку("Последний выгруженный день",Str(BegOfDay(КонДата)),1);
  EndIf;
  ОбновитьВремяЗапуска("ПоследняяУдачнаяВыгрузка");
  Exit 1;
EndFunction


//Вызывает исключение, если проблема
Function УстановитьЦену(зН,ТипЦен,Цена,Дата,ByRef ФлИзмененных)
  Ц:=Ref.цЦены;
  If Ц.Find("@Parent,ТипЦен",зН,ТипЦен) Then
    If Ц.Status()=1 Then
      Ц.Mark(0,,зН);
    Else
      зН.SetTrigger(1);
    EndIf;
  Else
    Ц.New();
    Ц.Parent(зН);
    Ц.ТипЦен:=ТипЦен;
    Ц.Save(,,зН);
    ФлИзмененных:=ФлИзмененных+1;
  EndIf;
  If Ц.GetValue("Цена",Дата)<>Цена Then
    Ц.SetValue("Цена",Цена,Дата);
    If УстановкаЦен=1 Then
      кЦ:=Ref.цПечатьЦенников;
      If кЦ.Find("@Parent,Магазин",зН,Магазин)=0 Then
        //Создаем
        кЦ.New();
        кЦ.Parent(зН);
        кЦ.Магазин:=Магазин;
        кЦ.ДатаПечати:=Дата;
        кЦ.ОбщаяСкидка:=0;
        кЦ.Save();
      ElseIf _Or(кЦ.ОбщаяСкидка<>0,isEmpty(кЦ.ДатаПечати),кЦ.ДатаПечати<Дата) Then
        кЦ.ДатаПечати:=Дата;
        кЦ.ОбщаяСкидка:=0;
        кЦ.Save();
      EndIf;
    EndIf;
    ФлИзмененных:=ФлИзмененных+1;
  EndIf;
EndFunction

Function ОбновитьТаблицуКодов()
  //Запрос по дополнительным свойствам (коды номенклатуры) 
  ТЗ:="(зКод:=Ref.общДополнительныеСвойства.Name;
  |зТип:=Ref.общДополнительныеСвойства.ТипСвойства;
  |Condition(зТип=КодыНоменклатуры);
  |зН:=Ref.общДополнительныеСвойства.Элемент..Ref.тмцНоменклатура;
  |Group зН,зКод;) Postprocessing (SkipVariables зТип;)";
  З:=Query.Create();
  тКодыНоменклатуры:=З.Execute(ТЗ,0);
  MassLoadObjects(тКодыНоменклатуры);
  тКодыНоменклатуры.Sort("зКод");
  
  Exit тКодыНоменклатуры;
EndFunction

Function НайтиГруппуГИСМТ(КодГруппы)
  aEl:=Ref.рознТоварныеГруппыГИСМТ;
  If aEl.Find("ВнешнийКод",Str(КодГруппы)) Then
    Exit aEl;
  EndIf;
  Exit 0;
EndFunction


Function ВыполнитьЗагрузку()
  //Поддерживаемые команды (остальные игнорируются):
  //+ $$$ADDTAXRATES -- связь со ставками НДС
  //  $$$ADDTAXGROUPS -- не загружается
  //  $$$ADDTAXGROUPRATES -- не загружается
  //+ $$$ADDQUANTITY,$$$REPLACEQUANTITY,$$$REPLACEQUANTITYWITHOUTSALE -- добавить/изменить товары и остатки, штрихкоды, марки
  //+ $$$ADDASPECTREMAINS,$$$REPLACEASPECTREMAINS,$$$REPLACEASPECTREMAINSWITHOUTSALE -- добавить/изменить товары и остатки, штрихкоды, марки в "разрезах"
  //+ $$$ADDBARCODES -- добавление штрихкодов
  //+ $$$ADDASPECTVALUES -- добавление "разрезов" (только для МРЦ)
  //+ $$$ADDPRICES -- добавление цен
  //+ $$$ADDALCCODES -- изменение АП кодов на товарах
  //Потенциально могут загружаться в дальнейшем: $$$ADDBARCODETEMPLATES, $$$ADDCLIENTDISCS, $$$ADDPAYCARDWARECONV, $$$ADDALCCONTRACTORS, $$$CHANGEPOSDICOUNTUNION
  //Строки файла загрузки:
  //##@@&&                           -- заголовок
  //#                                -- если @, файл уже был загружен
  //[Команда 1]                      -- если команда отсутствует, считается, что это $$$ADDQUANTITY
  //...
  //
  //В файле могут присутствовать комментарии, начинающиеся с //
  
  //0 -- обычный
  //1 -- алкоголь
  //2 -- мех
  //3 -- лекарства
  //4 -- табак
  //5 -- обувь
  //6 -- лотерея (не ГИС МТ)
  //7 -- иное ГИС МТ
  //8 -- фото
  //9 -- духи
  //10 -- шины
  //11 -- одежда, белье
  //12 -- табак альт.
  //13 -- молоко
  
  СпДекодированиеГруппГИСМТ:=List.Create();
  СпДекодированиеГруппГИСМТ["2"]=НайтиГруппуГИСМТ(14);
  СпДекодированиеГруппГИСМТ["3"]=НайтиГруппуГИСМТ(19);
  СпДекодированиеГруппГИСМТ["4"]=НайтиГруппуГИСМТ(3);
  СпДекодированиеГруппГИСМТ["5"]=НайтиГруппуГИСМТ(2);
  СпДекодированиеГруппГИСМТ["8"]=НайтиГруппуГИСМТ(6);
  СпДекодированиеГруппГИСМТ["9"]=НайтиГруппуГИСМТ(4);
  СпДекодированиеГруппГИСМТ["10"]=НайтиГруппуГИСМТ(5);
  СпДекодированиеГруппГИСМТ["11"]=НайтиГруппуГИСМТ(1);
  СпДекодированиеГруппГИСМТ["12"]=НайтиГруппуГИСМТ(12);
  СпДекодированиеГруппГИСМТ["13"]=НайтиГруппуГИСМТ(8);
  
  Способ:=Max(1,Способ);
  If Способ<>1 Then
    Raise "В данный момент поддерживается только способ загрузки из локальной папки!";
  EndIf;
  
  If Способ=1 Then
    If ПутьПротокола="" Then
      Raise "Не задана папка для загрузки!";
    EndIf;
    ПутьПротокола:=AddBackSlash(ПутьПротокола);
  EndIf;
  
  
  ИмяФайла:=ФайлЗагрузки;
  If ИмяФайла="" Then
    ИмяФайла:="goods_out.txt";
  EndIf;
  
  тКодыНоменклатуры:=0;
  ДлинаИмени:=Struct.Ref("тмцНоменклатура").Props("Name").DataType;
  TearStr(ДлинаИмени,"STRING.");
  ДлинаИмени:=Number(ДлинаИмени);
  ДлинаИмени:=?(ДлинаИмени=0,100,ДлинаИмени);
  
  Файлы:=List.Create();
  Ф:=File.Create();
  Ф.FindOpen(Trim(ПутьПротокола)+ИмяФайла);
  While Ф.FindNextFile()<>"" Do
    Файл:=Trim(ПутьПротокола)+Ф.FileName;
    Файлы.Add(Файл);
  EndDo;
  If Файлы.Size()>0 Then
    ОбновитьВремяЗапуска("ПоследняяЗагрузка");
  EndIf;
  For iФайлы:=1 To Файлы.Size() Do
    Файл:=Файлы[iФайлы];
    MessageVisual("Загрузка файла "+Файл+"...");
    тФайл:=Text.Create();
    тФайл.Load(Файл,0);
    If _Or(тФайл.Size()<2,тФайл[1]<>"##@@&&") Then
      MessageVisual("Файл "+Файл+" имеет неверный формат!","!");
      Continue;
    EndIf;
    If тФайл[2]="@" Then
      MessageVisual("Файл "+Файл+" имеет метку того, что он уже был загружен, файл пропущен.");
      Continue;
    EndIf;
    If тФайл[2]<>"#" Then
      MessageVisual("Файл "+Файл+" имеет неверный формат!","!");
      Continue;
    EndIf;
    ФлНеУдалятьФайл:=0;
    ФлБылоУдалениеТоваров:=0;
    тМаксимальныеРозничныеЦены:=Tab.Create("КодРазреза,Цена");
    тНалогиСтавки:=Tab.Create("КодСтавки,Имя");
    тМакетинг:=Tab.Create("КодАкции,НачДата,КонДата,тСобытия");
    
    For iLoop:=3 To тФайл.Size() Do
      Стр:=тФайл[iLoop];
      If _And(iLoop=3,Left(Стр,3)<>"$$$") Then
        Стр:="$$$ADDQUANTITY";
        iLoop:=iLoop-1;
      EndIf;
      ФлКомандыОстатков:=_Or(Стр="$$$ADDASPECTREMAINS",Стр="$$$REPLACEASPECTREMAINS",Стр="$$$REPLACEASPECTREMAINSWITHOUTSALE");
      If Стр="$$$DELETEALLWARES" Then
        ФлБылоУдалениеТоваров:=1;
      ElseIf Стр="$$$ADDTAXRATES" Then
        //<Код>;<Наименование>;<Наименование 2>;<Налог на % - 0, на сумму - 1>;<Процент>;<Номер налога>
        //<Номер налога>: 0 -- заданный налог, 1 -- 0%, 2 -- 10%, 3 -- 20%, 4 -- без НДС, 5 -- 10/110, 6 -- 20/120
        For jLoop:=iLoop+1 To тФайл.Size() Do
          Стр:=тФайл[jLoop];
          If Left(Стр,3)="$$$" Then
            iLoop:=jLoop-1;
            Continue 2;
          ElseIf _Or(Стр="",Left(Стр,2)="//") Then
            Continue;
          EndIf;
          КодСтавки:=TearStr(Стр,";");
          TearStr(Стр,";");
          TearStr(Стр,";");
          If Number(TearStr(Стр,";"))<>0 Then
            Continue;
          EndIf;
          
          Чл:=Number(TearStr(Стр,";"));
          Тип:=Number(TearStr(Стр,";"));
          СтрИмя:="БезНДС";
          If Чл=0 Then
            If Тип=1 Then
              СтрИмя:="НДС0";
            EndIf;
          ElseIf Чл=10 Then
            СтрИмя:="НДС10";
          ElseIf Чл=20 Then
            СтрИмя:="НДС20";
          ElseIf Чл=18 Then
            СтрИмя:="НДС18";
          Else
            Continue;
          EndIf;
          тНалогиСтавки.AddLine("КодСтавки,Имя",КодСтавки,СтрИмя);
        EndDo;
        iLoop:=jLoop;
      ElseIf Стр="$$$ADDTAXGROUPRATES" Then
        //<Код>;<Код группы>;<Код ставки>;<Смена базы 0 -- нет, 1 -- да>
        For jLoop:=iLoop+1 To тФайл.Size() Do
          Стр:=тФайл[jLoop];
          If Left(Стр,3)="$$$" Then
            iLoop:=jLoop-1;
            Continue 2;
          ElseIf _Or(Стр="",Left(Стр,2)="//") Then
            Continue;
          EndIf;
          If тНалогиСтавки.Size()=0 Then
            Continue;
          EndIf;
          TearStr(Стр,";");
          КодГруппы:=TearStr(Стр,";");
          КодСтавки:=TearStr(Стр,";");
          If тНалогиСтавки.FindAndGoto(КодСтавки,,"КодСтавки")>0 Then
            СтрИмя:=тНалогиСтавки.Имя;
            СтрКод:=тНалогиСтавки.КодСтавки+":"+КодГруппы;
            aEl:=Ref.рознУстановкиОбменаМагазинов;
            If not aEl.Find("Name",СтрИмя) Then
              aEl.New();
              aEl.Name:=СтрИмя;
              aEl.Parent(Элемент);
              aEl.Установка:=СтрКод;
              aEl.Save();
            ElseIf aEl.Установка<>СтрКод Then
              aEl.Установка:=СтрКод;
              aEl.Save();
            EndIf;
          EndIf;
        EndDo;
        iLoop:=jLoop;
      ElseIf _Or(ФлКомандыОстатков,Стр="$$$ADDQUANTITY",Стр="$$$REPLACEQUANTITY",Стр="$$$REPLACEQUANTITYWITHOUTSALE") Then
        СпДокументыИзмененияОстатков:=List.Create();
        ФлЗапросДобавления:=_Or(Стр="$$$ADDQUANTITY",Стр="$$$ADDASPECTREMAINS");
        ТекДата:=BegOfDay(Date());
      
        If тКодыНоменклатуры=0 Then
          тКодыНоменклатуры:=ОбновитьТаблицуКодов();
        EndIf;
        
        ФлРазрешитьДубли:=1;
        тШтрихКоды:=0;
        тЦены:=0;
        тОстатки:=0;
        тPLUКоды:=0;
        тДвижение:=0;
        
        тСтавкиНДС:=Tab.Create("Ставка,КодГруппы,КодСтавки");
        aEl:=Ref.рознУстановкиОбменаМагазинов;
        aEl.Select("~(@Parent=Элемент)And(@Status=0)And((Left(Name,3)=""НДС"")or(Name=""БезНДС""))");
        While aEl.Next() Do
          Try
            bEl:=Enum.Get("СтавкиНДС."+aEl.Name);
            Стр:=aEl.Установка;
            тСтавкиНДС.AddLine("Ставка,КодСтавки,КодГруппы",bEl,TearStr(Стр,":"),Стр);
            тСтавкиНДС.КодГруппы:=?(IsEmpty(тСтавкиНДС.КодГруппы),тСтавкиНДС.КодСтавки,тСтавкиНДС.КодГруппы);
          Except
          EndTry;
        EndDo;
        aEl:=Enum.СтавкиНДС;
        For i:=1 To aEl.Count() Do
          bEl:=Enum.GetByIndex("СтавкиНДС",i);
          If тСтавкиНДС.Find(bEl,,"Ставка")=0 Then
            тСтавкиНДС.AddLine("Ставка,КодСтавки,КодГруппы",bEl,тСтавкиНДС.Size()+1,тСтавкиНДС.Size()+1);
          EndIf;
        EndDo;
        
        //Штука
        зЕд:=Ref.тмцЕдиницыИзмерения;
        If not зЕд.Find("Name","шт") Then
          зЕд.New();
          зЕд.Name:="шт";
          зЕд.ПолнНаименование:="Штука";
          зЕд.ВнешнийКод:="796";
          зЕд.Save();
        EndIf;
        
        //Литр
        зЕдЛ:=Ref.тмцЕдиницыИзмерения;
        If not зЕдЛ.Find("Name","л") Then
          зЕдЛ.New();
          зЕдЛ.Name:="л";
          зЕдЛ.ПолнНаименование:="Литр";
          зЕдЛ.ВнешнийКод:="112";
          зЕдЛ.Save();
        EndIf;
        
        спБылаУстановкаМаксЦен:=List.Create();
        спБылаУстановкаЦен:=List.Create();
        //Для ускорения загрузки в SQlite3 используется транзакция по 50 измененных товаров или др. элементов
        ФлИзмененных:=0;//Измененных товаров/элементов внутри транзакции
        jLoop:=iLoop+1;
        BeginTransaction();
        Try
          For jLoop:=iLoop+1 To тФайл.Size() Do
            Стр:=тФайл[jLoop];
            If Left(Стр,3)="$$$" Then
              iLoop:=jLoop-1;
              Continue 2;
            ElseIf _Or(Стр="",Left(Стр,2)="//") Then
              Continue;
            EndIf;
            If _And(ProgramMode()=1,jLoop%10=0) Then
              Form.StatusText(""+jLoop+" из "+тФайл.Size()+?(ФлКомандыОстатков," (Остатки)"," (Товары)"));
            EndIf;
            
            If not ФлКомандыОстатков Then
              //<Код товара>;<Штрихкоды ч/з запятую>;<Наименование>;<Наименование 2>;<Цена>;<Остаток>;;<Флаги ч/з запятую>;<Минимальная цена>;<Срок годности>;<Коды разрезов>;<Вариант разрезов>;<xPos: Тип товара>;
              //  <Коэффициент штрихкода>;;<Код группы>;<Товар 1 или пусто, группа 0>;;;<Серия>;<Сертификат>;;<Код налоговой группы>;<Код весов>;<PLU-код>;<Артикул>;<Тип скидки>;
              //  <Значение скидки>;<Максимальная скидка %>;;<Имя файла картинки>;<Описание>;<Кратность количества>;<Код ценника>;<Тип вознаграждения>;<Значение вознаграждения>;
              //  <Номер секции ККМ>;<ГТД>;<Код группы печати>;<Код группы печати копии>;<Код группы печати марки>;<Код предприятия>;;<Номер сообщения в весах>;;<Визуальный выбор>;
              //  <Левая граница модификаторов>;<Правая граница модификаторов>;<Сообщение для весов>;<0 -- товар, 1 -- услуга>;<Код углуги>;<Код вида АП>;<Емкость тары в л.>;
              //  <0 -- обычный товар, 1 -- алкоголь, 2 -- маркированная продукция>;<0 -- алкоголь без марки, 1 -- с маркой>;<Крепость алкоголя %>
              //<Тип товара>: 1 -- товар, 2 -- акцизный товар, 3 -- работа, 4 -- услуга, 5 -- составной товар, 6 -- иной товар, 7 -- аванс
              //<Флаги ч/з запятую>: 1 -- весовой, 2-9 -- не важно, 10 -- разливаемый товар, 11-14 -- не важно
              
              ФлНеМенятьНоменклатуру:=0;
              аКод:=TearStr(Стр,";");
              If аКод="" Then
                Continue;
              EndIf;
              аШтрихКоды:=TearStr(Стр,";");
              аИмя:=Replace(Trim(TearStr(Стр,";")),"¤",";");
              TearStr(Стр,";");//4
              аЦена:=Number(Replace(TearStr(Стр,";"),",","."));
              аОстаток:=Replace(TearStr(Стр,";"),",",".");
              ФлБезОстатка:=(аОстаток="")And(аЦена=0);
              аОстаток:=Number(аОстаток);
              TearStr(Стр,";");//7
              аВесовой:=TearStr(Стр,";");//Флаги
              аВесовой:=Number(TearStr(аВесовой,","));
              аМинЦена:=Number(Replace(TearStr(Стр,";"),",","."));
              TearStr(Стр,";");//10
              аМаксЦена:=0;
              СтрРазрезы:=TearStr(Стр,";");//11
              While СтрРазрезы<>"" Do
                СтрРазрез:=Number(TearStr(СтрРазрезы,","));
                If тМаксимальныеРозничныеЦены.FindAndGoto(СтрРазрез,,"КодРазреза",1) Then
                  аМаксЦена:=тМаксимальныеРозничныеЦены.Цена;
                EndIf;
              EndDo;
              TearStr(Стр,";");//12
              ФлУслуга:=Number(TearStr(Стр,";"));
              ФлУслуга:=(ФлУслуга=3)or(ФлУслуга=4)Or(ФлУслуга=7);
              КфШк:=Number(TearStr(Стр,";"));
              TearStr(Стр,";");
              аКодГруппы:=TearStr(Стр,";");
              ФлГруппа:=TearStr(Стр,";")="0";
              TearStr(Стр,";");//18
              TearStr(Стр,";");//19
              TearStr(Стр,";");//20
              TearStr(Стр,";");//21
              TearStr(Стр,";");//22
              аНДС:=Trim(TearStr(Стр,";"));
              If тСтавкиНДС.FindAndGoto(аНДС,,"КодГруппы")>0 Then
                аНДС:=тСтавкиНДС.Ставка;
              Else
                аНДС:=Enum.СтавкиНДС.НДС20;
              EndIf;
              TearStr(Стр,";");//24
              аPLU:=Number(TearStr(Стр,";"));
              TearStr(Стр,";");//26
              TearStr(Стр,";");//27
              TearStr(Стр,";");//28
              TearStr(Стр,";");//29
              TearStr(Стр,";");//30
              TearStr(Стр,";");//31
              TearStr(Стр,";");//32
              TearStr(Стр,";");//33
              TearStr(Стр,";");//34
              TearStr(Стр,";");//35
              TearStr(Стр,";");//36
              TearStr(Стр,";");//37
              TearStr(Стр,";");//38
              TearStr(Стр,";");//39
              TearStr(Стр,";");//40 - <Код группы печати копии>
              TearStr(Стр,";");//41
              TearStr(Стр,";");//42
              TearStr(Стр,";");//43
              TearStr(Стр,";");//44
              TearStr(Стр,";");//45
              TearStr(Стр,";");//46
              TearStr(Стр,";");//47
              TearStr(Стр,";");//48
              TearStr(Стр,";");//49
              TearStr(Стр,";");//50
              ФлУслуга:=ФлУслуга or TearStr(Стр,";")="1";//51
              TearStr(Стр,";");//52
              аАПКод:=Trim(TearStr(Стр,";"));
              аОбъем:=Number(Replace(TearStr(Стр,";"),",","."));
              аТипТовара:=Number(TearStr(Стр,";"));
              аГруппаГИСМТ:=СпДекодированиеГруппГИСМТ[Str(аТипТовара)];
              аТипТовара:=?((аТипТовара>1)And(аТипТовара<>6),2,аТипТовара);//0 -- товар, 1 -- алкоголь, 2 -- ГИС МТ
              
              аМаркаАлкоголь:=Number(TearStr(Стр,";"))=0;
              аКрепость:=Number(Replace(TearStr(Стр,";"),",","."));
              
              аПапка:=0;
              If аКодГруппы<>"" Then
                If тКодыНоменклатуры.FindAndGoto(аКодГруппы,,"зКод",1) Then
                  аПапка:=тКодыНоменклатуры.зН;
                EndIf;
              EndIf;
              If _And(IsEmpty(аПапка),not IsEmpty(КорневаяПапка)) Then
                аПапка:=КорневаяПапка;
              EndIf;
            Else
              //<Код товара>;<Остаток>;<Коды разрезов>;<Цена>;<Тип скидки>;<Значение скидки>;<Код предприятия>
              //Коды "разрезов" позволяют установить МРЦ (ЦенаМаксимальнаяПродажная)
            
              ФлНеМенятьНоменклатуру:=1;
              аКод:=TearStr(Стр,";");
              If аКод="" Then
                Continue;
              EndIf;
              аОстаток:=Replace(TearStr(Стр,";"),",",".");
              ФлБезОстатка:=аОстаток="";
              аОстаток="";
              аОстаток:=Number(аОстаток);
              аМаксЦена:=0;
              СтрРазрезы:=TearStr(Стр,";");//3
              While СтрРазрезы<>"" Do
                СтрРазрез:=Number(TearStr(СтрРазрезы,","));
                If тМаксимальныеРозничныеЦены.FindAndGoto(СтрРазрез,,"КодРазреза",1) Then
                  аМаксЦена:=тМаксимальныеРозничныеЦены.Цена;
                EndIf;
              EndDo;
              аЦена:=Number(Replace(TearStr(Стр,";"),",","."));
              ФлБезОстатка:=ФлБезОстатка And(аЦена=0);
              //5-7 не требуется
              аШтрихКоды:="";
              аИмя:="";
              аВесовой:=0;
              аМинЦена:=0;
              ФлУслуга:=0;
              КфШк:=-1;
              аКодГруппы:=0;
              аПапка:=0;
              ФлГруппа:=0;
              аНДС:=Enum.СтавкиНДС.НДС20;
              аPLU:=0;
              аАПКод:="";
              аОбъем:=0;
              аТипТовара:=0;
              аГруппаГИСМТ:=0;
              аМаркаАлкоголь:=0;
              аКрепость:=0;
            EndIf;
            
            
            ФлБлокировка:=0;
            Try
              If not тКодыНоменклатуры.FindAndGoto(аКод,,"зКод",1) Then
                If ФлНеМенятьНоменклатуру Then
                  MessageVisual("В команде изменения остатков передана неизвестная номенклатура "+аКод+"! Команда пропущена!","!");
                  ФлНеУдалятьФайл:=1;
                  Continue;
                EndIf;
                //Создаем новую позицию
                зН:=Ref.тмцНоменклатура;
                зН.New(ФлГруппа);
                If not IsEmpty(аПапка) Then
                  зН.Folder(аПапка);
                EndIf;
                зН.Name:=Left(аИмя,ДлинаИмени);
                зН.рбДатаСоздания:=BegOfDay(Date())-1;
                зН.оснКоэффициент:=1;
                If (аТипТовара=1)And(аВесовой) Then
                  зН.базЕдиница:=зЕдЛ;
                  зН.оснЕдиница:=зЕдЛ;
                Else
                  зН.базЕдиница:=зЕд;
                  зН.оснЕдиница:=зЕд;
                Endif;
    
                аСв:=Ref.общДополнительныеСвойства;
                аСв.New();
                аСв.Name:=аКод;
                аСв.ТипСвойства:=КодыНоменклатуры;
                аСв.Элемент:=зН;
                ФлИзмененных:=ФлИзмененных+1;
                            
                зН.Save(0,1);
                ФлБлокировка:=1;
                аСв.Save();
                тКодыНоменклатуры.AddLineSorted("зКод","зКод,зН",аКод,зН);
              Else
                зН:=тКодыНоменклатуры.зН;
                If _And(not ФлНеМенятьНоменклатуру,зН.IsFolder()<>ФлГруппа) Then
                  Raise "Позиция с кодом "+аКод+" в локальной базе является "+?(зН.IsFolder(),"папкой","элементом")+", а в загрузке она присутствует, как "+?(ФлГруппа,"папка","элемент")+"!";
                EndIf;
              EndIf;
              
              //Проверяем и обновляем свойства номенклатуры
              If not ФлНеМенятьНоменклатуру Then
                ФлИзмПапка:=аПапка<>зН.Folder();
                If _And(ФлИзмПапка,IsEmpty(аПапка)=IsEmpty(зН.Folder()),IsEmpty(аПапка)) Then
                  ФлИзмПапка:=0;
                EndIf;
                If ФлГруппа Then
                  If _Or(ФлИзмПапка,Lowercase(Left(аИмя,ДлинаИмени))<>Lowercase(зН.Name)) Then
                    //Обновляем свойства группы
                    If not ФлБлокировка Then
                      ФлБлокировка:=зН.Lock();
                      If not ФлБлокировка Then
                        ФлНеУдалятьФайл:=1;
                      Else
                        зН.Reload();
                      EndIf;
                    EndIf;
                    If ФлБлокировка Then
                      зН.Name:=Left(аИмя,ДлинаИмени);
                      If ФлИзмПапка Then
                        зН.Folder(аПапка);
                      EndIf;
                      ФлИзмененных:=ФлИзмененных+1;
                      зН.Save();
                    EndIf;
                  EndIf;
                ElseIf _Or(ФлИзмПапка,Lowercase(Left(аИмя,ДлинаИмени))<>Lowercase(зН.Name),аВесовой<>зН.флВесовойТовар,_And(аМинЦена<>0,аМинЦена<>зН.ЦенаМинимальнаяПродажная),
                    _And(аМаксЦена<>0,аМаксЦена<>зН.ЦенаМаксимальнаяПродажная),ФлУслуга<>(зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Услуга),зН.ВидНоменклатуры.Selected()=0,аНДС<>зН.СтавкаНДС,аАПКод<>зН.ЕГАИСКодАП,аОбъем<>зН.ОбъемЛитров,
                    (аТипТовара=1)<>зН.флАлкогольнаяПродукция,(аТипТовара=2)<>зН.флПодлежитПрослеживаемости,(аТипТовара>0)<>зН.флПартионныйУчет,_And(not IsEmpty(аГруппаГИСМТ),аГруппаГИСМТ<>зН.ГИСМТТоварнаяГруппа),
                    аКрепость<>зН.сертКрепость) Then
                  //Обновляем свойства
                  If not ФлБлокировка Then
                    ФлБлокировка:=зН.Lock();
                    If not ФлБлокировка Then
                      ФлНеУдалятьФайл:=1;
                      MessageVisual("Невозможно заблокировать номенклатуру "+зН+" ("+зН.Code+")","!");
                    Else
                      зН.Reload();
                    EndIf;
                  EndIf;
                  If ФлБлокировка Then
                    зН.Name:=Left(аИмя,ДлинаИмени);
                    If ФлИзмПапка Then
                      зН.Folder(аПапка);
                    EndIf;
                    зН.флВесовойТовар:=аВесовой;
                    зН.ЦенаМинимальнаяПродажная:=?(аМинЦена<>0,аМинЦена,зН.ЦенаМинимальнаяПродажная);
                    зН.ЦенаМаксимальнаяПродажная:=?(аМаксЦена<>0,аМаксЦена,зН.ЦенаМаксимальнаяПродажная);
                    If ФлУслуга<>(зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Услуга) Then
                      зН.ВидНоменклатуры:=?(ФлУслуга,Enum.ВидыНоменклатуры.Услуга,Enum.ВидыНоменклатуры.Товар);
                    ElseIf зН.ВидНоменклатуры.Selected()=0 Then
                      зН.ВидНоменклатуры:=Enum.ВидыНоменклатуры.Товар;
                    EndIf;
                    зН.СтавкаНДС:=аНДС;
                    зН.ЕГАИСКодАП:=аАПКод;
                    зН.ОбъемЛитров:=аОбъем;
                    зН.флАлкогольнаяПродукция:=аТипТовара=1;
                    зН.флПодлежитПрослеживаемости:=аТипТовара=2;
                    If not IsEmpty(аГруппаГИСМТ) Then
                      зН.ГИСМТТоварнаяГруппа:=аГруппаГИСМТ;
                    EndIf;
                    зН.флПартионныйУчет:=аТипТовара>0;
                    зН.сертКрепость:=аКрепость;
                    ФлИзмененных:=ФлИзмененных+1;
                    зН.Save();
                  EndIf;
                EndIf;
              ElseIf аМаксЦена<>0 Then
                If спБылаУстановкаМаксЦен.Find(зН.Code,,1)=0 Then
                  спБылаУстановкаМаксЦен.Add(зН.Code,,,1);//Иногда в выгрузках из ЦБ (1С) попадаются множественные строки с разной ценой, мы не должны замедлять загрузку из-за этого
                  If аМаксЦена<>зН.ЦенаМаксимальнаяПродажная Then
                    If not ФлБлокировка Then
                      ФлБлокировка:=зН.Lock();
                      If not ФлБлокировка Then
                        ФлНеУдалятьФайл:=1;
                        MessageVisual("Невозможно заблокировать номенклатуру "+зН+" ("+зН.Code+")","!");
                      Else
                        зН.Reload();
                      EndIf;
                    EndIf;
                    If ФлБлокировка Then
                      зН.ЦенаМаксимальнаяПродажная:=аМаксЦена;
                      ФлИзмененных:=ФлИзмененных+1;
                      зН.Save();
                    EndIf;
                  EndIf;
                EndIf;  
              EndIf;
            Finally
              If ФлБлокировка Then
                зН.Unlock();
              EndIf;
            EndTry;
              
            //Обновляем штрихкоды
            If _And(КфШк=1,аШтрихКоды<>"") Then
              If тШтрихКоды=0 Then
                //Запрос по штрихкодам, не загружаем элементы номенклатуры (небольшое ускорение)
                ТЗ:="(зШтрихКод:=Ref.тмцШтрихкоды.Name;
                |зКф:=Ref.тмцШтрихкоды.Коэффициент;
                |Condition((зКф=1)Or(зКф=0));
                |зНКод:=Ref.тмцШтрихкоды.@Parent..Ref.тмцНоменклатура.Code;
                |зЭл:=Ref.тмцШтрихкоды;
                |Group зНКод,зЭл,зШтрихКод;) Postprocessing (SkipVariables зКф;)";
                З:=Query.Create();
                тШтрихКоды:=З.Execute(ТЗ,0);
                MassLoadObjects(тШтрихКоды);
                тШтрихКоды.Sort("зШтрихКод");
                спБылиШтрихкоды:=List.Create();
              EndIf;
            
              While аШтрихКоды<>"" Do
                Стр:=TearStr(аШтрихКоды,",");
                If Стр<>"" Then
                  ФлДобавить:=1;
                  If тШтрихКоды.FindAndGoto(Стр,,"зШтрихКод",1) Then
                    While _And(тШтрихКоды.CurLine<=тШтрихКоды.Size(),тШтрихКоды.зШтрихКод=Стр) Do
                      If тШтрихКоды.зНКод<>зН.Code Then
                        If _And(not ФлРазрешитьДубли,тШтрихКоды.зЭл.Status()=0) Then
                          //Удалить, шк закреплен за другим товаром
                          If спБылиШтрихкоды.Find(Стр,,1)=0 Then
                            спБылиШтрихкоды.Add(Стр,,,1);//Защита от одинаковых штрихкодов в разных позициях
                            тШтрихКоды.зЭл.Mark(1);
                          EndIf;
                        EndIf;
                      ElseIf тШтрихКоды.зЭл.Status()=1 Then
                        //Отменить удаление
                        If _And(not ФлРазрешитьДубли,спБылиШтрихкоды.Find(Стр,,1)=0) Then
                          спБылиШтрихкоды.Add(Стр,,,1);//Защита от одинаковых штрихкодов в разных позициях
                          тШтрихКоды.зЭл.Mark(0);
                        EndIf;
                        ФлДобавить:=0;
                      Else
                        ФлДобавить:=0;
                      EndIf;
                      If тШтрихКоды.CurLine=тШтрихКоды.Size() Then
                        Break;
                      Else
                        тШтрихКоды.CurLine:=тШтрихКоды.CurLine+1;
                      EndIf;
                    EndDo;
                  EndIf;
                  
                  If ФлДобавить Then
                    //Добавляем
                    зШК:=Ref.тмцШтрихкоды;
                    зШК.New();
                    зШК.Parent(зН);
                    зШК.Name:=Стр;
                    зШК.Коэффициент:=1;
                    ФлИзмененных:=ФлИзмененных+1;
                    зШК.Save(,,зН);
                    тШтрихКоды.AddLineSorted("зШтрихКод","зНКод,зЭл,зШтрихКод",зН.Code,зШК,Стр);
                  EndIf;
                EndIf;
              EndDo;//По всем штрихкодам позиции
            EndIf;
            
            //Создаем или обновляем партию товара
            //зП используется также ниже для заполнения остатков
            ФлМарки:=((аТипТовара=2)Or(аМаркаАлкоголь));
            зП:=Ref.тмцПартииТМЦ;
            If зН.флПартионныйУчет Then
              зП.UseOrder("Code-");
              If ?(not ФлНеМенятьНоменклатуру,not зП.Find("~(@Parent=зН)And(@Status<>1)And(флМарочныйУчет=ФлМарки)And(ЕГАИСКодАП=аАПКод)"),
                  not зП.Find("~(@Parent=зН)And(@Status<>1)")) Then
                  
                If ФлНеМенятьНоменклатуру Then
                  MessageVisual("В команде изменения остатков передана номенклатура, для которой в локальной базе отсутствует партия! Команда пропущена!","!");
                  ФлНеУдалятьФайл:=1;
                  Continue;
                EndIf;
                зП.New();
                зП.Parent(зН);
                зП.НомерУдостоверения:="Загрузка Атол";
                зП.ЕГАИСКодАП:=аАПКод;
                зП.КСР:=BegOfDay(Date());
                зП.флМарочныйУчет:=ФлМарки;
                зП.Name:=""+зП.КСР+" ("+зП.НомерУдостоверения+")";
                ФлИзмененных:=ФлИзмененных+1;
                зП.Save();
              EndIf;
            EndIf;
            
            //Изменяем цену продажи
            If аЦена>0 Then
              If тЦены=0 Then
                //Запрос по ценам
                ТипЦен:=Магазин.ТипЦенРеализации;
                ТЗ:="(зЦ:=Ref.цЦены.Цена(ТекДата);
                |зТЦ:=Ref.цЦены.ТипЦен;
                |Condition(зТЦ=ТипЦен);
                |зН:=Ref.цЦены.@Parent..Ref.тмцНоменклатура;
                |зСм:=Min(зЦ);
                |Group зН;) Postprocessing (SkipVariables зТЦ,зЦ;)";
                З:=Query.Create();
                тЦены:=З.Execute(ТЗ,0);
                MassLoadObjects(тЦены);
                тЦены.Sort("зН");
              EndIf;
              
              If спБылаУстановкаЦен.Find(зН.Code,,1)=0 Then
                спБылаУстановкаЦен.Add(зН.Code,,,1);//Иногда в выгрузках из ЦБ (1С) попадаются множественные строки с разной ценой, мы не должны замедлять загрузку из-за этого
                If тЦены.FindAndGoto(зН,,"зН",1)>0 Then
                  If тЦены.зСм<>аЦена Then
                    //Изменить
                    УстановитьЦену(зН,Магазин.ТипЦенРеализации,аЦена,ТекДата,ФлИзмененных);
                  EndIf;
                Else
                  //Добавить
                  УстановитьЦену(зН,Магазин.ТипЦенРеализации,аЦена,ТекДата,ФлИзмененных);
                  тЦены.AddLineSorted("зН","зН,зСм",зН,аЦена);
                EndIf;
              EndIf;
            EndIf;
            
            //Обновляем PLU?
            If аPLU<>0 Then
              If тPLUКоды=0 Then
                ТЗ:="(зPLUКод:=Ref.тмцPLUКоды.PLUКод;
                |зНКод:=Ref.тмцPLUКоды.@Parent.Code;
                |зМг:=Ref.тмцPLUКоды.Магазин;
                |Condition(зМг=Магазин);
                |зЭл:=Ref.тмцPLUКоды;
                |Group зНКод,зЭл,зPLUКод;) Postprocessing (SkipVariables зМг;)";
                З:=Query.Create();
                тPLUКоды:=З.Execute(ТЗ,0);
                MassLoadObjects(тPLUКоды);
                тPLUКоды.Sort("зPLUКод");
                
                МутантPLUКодов:="PLU_"+Магазин.Code;аПольз:="";аМаш:="";аДата:="";
                If not DBLockStringMutex(МутантPLUКодов) Then
                  МутантPLUКодов:="";
                EndIf;
              EndIf;
              If МутантPLUКодов<>"" Then
                ФлДобавить:=1;
                If тPLUКоды.FindAndGoto(аPLU,,"зPLUКод",1) Then
                  If тPLUКоды.зНКод<>зН.Code Then
                    If тPLUКоды.зЭл.Status()=0 Then
                      тPLUКоды.зЭл.DeletePhysically();
                    EndIf;
                  Else
                    ФлДобавить:=0;
                  EndIf;
                EndIf;
                
                If ФлДобавить Then
                  //Добавляем
                  зPLU:=Ref.тмцPLUКоды;
                  зPLU.New();
                  зPLU.Parent(зН);
                  зPLU.Магазин:=Магазин;
                  зPLU.PLUКод:=аPLU;
                  зPLU.Save();
                  ФлИзмененных:=ФлИзмененных+1;
                  тPLUКоды.AddLineSorted("зPLUКод","зНКод,зЭл,зPLUКод",зН.Code,зPLU,аPLU);
                EndIf;
              EndIf;
            EndIf;
            
            //TODO: здесь не предусмотрен точный подсчет, когда программа знает, какие из предыдущих документов попали в выгрузку,
            //      если делать выгрузку с точным подсчетом продаж, даже в этом случае, требуется, чтобы сервер всегда загружал все сообщения от клиента до любой выгрузки,
            //      что может быть технически сложно осуществимо.
            //Поэтому, остатки при работе в режиме фронт-офиса ПРИМЕРНЫЕ.
            //В зависимости от типа запроса, остатки приводятся к сл. количеству:
            //<Продажи без выгрузки> - запрос с ПоследняяУдачнаяВыгрузка по сегодняшний день
            //$$$ADDQUANTITY/ADDASPECTREMAINS с $$$DELETEALLWARES -- <Количество в загрузке> - <Продажи без выгрузки>
            //$$$ADDQUANTITY/ADDASPECTREMAINS -- <Текущие остатки> + <Количество в загрузке> - <Продажи без выгрузки>
            //$$$REPLACEQUANTITY/REPLACEASPECTREMAINS с $$$DELETEALLWARES -- <Количество в загрузке> - <Продажи без выгрузки>
            //$$$REPLACEQUANTITY/REPLACEASPECTREMAINS -- <Количество в загрузке> - <Продажи без выгрузки>
            //$$$REPLACEQUANTITYWITHOUTSALE/REPLACEASPECTREMAINSWITHOUTSALE с $$$DELETEALLWARES -- <Количество в загрузке> - <Продажи без выгрузки>
            //$$$REPLACEQUANTITYWITHOUTSALE/REPLACEASPECTREMAINSWITHOUTSALE -- <Количество в загрузке> - <Продажи без выгрузки>
            If _And(not БезОстатков,not ФлБезОстатка) Then
              If тОстатки=0 Then
                //Нахождение и блокировка документов списания и оприходования за текущий день
                //Каждый документ содержит не более, чем 500 строк
                СпДокументыИзмененияОстатков:=List.Create();
                If not БезОстатков Then
                  ТекДата1:=ТекДата+1;
                  СтрУИ:="ФРОНТОЛЗАГ_"+Магазин.Code;
                  СпДокументыИзмененияОстатков:=Doc.РегистрацияТМЦ.Load(0,"~(DocDate>=ТекДата)And(DocDate<ТекДата1)And(@Status>1)And(УникальныйИдентификатор=СтрУИ)");
                EndIf;
              
                //Блокировка документов оприходования
                аОбъект:=0;аПольз:="";аКомп:="";аДата:="";
                If not MassLockWithWait(СпДокументыИзмененияОстатков,0,1,2000,аОбъект,аПольз,аКомп,аДата) Then
                  MessageVisual("Для изменения остатков невозможно заблокировать документ "+аОбъект+" (заблокированный пользователем "+аПольз+", компьютер "+аКомп+")!","!");
                  ФлНеУдалятьФайл:=1;
                  БезОстатков:=1;//Пропустить загрузку остатков
                  Continue;
                EndIf;  
              
                //Запрос по остаткам на сегодня
                КДата:=BegOfDay(ТекДата+14);
                ТЗ:="(Period From КДата To КДата;
                |зМг:=Storage.ОстаткиТМЦ.Склад.Магазин;
                |Condition(зМг=Магазин);
                |зН:=Storage.ОстаткиТМЦ.Номенклатура;
                |зКл:=EndTotals(Количество);
                |Group зН;) Postprocessing (SkipVariables зМг;)";
                З:=Query.Create();
                тОстатки:=З.Execute(ТЗ,0);
                MassLoadObjects(тОстатки);
                тОстатки.Sort("зН");
                
                //Продажи без выгрузки
                ДатаПродаж:=Элемент.Copy().ПоследняяУдачнаяВыгрузка;
                ДатаПродаж:=?(IsEmpty(ДатаПродаж),DBVar.НачалоПериодаБазы,ДатаПродаж);
                ДатаПродаж:=?(IsEmpty(ДатаПродаж),'01.01.1981',ДатаПродаж);
                КДата:=Max(ДатаПродаж,КДата+1);
                ТЗ:="(PeriodT From ДатаПродаж to КДата;
                |зН:=Storage.ДвижениеТМЦ.Номенклатура;
                |зМрТип:=Storage.ДвижениеТМЦ.ТипЗаписи;Condition(зМрТип<2);
                |зМрТУ:=Storage.ДвижениеТМЦ.ТипУчета;Condition(зМрТУ=0);
                |зМг:=Storage.ДвижениеТМЦ.Склад.Магазин;
                |Condition(зМг=Магазин);
                |зК0:=Storage.ДвижениеТМЦ.Количество;зКл:=SUM(зК0);
                |Group зН;) Postprocessing (SkipVariables зМрТип,зМрТУ,зК0,зМг;)";
                З2:=Query.Create();
                тДвижение:=З2.Execute(ТЗ,0);
                MassLoadObjects(тДвижение);
                тДвижение.Sort("зН");
              EndIf;
              If тДвижение.FindAndGoto(зН,,"зН",1) Then
                аОстаток:=аОстаток-тДвижение.зКл;
              EndIf;
              If _And(ФлЗапросДобавления,not ФлБылоУдалениеТоваров) Then
                If тОстатки.FindAndGoto(зН,,"зН",1) Then
                  аОстаток:=аОстаток+тОстатки.зКл;
                EndIf;
              EndIf;
              If тОстатки.FindAndGoto(зН,,"зН",1) Then
                аОстаток:=аОстаток-тОстатки.зКл;
              EndIf;
              //аОстаток -- остаток, на который необходимо увеличить текущие остатки
              аОстаток:=Round(аОстаток,6);
              If аОстаток<>0 Then
                ФлНовый:=1;
                бДок:=0;//Документ для добавления
                bTab:=0;
                For i:=1 To СпДокументыИзмененияОстатков.Size() Do
                  зДок:=СпДокументыИзмененияОстатков[i];
                  ФлПриход:=?(зДок.КодОперации=Enum.коРегистрацияТМЦ.ОприходованиеТМЦ,1,-1);
                  If Sign(аОстаток)=ФлПриход Then
                    aTab:=зДок.LineParts("Номенклатура");
                    If _And(бДок=0,aTab.Size()<500) Then
                      бДок:=зДок;
                      bTab:=aTab;
                    EndIf;
                    If aTab.FindAndGoto(зН,,"Номенклатура")>0 Then //TODO: aTab should be sorted?
                      aTab.Количество:=aTab.Количество+аОстаток;
                      If (aTab.Цена=0)And(аЦена>0) Then
                        aTab.Цена:=аЦена;
                      EndIf;
                      глПересчитатьСтроку(зДок,aTab,"Количество2@Сумма@СуммаНДС");
                      ФлНовый:=0;
                      Break;
                    EndIf;
                  EndIf;
                EndDo;
                If ФлНовый Then
                  If бДок=0 Then
                    //Создаем новый документ
                    бДок:=Doc.РегистрацияТМЦ;
                    бДок.New();
                    бДок.DocDate:=ТекДата;
                    бДок.Автор:=глПользователь;
                    бДок.ЮрЛицо:=Магазин.ЮрЛицо;
                    бДок.Магазин:=Магазин;
                    глУстановитьНовыйНомер(бДок);
                    бДок.Склад:=Магазин.Склад;
                    бДок.КодОперации:=?(Sign(аОстаток)=1,Enum.коРегистрацияТМЦ.ОприходованиеТМЦ,Enum.коРегистрацияТМЦ.СписаниеТМЦ);
                    бДок.УчитыватьВНалоговомУчете:=1;
                    бДок.УникальныйИдентификатор:="ФРОНТОЛЗАГ_"+Магазин.Code;
                    //бДок.УникальныйИдентификатор2:="=";
                    бДок.УникальныйИдентификатор3:="=";
                    бДок.ТипЦен:=Магазин.ТипЦенРеализации;
                    bTab:=бДок.LineParts("Номенклатура");
                    СпДокументыИзмененияОстатков.Add(бДок);
                  EndIf;
                  
                  //зП найдена ранее
                  bTab.AddLine("Номенклатура,Партия,СтавкаНДС,Количество,Цена",зН,зП,зН.СтавкаНДС,Abs(аОстаток),аЦена);
                  глПересчитатьСтроку(бДок,bTab,"Код@Количество2@Сумма@СуммаНДС");
                EndIf;
              EndIf;
            EndIf;
            
            If ФлИзмененных>50 Then
              CommitTransaction();
              ФлИзмененных:=0;
              BeginTransaction();
            EndIf;
            
          EndDo;//По строкам документа загрузки
        Finally
          Стр:=PopError();
          SuppressException();
          If not IsEmpty(Стр) Then
            MessageVisual(Стр,"!");
            ФлНеУдалятьФайл:=1;
            If IsTransactionActive() Then
              RollbackTransaction();
            EndIf;
          Else
            If IsTransactionActive() Then
              CommitTransaction();
            EndIf;
            
            For i:=1 To СпДокументыИзмененияОстатков.Size() Do
              Form.StatusText("Обработка документов остатков: "+i+" из "+СпДокументыИзмененияОстатков.Size());
              бДок:=СпДокументыИзмененияОстатков[i];
              aTab:=бДок.LineParts("Номенклатура");
              бДок.СуммаВзаиморасчетов:=aTab.Sum("Сумма");
              If (бДок.Selected()=2)or(бДок.Selected()<0) Then
                If not глОбработать(бДок,1,1) Then
                  MessageVisual("Невозможно обработать документ изменения остатков!","!");
                  ФлНеУдалятьФайл:=1;
                EndIf;
              EndIf;
            EndDo;
          EndIf;
          MassUnlock(СпДокументыИзмененияОстатков);
        EndTry;
        iLoop:=jLoop;
        
      ElseIf Стр="$$$ADDBARCODES" Then  
        тШтрихКоды:=0;
      
        ФлИзмененных:=0;//Измененных товаров/элементов внутри транзакции
        BeginTransaction();
        Try
          For jLoop:=iLoop+1 To тФайл.Size() Do
            Стр:=тФайл[jLoop];
            If Left(Стр,3)="$$$" Then
              iLoop:=jLoop-1;
              Continue 2;
            ElseIf _Or(Стр="",Left(Стр,2)="//") Then
              Continue;
            EndIf;
            If _And(ProgramMode()=1,jLoop%10=0) Then
              Form.StatusText(""+jLoop+" из "+тФайл.Size()+" (Штрихкоды)");
            EndIf;
        
            //<Штрихкод>;<Код товара>;<Коды разрезов>;<Коэффициент>;<Разрешить дублир. штрихкод>;<Значение скидки>;<Код предприятия>
            аШтрихКод:=TearStr(Стр,";");
            аКод:=TearStr(Стр,";");
            If аКод="" Then
              Continue;
            EndIf;
            TearStr(Стр,";");//3
            КфШк:=Number(TearStr(Стр,";"));
            ФлРазрешитьДубли:=Number(TearStr(Стр,";"));
            //6-7 не требуется
            If not тКодыНоменклатуры.FindAndGoto(аКод,,"зКод",1) Then
              MessageVisual("В команде изменения штрихкодов передана неизвестная номенклатура "+аКод+"! Команда пропущена!","!");
              ФлНеУдалятьФайл:=1;
              Continue;
            EndIf;
            зН:=тКодыНоменклатуры.зН;
          
            //Обновляем штрихкоды
            If аШтрихКод<>"" Then
              If тШтрихКоды=0 Then
                //Запрос по штрихкодам, не загружаем элементы номенклатуры (небольшое ускорение)
                ТЗ:="(зШтрихКод:=Ref.тмцШтрихкоды.Name;
                |зКф:=Ref.тмцШтрихкоды.Коэффициент;
                |Condition((зКф=1)Or(зКф=0));
                |зНКод:=Ref.тмцШтрихкоды.@Parent..Ref.тмцНоменклатура.Code;
                |зЭл:=Ref.тмцШтрихкоды;
                |Group зНКод,зЭл,зШтрихКод;) Postprocessing (SkipVariables зКф;)";
                З:=Query.Create();
                тШтрихКоды:=З.Execute(ТЗ,0);
                MassLoadObjects(тШтрихКоды);
                тШтрихКоды.Sort("зШтрихКод");
                спБылиШтрихкоды:=List.Create();
              EndIf;
            
              ФлДобавить:=1;
              If тШтрихКоды.FindAndGoto(аШтрихКод,,"зШтрихКод",1) Then
                While _And(тШтрихКоды.CurLine<=тШтрихКоды.Size(),тШтрихКоды.зШтрихКод=аШтрихКод) Do
                  If тШтрихКоды.зНКод<>зН.Code Then
                    If _And(not ФлРазрешитьДубли,тШтрихКоды.зЭл.Status()=0) Then
                      //Удалить, шк закреплен за другим товаром
                      If спБылиШтрихкоды.Find(аШтрихКод,,1)=0 Then
                        спБылиШтрихкоды.Add(аШтрихКод,,,1);//Защита от одинаковых штрихкодов в разных позициях
                        Try
                          тШтрихКоды.зЭл.Mark(1);
                        Except
                          ФлНеУдалятьФайл:=1;
                        EndTry;
                      EndIf;
                    EndIf;
                  ElseIf тШтрихКоды.зЭл.Status()=1 Then
                    //Отменить удаление
                    If _And(not ФлРазрешитьДубли,спБылиШтрихкоды.Find(аШтрихКод,,1)=0) Then
                      If not ФлРазрешитьДубли Then
                        спБылиШтрихкоды.Add(Стр,,,1);//Защита от одинаковых штрихкодов в разных позициях
                      EndIf;
                      Try
                        тШтрихКоды.зЭл.Mark(0);
                      Except
                        ФлНеУдалятьФайл:=1;
                      EndTry;
                    EndIf;
                  Else
                    ФлДобавить:=0;
                  EndIf;
                  If тШтрихКоды.CurLine=тШтрихКоды.Size() Then
                    Break;
                  Else
                    тШтрихКоды.CurLine:=тШтрихКоды.CurLine+1;
                  EndIf;
                EndDo;
              EndIf;
              
              If ФлДобавить Then
                //Добавляем
                зШК:=Ref.тмцШтрихкоды;
                зШК.New();
                зШК.Parent(зН);
                зШК.Name:=аШтрихКод;
                зШК.Коэффициент:=КфШк;
                зШК.Save(,,зН);
                ФлИзмененных:=ФлИзмененных+1;
                тШтрихКоды.AddLineSorted("зШтрихКод","зНКод,зЭл,зШтрихКод",зН.Code,зШК,аШтрихКод);
              EndIf;
            EndIf;
          
            If ФлИзмененных>50 Then
              CommitTransaction();
              ФлИзмененных:=0;
              BeginTransaction();
            EndIf;
            
          EndDo;//По строкам документа загрузки
        Finally
          Стр:=PopError();
          SuppressException();
          If not IsEmpty(Стр) Then
            MessageVisual(Стр,"!");
            ФлНеУдалятьФайл:=1;
            If IsTransactionActive() Then
              RollbackTransaction();
            EndIf;
          Else
            If IsTransactionActive() Then
              CommitTransaction();
            EndIf;
          EndIf;
        EndTry;
        
        iLoop:=jLoop;
      ElseIf Стр="$$$ADDASPECTVALUES" Then    
        //Используется для изменения МРЦ
        //<Код схемы>;<Код схемы 2>;<Код разреза>;<Наименование>;<Наименование 2>;<Штрихкод разреза>
        //<Наименование>: "МРЦ: ???"
        тМаксимальныеРозничныеЦены:=Tab.Create("КодРазреза,Цена");
        For jLoop:=iLoop+1 To тФайл.Size() Do
          Стр:=тФайл[jLoop];
          If Left(Стр,3)="$$$" Then
            iLoop:=jLoop-1;
            Continue 2;
          ElseIf _Or(Стр="",Left(Стр,2)="//") Then
            Continue;
          EndIf;
          If _And(ProgramMode()=1,jLoop%10=0) Then
            Form.StatusText(""+jLoop+" из "+тФайл.Size()+" (Разрезы)");
          EndIf;
          TearStr(Стр,";");
          TearStr(Стр,";");
          аРазрез:=Number(TearStr(Стр,";"));
          Стр:=TearStr(Стр,";");
          If Pos("МРЦ:",Стр)=1 Then
            TearStr(Стр,"МРЦ:");
            аЦена:=Number(Trim(Replace(Стр,",",".")));
            тМаксимальныеРозничныеЦены.AddLineSorted("КодРазреза","КодРазреза,Цена",аРазрез,аЦена);
          EndIf;
        EndDo;
        iLoop:=jLoop;
      ElseIf Стр="$$$ADDPRICES" Then    
        тЦены:=0;
      
        ФлИзмененных:=0;//Измененных товаров/элементов внутри транзакции
        BeginTransaction();
        Try
          For jLoop:=iLoop+1 To тФайл.Size() Do
            Стр:=тФайл[jLoop];
            If Left(Стр,3)="$$$" Then
              iLoop:=jLoop-1;
              Continue 2;
            ElseIf _Or(Стр="",Left(Стр,2)="//") Then
              Continue;
            EndIf;
            If _And(ProgramMode()=1,jLoop%10=0) Then
              Form.StatusText(""+jLoop+" из "+тФайл.Size()+" (Цены)");
            EndIf;
        
            //<Код товара>;<Код предприятия>;<Коды разрезов>;<Цена>;<Дата переоценки>;<Время переоценки>
            аКод:=TearStr(Стр,";");
            If аКод="" Then
              Continue;
            EndIf;
            TearStr(Стр,";");//2
            TearStr(Стр,";");//3
            аЦена:=Number(Replace(TearStr(Стр,";"),",","."));
            //Дата цены не требуется, загружаем всегда на текущий момент
            If not тКодыНоменклатуры.FindAndGoto(аКод,,"зКод",1) Then
              MessageVisual("В команде изменения цен передана неизвестная номенклатура "+аКод+"! Команда пропущена!","!");
              ФлНеУдалятьФайл:=1;
              Continue;
            EndIf;
          
            //Обновляем штрихкоды
            If аЦена>0 Then
              If тЦены=0 Then
                //Запрос по ценам
                ТипЦен:=Магазин.ТипЦенРеализации;
                ТЗ:="(зЦ:=Ref.цЦены.Цена(ТекДата);
                |зТЦ:=Ref.цЦены.ТипЦен;
                |Condition(зТЦ=ТипЦен);
                |зН:=Ref.цЦены.@Parent..Ref.тмцНоменклатура;
                |зСм:=Min(зЦ);
                |Group зН;) Postprocessing (SkipVariables зТЦ,зЦ;)";
                З:=Query.Create();
                тЦены:=З.Execute(ТЗ,0);
                MassLoadObjects(тЦены);
                тЦены.Sort("зН");
              EndIf;
              
              If спБылаУстановкаЦен.Find(зН.Code,,1)=0 Then
                спБылаУстановкаЦен.Add(зН.Code,,,1);//Иногда в выгрузках из ЦБ (1С) попадаются множественные строки с разной ценой, мы не должны замедлять загрузку из-за этого
                If тЦены.FindAndGoto(зН,,"зН",1)>0 Then
                  If тЦены.зСм<>аЦена Then
                    //Изменить
                    УстановитьЦену(зН,Магазин.ТипЦенРеализации,аЦена,ТекДата,ФлИзмененных);
                  EndIf;
                Else
                  //Добавить
                  УстановитьЦену(зН,Магазин.ТипЦенРеализации,аЦена,ТекДата,ФлИзмененных);
                  тЦены.AddLineSorted("зН","зН,зСм",зН,аЦена);
                EndIf;
              EndIf;
            EndIf;
            
            If ФлИзмененных>50 Then
              CommitTransaction();
              ФлИзмененных:=0;
              BeginTransaction();
            EndIf;
            
          EndDo;//По строкам документа загрузки
        Finally
          Стр:=PopError();
          SuppressException();
          If not IsEmpty(Стр) Then
            MessageVisual(Стр,"!");
            ФлНеУдалятьФайл:=1;
            If IsTransactionActive() Then
              RollbackTransaction();
            EndIf;
          Else
            If IsTransactionActive() Then
              CommitTransaction();
            EndIf;
          EndIf;
        EndTry;
        iLoop:=jLoop;
      ElseIf Стр="$$$ADDALCCODES" Then    
        тЦены:=0;
      
        ФлИзмененных:=0;//Измененных товаров/элементов внутри транзакции
        BeginTransaction();
        Try
          For jLoop:=iLoop+1 To тФайл.Size() Do
            Стр:=тФайл[jLoop];
            If Left(Стр,3)="$$$" Then
              iLoop:=jLoop-1;
              Continue 2;
            ElseIf _Or(Стр="",Left(Стр,2)="//") Then
              Continue;
            EndIf;
            If _And(ProgramMode()=1,jLoop%10=0) Then
              Form.StatusText(""+jLoop+" из "+тФайл.Size()+" (АП коды)");
            EndIf;
        
            //<Код товара>;<АП код>
            аКод:=TearStr(Стр,";");
            If аКод="" Then
              Continue;
            EndIf;
            аАПКод:=Trim(TearStr(Стр,";"));
            //Дата цены не требуется, загружаем всегда на текущий момент
            If not тКодыНоменклатуры.FindAndGoto(аКод,,"зКод",1) Then
              MessageVisual("В команде изменения АП кодов передана неизвестная номенклатура "+аКод+"! Команда пропущена!","!");
              ФлНеУдалятьФайл:=1;
              Continue;
            EndIf;
          
            //Обновляем штрихкоды
            If аАПКод<>зН.ЕГАИСКодАП Then
              If not зН.Lock() Then
                ФлНеУдалятьФайл:=1;
                MessageVisual("Невозможно заблокировать номенклатуру "+зН+" ("+зН.Code+")","!");
              Else
                зН.Reload();
                зН.ЕГАИСКодАП:=аАПКод;
                зН.Save();
                ФлИзмененных:=ФлИзмененных+1;
                зН.Unlock();
              EndIf;
            EndIf;
            
            If ФлИзмененных>50 Then
              CommitTransaction();
              ФлИзмененных:=0;
              BeginTransaction();
            EndIf;
            
          EndDo;//По строкам документа загрузки
        Finally
          Стр:=PopError();
          SuppressException();
          If not IsEmpty(Стр) Then
            MessageVisual(Стр,"!");
            ФлНеУдалятьФайл:=1;
            If IsTransactionActive() Then
              RollbackTransaction();
            EndIf;
          Else
            If IsTransactionActive() Then
              CommitTransaction();
            EndIf;
          EndIf;
        EndTry;
        iLoop:=jLoop;
      ElseIf Стр="$$$ADDMARKETINGACTIONS" Then
        //TODO: Поддерживаются только "акции" запрета продажи
        //ADDMARKETINGACTIONS загружаются в таблицу ТМакетинг -- используется только для начальной и конечной дат
        //ADDMARKETINGEVENTS добавляются в дочернюю таблицу для указания на папки запрета
        //ADDMARKETINGCONDITIONS 
        //<КодАкции>;<НачДата>;<КонДата>;<НачВремя>;<КонВремя>;<Имя>;<Имя>;<Активная = 1>;<Приоритет>;<"Срабатывает всегда">;<"Весь день">;<Вид акции>
        For jLoop:=iLoop+1 To тФайл.Size() Do
          Стр:=тФайл[jLoop];
          If Left(Стр,3)="$$$" Then
            iLoop:=jLoop-1;
            Continue 2;
          ElseIf _Or(Стр="",Left(Стр,2)="//") Then
            Continue;
          EndIf;
          If _And(ProgramMode()=1,jLoop%10=0) Then
            Form.StatusText(""+jLoop+" из "+тФайл.Size()+" (акции)");
          EndIf;
          тМакетинг.AddLine("КодАкции,НачДата,КонДата,тСобытия",TearStr(Стр,";"),Date(TearStr(Стр,";")),Date(TearStr(Стр,";")),Tab.Create("Код,Имя,Сообщение,спНоменклатура,ВремяДо,ВремяПосле"));
        EndDo;//По строкам документа загрузки
      ElseIf Стр="$$$ADDMARKETINGEVENTS" Then
        //<КодСобытия>;<КодАкции>;<Имя>;<Имя>;<Тип, 4 -- запрет продажи>;<Текст кассиру>;<Папки, разделенные •>;<Разрезы>;<Классификаторы>
        If тКодыНоменклатуры=0 Then
          тКодыНоменклатуры:=ОбновитьТаблицуКодов();
        EndIf;
      
        For jLoop:=iLoop+1 To тФайл.Size() Do
          Стр:=тФайл[jLoop];
          If Left(Стр,3)="$$$" Then
            iLoop:=jLoop-1;
            Continue 2;
          ElseIf _Or(Стр="",Left(Стр,2)="//") Then
            Continue;
          EndIf;
          If _And(ProgramMode()=1,jLoop%10=0) Then
            Form.StatusText(""+jLoop+" из "+тФайл.Size()+" (акции)");
          EndIf;
          аКод:=TearStr(Стр,";");
          бКод:=TearStr(Стр,";");
          If (аКод="")Or(бКод="") Then
            Continue;
          EndIf;
          If тМакетинг.FindAndGoto(бКод,,"КодАкции")=0 Then
            Continue;
          EndIf;
          тСобытия:=тМакетинг.тСобытия;
          аИмя:=TearStr(Стр,";");
          TearStr(Стр,";");
          If Number(TearStr(Стр,";"))<>4 Then
            Continue;
          EndIf;
          Стр2:=TearStr(Стр,";");
          Стр:=TearStr(Стр,";");
          СпНоменклатура:=List.Create();
          While Стр<>"" Do
            Стр3:=TearStr(Стр,"•");
            If not тКодыНоменклатуры.FindAndGoto(Стр3,,"зКод",1) Then
              MessageVisual("В команде условия запрета продаж передана неизвестная номенклатура "+Стр3+"! Команда пропущена!","!");
              ФлНеУдалятьФайл:=1;
              Continue 2;
            EndIf;
            СпНоменклатура.Add(тКодыНоменклатуры.зН);
          EndDo;
          тСобытия.AddLine("Код,Имя,Сообщение,спНоменклатура",аКод,аИмя,Стр2,СпНоменклатура);
        EndDo;//По строкам документа загрузки
      ElseIf Стр="$$$ADDMARKETINGCONDITIONS" Then
        //<КодСобытия>;<Условие,6 -- временные рамки>;<ВремяНачала>;<ВремяКонца>
        //TODO: <КодСобытия>;<Условие,7 -- дни недели>;<Пон. 0 -- не раб, 1 -- раб>,<Втор>...,<Вск>
        For jLoop:=iLoop+1 To тФайл.Size() Do
          Стр:=тФайл[jLoop];
          If Left(Стр,3)="$$$" Then
            iLoop:=jLoop-1;
            Continue 2;
          ElseIf _Or(Стр="",Left(Стр,2)="//") Then
            Continue;
          EndIf;
          If _And(ProgramMode()=1,jLoop%10=0) Then
            Form.StatusText(""+jLoop+" из "+тФайл.Size()+" (акции)");
          EndIf;
          аКод:=TearStr(Стр,";");
          If аКод="" Then
            Continue;
          EndIf;
          If Number(TearStr(Стр,";"))<>6 Then
            Continue;
          EndIf;
          тСобытия:=0;
          тМакетинг.Select();
          While тМакетинг.Next() Do
            Стр2:=тМакетинг.тСобытия;
            If Стр2.FindAndGoto(аКод,,"Код")=0 Then
              Continue;
            EndIf;
            тСобытия:=Стр2;
            Break;
          EndDo;
          If тСобытия=0 Then
            Continue;
          EndIf;
          тСобытия.ВремяДо:=TearStr(Стр,";");
          тСобытия.ВремяПосле:=TearStr(Стр,";");
        EndDo;//По строкам документа загрузки
      EndIf;//Нахождение загружаемой команды
      
    EndDo;//По строкам документа загрузки, внешний цикл
  
    //Обновление статей маркетинга
    СпУсловияПродаж:=Ref.рознУсловияПродажИМаркетинговыеАкции.Load(0,"~(@Parent=Магазин)And(@Status<>1)And(Left(Идентификатор,2)=""ФФ"")");
    тМакетинг.Select();
    While тМакетинг.Next() Do
      тСобытия:=тМакетинг.тСобытия;
      If тСобытия.Size()=0 Then
        Continue;
      EndIf;
      
      тСобытия.Select();
      While тСобытия.Next() Do
        Ид:="ФФ"+тСобытия.Код;
        //Существует или создавать новое?
        bEl:=0;
        For i:=1 To СпУсловияПродаж.Size() Do
          aEl:=СпУсловияПродаж[i];
          If _And(aEl<>0,aEl.Идентификатор=Ид) Then
            bEl:=aEl;
            СпУсловияПродаж[i]:=0;
            Break;
          EndIf;
        EndDo;
        
        СтрУсловие:="If (СпОперация[""ТипОперации""]<>0)And(СпОперация[""ТипОперации""]<>3) Then
        |  Exit;
        |EndIf;
        |аЧас:=GetHour(Date);
        |ФлЗапрет:=(аЧас>=#1#)Or(аЧас<=#2#);
        |If not ФлЗапрет Then
        |  Exit;
        |EndIf;
        |СпНоменклатура:=СпОперация[""Переменные""][""Номенклатура""];
        |If IsEmpty(СпНоменклатура) Then
        |  aEl:=СпОперация[""ЭлементУсловие""];
        |  aTab:=aEl.LineParts(""Номенклатура"");
        |  СпНоменклатура:=List.Create();
        |  aTab.CopyTo(СпНоменклатура,,,""Номенклатура"");
        |  СпОперация[""Переменные""][""Номенклатура""]:=СпНоменклатура;
        |EndIf;
        |If СпОперация[""ТипОперации""]=3 Then
        |  Фл:=0;
        |  ТабПозиции.Select();
        |  While ТабПозиции.Next() Do
        |    If СпНоменклатура.Contains(ТабПозиции.Номенклатура) Then
        |      Фл:=1;
        |      Break;
        |    EndIf;
        |  EndDo;
        |  If not Фл Then
        |    Exit;
        |  EndIf;
        |ElseIf Not СпНоменклатура.Contains(ТабПозиции.Номенклатура) Then
        |  Exit;
        |EndIf;
        |СпОперация[""Результат""]:=1;
        |СпОперация[""Сообщение""]:=""#3#"";";
        
        //Код,Имя,Сообщение,спНоменклатура,ВремяДо,ВремяПосле
        СтрУсловие:=Replace(СтрУсловие,"#3#",тСобытия.Сообщение);
        //18:00;23:59
        ВремяДо:=0;
        If тСобытия.ВремяДо<>"" Then
          ВремяДо:=Number(TearStr(""+тСобытия.ВремяДо,":"));
        EndIf;
        ВремяПосле:=23;
        If тСобытия.ВремяПосле<>"" Then
          ВремяПосле:=Number(TearStr(""+тСобытия.ВремяПосле,":"));
        EndIf;
        СтрУсловие:=Replace(СтрУсловие,"#1#",ВремяДо);
        СтрУсловие:=Replace(СтрУсловие,"#2#",ВремяПосле);
        
        ФлОбновить:=0;
        If bEl=0 Then
          If _And(not IsEmpty(тМакетинг.КонДата),тМакетинг.КонДата+1>=BegOfDay(Date)) Then
            bEl:=Ref.рознУсловияПродажИМаркетинговыеАкции;
            bEl.New();
            bEl.Parent(Магазин);
            ФлОбновить:=1;
          EndIf;
        Else
          If not bEl.Lock() Then
            ФлНеУдалятьФайл:=1;
            MessageVisual("Невозможно заблокировать элемент условия: "+bEl+"!","!");
          Else
            bEl.Reload();
            If bEl.Status()=1 Then
              bEl.Mark(0);
            EndIf;
            aTab:=bEl.LineParts("Номенклатура");
            If _Or(bEl.Name<>Left(тСобытия.Имя,100),bEl.ДатаНачалаДействия<>тМакетинг.НачДата,bEl.ДатаОкончанияДействия<>тМакетинг.КонДата+1,
                bEl.ТипУсловия<>Enum.рознТипыУсловийПродаж.ПрограммноеУсловие,bEl.Условие<>СтрУсловие,aTab.Size()<>спНоменклатура.Size()) Then
              ФлОбновить:=1;
            EndIf;
            If not ФлОбновить Then
              aTab.Select();
              While aTab.Next() Do
                If спНоменклатура.Find(aTab.Номенклатура)=0 Then
                  ФлОбновить:=1;
                  Break;
                EndIf;
              EndDo;
            EndIf;
          EndIf;
        EndIf;
        
        If ФлОбновить Then
          bEl.Name:=Left(тСобытия.Имя,100);
          bEl.ДатаНачалаДействия:=тМакетинг.НачДата;
          bEl.ДатаОкончанияДействия:=?(IsEmpty(тМакетинг.КонДата),тМакетинг.КонДата,тМакетинг.КонДата+1);
          bEl.Идентификатор:=Ид;
          bEl.ТипУсловия:=Enum.рознТипыУсловийПродаж.ПрограммноеУсловие;
          bEl.Условие:=СтрУсловие;
          спНоменклатура:=тСобытия.спНоменклатура;
          aTab:=bEl.LineParts("Номенклатура");
          aTab.ClearLines();
          For i:=1 To спНоменклатура.Size() Do
            aTab.AddLine("Номенклатура",спНоменклатура[i]);
          EndDo;
          bEl.Save();
        EndIf;
        bEl:=0;
      EndDo; //По таблице событий
    EndDo;//По таблице маркетинга
    
    //Удаляем лишние условия
    For i:=1 To СпУсловияПродаж.Size() Do
      aEl:=СпУсловияПродаж[i];
      If aEl<>0 Then
        aEl.Mark(1);
      EndIf;
    EndDo;
    
    If ФлНеУдалятьФайл Then
      MessageVisual("Файл "+Файл+" был загружен с ошибками, загрузка остановлена, последующие файлы (если есть) загружены не будут!","!");
      Exit 0;
    EndIf;
    
    If not File.DeleteFile(Файл) Then
      MessageVisual("Невозможно удалить загруженный файл данных "+Файл+"!","!");
      Exit 0;
    EndIf;
  EndDo;
  
  If Файлы.Size()>0 Then
    ОбновитьВремяЗапуска("ПоследняяУдачнаяЗагрузка");
  EndIf;
  Exit 1;
EndFunction

Function OnOpen()
  Result:=0;
  If TypeStr(Param)<>"LIST" Then
    MessageVisual("Эта обработка запускается автоматически или вызывается из формы магазина!","!");
    Exit;
  EndIf;
  Элемент:=Param["Элемент"];
  СтрКоманда:=Param["Команда"];
  спТипыДокументов:=List.Create("Реализация","ВозвратОтПокупателя","ПоступлениеТМЦ","ВозвратПоставщику","РегистрацияТМЦ","РегистрацияОС","ПеремещениеТМЦ","Сторнирование","АктПоСкладу","УниверсальныйДокумент",
    "ПКО","РКО","ВыпискаБанкаПриход","ВыпискаБанкаРасход","КорректировкаДолга","ПодотчетнаяОперация","ПоступлениеПрочее","РеализацияПрочее","КомплектацияТовара");  
  
  If Элемент.IsLocked()<>1 Then
    Элемент:=Элемент.Copy();
    If not глЗаблокировать(Элемент,1) Then //Будет разблокирован при закрытии обработки
      Exit;
    EndIf;
    Элемент.Reload();
  EndIf;
    
  Магазин:=Элемент.Parent();
  Try
    Ини:=Ini.Create();
    Ини.AddFromString(Элемент.Настройки);
  Except
    Ини.AddLeaf("Версия",1);
    Ини.AddLeaf("Способ",1);
    Ини.AddLeaf("Период",7);
  EndTry;
  Версия:=Max(1,Number(Ини.GetData("Версия")));
  Способ:=Max(1,Number(Ини.GetData("Способ")));
  ПутьПротокола:=Ини.GetData("Путь");
  Период:=Number(Ини.GetData("Период"));
  Период:=?(Период=0,7,Период);
  РасписаниеВыгрузки:=Ини.GetData("РасписаниеВыгрузки");
  РасписаниеЗагрузки:=Ини.GetData("РасписаниеЗагрузки");
  ФайлВыгрузки:=Ини.GetData("ФайлВыгрузки","goods_report.txt");
  ФайлЗапросаВыгрузки:=Ини.GetData("ФайлЗапросаВыгрузки","goods_flagin.txt");
  ФайлЗагрузки:=Ини.GetData("ФайлЗагрузки","goods_out.txt");
  БезОстатков:=Number(Ини.GetData("БезОстатков",0));
  УстановкаЦен:=Number(Ини.GetData("УстановкаЦен",0));
  Комплектация512:=Number(Ини.GetData("Комплектация512",0));
  НеВыгружатьБезЗапроса:=Number(Ини.GetData("НеВыгружатьБезЗапроса",0));
  КодыНоменклатуры:=Ref.общТипыДополнительныхСвойств;
  Стр:=Ини.GetData("КодыНоменклатуры","");
  If Стр<>"" Then
    КодыНоменклатуры.Find("Code",Стр);
  EndIf;
  КорневаяПапка:=Ref.тмцНоменклатура;
  Стр:=Ини.GetData("КорневаяПапка","");
  If Стр<>"" Then
    КорневаяПапка.Find("Code",Стр);
    If not КорневаяПапка.IsFolder() Then
      КорневаяПапка:=Ref.тмцНоменклатура;
    EndIf;
  EndIf;
  
  If (СтрКоманда="Визуальный запуск")or(IsEmpty(СтрКоманда)) Then
    Result:=1;
    Exit;
  EndIf;
  
  ФлФорсирование:=0;
  КонДата:=BegOfDay(Date())-1;
  НачДата:=КонДата-Max(Период-1,0);
  If _And(not IsEmpty(Param["КонДата"]),not IsEmpty(Param["НачДата"])) Then
    НачДата:=Param["НачДата"];
    КонДата:=Max(Param["НачДата"],Param["КонДата"]);
    ФлФорсирование:=1;
    MessageVisual("Форсирован период выгрузки с "+НачДата+" по "+КонДата+"!","I");
  EndIf;
  
  //If not ФлФорсирование Then
  //  аДата:=Date(ПолучитьУстановку("Последний выгруженный день"));
  //  If not IsEmpty(аДата) Then
  //    НачДата:=BegOfDay(аДата)+1;
  //    КонДата:=Max(КонДата,НачДата);
  //    If КонДата>=BegOfDay(Date) Then
  //      КонДата:=BegOfDay(Date)-1;
  //    EndIf;
  //    If КонДата<НачДата Then
  //      MessageVisual("Не найдено ни одного дня для выгрузки (последний полный выгруженный день "+аДата+")","!");
  //      Exit;
  //    EndIf;
  //  EndIf;
  //EndIf;  

  МутантPLUКодов:="";
  ИмяОбмена:="Обмен_"+Элемент.Code;аПольз:="";аМаш:="";аДата:="";
  If not DBLockStringMutex(ИмяОбмена,аПольз,аМаш,аДата) Then
    MessageVisual("Обмен по протоколу "+Элемент+" для магазина "+Магазин+" уже был запущен пользователем "+аПольз+" ("+аМаш+") в "+аДата,"!");
  EndIf;
  Try
    //Команды: Визуальный запуск,Выгрузка,Загрузка,Загрузка и выгрузка
    If СтрКоманда="Выгрузка" Then    
      If not ВыполнитьОтправку() Then
        Raise "Ошибка при выполнении выгрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Загрузка" Then
      If not ВыполнитьЗагрузку() Then
        Raise "Ошибка при выполнении загрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Загрузка и выгрузка" Then
      If not ВыполнитьЗагрузку() Then
        Raise "Ошибка при выполнении загрузки";
      EndIf;
      If not ВыполнитьОтправку() Then
        Raise "Ошибка при выполнении выгрузки";
      EndIf;
      Param["Удачно"]:=1;
    Else
      MessageVisual("Неизвестная команда: "+СтрКоманда+"!","!");
    EndIf;
  Finally
    DBUnlockStringMutex(ИмяОбмена);
    If МутантPLUКодов<>"" Then
      DBUnlockStringMutex(МутантPLUКодов);
    EndIf;
  EndTry;
EndFunction