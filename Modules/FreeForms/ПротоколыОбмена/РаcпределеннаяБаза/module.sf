//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

Var Ини Export, ФлСервер Export;
Var Способ Export, ЛокальнаяПапка Export, АдресСервера Export, РасписаниеВыгрузкиСпр Export, РасписаниеВыгрузкиДок Export, ФлВсеДокументы Export, ФлЛокальныеЦены Export;
Var ДатаНачала Export, спНоменклатура Export, Касса Export;
Var Магазин Export, ЮрЛицо Export, ПрефиксИБ Export, ПрефиксУдаленнойИБ Export;
Var Элемент Export; //Элемент справочника протоколы обмена
Var ФлИзмененных Export, ФлПолнаяВыгрузка Export, ФлВыгрузкаНачальныхОстатков Export;
Var ПропуститьСправочники Export;
ПропуститьСправочники:=",тмцPLUКоды,цПечатьЦенников,";

//Структура хранения информации и назначение справочников справочников:
//рознСопоставлениеОбъектовОбмена -- хранятся сопоставленные элементы справочников
//   ChangeTrigger -- используется для индикации того, что локальный элемент был изменен и необходимо обновить его на удаленной стороне
//рознВременнаяТаблицаОбъектовОбмена -- хранятся: 
//   1. Несопоставленные элементы со всей информацией по реквизитам (только для центральной базы)
//   2. Запросы на обновление локальных элементов из удаленной базы (для обеих баз)
//   3. Ответ на запросы об обновлении внешних кодов элементов
//   4. Физически удаленные документы
//   Реквизит режим принимает следующие значения:
//      0 -- ожидает сопоставления элемента пользователем (центральная база)
//      1 -- элемент принят (создан или сопоставлен), требуется выгрузка на противоположную сторону его локального кода (центральная база)
//      10 -- запрос для обновления элемента из удаленной базы (для обеих баз), также формируется, когда реквизит документа или др. элемента содержит неизвестный элемент
//      110 -- запрос на удаление документа в удаленной базе (документ был физически удален в текущей), из противоположной базы должна прийти команда DCD, тогда этот элемент будет удален

//Создание файла обмена справочниками, для справочников файл может содержать следующие типы команд:
//1. (ELM) Полная выгрузка элемента (создает пустое сопоставление в рознСопоставлениеОбъектовОбмена), полный набор реквизитов
//  1.1. Для периферийной базы такая команда создает новый элемент безусловно, создает обратную команду ACD
//  1.2. Для центральной базы такая команда создает пустое сопоставление в рознСопоставлениеОбъектовОбмена, ожидая действий оператора ЦБ для сопоставления
//  Элемент попадает в выгрузку до тех пор, пока локальная сторона не получит команду ACD или ACP, после этого ChangeTrigger сбрасывается
//2. (ACP) Удаленная база получила элемент, но в данный момент она ожидает действий пользователя (центральная база)
//  Центральная база отправляет ACP при каждой выгрузке для каждого элемента в списке синхронизации
//3. (ACD) Обновление кода принятого нового элемента, только коды
//  3.1. Для любой базы обновляет поле ВнешнийКод
//4. (ACK) Запрос на загрузку/обновление, только удаленный код
//5. (DOC) Полная выгрузка документа, все реквизиты и движения
//6. (DCD) Удаление документа, только номер
//7. (DAC) Сообщение о том, что документ получен на удаленной стороне (DOC или DCD)
//8. (DSD) Документ начальных остатков (только из центральной базы)

//Документы:
//ФлагОбмена:
//0 - Документ ожидает перенесения (изменен)
//1 - Была отмена обработки, ожидает перенесения
//2 - Документ перенесен, других действий не требуется
//8 - В момент перенесения, документ был загружен в файл перенесения, однако, сервер еще не ответил положительно о том, что он его получил. В другое время, работает как 0
//9 - Не переносить этот документ и не изменять этот флаг (при разделении/объединении баз)
//
//Выгружать только документы с нужным реквизитом Магазин, документы с ПрефиксУдаленнойБазы равным ПрефиксУдаленнойИБ
//          если стоит галка ФлВсеДокументы, выгружать также все документы с нужным юр. лицом
//          также выгружать необработанные документы в случае, если ФлагОбмена=1
//После выгрузки в документ обновляется ПрефиксУдаленнойБазы до ПрефиксУдаленнойИБ и ФлагОбмена=8

//Кодировка: UTF-16
//<ELM><#1><ПолныйКодИВид><#1><КодПапки><#1><Наименование><#1><Флаги><#1><Доп.реквизиты для сопоставления><#2><Реквизиты><#2><Строчная часть 1><#2><Строчная часть 2>...
//<ПолныйКодИВид>: <Вид><#31><+ если папка><Код><#30><Полный код и вид родителя>
//<ПолныйКод>: <+ если папка><Код><#30><Код родителя>
//<Флаги>: бит 0 -- удален
//<Реквизиты>: <Реквизит 1><#3><Реквизит 2><#3>...
//<Реквизит>: <+ если период><Имя реквизита><#4><Значение реквизита>
//<Строчная часть>: LP<#1><Имя строчной части><#1><Количество строк><#1><Строка 1><#1><Строка 1>
//<Строка>=<Реквизиты>
//
//<Значение реквизита>: <Дата 1><#5><Значение 1><#5><Дата 2><#5><Значение 2> (для периодических)
//                      <Значение> (для непериодических)
//<Значение>: <Строка дата или число> или <ENUM><#31><Вид><#31><Индекс перечисления> или <REF><#31><ПолныйКодИВид справочника> или <DOC><#31><Вид><#31><Дата документа><#6><Номер документа>

//<DOC><#1><Вид документа><#1><Дата и время документа><#1><Номер документа><#1><Статус документа><#2><Реквизиты заголовка><#2><Строчная часть или накопитель 1><#2><Строчная часть или накопитель 2>...
//<Строчная часть или накопитель>: <Тип><#1><Имя><#1><Количество строк><#1><Строка 1><#1><Строка 1>
//<Тип>: STOR или LP
//<Строка>=<Реквизиты>
//Для накопителей сначала идет особый реквизит @EXPENSE (если имеется)


Function MessageVisual(Стр,Тип="")
  If not IsExecutingInSeparateThread Then
    Message(Стр,Тип);
  EndIf;
EndFunction

Function ПриПодбореНоменклатуры(Эл,Фл)
  оТМЦ:=Form.оТМЦ.Value;

  If оТМЦ.Find(Эл,,"Номенклатура")>0 Then
    Box("Такая группа номенклатуры уже выбрана!",Q_STOP);
    Exit;
  EndIf;
  оТМЦ.NewLine();
  оТМЦ.Номенклатура=Эл;
  Form.IsChanged(1);
  Form.оТМЦ.InvokeEvent("OnInitLine","IndexFrom,IndexTo",оТМЦ.Size(),оТМЦ.Size());
EndFunction


Function ОбновитьТриггерыОбмена(Имя,СпОбменыДляОбновления,аРодители=0)
  аТемп:=TempDB.Create("зЭл:Ref."+Имя);
  If TypeStr(аРодители)="LIST" Then
    аТемп.LoadFrom("Ref."+Имя,"@ELEMENT->зЭл","@ELEMENT IN аРодители","@Trigger<>2");
  ElseIf аРодители<>0 Then
    аТемп.LoadFrom("Ref."+Имя,"@ELEMENT->зЭл","@PARENT IN аРодители.зЭл","@Trigger<>2");
  Else
    аТемп.LoadFrom("Ref."+Имя,"@ELEMENT->зЭл","@Trigger<>2");
  EndIf;
  aNum:=0;
  aSize:=аТемп.Size();
  аТемп.Select();
  While аТемп.Next() Do
    aNum:=aNum+1;
    If aNum%10=0 Then
      Form.StatusText("Подготовка справочника "+Имя+": "+aNum+" из "+aSize);
    EndIf;
    aEl:=аТемп.зЭл;
    If aEl.Lock() Then
      If aEl.GetTrigger()=2 Then
        Continue;
      EndIf;
      СпЭлементы:=Ref.рознСопоставлениеОбъектовОбмена.LoadEx(0,1,,"~(@ELEMENT IN СпОбменыДляОбновления)And(Объект=aEl)");
      If MassLockWithWait(СпЭлементы,0,1,0) Then
        For i:=1 To СпЭлементы.Size() Do
          //Транслируем изменения элемента на сопоставленные элементы
          bEl:=СпЭлементы[i];
          bEl.SetTrigger(1);
          ФлИзмененных:=ФлИзмененных+1;
        EndDo;
        MassUnlock(СпЭлементы);
        //Снять флаг изменения
        ФлИзмененных:=ФлИзмененных+1;
        aEl.SetTrigger(2);
        aEl.Unlock();
      EndIf;
    EndIf;
    If ФлИзмененных>50 Then
      CommitTransaction();
      ФлИзмененных:=0;
      BeginTransaction();
    EndIf;
  EndDo;
  //Подчиненные справочники с триггерами
  For i:=1 To Struct.Ref(Имя).Children.Count() Do
    Имя2:=Struct.Ref(Имя).Children(i).Name;
    If Struct.Ref(Имя2).Trigger Then
      Result:=ОбновитьТриггерыОбмена(Имя2,СпОбменыДляОбновления,аТемп);
      If not Result Then
        Exit 0;
      EndIf;
    EndIf;
  EndDo;
  
  Exit 1;
EndFunction

Function ПолучитьПолныйКод(Эл,ФлБезВида=0)
  //<ПолныйКодИВид>: <Вид><#31><+ если папка><Код><#30><Полный код и вид родителя>
  //<ПолныйКод>: <+ если папка><Код><#30><Код родителя>
  If Эл.Selected()=0 Then
    Exit "";
  EndIf;
  Вид:=Эл.DBName();
  If Struct.Ref(Вид).Parents.Count()=0 Then
    Exit ?(ФлБезВида,"",Вид+Chr(31))+?(Эл.IsFolder(),"+")+Эл.Code;
  EndIf;
  Exit ?(ФлБезВида,"",Вид+Chr(31))+?(Эл.IsFolder(),"+")+Эл.Code+Chr(30)+ПолучитьПолныйКод(Эл.Parent(),ФлБезВида);
EndFunction


Function ПолучитьЗначениеРеквизита(Знч)
  //<Значение>: <Строка дата или число> или <ENUM><#31><Вид><#31><Индекс перечисления> или <REF><#31><ПолныйКодИВид справочника> или <DOC><#31><Вид><#31><Дата документа><#6><Номер документа>
  Вид:=TypeStr(Знч);
  If Pos("DB.",Вид)=1 Then
    TearStr(Вид,"DB.");
  ElseIf Вид="DB" Then
    Вид:="";
  EndIf;
  Тип:=TearStr(Вид,".");
  
  If Тип="STRING" Then
    Exit ReplaceCharacters(Знч,Chr(10)+Chr(13),Chr(15)+Chr(16));
  ElseIf Тип="NUMBER" Then
    Exit Str(Знч);
  ElseIf Тип="DATE" Then
    Exit ?(GetPeriod(BegOfDay(Знч),Знч,5)=0,Str(Знч),FormatDate(Знч,"dd.mm.YYYY hh:tt:ss.ppp"));
  ElseIf Тип="ENUM" Then
    Exit ?(Знч.Selected()=0,"","ENUM"+Chr(31)+Вид+Chr(31)+Знч.Index());
  ElseIf Тип="REF" Then
    Exit ?(Знч.Selected()=0,"","REF"+Chr(31)+ПолучитьПолныйКод(Знч));
  ElseIf Тип="DOC" Then
    Exit ?(Знч.Selected()=0,"","DOC"+Chr(31)+Знч.DBName()+Chr(31)+?(GetPeriod(BegOfDay(Знч.DocDate),Знч.DocDate,5)=0,Str(Знч.DocDate),FormatDate(Знч.DocDate,"dd.mm.YYYY hh:tt:ss.ppp"))+Chr(31)+Знч.DocNum);
  EndIf;
  Exit "";
EndFunction

Function ПолучитьРеквизит(аЭл,Ид,ФлПер)
  If not ФлПер Then
    Exit Ид+Chr(4)+ПолучитьЗначениеРеквизита(аЭл);
  Else
    СтрРез:="+"+Ид+Chr(4);
    аЭл.Select();
    While аЭл.Next() Do
      AppendStringToBufferedString(СтрРез,?(аЭл.CurLine>1,Chr(5),"")+аЭл._Date+Chr(5)+ПолучитьЗначениеРеквизита(аЭл._Value));
    EndDo;
    Exit СтрРез;
  EndIf;
EndFunction


Function ДобавитьЭлементСправочникаВТаблицуВыгрузки(Т,аЭл)
  //<Реквизиты>: <Реквизит 1><#3><Реквизит 2><#3>...
  //<Реквизит>: <+ если период><Имя реквизита><#4><Значение реквизита>
  //<Строчная часть>: <Имя строчной части><#1><Количество строк><#1><Строка 1><#1><Строка 1>
  //<Строка>=<Реквизиты>
          
  ВидСпр:=аЭл.DBName();
  Имя:="";
  If глЕстьРеквизитСправочника("Name",Trim(ВидСпр)) Then
    Имя:=ReplaceCharacters(аЭл.Name,Chr(10)+Chr(13),Chr(15)+Chr(16));
  EndIf;  
  
  СтрРез:="ELM"+Chr(1)+ПолучитьПолныйКод(аЭл)+Chr(1)+?(not IsEmpty(аЭл.Folder()),ПолучитьПолныйКод(аЭл.Folder(),1))+
    Chr(1)+Имя+Chr(1)+?(аЭл.Status()=1,"1","0")+Chr(1)+Chr(2);
    
  Фл:=0;
  For i:=1 To Struct.Ref(ВидСпр).Props.Count() Do
    Ид:=Struct.Ref(ВидСпр).Props(i).Name;
    If _Or(Ид="Code",Ид="Name") Then
      Continue;
    EndIf;
    ФлПер:=Struct.Ref(ВидСпр).Props(i).Periodical;
    AppendStringToBufferedString(СтрРез,?(not Фл,"",Chr(3))+ПолучитьРеквизит(?(ФлПер,аЭл.LoadPeriodicalValues(Ид),аЭл.GetValue(Ид)),Ид,ФлПер));
    Фл:=1;
  EndDo;
  
  //Строчные части
  If Struct.Ref(ВидСпр).LineParts.Count()>0 Then
    For iLP:=1 To Struct.Ref(ВидСпр).LineParts.Count() Do
      ИдСтр:=Struct.Ref(ВидСпр).LineParts(iLP).Name;
      aTab:=аЭл.LineParts(ИдСтр);
      AppendStringToBufferedString(СтрРез,Chr(2)+"LP"+Chr(1)+ИдСтр+Chr(1)+aTab.Size());
      aTab.Select();
      While aTab.Next() Do
        AppendStringToBufferedString(СтрРез,Chr(1));
        Фл:=0;
        For i:=1 To Struct.Ref(ВидСпр).LineParts(iLP).Props.Count() Do
          Ид:=Struct.Ref(ВидСпр).LineParts(iLP).Props(i).Name;
          ФлПер:=Struct.Ref(ВидСпр).LineParts(iLP).Props(i).Periodical;
          AppendStringToBufferedString(СтрРез,?(not Фл,"",Chr(3))+ПолучитьРеквизит(?(not ФлПер,aTab[Ид],аЭл.LoadPeriodicalValues(ИдСтр+"."+aTab.CurLine+"."+Ид)),Ид,ФлПер));
          Фл:=1;
        EndDo;
      EndDo;
    EndDo;
  EndIf;  
  Т.AddString(СтрРез);
EndFunction


Function ДобавитьДокументВТаблицуВыгрузки(Т,Док)
  If Left(Док.DocNum,Length(ПрефиксИБ))<>ПрефиксИБ Then
    MessageVisual("Внимание! Выгружается документ "+Док+", похоже, созданный в другой базе! Возможен конфликт!","!");
  EndIf;
  //<DOC><#1><Вид документа><#1><Дата и время документа><#1><Номер документа><#1><Статус документа><#2><Реквизиты заголовка><#2><Строчная часть или накопитель 1><#2><Строчная часть или накопитель 2>...
  //<Строчная часть или накопитель>: <Тип><#1><Имя><#1><Количество строк><#1><Строка 1><#1><Строка 1>
  //<Тип>: STOR или LP
  //<Строка>=<Реквизиты>
  //Для накопителей сначала идет особый реквизит @EXPENSE (если имеется)
  
  ВидДок:=Док.DBName();
  СтрРез:="DOC"+Chr(1)+ВидДок+Chr(1)+FormatDate(Док.DocDate,"dd.mm.YYYY hh:tt:ss.ppp")+Chr(1)+Док.DocNum+Chr(1)+Док.Status()+Chr(2);
  
  //Реквизиты заголовка
  Фл:=0;
  For i:=1 To Struct.Doc(ВидДок).Props.Count() Do
    Ид:=Struct.Doc(ВидДок).Props(i).Name;
    If _Or(Ид="ФлагОбмена",Ид="ПрефиксУдаленнойБазы",Ид="DocDate",Ид="DocNum") Then
      Continue;
    EndIf;
    ФлПер:=Struct.Doc(ВидДок).Props(i).Periodical;
    AppendStringToBufferedString(СтрРез,?(not Фл,"",Chr(3))+ПолучитьРеквизит(?(ФлПер,Док.LoadPeriodicalValues(Ид),Док.GetValue(Ид)),Ид,ФлПер));
    Фл:=1;
  EndDo;
  
  //Строчные части
  If Struct.Doc(ВидДок).LineParts.Count()>0 Then
    For iLP:=1 To Struct.Doc(ВидДок).LineParts.Count() Do
      ИдСтр:=Struct.Doc(ВидДок).LineParts(iLP).Name;
      aTab:=Док.LineParts(ИдСтр);
      AppendStringToBufferedString(СтрРез,Chr(2)+"LP"+Chr(1)+ИдСтр+Chr(1)+aTab.Size());
      aTab.Select();
      While aTab.Next() Do
        AppendStringToBufferedString(СтрРез,Chr(1));
        Фл:=0;
        For i:=1 To Struct.Doc(ВидДок).LineParts(iLP).Props.Count() Do
          Ид:=Struct.Doc(ВидДок).LineParts(iLP).Props(i).Name;
          ФлПер:=Struct.Doc(ВидДок).LineParts(iLP).Props(i).Periodical;
          AppendStringToBufferedString(СтрРез,?(not Фл,"",Chr(3))+ПолучитьРеквизит(?(not ФлПер,aTab[Ид],Док.LoadPeriodicalValues(ИдСтр+"."+aTab.CurLine+"."+Ид)),Ид,ФлПер));
          Фл:=1;
        EndDo;
      EndDo;
    EndDo;
  EndIf;  
  
  //Накопители
  aList:=List.Create();
  aList.FromString(Док.GetUsedStoragesNames,",");
  For iStr:=1 to aList.Size() Do
    ИдНак:=aList[iStr];
    TearStr(ИдНак,".");//STOR.БУХГАЛТЕРСКИЕСЧЕТА
    aTab:=Док.LoadStorage(ИдНак);
    флРасход:=aTab.GetColumnIndex("_Expense")>0;
    AppendStringToBufferedString(СтрРез,Chr(2)+"STOR"+Chr(1)+ИдНак+Chr(1)+aTab.Size());
    aTab.Select();
    While aTab.Next() Do
      AppendStringToBufferedString(СтрРез,Chr(1));
      Фл:=0;
      If флРасход Then
        AppendStringToBufferedString(СтрРез,ПолучитьРеквизит(aTab._Expense,"@EXPENSE",0));
        Фл:=1;
      EndIf;
      For i:=1 to Struct.Stor(ИдНак).Props.Count() Do
        Ид:=Struct.Stor(ИдНак).Props(i).Name;
        AppendStringToBufferedString(СтрРез,?(not Фл,"",Chr(3))+ПолучитьРеквизит(aTab[Ид],Ид,0));
        Фл:=1;
      EndDo;
    EndDo;
  EndDo;
  Т.AddString(СтрРез);
EndFunction


Function ИсключенияВыгрузки(Имя,ТипФильтра="")
  //Оптимизации при переносе справочников розницы
  If Имя="тмцМаркировкаПозиций" Then
    Exit "And("+?(ТипФильтра<>"",ТипФильтра+"..Ref.тмцМаркировкаПозиций.")+"флСостояние<2)";
  EndIf;
  Exit "";
EndFunction

Function ОтправитьФайлНаУдаленнуюСторону(ByRef Т)
  Т.Save(AddBackSlash(ЛокальнаяПапка)+"file_"+FormatDate(Date(),"ddmmYYYYhhttssppp")+".txt",1200,1);
  Т:=Text.Create(1);
  Т.AddString("SF.EX.1");
  Т.AddString(ПрефиксИБ+Chr(1)+ПрефиксУдаленнойИБ);

  //here;//
  //1. Запаковать в архив
  //2. Соединиться, если соединение разорвано
  //3. Отослать пакет
  //4. Создать обработку сервера в этом же модуле с формой настройки, вынести в главное меню.
  //  4.1. Настройка = порт
  
  Exit 1;
EndFunction

Function ВыгрузитьИзмененные(Имя,Т,СпФильтр=0,ФлВсе=0)
  СтрДоб:=ИсключенияВыгрузки(Имя,"Объект");
  аЭл:=Ref.рознСопоставлениеОбъектовОбмена;
  If СпФильтр<>0 Then
    If TypeStr(СпФильтр)="LIST" Then
      аЭл.Select("~(Объект IN СпФильтр)"+СтрДоб);
    Else
      аЭл.Select("~(Объект IN СпФильтр.зЭл)"+СтрДоб);
    EndIf;
  ElseIf ФлВсе Then
    аЭл.Select("~(IsType(Объект,Ref."+Имя+"))"+СтрДоб);
  Else
    аЭл.Select("~(IsType(Объект,Ref."+Имя+"))And(@Trigger<>2)"+СтрДоб);
  EndIf;
  СпРод:=List.Create();
  aNum:=0;
  While аЭл.Next() Do
    aNum:=aNum+1;
    If aNum%10=0 Then
      Form.StatusText("Выгрузка справочника "+Имя+": "+aNum);
    EndIf;
    If аЭл.Lock() Then
      аЭл.SetTrigger(3);
      ФлИзмененных:=ФлИзмененных+1;
      Try
        ДобавитьЭлементСправочникаВТаблицуВыгрузки(Т,аЭл.Объект);
      Except
        аЭл.Unlock();
        Стр:=PopError();
        Form.StatusText("Внутренняя ошибка выгрузки: "+Стр);
        Message("Внутренняя ошибка выгрузки: "+Стр+", элемент "+аЭл.Объект,"!");
        Exit 0;
      EndTry;
      аЭл.Unlock();
      СпРод.Add(аЭл.Объект.Copy());
    
      If Т.Size()>1000 Then
        If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
          Exit 0;
        EndIf;
        Message("Успешно выгружено элементов: "+aNum,"I");
      EndIf;
      If ФлИзмененных>50 Then
        CommitTransaction();
        ФлИзмененных:=0;
        BeginTransaction();
      EndIf;
    EndIf;
  EndDo;
  //Добавим все подчиненные справочники  
  For i:=1 To Struct.Ref(Имя).Children.Count() Do
    Имя2:=Struct.Ref(Имя).Children(i).Name;
    If Имя2="цЦены" Then
      If ((ФлСервер)And(ФлЛокальныеЦены))Or((not ФлСервер)And(not ФлЛокальныеЦены)) Then
        Continue;
      EndIf;
    EndIf;
    If Pos(","+Имя2+",",ПропуститьСправочники)>0 Then
      Continue;
    EndIf;
    If Struct.Ref(Имя2).Trigger Then
      If not ВыгрузитьИзмененные(Имя2,Т) Then
        Exit 0;
      EndIf;
    Else
      If not ВыгрузитьИзмененные(Имя2,Т,СпРод) Then
        Exit 0;
      EndIf;
    EndIf;
  EndDo;
  Exit 1;
EndFunction

Function ВыгрузитьНесопоставленные(Имя,Т,СпФильтр,ТипФильтра="@ELEMENT")
  СтрДоб:=ИсключенияВыгрузки(Имя,"");
  аЭл:=DB("Ref."+Имя);
  If TypeStr(СпФильтр)="LIST" Then
    аЭл.Select("~("+ТипФильтра+" IN СпФильтр)"+СтрДоб);
  Else
    аЭл.Select("~("+ТипФильтра+" IN СпФильтр.зЭл)"+СтрДоб);
  EndIf;
  СпРод:=List.Create();
  aNum:=0;
  While аЭл.Next() Do
    aNum:=aNum+1;
    If aNum%10=0 Then
      Form.StatusText("Выгрузка справочника "+Имя+": "+aNum);
    EndIf;
    Try
      ДобавитьЭлементСправочникаВТаблицуВыгрузки(Т,аЭл);
    Except
      Стр:=PopError();
      Form.StatusText("Внутренняя ошибка выгрузки: "+Стр);
      Message("Внутренняя ошибка выгрузки: "+Стр+", элемент "+аЭл,"!");
      Exit 0;
    EndTry;
    СпРод.Add(аЭл.Copy());
    If Т.Size()>1000 Then
      If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
        Exit 0;
      EndIf;
      Message("Успешно выгружено элементов: "+aNum,"I");
    EndIf;
  EndDo;
  //Добавим все подчиненные справочники  
  For i:=1 To Struct.Ref(Имя).Children.Count() Do
    Имя2:=Struct.Ref(Имя).Children(i).Name;
    If Имя2="цЦены" Then
      If ((ФлСервер)And(ФлЛокальныеЦены))Or((not ФлСервер)And(not ФлЛокальныеЦены)) Then
        Continue;
      EndIf;
    EndIf;
    If Pos(","+Имя2+",",ПропуститьСправочники)>0 Then
      Continue;
    EndIf;
    If not ВыгрузитьНесопоставленные(Имя2,Т,СпРод,"@PARENT") Then
      Exit 0;
    EndIf;
  EndDo;
  Exit 1;
EndFunction


//Тип: бит 0 -- справочники, бит 1 -- документы
Function ВыполнитьОтправку(Тип=3)
  //Справочники
  If Тип and 1<>0 Then
    СпОбменыДляОбновления:=Ref.рознПротоколыОбменаМагазинов.Load(0,"ПутьДрайвераОбмена",Элемент.ПутьДрайвераОбмена);
    If СпОбменыДляОбновления.Size()=0 Then
      Message("Внутренняя ошибка (1)","!");
      Exit 0;
    EndIf;
    
    //Установка триггеров элементов с установленными триггерами в справочнике рознСопоставлениеОбъектовОбмена для всех использующихся обменов, где эти элементы сопоставлены
    ФлИзмененных:=0;
    BeginTransaction();
    Try
      For i:=1 To Struct.Ref.Count() Do
        If _And(Struct.Ref(i).Trigger,Struct.Ref(i).Parents.Count()=0) Then
          If not ОбновитьТриггерыОбмена(Struct.Ref(i).Name,СпОбменыДляОбновления,?(Struct.Ref(i).Name="тмцНоменклатура",спНоменклатура,0)) Then
            Exit 0;
          EndIf;
        EndIf;
      EndDo;
    Finally
      If IsTransactionActive() Then
        CommitTransaction();
      EndIf;
    EndTry;
    
    Т:=Text.Create(1);
    Т.AddString("SF.EX.1");
    Т.AddString(ПрефиксИБ+Chr(1)+ПрефиксУдаленнойИБ);
    ФлИзмененных:=0;
    BeginTransaction();
    Try
      For i:=1 To Struct.Ref.Count() Do
        ФлВсе:=0;
        If Struct.Ref(i).Name="тмцНоменклатура" Then
          ФлВсе:=(ФлСервер)And(ФлПолнаяВыгрузка);
        EndIf;
        If Struct.Ref(i).Trigger Then
          If not ВыгрузитьИзмененные(Struct.Ref(i).Name,Т,,ФлВсе) Then
            Exit 0;
          EndIf;
        EndIf;
      EndDo;
      //Для справочника тмцНоменклатура для центральной базы выгрузить все без сопоставления
      If (ФлСервер)And(ФлПолнаяВыгрузка) Then
        бТемп:=TempDB.Create("зЭл:Ref.тмцНоменклатура");
        бТемп.LoadFrom("Ref.рознСопоставлениеОбъектовОбмена","Объект->зЭл","@ELEMENT IN спНоменклатура");
        аТемп:=TempDB.Create("зЭл:Ref.тмцНоменклатура");
        аТемп.LoadFrom("Ref.тмцНоменклатура","@ELEMENT->зЭл","~(@ELEMENT IN спНоменклатура)And(@ELEMENT NOT IN бТемп.зЭл)");
        If not ВыгрузитьНесопоставленные("тмцНоменклатура",Т,аТемп) Then
          Exit 0;
        EndIf;
        //TODO: Добавить дополнительные справочники для полной выгрузки бух счета и пр.
      EndIf;
      If Т.Size()>2 Then
        aNum2:=Т.Size()-2;
        If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
          Exit 0;
        EndIf;
        Message("Успешно выгружено элементов: "+aNum2,"I");
      EndIf;
      
      //рознВременнаяТаблицаОбъектовОбмена: выгрузить запросы на обновление локальных элементов (ACK), режим=10
      аЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
      аЭл.Select("Режим","10");
      aNum:=0;
      aNum2:=0;
      While аЭл.Next() Do
        aNum:=aNum+1;
        If aNum%10=0 Then
          Form.StatusText("Выгрузка запросов на обновление: "+aNum);
        EndIf;
        Т.AddString("ACK"+Chr(1)+аЭл.ВнешнийКод);
        If Т.Size()>1000 Then
          aNum2:=aNum-aNum2;
          If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
            Exit 0;
          EndIf;
          Message("Успешно выгружено запросов: "+aNum2,"I");
          aNum2:=aNum;
        EndIf;
      EndDo;
      //рознВременнаяТаблицаОбъектовОбмена: выгрузить обновление кодов (ACD), режим=1
      аЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
      аЭл.Select("Режим","1");
      aNum:=0;
      aNum2:=0;
      While аЭл.Next() Do
        aNum:=aNum+1;
        If aNum%10=0 Then
          Form.StatusText("Выгрузка запросов на обновление (2): "+aNum);
        EndIf;
        Т.AddString("ACD"+Chr(1)+аЭл.ВнешнийКод+Chr(1)+ПолучитьПолныйКод(аЭл,1));
        If Т.Size()>1000 Then
          aNum2:=aNum-aNum2;
          If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
            Exit 0;
          EndIf;
          Message("Успешно выгружено запросов: "+aNum2,"I");
          aNum2:=aNum;
        EndIf;
      EndDo;
      If Т.Size()>2 Then
        aNum2:=Т.Size()-2;
        If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
          Exit 0;
        EndIf;
        Message("Успешно выгружено запросов: "+aNum2,"I");
      EndIf;
      
    Finally
      If IsTransactionActive() Then
        CommitTransaction();
      EndIf;
    EndTry;
  EndIf;
  
  //Документы
  If Тип and 2<>0 Then
    Т:=Text.Create(1);
    Т.AddString("SF.EX.1");
    Т.AddString(ПрефиксИБ+Chr(1)+ПрефиксУдаленнойИБ);

    //рознВременнаяТаблицаОбъектовОбмена: выгрузить обновление кодов (DCD), режим=1
    аЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
    аЭл.Select("Режим","110");
    aNum:=0;
    aNum2:=0;
    While аЭл.Next() Do
      aNum:=aNum+1;
      If aNum%10=0 Then
        Form.StatusText("Выгрузка запросов на удаление: "+aNum);
      EndIf;
      Т.AddString("DCD"+Chr(1)+аЭл.ВнешнийКод);
      If Т.Size()>1000 Then
        aNum2:=aNum-aNum2;
        If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
          Exit 0;
        EndIf;
        Message("Успешно выгружено запросов на удаление: "+aNum2,"I");
        aNum2:=aNum;
      EndIf;
    EndDo;
    If Т.Size()>2 Then
      aNum2:=Т.Size()-2;
      If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
        Exit 0;
      EndIf;
      Message("Успешно выгружено запросов на удаление: "+aNum2,"I");
    EndIf;
    
    ФлИзмененных:=0;
    BeginTransaction();
    Try
      Чл:=0;
      For iLoop:=1 To Struct.Doc.Count() Do
        Ид:=Struct.Doc(iLoop).Name;
        Form.StatusText("Запрос по документам "+Ид+"...");
        aDoc:=DB("Doc."+Ид);
        aDoc.UseOrder("DocDate+");
        
        тЮрЛицо:=ЮрЛицо;
        тМагазин:=Магазин;
        aDoc.Select("~(@Status>1)And(ФлагОбмена<>2)And(ФлагОбмена<>1)And(ФлагОбмена<9)And("+
          ?(not IsEmpty(ДатаНачала),"DocDate>=ДатаНачала)And(")+
          ?(ФлВсеДокументы,"ЮрЛицо=тЮрЛицо","Магазин=тМагазин")+")And((ПрефиксУдаленнойБазы=ПрефиксУдаленнойИБ)Or(ПрефиксУдаленнойБазы=""""))");
          
        While aDoc.Next() Do
          аДок:=aDoc.Copy();
          Чл:=Чл+1;
          If Чл%5=0 Then
            Form.StatusText(""+Ид+": "+Чл+" ("+аДок.DocDate+")...");
          EndIf;
          If аДок.Lock() Then
            аДок.Reload();
            аДок.ФлагОбмена:=8;
            аДок.Save();
            Try
              ДобавитьДокументВТаблицуВыгрузки(Т,аДок);
            Except
              аДок.Unlock();
              Стр:=PopError();
              Form.StatusText("Внутренняя ошибка выгрузки: "+Стр);
              Message("Внутренняя ошибка выгрузки: "+Стр+", документ "+аДок,"!");
              Exit 0;
            EndTry;
            аДок.Unlock();
          EndIf;
          
          If Т.Size()>1000 Then
            If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
              Exit 0;
            EndIf;
            Message("Успешно выгружено документов: "+Чл,"I");
            Чл:=0;
          EndIf;
          If ФлИзмененных>50 Then
            CommitTransaction();
            ФлИзмененных:=0;
            BeginTransaction();
          EndIf;
        EndDo;
        
        Form.StatusText("Запрос по удаленным документам "+Ид+"...");
        aDoc.Select("~(@Status<2)And(ФлагОбмена=1)And("+?(ФлВсеДокументы,"ЮрЛицо=тЮрЛицо","Магазин=тМагазин")+
          ?(not IsEmpty(ДатаНачала),")And(DocDate>=ДатаНачала")+
          ")And((ПрефиксУдаленнойБазы=ПрефиксУдаленнойИБ)Or(ПрефиксУдаленнойБазы=""""))");
        
        While aDoc.Next() Do
          If Left(aDoc.DocNum,Length(ПрефиксИБ))<>ПрефиксИБ Then
            MessageVisual("Внимание! Удаляется документ "+aDoc+", похоже, созданный в другой базе! Возможен конфликт!","!");
          EndIf;
        
          аДок:=aDoc.Copy();
          Чл:=Чл+1;
          If Чл%5=0 Then
            Form.StatusText("(Уд) "+Ид+": "+Чл+" ("+аДок.DocDate+")...");
          EndIf;
          Т.AddString("DCD"+Chr(1)+аДок.DBName()+Chr(1)+аДок.DocDate+Chr(1)+аДок.DocNum);
          
          If Т.Size()>1000 Then
            If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
              Exit 0;
            EndIf;
            Message("Успешно выгружено документов: "+Чл,"I");
            Чл:=0;
          EndIf;
          If ФлИзмененных>50 Then
            CommitTransaction();
            ФлИзмененных:=0;
            BeginTransaction();
          EndIf;
        EndDo;
      EndDo;
      //Выгрузка начальных остатков
      If (ФлСервер)And(ФлВыгрузкаНачальныхОстатков) Then
        //Выгрузка сальдо по всем накопителям с наличием остатков
      
      
      EndIf;
      
      
      If Т.Size()>2 Then
        aNum2:=Т.Size()-2;
        If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
          Exit 0;
        EndIf;
        Message("Успешно выгружено документов: "+aNum2,"I");
      EndIf;
    Finally
      If IsTransactionActive() Then
        CommitTransaction();
      EndIf;
    EndTry;
  EndIf;
  
  Exit 1;
EndFunction


Function СохранитьУстановки(ФлЗакрыть=0)
  оТМЦ:=Form.оТМЦ.Value;
  оТМЦ.Select();
  Стр:="";
  While оТМЦ.Next() Do
    AppendStringToBufferedString(Стр,?(Стр<>"",",","")+оТМЦ.Номенклатура.Code);
  EndDo;
  Ини.AddLeaf("Номенклатура",Стр);
  Ини.AddLeaf("Способ",Form.оСпособ.Value.SelectedLine);
  Ини.AddLeaf("ФлВсеДокументы",Form.оВсеДокументы.Value);
  Ини.AddLeaf("ФлЛокальныеЦены",Form.оЛокальныеЦены.Value);
  Ини.AddLeaf("Сервер",Form.оСервер.Value);
  Ини.AddLeaf("ЛокальнаяПапка",Form.оПуть.Value);
  Ини.AddLeaf("АдресСервера",Form.оАдресСервера.Value);
  Ини.AddLeaf("ПрефиксУдаленнойИБ",Form.оПрефиксУдаленнойИБ.Value);
  Ини.AddLeaf("РасписаниеВыгрузкиСпр",Form.оРасписаниеВыгрузкиСпр.Value);
  Ини.AddLeaf("РасписаниеВыгрузкиДок",Form.оРасписаниеВыгрузкиДок.Value);
  Ини.AddLeaf("ДатаНачала",Form.оДатаНачала.Value);
  Ини.AddLeaf("Касса",Form.оКасса.Value.Code);  
  Элемент.Настройки:=Ини.StoreToString("");
  
  глОбновитьРасписаниеПротоколаОбмена(Элемент,"Modules\FreeForms\ПротоколыОбмена\EnterpriseData\",Form.оРасписаниеВыгрузкиСпр.Value,Form.оРасписаниеВыгрузкиДок.Value,
    "Выгрузка справочников","Выгрузка документов","Выгрузка только справочников","Выгрузка только документов");
  
  If ФлЗакрыть Then
    Form.IsChanged(0);
    Form.Close();
  EndIf;
EndFunction


Function OnOpen()
  Result:=0;
  If TypeStr(Param)<>"LIST" Then
    MessageVisual("Эта обработка запускается автоматически или вызывается из формы магазина!","!");
    Exit;
  EndIf;
  Элемент:=Param["Элемент"];
  СтрКоманда:=Param["Команда"];
  СтрОпция:=Param["Опция"];
  
  If Элемент.IsLocked()<>1 Then
    Элемент:=Элемент.Copy();
    If not глЗаблокировать(Элемент,1) Then //Будет разблокирован при закрытии обработки
      Exit;
    EndIf;
    Элемент.Reload();
  EndIf;
    
  Магазин:=Элемент.Parent();
  ЮрЛицо:=Магазин.ЮрЛицо;
  Try
    Ини:=Ini.Create();
    Ини.AddFromString(Элемент.Настройки);
  Except
    Ини.AddLeaf("Способ",1);
  EndTry;
  Способ:=Max(1,Number(Ини.GetData("Способ")));
  ФлСервер:=Number(Ини.GetData("Сервер"));
  ЛокальнаяПапка:=Ини.GetData("ЛокальнаяПапка");
  АдресСервера:=Ини.GetData("АдресСервера");
  ПрефиксУдаленнойИБ:=Ини.GetData("ПрефиксУдаленнойИБ","");
  ФлВсеДокументы:=Number(Ини.GetData("ФлВсеДокументы"));
  ФлЛокальныеЦены:=Number(Ини.GetData("ФлЛокальныеЦены"));
  РасписаниеВыгрузкиСпр:=Ини.GetData("РасписаниеВыгрузкиСпр");
  РасписаниеВыгрузкиДок:=Ини.GetData("РасписаниеВыгрузкиДок");
  ДатаНачала:=Date(Ини.GetData("ДатаНачала"));
  Касса:=Ref.общКассы;
  КассаКод:=Ини.GetData("Касса","");
  If КассаКод<>"" Then
    Касса.Find("Code",КассаКод);
  EndIf;
  спНоменклатура:=List.Create();
  СтрНоменклатура:=Ини.GetData("Номенклатура","");
  aList:=List.Create();
  While СтрНоменклатура<>"" Do
    Стр:=TearStr(СтрНоменклатура,",");
    aList.Add(Стр);
  EndDo;
  If aList.Size()>0 Then
    спНоменклатура:=Ref.тмцНоменклатура.LoadEx(0,2,"Code","->Code",aList);
  EndIf;
  ПрефиксИБ:=Trim(DBVar.ПрефиксИБ);
  
  If (СтрКоманда="Визуальный запуск")or(IsEmpty(СтрКоманда)) Then
    Result:=1;
    Exit;
  EndIf;
  If ЛокальнаяПапка="" Then
    Raise "Переменная "+ЛокальнаяПапка+" не указана!";
  EndIf;
  If Trim(ПрефиксУдаленнойИБ)="" Then
    Raise "Не задан префикс удаленной базы данных!";
  EndIf;
  
  ФлПолнаяВыгрузка:=СтрКоманда="Полная выгрузка номенклатуры";
  ФлВыгрузкаНачальныхОстатков:=СтрКоманда="Выгрузка начальных остатков";
  ИмяОбмена:="Обмен_"+Элемент.Code;аПольз:="";аМаш:="";аДата:="";
  If not DBLockStringMutex(ИмяОбмена,аПольз,аМаш,аДата) Then
    MessageVisual("Обмен по протоколу "+Элемент+" для магазина "+Магазин+" уже был запущен пользователем "+аПольз+" ("+аМаш+") в "+аДата,"!");
  EndIf;
  Try
    //Команды: Визуальный запуск,Выгрузка,Загрузка,Загрузка и выгрузка
    If (СтрКоманда="Выгрузка")Or((ФлПолнаяВыгрузка)And(ФлСервер))Or((ФлВыгрузкаНачальныхОстатков)And(ФлСервер)) Then
      If not ВыполнитьОтправку() Then
        Raise "Ошибка при выполнении выгрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Выгрузка только справочников" Then    
      If not ВыполнитьОтправку(1) Then
        Raise "Ошибка при выполнении выгрузки справочников";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Выгрузка только документов" Then    
      If not ВыполнитьОтправку(2) Then
        Raise "Ошибка при выполнении выгрузки документов";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf (СтрКоманда="Загрузка")And(ФлСервер) Then
      MessageVisual("Команда ""загрузка"" для данного протокола не подразумевается, необходимо воспользоваться обработкой ""Сервет обмена распределенной базы""","!");
      Param["Удачно"]:=1;
    Else
      MessageVisual("Команда """+СтрКоманда+""" не поддерживается в режиме "+?(ФлСервер,"сервера","клиента")+"!","!");
    EndIf;
  Finally
    DBUnlockStringMutex(ИмяОбмена);
  EndTry;
EndFunction