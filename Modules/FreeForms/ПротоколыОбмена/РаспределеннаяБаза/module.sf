//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

Var Ини Export, ФлСервер Export;
Var Способ Export, ЛокальнаяПапка Export, АдресСервера Export, РасписаниеВыгрузки1 Export, РасписаниеВыгрузки2 Export, РасписаниеВыгрузки3 Export, ФлВсеДокументы Export, ФлЛокальныеЦены Export;
Var ДатаНачала Export, спНоменклатура Export, спКассы Export;
Var Магазин Export, ЮрЛицо Export, ПрефиксИБ Export, ПрефиксУдаленнойИБ Export;
Var Элемент Export; //Элемент справочника протоколы обмена
Var ФлИзмененных Export, ФлПолнаяВыгрузка Export, ФлВыгрузкаНачальныхОстатков Export;
Var спМагазины Export, спЮрЛица Export;//Фильтры выгрузки
Var ТЭлементыИсключения Export;
Var спПропуститьСправочники Export, спСправочникиБезЭлементовСинхронизации Export;
спПропуститьСправочники:=List.Create("тмцPLUКоды","цПечатьЦенников","бухУчетАвансов");
спПропуститьСправочники.Sort();
спСправочникиБезЭлементовСинхронизации:=List.Create("тмцСвойстваОсновныхСредств","цНаценкиНаГруппы","цЦены","тмцМаркировкаПозиций","тмцШтрихкоды","общДополнительныеСвойства",
  "адГорода","адУлицы");
спСправочникиБезЭлементовСинхронизации.Sort();
//Справочники: бухПланСчетов,адАдминистративныеДеления,адСтраныМира,бухВидыСубконто,тмцЕдиницыИзмерения имеют элементы синхронизации, но даже для ЦБ их поиск происходит автоматически, без участия пользователя

Function НайтиИлиСоздатьЭлемент(ВнешнийКод2,ЛокальныйКод2,Вид="",флПоискРодителя=0,ByRef ФлУдачно=0) Forward;

//Структура хранения информации и назначение справочников справочников:
//рознСопоставлениеОбъектовОбмена -- хранятся сопоставленные элементы справочников
//   ChangeTrigger -- используется для индикации того, что локальный элемент был изменен и необходимо обновить его на удаленной стороне
//рознВременнаяТаблицаОбъектовОбмена -- хранятся: 
//   1. Несопоставленные элементы со всей информацией по реквизитам (только для центральной базы)
//   2. Запросы на обновление локальных элементов из удаленной базы (для обеих баз)
//   3. Ответ на запросы об обновлении внешних кодов элементов
//   4. Физически удаленные документы
//   Реквизит режим принимает следующие значения:
//      10 -- Ожидает загрузки данных из удаленной базы, после получения данных, превращается в 0 или 1 для ЦБ, или удаляется для периферийной базы
//            Данные<>"" -- данные получены, можно загружать, Данные="" -- данные пока не получены
//            При сопоставлении новых элементов в центральной базе, используются записи с режимом 10 и Данные<>"" и пустым реквизитом Объект
//      11 -- как 10, только запрос с подчиненными
//      100 -- запрос на удаление документа в удаленной базе (документ был физически удален в текущей), из противоположной базы должна прийти команда DCD, тогда этот элемент будет удален
//      110 -- временное хранение документа для центральной базы, до тех пор, пока не будут сопоставлены все его реквизиты
//      111 -- временное хранение документа ввода остатков для центральной базы, до тех пор, пока не будут сопоставлены все его реквизиты

//Процесс выгрузки нового элемента справочника в удаленную базу:
//1. Локальная база отсылает "ELM" с пустым внешним кодом, создает рознСопоставлениеОбъектовОбмена с пустым внешним кодом
//2. Удаленная база принимает элемент на своей стороне (удалить рознВременнаяТаблицаОбъектовОбмена=10 для таких элементов):
//  2.1. Удаленная база является периферийной, элемент создается автоматически, помещается в рознСопоставлениеОбъектовОбмена с внешним кодом, в отчет помещается ACD
//  2.2. Удаленная база является центральной, создается рознВременнаяТаблицаОбъектовОбмена с режимом 0
//    2.2.1. Если такой элемент был сопоставлен пользователем или новый, перед удалением рознВременнаяТаблицаОбъектовОбмена, создается рознСопоставлениеОбъектовОбмена и выгружается ACD
//3. Для всех элементов рознСопоставлениеОбъектовОбмена с пустым кодом, локальная база создает запросы ACK2
//  3.1. Удаленная база отправляет ответы ACD (если элемент был создан), AKD в ответ
//    3.1.1. Локальная база снимает триггер и обновляет внешний код при получении ACD


//Создание файла обмена справочниками, для справочников файл может содержать следующие типы команд:
//1. (ELM, запрос) Полная выгрузка элемента (создает пустое сопоставление в рознСопоставлениеОбъектовОбмена), полный набор реквизитов
//    Элемент попадает в выгрузку до тех пор, пока локальная сторона не получит команду ACD или ACP, после этого ChangeTrigger сбрасывается
//  1.1. Для периферийной базы такая команда создает новый элемент безусловно, создает обратную команду ACD
//  1.2. Для центральной базы такая команда создает пустое сопоставление в рознСопоставлениеОбъектовОбмена, ожидая действий оператора ЦБ для сопоставления, создает обратную команду ACP
//  1.3. (EL0/EL1/EL?, запрос) Полная начальная выгрузка элемента справочника магазины,обоих типов цен для сопоставления и обновления на противоположной стороне
//2. (ACP, ответ) Удаленная база получила элемент, но в данный момент она ожидает действий пользователя (центральная база)
//  Центральная база отправляет ACP при каждой выгрузке для каждого элемента в списке синхронизации
//3. (ACD, ответ) Обновление кода принятого нового элемента, только коды
//  3.1. Для любой базы обновляет поле ВнешнийКод
//4. (ACK, запрос) Запрос на загрузку/обновление, только удаленный код
//  4.2. (ACK2, запрос) Запрос на обновление внешнего кода, только локальный код (ожидается ACD)
//  4.1. (AKD, ответ) Элемент, по которому был запрос на обновление, в удаленной базе не найден
//5. (DOC, запрос) Полная выгрузка документа, все реквизиты и движения
//6. (DCD, запрос) Удаление документа, только номер
//7. (DAC, ответ) Сообщение о том, что документ получен на удаленной стороне (DOC или DCD)
//8. (DSD, запрос) Документ начальных остатков (только из центральной базы)

//Документы:
//ФлагОбмена:
//0 - Документ ожидает перенесения (изменен)
//1 - Была отмена обработки, ожидает перенесения
//2 - Документ перенесен, других действий не требуется
//8 - В момент перенесения, документ был загружен в файл перенесения, однако, сервер еще не ответил положительно о том, что он его получил. В другое время, работает как 0
//9 - Не переносить этот документ и не изменять этот флаг (при разделении/объединении баз)
//
//Выгружать только документы с нужным реквизитом Магазин, документы с ПрефиксУдаленнойБазы равным ПрефиксУдаленнойИБ
//          если стоит галка ФлВсеДокументы, выгружать также все документы с нужным юр. лицом
//          также выгружать необработанные документы в случае, если ФлагОбмена=1
//После выгрузки в документ обновляется ПрефиксУдаленнойБазы до ПрефиксУдаленнойИБ и ФлагОбмена=8

//Кодировка: UTF-16
//Справочники:
//<ELM><#1><ПолныйКодИВид><#1><ПолныйУдаленныйКод><#1><КодПапки><#1><Наименование><#1><Флаги><#1><Доп.реквизиты для сопоставления><#2><Реквизиты><#2><Строчная часть 1><#2><Строчная часть 2>...
//<ПолныйКодИВид>: <Вид><#31><+ если папка><Код><#30><Полный код и вид родителя> -- вид родителя присутствует только, если родителей больше 1
//<ПолныйКод>: <+ если папка><Код><#30><Код родителя>
//<Флаги>: бит 0 -- удален
//<Реквизиты>: <Реквизит 1><#3><Реквизит 2><#3>...
//<Реквизит>: <+ если период><Имя реквизита><#4><Значение реквизита>
//<Строчная часть>: LP<#1><Имя строчной части><#1><Количество строк><#1><Строка 1><#1><Строка 1>
//<Строка>=<Реквизиты>
//
//<Значение реквизита>: <Дата 1><#5><Значение 1><#5><Дата 2><#5><Значение 2> (для периодических)
//                      <Значение> (для непериодических)
//<Значение>: <Строка дата или число> или <ENUM><#31><Вид><#31><Индекс перечисления> или <REF><#31><ПолныйКодИВид справочника> или <DOC><#31><Вид><#31><Дата документа><#6><Номер документа>

//Документы
//<DOC><#1><Вид документа><#1><Дата и время документа><#1><Номер документа><#1><Статус документа><#2><Реквизиты заголовка><#2><Строчная часть или накопитель 1><#2><Строчная часть или накопитель 2>...
//<Строчная часть или накопитель>: <Тип><#1><Имя><#1><Количество строк><#1><Строка 1><#1><Строка 1>
//<Тип>: STOR или LP
//<Строка>=<Реквизиты>
//Для накопителей сначала идет особый реквизит _EXPENSE (если имеется)

//Вводы остатков
//<DSD><#1><Вид накопителя><#1><Дата остатков><#2><#2><Движения накопителя>
//<Движения накопителя>: <#1><Строка 1><#1><Строка 1>
//<Строка>=<Реквизиты>


Function ПолучитьУстановку(Имя)
  aEl:=Ref.рознУстановкиОбменаМагазинов;
  If aEl.Find("~(@Parent=Элемент)And(@Status=0)And(Name=Имя)") Then
    Exit aEl.Установка; 
  EndIf;
  Exit "";
EndFunction

Function MessageVisual(Стр,Тип="")
  If not IsExecutingInSeparateThread Then
    Message(Стр,Тип);
  EndIf;
EndFunction

Function ДобавитьУстановку(Имя,Код,ФлОбновить=0)
  aEl:=Ref.рознУстановкиОбменаМагазинов;
  If Not aEl.Find("~(@Parent=Элемент)And(@Status=0)And(Name=Имя)") Then
    aEl.New();
    aEl.Parent(Элемент);
    aEl.Name:=Имя;
    aEl.Установка:=Код;
    aEl.Save();
  ElseIf ФлОбновить Then
    aEl.Установка:=Код;
    aEl.Save();
  EndIf;
EndFunction

Function ПриПодбореНоменклатуры(Эл,Фл)
  оТМЦ:=Form.оТМЦ.Value;

  If оТМЦ.Find(Эл,,"Номенклатура")>0 Then
    Box("Такая группа номенклатуры уже выбрана!",Q_STOP);
    Exit;
  EndIf;
  оТМЦ.NewLine();
  оТМЦ.Номенклатура=Эл;
  Form.IsChanged(1);
  Form.оТМЦ.InvokeEvent("OnInitLine","IndexFrom,IndexTo",оТМЦ.Size(),оТМЦ.Size());
EndFunction


Function ОбновитьТриггерыОбмена(Имя,СпОбменыДляОбновления,аРодители=0)
  аТемп:=TempDB.Create("зЭл:Ref."+Имя);
  If TypeStr(аРодители)="LIST" Then
    аТемп.LoadFrom("Ref."+Имя,"@ELEMENT->зЭл","@ELEMENT IN аРодители","@Trigger<>2");
  ElseIf аРодители<>0 Then
    аТемп.LoadFrom("Ref."+Имя,"@ELEMENT->зЭл","@PARENT IN аРодители.зЭл","@Trigger<>2");
  Else
    аТемп.LoadFrom("Ref."+Имя,"@ELEMENT->зЭл","@Trigger<>2");
  EndIf;
  aNum:=0;
  aSize:=аТемп.Size();
  аТемп.Select();
  While аТемп.Next() Do
    aNum:=aNum+1;
    If aNum%10=0 Then
      Form.StatusText("Подготовка справочника "+Имя+": "+aNum+" из "+aSize);
    EndIf;
    aEl:=аТемп.зЭл;
    If aEl.Lock() Then
      If aEl.GetTrigger()=2 Then
        Continue;
      EndIf;
      СпЭлементы:=Ref.рознСопоставлениеОбъектовОбмена.LoadEx(0,1,,"~(@Parent IN СпОбменыДляОбновления)And(Объект=aEl)");
      If MassLockWithWait(СпЭлементы,0,1,0) Then
        For i:=1 To СпЭлементы.Size() Do
          //Транслируем изменения элемента на сопоставленные элементы
          bEl:=СпЭлементы[i];
          bEl.SetTrigger(1);
          ФлИзмененных:=ФлИзмененных+1;
        EndDo;
        MassUnlock(СпЭлементы);
        //Снять флаг изменения
        ФлИзмененных:=ФлИзмененных+1;
        aEl.SetTrigger(2);
        aEl.Unlock();
      EndIf;
    EndIf;
    If ФлИзмененных>50 Then
      CommitTransaction();
      ФлИзмененных:=0;
      BeginTransaction();
    EndIf;
  EndDo;
  //Подчиненные справочники с триггерами
  For i:=1 To Struct.Ref(Имя).Children.Count() Do
    Имя2:=Struct.Ref(Имя).Children(i).Name;
    If Struct.Ref(Имя2).Trigger Then
      Result:=ОбновитьТриггерыОбмена(Имя2,СпОбменыДляОбновления,аТемп);
      If not Result Then
        Exit 0;
      EndIf;
    EndIf;
  EndDo;
  
  Exit 1;
EndFunction

Function ПолучитьПолныйКод(Эл,ФлВид=1)
  //<ПолныйКодИВид>: <Вид><#31><+ если папка><Код><#30><Полный код и вид родителя> -- вид родителя присутствует только, если родителей больше 1
  //<ПолныйКод>: <+ если папка><Код><#30><Код родителя>
  If _Or(IsEmpty(Эл),Эл.Selected()=0) Then
    Exit "";
  EndIf;
  Вид:=Эл.DBName();
  If Struct.Ref(Вид).Parents.Count()=0 Then
    Exit ?(ФлВид,Вид+Chr(31),"")+?(Эл.IsFolder(),"+")+Эл.Code;
  EndIf;
  Exit ?(ФлВид,Вид+Chr(31),"")+?(Эл.IsFolder(),"+")+Эл.Code+Chr(30)+ПолучитьПолныйКод(Эл.Parent(),Struct.Ref(Вид).Parents.Count()>1);
EndFunction

Function НайтиВнешнийКод(Эл)
  If _Or(IsEmpty(Эл),Эл.Selected()=0) Then
    Exit "";
  EndIf;
  бЭл:=Ref.рознСопоставлениеОбъектовОбмена;
  If бЭл.Find("~(@Parent=Элемент)And(Объект=Эл)") Then
    Exit бЭл.ВнешнийКод;
  EndIf;
  Exit "";
EndFunction


Function ПолучитьЗначениеРеквизита(Знч)
  //<Значение>: <Строка дата или число> или <ENUM><#31><Вид><#31><Индекс перечисления> или <REF><#31><ПолныйКодИВид справочника> или <DOC><#31><Вид><#31><Дата документа><#6><Номер документа>
  Вид:=TypeStr(Знч);
  If Pos("DB.",Вид)=1 Then
    TearStr(Вид,"DB.");
  ElseIf Вид="DB" Then
    Вид:="";
  EndIf;
  Тип:=TearStr(Вид,".");
  
  If Тип="STRING" Then
    Exit ReplaceCharacters(Знч,Chr(10)+Chr(13),Chr(15)+Chr(16));
  ElseIf Тип="NUMBER" Then
    Exit Str(Знч);
  ElseIf Тип="DATE" Then
    Exit ?(GetPeriod(BegOfDay(Знч),Знч,5)=0,Str(Знч),FormatDate(Знч,"dd.mm.YYYY hh:tt:ss.ppp"));
  ElseIf Тип="ENUM" Then
    Exit ?(Знч.Selected()=0,"","ENUM"+Chr(31)+Вид+Chr(31)+Знч.Index());
  ElseIf Тип="REF" Then
    Exit ?(Знч.Selected()=0,"","REF"+Chr(31)+ПолучитьПолныйКод(Знч));
  ElseIf Тип="DOC" Then
    Exit ?(Знч.Selected()=0,"","DOC"+Chr(31)+Знч.DBName()+Chr(31)+?(GetPeriod(BegOfDay(Знч.DocDate),Знч.DocDate,5)=0,Str(Знч.DocDate),FormatDate(Знч.DocDate,"dd.mm.YYYY hh:tt:ss.ppp"))+Chr(31)+Знч.DocNum);
  EndIf;
  Exit "";
EndFunction

Function ПолучитьРеквизит(аЭл,Ид,ФлПер)
  If not ФлПер Then
    Exit Ид+Chr(4)+ПолучитьЗначениеРеквизита(аЭл);
  Else
    СтрРез:="+"+Ид+Chr(4);
    аЭл.Select();
    While аЭл.Next() Do
      AppendStringToBufferedString(СтрРез,?(аЭл.CurLine>1,Chr(5),"")+аЭл._Date+Chr(5)+ПолучитьЗначениеРеквизита(аЭл._Value));
    EndDo;
    Exit СтрРез;
  EndIf;
EndFunction


Function ДобавитьЭлементСправочникаВТаблицуВыгрузки(Т,аЭл,УдаленныйКод)
  //<Реквизиты>: <Реквизит 1><#3><Реквизит 2><#3>...
  //<Реквизит>: <+ если период><Имя реквизита><#4><Значение реквизита>
  //<Строчная часть>: <Имя строчной части><#1><Количество строк><#1><Строка 1><#1><Строка 1>
  //<Строка>=<Реквизиты>
          
  ВидСпр:=аЭл.DBName();
  Имя:="";
  If глЕстьРеквизитСправочника("Name",Trim(ВидСпр)) Then
    Имя:=ReplaceCharacters(аЭл.Name,Chr(10)+Chr(13),Chr(15)+Chr(16));
  EndIf;  
  
  СтрРез:="ELM"+Chr(1)+ПолучитьПолныйКод(аЭл)+Chr(1)+УдаленныйКод+Chr(1)+?(not IsEmpty(аЭл.Folder()),ПолучитьПолныйКод(аЭл.Folder()))+
    Chr(1)+Имя+Chr(1)+?(аЭл.Status()=1,"1","0")+Chr(1)+Chr(2);
    
  Фл:=0;
  For i:=1 To Struct.Ref(ВидСпр).Props.Count() Do
    Ид:=Struct.Ref(ВидСпр).Props(i).Name;
    If _Or(Ид="Code",Ид="Name") Then
      Continue;
    EndIf;
    ФлПер:=Struct.Ref(ВидСпр).Props(i).Periodical;
    AppendStringToBufferedString(СтрРез,?(not Фл,"",Chr(3))+ПолучитьРеквизит(?(ФлПер,аЭл.LoadPeriodicalValues(Ид),аЭл.GetValue(Ид)),Ид,ФлПер));
    Фл:=1;
  EndDo;
  
  //Строчные части
  If Struct.Ref(ВидСпр).LineParts.Count()>0 Then
    For iLP:=1 To Struct.Ref(ВидСпр).LineParts.Count() Do
      ИдСтр:=Struct.Ref(ВидСпр).LineParts(iLP).Name;
      aTab:=аЭл.LineParts(ИдСтр);
      AppendStringToBufferedString(СтрРез,Chr(2)+"LP"+Chr(1)+ИдСтр+Chr(1)+aTab.Size());
      aTab.Select();
      While aTab.Next() Do
        AppendStringToBufferedString(СтрРез,Chr(1));
        Фл:=0;
        For i:=1 To Struct.Ref(ВидСпр).LineParts(iLP).Props.Count() Do
          Ид:=Struct.Ref(ВидСпр).LineParts(iLP).Props(i).Name;
          ФлПер:=Struct.Ref(ВидСпр).LineParts(iLP).Props(i).Periodical;
          AppendStringToBufferedString(СтрРез,?(not Фл,"",Chr(3))+ПолучитьРеквизит(?(not ФлПер,aTab[Ид],аЭл.LoadPeriodicalValues(ИдСтр+"."+aTab.CurLine+"."+Ид)),Ид,ФлПер));
          Фл:=1;
        EndDo;
      EndDo;
    EndDo;
  EndIf;  
  Т.AddString(СтрРез);
EndFunction

Function ДобавитьНакопительВТаблицуВыгрузки(ByRef Т,Имя);

  Function Группировка(З,Уровень,спГруппы,спАктивы,ByRef СтрРез)
    Result:=0;
    If Уровень<=спГруппы.Size() Then
      While З.Next(Уровень) Do
        Result:=Группировка(З,Уровень+1,спГруппы,спАктивы,СтрРез) or Result;
      EndDo;
      Exit;
    EndIf;
    
    //Проверка целесообразности добавления строки
    Фл:=0;
    For i:=1 To спАктивы.Size() Do
      зПер:=спАктивы[i];
      зСумма:=З.EndTotals(зПер);
      If Round(зСумма,8)<>0 Then
        Фл:=1;
        Break;
      EndIf;
    EndDo;
    If not Фл Then
      Exit 0;
    EndIf;
    
    //<DSD><#1><Вид накопителя><#1><Дата остатков><#2><#2><Движения накопителя>
    //<Движения накопителя>: <#1><Строка 1><#1><Строка 1>
    //<Строка>=<Реквизиты>
    
    AppendStringToBufferedString(СтрРез,Chr(1));
    Фл:=0;
    For i:=1 To спГруппы.Size() Do
      зПер:=спГруппы[i];
      AppendStringToBufferedString(СтрРез,?(not Фл,"",Chr(3))+ПолучитьРеквизит(З.Get(зПер),Mid(зПер,2),0));
      Фл:=1;
    EndDo;
    For i:=1 To спАктивы.Size() Do
      зПер:=спАктивы[i];
      AppendStringToBufferedString(СтрРез,?(not Фл,"",Chr(3))+ПолучитьРеквизит(З.EndTotals(зПер),Mid(зПер,2),0));
      Фл:=1;
    EndDo;
    
    Exit 1;
  EndFunction

  //<DSD><#1><Вид накопителя><#1><Дата остатков><#2><#2><Движения накопителя>
  //<Движения накопителя>: <#1><Строка 1><#1><Строка 1>
  //<Строка>=<Реквизиты>
  
  //Создание запроса
  НДата:=BegOfDay(ДатаНачала-1);
  ТЗ:="Period From НДата to НДата;";
  СтрРез:="DSD"+Chr(1)+Имя+Chr(1)+НДата+Chr(2)+Chr(2);

  спГруппы:=List.Create();
  спАктивы:=List.Create();
  СпПропустить:=List.Create();
  СпПропустить.Add("ПодотчетныеОперации.Номенклатура");
  СпПропустить.Add("КомиссионныеТМЦ.Номенклатура");
  Фл:=0;//Применен фильтр по магазину/юр. лицу
  Фл2:=0;//Применен фильтр по кассе/номенклатуре
  //Особые случаи -- фильтры: Магазин, ЮрЛицо, Договор, Номенклатура, Склад, Касса
  //         не использовать: ПодотчетныеОперации.Номенклатура, КомиссионныеТМЦ.Номенклатура
  For i:=1 to Struct.Stor(Имя).Properties.Count() Do
    ИмяПр:=Struct.Stor(Имя).Properties(i).Name;
    If Struct.Stor(Имя).Properties(i).TotalsProp Then
      ТЗ:=ТЗ+"з"+ИмяПр+":=Stor."+Имя+"."+ИмяПр+";
      |Group з"+ИмяПр+";"+_NEWLINE;
      спГруппы.Add("з"+ИмяПр);
    ElseIf Struct.Stor(Имя).Properties(i).Asset Then
      ТЗ:=ТЗ+"з"+ИмяПр+":=EndTotals("+ИмяПр+");"+_NEWLINE;
      спАктивы.Add("з"+ИмяПр);
    EndIf;
    If (ИмяПр="Магазин")And(Фл=0) Then
      Фл:=1;
      If ФлВсеДокументы Then
        ТЗ:=ТЗ+"Condition Stor."+Имя+".Магазин.ЮрЛицо IN спЮрЛица;"+_NEWLINE;
      Else
        ТЗ:=ТЗ+"Condition зМагазин IN спМагазины;"+_NEWLINE;
      EndIf;
    ElseIf (ИмяПр="ЮрЛицо")And(ФлВсеДокументы)And(Фл=0) Then
      Фл:=1;
      ТЗ:=ТЗ+"Condition зЮрЛицо IN спЮрЛица;"+_NEWLINE;
    ElseIf (ИмяПр="Договор")And(ФлВсеДокументы)And(Фл=0) Then
      Фл:=1;
      ТЗ:=ТЗ+"Condition Stor."+Имя+".Договор.ЮрЛицо IN спЮрЛица;"+_NEWLINE;
    ElseIf (ИмяПр="Склад")And(Фл=0) Then
      Фл:=1;
      If ФлВсеДокументы Then
        ТЗ:=ТЗ+"Condition Stor."+Имя+".Склад.Магазин.ЮрЛицо IN спЮрЛица;"+_NEWLINE;
      Else
        ТЗ:=ТЗ+"Condition Stor."+Имя+".Склад.Магазин IN спМагазины;"+_NEWLINE;
      EndIf;
    ElseIf ИмяПр="Номенклатура" Then
      If СпПропустить.Find(Имя+".Номенклатура")=0 Then
        ТЗ:=ТЗ+"Condition зНоменклатура IN спНоменклатура;"+_NEWLINE;
        Фл2:=1;
      EndIf;
    ElseIf (ИмяПр="Касса")And(спКассы.Size()>0) Then
      ТЗ:=ТЗ+"Condition зКасса IN спКассы;"+_NEWLINE;
      Фл2:=1;
    EndIf;
  EndDo;
  If (not Фл)And(not Фл2) Then
    Exit;
  EndIf;
      
  З:=Query.Create();
  З.Execute(ТЗ,2);
  If Группировка(З,1,спГруппы,спАктивы,СтрРез) Then
    Т.AddString(СтрРез);
  EndIf;
EndFunction

Function ДобавитьДокументВТаблицуВыгрузки(Т,Док)
  If _And(Left(Док.DocNum,Length(ПрефиксИБ))<>ПрефиксИБ,Left(Док.DocNum,Length(ПрефиксУдаленнойИБ))<>ПрефиксУдаленнойИБ) Then
    MessageVisual("Внимание! Выгружается документ "+Док+", похоже, созданный в другой базе! Возможен конфликт!","!");
  EndIf;
  //<DOC><#1><Вид документа><#1><Дата и время документа><#1><Номер документа><#1><Статус документа><#2><Реквизиты заголовка><#2><Строчная часть или накопитель 1><#2><Строчная часть или накопитель 2>...
  //<Строчная часть или накопитель>: <Тип><#1><Имя><#1><Количество строк><#1><Строка 1><#1><Строка 1>
  //<Тип>: STOR или LP
  //<Строка>=<Реквизиты>
  //Для накопителей сначала идет особый реквизит _EXPENSE (если имеется)
  
  ВидДок:=Док.DBName();
  СтрРез:="DOC"+Chr(1)+ВидДок+Chr(1)+FormatDate(Док.DocDate,"dd.mm.YYYY hh:tt:ss.ppp")+Chr(1)+Док.DocNum+Chr(1)+Док.Status()+Chr(2);
  
  //Реквизиты заголовка
  Фл:=0;
  For i:=1 To Struct.Doc(ВидДок).Props.Count() Do
    Ид:=Struct.Doc(ВидДок).Props(i).Name;
    If _Or(Ид="ФлагОбмена",Ид="ПрефиксУдаленнойБазы",Ид="DocDate",Ид="DocNum") Then
      Continue;
    EndIf;
    ФлПер:=Struct.Doc(ВидДок).Props(i).Periodical;
    AppendStringToBufferedString(СтрРез,?(not Фл,"",Chr(3))+ПолучитьРеквизит(?(ФлПер,Док.LoadPeriodicalValues(Ид),Док.GetValue(Ид)),Ид,ФлПер));
    Фл:=1;
  EndDo;
  
  //Строчные части
  If Struct.Doc(ВидДок).LineParts.Count()>0 Then
    For iLP:=1 To Struct.Doc(ВидДок).LineParts.Count() Do
      ИдСтр:=Struct.Doc(ВидДок).LineParts(iLP).Name;
      aTab:=Док.LineParts(ИдСтр);
      AppendStringToBufferedString(СтрРез,Chr(2)+"LP"+Chr(1)+ИдСтр+Chr(1)+aTab.Size());
      aTab.Select();
      While aTab.Next() Do
        AppendStringToBufferedString(СтрРез,Chr(1));
        Фл:=0;
        For i:=1 To Struct.Doc(ВидДок).LineParts(iLP).Props.Count() Do
          Ид:=Struct.Doc(ВидДок).LineParts(iLP).Props(i).Name;
          ФлПер:=Struct.Doc(ВидДок).LineParts(iLP).Props(i).Periodical;
          AppendStringToBufferedString(СтрРез,?(not Фл,"",Chr(3))+ПолучитьРеквизит(?(not ФлПер,aTab[Ид],Док.LoadPeriodicalValues(ИдСтр+"."+aTab.CurLine+"."+Ид)),Ид,ФлПер));
          Фл:=1;
        EndDo;
      EndDo;
    EndDo;
  EndIf;  
  
  //Накопители
  aList:=List.Create();
  aList.FromString(Док.GetUsedStoragesNames,",");
  For iStr:=1 to aList.Size() Do
    ИдНак:=aList[iStr];
    TearStr(ИдНак,".");//STOR.БУХГАЛТЕРСКИЕСЧЕТА
    aTab:=Док.LoadStorage(ИдНак);
    флРасход:=aTab.GetColumnIndex("_Expense")>0;
    AppendStringToBufferedString(СтрРез,Chr(2)+"STOR"+Chr(1)+ИдНак+Chr(1)+aTab.Size());
    aTab.Select();
    While aTab.Next() Do
      AppendStringToBufferedString(СтрРез,Chr(1));
      Фл:=0;
      If флРасход Then
        AppendStringToBufferedString(СтрРез,ПолучитьРеквизит(aTab._Expense,"_EXPENSE",0));
        Фл:=1;
      EndIf;
      For i:=1 to Struct.Stor(ИдНак).Props.Count() Do
        Ид:=Struct.Stor(ИдНак).Props(i).Name;
        AppendStringToBufferedString(СтрРез,?(not Фл,"",Chr(3))+ПолучитьРеквизит(aTab[Ид],Ид,0));
        Фл:=1;
      EndDo;
    EndDo;
  EndDo;
  Т.AddString(СтрРез);
EndFunction


Function ИсключенияВыгрузки(Имя,ТипФильтра="")
  //Оптимизации при переносе справочников розницы
  If Имя="тмцМаркировкаПозиций" Then
    Exit "And("+?(ТипФильтра<>"",ТипФильтра+"..Ref.тмцМаркировкаПозиций.")+"флСостояние<2)";
  EndIf;
  Exit "";
EndFunction

Function ОтправитьФайлНаУдаленнуюСторону(ByRef Т=0)
  //TODO: отправить уже ожидающие в папке обмена
  If not IsEmpty(Т) Then
    Т.Save(AddBackSlash(ЛокальнаяПапка)+"sfex_"+ПрефиксУдаленнойИБ+"_"+ПрефиксИБ+"_"+FormatDate(Date(),"ddmmYYYYhhttssppp")+".bin",1200,1);
    Т:=Text.Create(1);
    Т.AddString("SF.EX.1");
    Т.AddString(ПрефиксИБ+Chr(1)+ПрефиксУдаленнойИБ);
  EndIf;

  //here;//
  //1. Запаковать в архив
  //2. Соединиться, если соединение разорвано
  //3. Отослать пакет
  //4. Создать обработку сервера в этом же модуле с формой настройки, вынести в главное меню.
  //  4.1. Настройка = порт
  
  Exit 1;
EndFunction

Function ВыгрузитьИзмененные(Имя,ByRef Т,СпФильтр=0,ФлВсе=0)
  СтрДоб:=ИсключенияВыгрузки(Имя,"Объект");
  ФлВнешниеЭлементы:=0;
  аЭл:=Ref.рознСопоставлениеОбъектовОбмена;
  If СпФильтр<>0 Then
    If TypeStr(СпФильтр)="LIST" Then
      СтрДоб:=ИсключенияВыгрузки(Имя,"");
      аЭл:=DB("Ref."+Имя);
      аЭл.Select("~(@Parent IN СпФильтр)"+СтрДоб);
      ФлВнешниеЭлементы:=1;
    Else
      аЭл.Select("~(@Parent=Элемент)And(Объект IN СпФильтр.зЭл)"+СтрДоб);
    EndIf;
  ElseIf ФлВсе Then
    аЭл.Select("~(@Parent=Элемент)And(IsType(Объект,Ref."+Имя+"))"+СтрДоб);
  Else
    аЭл.Select("~(@Parent=Элемент)And(IsType(Объект,Ref."+Имя+"))And(@Trigger<>2)"+СтрДоб);
  EndIf;
  СпРод:=List.Create();
  aNum:=0;
  While аЭл.Next() Do
    aNum:=aNum+1;
    If aNum%10=0 Then
      Form.StatusText("Выгрузка справочника "+Имя+": "+aNum);
    EndIf;
    If _Or(ФлВнешниеЭлементы,аЭл.Lock()) Then
      Try
        If not ФлВнешниеЭлементы Then
          аЭл.SetTrigger(3);
        EndIf;
        ФлИзмененных:=ФлИзмененных+1;
        Try
          ДобавитьЭлементСправочникаВТаблицуВыгрузки(Т,?(ФлВнешниеЭлементы,аЭл,аЭл.Объект),?(ФлВнешниеЭлементы,НайтиВнешнийКод(аЭл),аЭл.ВнешнийКод));
        Except
          If not ФлВнешниеЭлементы Then
            аЭл.Unlock();
          EndIf;
          Стр:=PopError();
          Form.StatusText("Внутренняя ошибка выгрузки: "+Стр);
          MessageVisual("Внутренняя ошибка выгрузки: "+Стр+", элемент "+?(ФлВнешниеЭлементы,аЭл,аЭл.Объект),"!");
          Exit 0;
        EndTry;
      Finally
        If not ФлВнешниеЭлементы Then
          аЭл.Unlock();
        EndIf;
      EndTry;
      СпРод.Add(?(ФлВнешниеЭлементы,аЭл.Copy(),аЭл.Объект.Copy()));
    
      If Т.Size()>1000 Then
        If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
          Exit 0;
        EndIf;
        MessageVisual("Успешно выгружено элементов: "+aNum,"I");
      EndIf;
      If ФлИзмененных>50 Then
        CommitTransaction();
        ФлИзмененных:=0;
        BeginTransaction();
      EndIf;
    EndIf;
  EndDo;
  //Добавим все подчиненные справочники  
  For i:=1 To Struct.Ref(Имя).Children.Count() Do
    Имя2:=Struct.Ref(Имя).Children(i).Name;
    If Имя2="цЦены" Then
      If ((ФлСервер)And(ФлЛокальныеЦены))Or((not ФлСервер)And(not ФлЛокальныеЦены)) Then
        Continue;
      EndIf;
    ElseIf (Имя2="рознВременнаяТаблицаОбъектовОбмена")or(Имя2="рознСопоставлениеОбъектовОбмена")Or(Имя2="рознУстановкиОбменаМагазинов")Or(Имя2="рознПротоколыОбменаМагазинов") Then
      Continue;
    EndIf;
    If спПропуститьСправочники.Find(Имя2,,1)>0 Then
      Continue;
    EndIf;
    If Struct.Ref(Имя2).Trigger Then
      If not ВыгрузитьИзмененные(Имя2,Т) Then
        Exit 0;
      EndIf;
    ElseIf СпРод.Size()>0 Then
      If not ВыгрузитьИзмененные(Имя2,Т,СпРод) Then
        Exit 0;
      EndIf;
    EndIf;
  EndDo;
  Exit 1;
EndFunction

Function ВыгрузитьНесопоставленные(Имя,ByRef Т,СпФильтр,ТипФильтра="@ELEMENT")
  СтрДоб:=ИсключенияВыгрузки(Имя,"");
  аЭл:=DB("Ref."+Имя);
  If TypeStr(СпФильтр)="LIST" Then
    аЭл.Select("~("+ТипФильтра+" IN СпФильтр)"+СтрДоб);
  Else
    аЭл.Select("~("+ТипФильтра+" IN СпФильтр.зЭл)"+СтрДоб);
  EndIf;
  СпРод:=List.Create();
  aNum:=0;
  While аЭл.Next() Do
    aNum:=aNum+1;
    If aNum%10=0 Then
      Form.StatusText("Выгрузка справочника "+Имя+": "+aNum);
    EndIf;
    Try
      ДобавитьЭлементСправочникаВТаблицуВыгрузки(Т,аЭл,"");
    Except
      Стр:=PopError();
      Form.StatusText("Внутренняя ошибка выгрузки: "+Стр);
      MessageVisual("Внутренняя ошибка выгрузки: "+Стр+", элемент "+аЭл,"!");
      Exit 0;
    EndTry;
    СпРод.Add(аЭл.Copy());
    If Т.Size()>1000 Then
      If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
        Exit 0;
      EndIf;
      MessageVisual("Успешно выгружено элементов: "+aNum,"I");
    EndIf;
  EndDo;
  //Добавим все подчиненные справочники  
  For i:=1 To Struct.Ref(Имя).Children.Count() Do
    Имя2:=Struct.Ref(Имя).Children(i).Name;
    If Имя2="цЦены" Then
      If ((ФлСервер)And(ФлЛокальныеЦены))Or((not ФлСервер)And(not ФлЛокальныеЦены)) Then
        Continue;
      EndIf;
    ElseIf (Имя2="рознВременнаяТаблицаОбъектовОбмена")or(Имя2="рознСопоставлениеОбъектовОбмена")Or(Имя2="рознУстановкиОбменаМагазинов")Or(Имя2="рознПротоколыОбменаМагазинов") Then
      Continue;
    EndIf;
    If спПропуститьСправочники.Find(Имя2,,1)>0 Then
      Continue;
    EndIf;
    If not ВыгрузитьНесопоставленные(Имя2,Т,СпРод,"@PARENT") Then
      Exit 0;
    EndIf;
  EndDo;
  Exit 1;
EndFunction


Function ВыгрузкаЗапросовНаЗаполнениеСправочников(ByRef Т)
  //рознВременнаяТаблицаОбъектовОбмена: выгрузить запросы на обновление локальных элементов (ACK), режим=10,11
  аЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
  аЭл.Select("~(@Parent=Элемент)And(Режим>=10)And(Режим<20)And(Данные="""")");
  aNum:=0;
  aNum2:=0;
  While аЭл.Next() Do
    aNum:=aNum+1;
    If aNum%10=0 Then
      Form.StatusText("Выгрузка запросов на обновление: "+aNum);
    EndIf;
    Т.AddString("ACK"+Chr(1)+ПолучитьПолныйКод(аЭл.Объект)+Chr(1)+аЭл.ВнешнийКод+Chr(1)+?(аЭл.Режим=11,"1","0"));
    If Т.Size()>1000 Then
      aNum2:=aNum-aNum2;
      If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
        Exit 0;
      EndIf;
      MessageVisual("Успешно выгружено запросов на обновление: "+aNum2,"I");
      aNum2:=aNum;
    EndIf;
  EndDo;
  //рознСопоставлениеОбъектовОбмена: выгрузить запрос на обновление кодов (ACK2), когда ВнешнийКод пустой
  аЭл:=Ref.рознСопоставлениеОбъектовОбмена;
  аЭл.Select("~(@Parent=Элемент)And(ВнешнийКод="""")And(Not IsEmpty(Объект))");
  aNum:=0;
  aNum2:=0;
  While аЭл.Next() Do
    aNum:=aNum+1;
    If aNum%10=0 Then
      Form.StatusText("Выгрузка запросов на обновление (2): "+aNum);
    EndIf;
    Т.AddString("ACK2"+Chr(1)+ПолучитьПолныйКод(аЭл.Объект));
    If Т.Size()>1000 Then
      aNum2:=aNum-aNum2;
      If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
        Exit 0;
      EndIf;
      MessageVisual("Успешно выгружено запросов на обновление: "+aNum2,"I");
      aNum2:=aNum;
    EndIf;
  EndDo;
  If Т.Size()>2 Then
    aNum2:=Т.Size()-2;
    If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
      Exit 0;
    EndIf;
    MessageVisual("Успешно выгружено запросов на обновление: "+aNum2,"I");
  EndIf;
  
  Exit 1;
EndFunction


Function СопоставитьОсобыйЭлементСправочника(аЭл,ВнешнийКод2="")
  бЭл:=Ref.рознСопоставлениеОбъектовОбмена;
  If not бЭл.FindEx(3,,"~(@Parent=Элемент)And(ВнешнийКод=ВнешнийКод2)") Then
    бЭл.New();
    бЭл.Parent(Элемент);
    бЭл.Объект:=аЭл;
    бЭл.ВнешнийКод:=ВнешнийКод2;
    бЭл.Save(0,0,2);
    ФлИзмененных:=ФлИзмененных+2;
  EndIf;
EndFunction


//Тип: бит 0 -- справочники, бит 1 -- документы
Function ВыполнитьВыгрузку(Тип=3)
  //Справочники
  If Тип and 1<>0 Then
    СпОбменыДляОбновления:=Ref.рознПротоколыОбменаМагазинов.Load(0,"ПутьДрайвераОбмена",Элемент.ПутьДрайвераОбмена);
    If СпОбменыДляОбновления.Size()=0 Then
      MessageVisual("Внутренняя ошибка (1)","!");
      Exit 0;
    EndIf;
    
    //Установка триггеров элементов с установленными триггерами в справочнике рознСопоставлениеОбъектовОбмена для всех использующихся обменов, где эти элементы сопоставлены
    ФлИзмененных:=0;
    BeginTransaction();
    Try
      For i:=1 To Struct.Ref.Count() Do
        If _And(Struct.Ref(i).Trigger,Struct.Ref(i).Parents.Count()=0) Then
          If not ОбновитьТриггерыОбмена(Struct.Ref(i).Name,СпОбменыДляОбновления,?(Struct.Ref(i).Name="тмцНоменклатура",спНоменклатура,0)) Then
            Exit 0;
          EndIf;
        EndIf;
      EndDo;
    Finally
      If IsTransactionActive() Then
        CommitTransaction();
      EndIf;
    EndTry;
    
    Т:=Text.Create(1);
    Т.AddString("SF.EX.1");
    Т.AddString(ПрефиксИБ+Chr(1)+ПрефиксУдаленнойИБ);
    ФлИзмененных:=0;
    BeginTransaction();
    Try
      If (ФлСервер)And(ФлПолнаяВыгрузка) Then
        //Выгрузка кодов справочников Магазины, обоих типов цен для начального сопоставления на другой стороне
        Try
          Т.AddString("EL0"+Chr(1)+ПолучитьПолныйКод(Магазин));
          СопоставитьОсобыйЭлементСправочника(Магазин);
          If not IsEmpty(Магазин.ТипЦенПоступления) Then
            Т.AddString("EL1"+Chr(1)+ПолучитьПолныйКод(Магазин.ТипЦенПоступления));
            СопоставитьОсобыйЭлементСправочника(Магазин.ТипЦенПоступления);
          EndIf;
          If not IsEmpty(Магазин.ТипЦенРеализации) Then
            Т.AddString("EL2"+Chr(1)+ПолучитьПолныйКод(Магазин.ТипЦенРеализации));
            СопоставитьОсобыйЭлементСправочника(Магазин.ТипЦенРеализации);
          EndIf;
          If not IsEmpty(Магазин.Склад) Then
            Т.AddString("EL3"+Chr(1)+ПолучитьПолныйКод(Магазин.Склад));
            СопоставитьОсобыйЭлементСправочника(Магазин.Склад);
          EndIf;
          If not IsEmpty(Магазин.ЮрЛицо) Then
            Т.AddString("EL4"+Chr(1)+ПолучитьПолныйКод(Магазин.ЮрЛицо));
            СопоставитьОсобыйЭлементСправочника(Магазин.ЮрЛицо);
          EndIf;
          If not IsEmpty(Магазин.ДоговорРозничногоПокупателя) Then
            Т.AddString("EL5"+Chr(1)+ПолучитьПолныйКод(Магазин.ДоговорРозничногоПокупателя));
            СопоставитьОсобыйЭлементСправочника(Магазин.ДоговорРозничногоПокупателя);
          EndIf;
        Except
          Стр:=PopError();
          Form.StatusText("Внутренняя ошибка выгрузки: "+Стр);
          MessageVisual("Внутренняя ошибка выгрузки: "+Стр,"!");
          Exit 0;
        EndTry;
      EndIf;
    
      If not ВыгрузкаЗапросовНаЗаполнениеСправочников(Т) Then
        Exit 0;
      EndIf;
      
      For i:=1 To Struct.Ref.Count() Do
        ФлВсе:=0;
        If Struct.Ref(i).Name="тмцНоменклатура" Then
          ФлВсе:=(ФлСервер)And(ФлПолнаяВыгрузка);
        EndIf;
        If Struct.Ref(i).Trigger Then
          If not ВыгрузитьИзмененные(Struct.Ref(i).Name,Т,,ФлВсе) Then
            Exit 0;
          EndIf;
        EndIf;
      EndDo;
      //Для справочника тмцНоменклатура для центральной базы выгрузить все без сопоставления
      If (ФлСервер)And(ФлПолнаяВыгрузка) Then
        бТемп:=TempDB.Create("зЭл:Ref.тмцНоменклатура");
        бТемп.LoadFrom("Ref.рознСопоставлениеОбъектовОбмена","Объект->зЭл","@Parent=Элемент","@ELEMENT IN спНоменклатура");
        аТемп:=TempDB.Create("зЭл:Ref.тмцНоменклатура");
        аТемп.LoadFrom("Ref.тмцНоменклатура","@ELEMENT->зЭл","~(@ELEMENT IN спНоменклатура)And(@ELEMENT NOT IN бТемп.зЭл)");
        If not ВыгрузитьНесопоставленные("тмцНоменклатура",Т,аТемп) Then
          Exit 0;
        EndIf;
        //TODO: Добавить дополнительные справочники для полной выгрузки бух счета и пр.
      EndIf;
      If Т.Size()>2 Then
        aNum2:=Т.Size()-2;
        If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
          Exit 0;
        EndIf;
        MessageVisual("Успешно выгружено элементов: "+aNum2,"I");
      EndIf;
      If ФлПолнаяВыгрузка Then
        ДобавитьУстановку("Производилась начальная выгрузка","1",1);
      EndIf;
    Finally
      If IsTransactionActive() Then
        CommitTransaction();
      EndIf;
    EndTry;
  EndIf;
  
  //Документы
  If Тип and 2<>0 Then
    Т:=Text.Create(1);
    Т.AddString("SF.EX.1");
    Т.AddString(ПрефиксИБ+Chr(1)+ПрефиксУдаленнойИБ);

    //рознВременнаяТаблицаОбъектовОбмена: выгрузить обновление кодов (DCD), режим=100
    аЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
    аЭл.Select("@Parent,Режим",Элемент,"100");
    aNum:=0;
    aNum2:=0;
    While аЭл.Next() Do
      aNum:=aNum+1;
      If aNum%10=0 Then
        Form.StatusText("Выгрузка запросов на удаление: "+aNum);
      EndIf;
      Т.AddString("DCD"+Chr(1)+аЭл.ВнешнийКод);
      If Т.Size()>1000 Then
        aNum2:=aNum-aNum2;
        If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
          Exit 0;
        EndIf;
        MessageVisual("Успешно выгружено запросов на удаление: "+aNum2,"I");
        aNum2:=aNum;
      EndIf;
    EndDo;
    If Т.Size()>2 Then
      aNum2:=Т.Size()-2;
      If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
        Exit 0;
      EndIf;
      MessageVisual("Успешно выгружено запросов на удаление: "+aNum2,"I");
    EndIf;
    
    ФлИзмененных:=0;
    BeginTransaction();
    Try
      Чл:=0;
      For iLoop:=1 To Struct.Doc.Count() Do
        Ид:=Struct.Doc(iLoop).Name;
        Form.StatusText("Запрос по документам "+Ид+"...");
        aDoc:=DB("Doc."+Ид);
        aDoc.UseOrder("DocDate+");
        
        aDoc.Select("~(@Status>1)And(ФлагОбмена<>2)And(ФлагОбмена<>1)And(ФлагОбмена<9)And("+
          ?(not IsEmpty(ДатаНачала),"DocDate>=ДатаНачала)And(")+
          ?(ФлВсеДокументы,"ЮрЛицо IN спЮрЛица","Магазин IN спМагазины")+")And((ПрефиксУдаленнойБазы=ПрефиксУдаленнойИБ)Or(ПрефиксУдаленнойБазы=""""))");
          
        While aDoc.Next() Do
          аДок:=aDoc.Copy();
          Чл:=Чл+1;
          If Чл%5=0 Then
            Form.StatusText(""+Ид+": "+Чл+" ("+аДок.DocDate+")...");
          EndIf;
          If аДок.Lock() Then
            аДок.Reload();
            аДок.ФлагОбмена:=8;
            аДок.Save();
            Try
              ДобавитьДокументВТаблицуВыгрузки(Т,аДок);
            Except
              аДок.Unlock();
              Стр:=PopError();
              Form.StatusText("Внутренняя ошибка выгрузки: "+Стр);
              MessageVisual("Внутренняя ошибка выгрузки: "+Стр+", документ "+аДок,"!");
              Exit 0;
            EndTry;
            аДок.Unlock();
          EndIf;
          
          If Т.Size()>1000 Then
            If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
              Exit 0;
            EndIf;
            MessageVisual("Успешно выгружено документов: "+Чл,"I");
            Чл:=0;
          EndIf;
          If ФлИзмененных>50 Then
            CommitTransaction();
            ФлИзмененных:=0;
            BeginTransaction();
          EndIf;
        EndDo;
        
        Form.StatusText("Запрос по удаленным документам "+Ид+"...");
        aDoc.Select("~(@Status<2)And(ФлагОбмена=1)And("+?(ФлВсеДокументы,"ЮрЛицо IN спЮрЛица","Магазин IN спМагазины")+
          ?(not IsEmpty(ДатаНачала),")And(DocDate>=ДатаНачала")+
          ")And((ПрефиксУдаленнойБазы=ПрефиксУдаленнойИБ)Or(ПрефиксУдаленнойБазы=""""))");
        
        While aDoc.Next() Do
          If Left(aDoc.DocNum,Length(ПрефиксИБ))<>ПрефиксИБ Then
            MessageVisual("Внимание! Удаляется документ "+aDoc+", похоже, созданный в другой базе! Возможен конфликт!","!");
          EndIf;
        
          аДок:=aDoc.Copy();
          Чл:=Чл+1;
          If Чл%5=0 Then
            Form.StatusText("(Уд) "+Ид+": "+Чл+" ("+аДок.DocDate+")...");
          EndIf;
          Т.AddString("DCD"+Chr(1)+аДок.DBName()+Chr(1)+аДок.DocDate+Chr(1)+аДок.DocNum);
          
          If Т.Size()>1000 Then
            If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
              Exit 0;
            EndIf;
            MessageVisual("Успешно выгружено документов: "+Чл,"I");
            Чл:=0;
          EndIf;
          If ФлИзмененных>50 Then
            CommitTransaction();
            ФлИзмененных:=0;
            BeginTransaction();
          EndIf;
        EndDo;
      EndDo;
    Finally
      If IsTransactionActive() Then
        CommitTransaction();
      EndIf;
    EndTry;
    
    If Т.Size()>2 Then
      aNum2:=Т.Size()-2;
      If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
        Exit 0;
      EndIf;
      MessageVisual("Успешно выгружено документов: "+aNum2,"I");
    EndIf;
  EndIf;//Документы
  
  
  //Выгрузка начальных остатков
  If (ФлСервер)And((ФлВыгрузкаНачальныхОстатков)Or(ФлПолнаяВыгрузка))And(not IsEmpty(ДатаНачала)) Then
    Т:=Text.Create(1);
    Т.AddString("SF.EX.1");
    Т.AddString(ПрефиксИБ+Chr(1)+ПрефиксУдаленнойИБ);
    //Выгрузка сальдо по всем накопителям с наличием остатков
    For iLoop:=1 To Struct.Stor.Count() Do
      Фл:=0;
      For i:=1 to Struct.Stor(iLoop).Properties.Count() Do
        If Struct.Stor(iLoop).Properties(i).TotalsProp Then
          Фл:=1;
          Break;
        EndIf;
      EndDo;
      If not Фл Then
        Continue;
      EndIf;  
      Try
        ДобавитьНакопительВТаблицуВыгрузки(Т,Struct.Stor(iLoop).Name);
      Except
        Стр:=PopError();
        Form.StatusText("Внутренняя ошибка выгрузки: "+Стр);
        MessageVisual("Внутренняя ошибка выгрузки: "+Стр+", накопитель "+Struct.Stor(iLoop).Name,"!");
        Exit 0;
      EndTry;
    EndDo;
    If Т.Size()>2 Then
      aNum2:=Т.Size()-2;
      If not ОтправитьФайлНаУдаленнуюСторону(Т) Then
        Exit 0;
      EndIf;
      MessageVisual("Успешно выгружено документов: "+aNum2,"I");
    EndIf;
  EndIf;
  
  Exit 1;
EndFunction

Function ПолучитьВидИзКода(ПолныйКод)
  Exit TearStr(ПолныйКод,Chr(31));
EndFunction

Function ЭтоПапкаИзКода(ПолныйКод)
  Стр:=TearStr(ПолныйКод,Chr(30));
  If Pos(Chr(31),Стр)>0 Then
    TearStr(Стр,Chr(31));
  EndIf;
  Exit _And(Стр<>"",Стр[1]="+");
EndFunction

Function НайтиЭлементСправочникаПоВнешнемуКоду(ВнешнийКод2,ByRef ЭлСопоставления=0)
  If ВнешнийКод2="" Then
    Exit;
  EndIf;
  бЭл:=Ref.рознСопоставлениеОбъектовОбмена;
  If бЭл.FindEx(3,,"~(@Parent=Элемент)And(ВнешнийКод=ВнешнийКод2)") Then
    ЭлСопоставления:=бЭл;
    Exit бЭл.Объект;
  EndIf;
EndFunction

Function НайтиЭлементСправочникаПоЛокальномуКоду(ЛокальныйКод,Вид="")
  //<ПолныйКодИВид>: <Вид><#31><+ если папка><Код><#30><Полный код и вид родителя> -- вид родителя присутствует только, если родителей больше 1
  If ЛокальныйКод="" Then
    Exit;
  EndIf;
  ЛокальныйКод0:=ЛокальныйКод;
  Стр:=TearStr(ЛокальныйКод,Chr(30));
  If Pos(Chr(31),Стр)>0 Then
    Вид:=TearStr(Стр,Chr(31));
  EndIf;
  If Вид="" Then
    Raise "Невозможно найти родителя по коду "+ЛокальныйКод0;
  EndIf;
  бЭл:=0;
  If ЛокальныйКод<>"" Then
    If Struct.Ref(Вид).Parents.Count()=0 Then
      Raise ЛокальныйКод0+" содержит родителя, хотя в метаданных родитель отсутствует!";
    ElseIf Struct.Ref(Вид).Parents.Count()=1 Then
      бЭл:=НайтиЭлементСправочникаПоЛокальномуКоду(ЛокальныйКод,Struct.Ref(Вид).Parents(1).Name);
    Else
      бЭл:=НайтиЭлементСправочникаПоЛокальномуКоду(ЛокальныйКод);
    EndIf;
  EndIf;
  If Left(Стр,1)="+" Then
    Стр:=Mid(Стр,2);
  EndIf;
  аЭл:=DB("Ref."+Вид);
  If not IsEmpty(бЭл) Then
    If not аЭл.Find("~(@Parent=бЭл)And(Code=Стр)") Then
      Exit;
    EndIf;
  ElseIf not аЭл.Find("Code",Стр) Then
    Exit;
  EndIf;
  Exit аЭл;
EndFunction

Function НайтиРодителя(Вид,ВнешнийКод2,ЛокальныйКод2)
  //ВнешнийКод2: <Вид><#31><+ если папка><Код><#30><Полный код и вид родителя> -- вид родителя присутствует только, если родителей больше 1
  If Struct.Ref(Вид).Parents.Count()=0 Then
    Exit;
  EndIf;
  TearStr(ВнешнийКод2,Chr(30));
  ВнешнийКод:=TearStr(ВнешнийКод2,Chr(30));
  If Pos(Chr(31),ВнешнийКод)=0 Then
    If Struct.Ref(Вид).Parents.Count()<>1 Then
      Raise "Ошибка при поиске родителя для вида "+Вид;
    EndIf;
    ВнешнийКод:=Struct.Ref(Вид).Parents(1).Name+Chr(31)+ВнешнийКод;
    ВидРод:=Struct.Ref(Вид).Parents(1).Name;
  Else
    ВидРод:=ВнешнийКод;
    ВидРод:=TearStr(ВидРод,Chr(31));
  EndIf;
  ВнешнийКод2:=ВнешнийКод+?(ВнешнийКод2<>"",Chr(30)+ВнешнийКод2);

  If ЛокальныйКод2<>"" Then
    TearStr(ЛокальныйКод2,Chr(30));
    ЛокальныйКод:=TearStr(ЛокальныйКод2,Chr(30));
    If Pos(Chr(31),ЛокальныйКод)=0 Then
      If Struct.Ref(Вид).Parents.Count()<>1 Then
        Raise "Ошибка при поиске родителя для вида "+Вид;
      EndIf;
      ЛокальныйКод:=Struct.Ref(Вид).Parents(1).Name+Chr(31)+ЛокальныйКод;
    EndIf;
    ЛокальныйКод2:=ЛокальныйКод+?(ЛокальныйКод2<>"",Chr(30)+ЛокальныйКод2);
  EndIf;

  Exit НайтиИлиСоздатьЭлемент(ВнешнийКод2,ЛокальныйКод2,ВидРод,1);
EndFunction  
  
Function НайтиИлиСоздатьЭлемент(ВнешнийКод2,ЛокальныйКод2,Вид="",флПоискРодителя=0,ByRef ФлУдачно=0)
  If (ВнешнийКод2="")And(ЛокальныйКод2="") Then
    Exit;
  EndIf;
  If Вид="" Then
    If ВнешнийКод2<>"" Then
      Вид:=ВнешнийКод2;
      Вид:=TearStr(Вид,Chr(31));
    Else
      Вид:=ЛокальныйКод2;
      Вид:=TearStr(Вид,Chr(31));
    EndIf;
  EndIf;
  //Исключения
  ФлНеСоздавать:=(Вид="бухПланСчетов")or(Вид="адАдминистративныеДеления")Or(Вид="адСтраныМира")Or(Вид="бухВидыСубконто")Or(Вид="тмцЕдиницыИзмерения");
  
  аЭл:=НайтиЭлементСправочникаПоЛокальномуКоду(ЛокальныйКод2);
  If IsEmpty(аЭл) Then
    аЭл:=НайтиЭлементСправочникаПоВнешнемуКоду(ВнешнийКод2);
  EndIf;
  If not IsEmpty(аЭл) Then
    Exit аЭл;
  EndIf;
  бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
  If бЭл.Find("~(@Parent=Элемент)And(ВнешнийКод=ВнешнийКод2)And(Режим<100)") Then
    If not IsEmpty(бЭл.Объект) Then
      Exit бЭл.Объект;
    EndIf;
  EndIf;

  If _And(IsEmpty(аЭл),not ФлСервер,not ФлНеСоздавать) Then
    аЭл:=DB("Ref."+Вид);
    аЭл.New(ЭтоПапкаИзКода(ВнешнийКод2));
    If глЕстьРеквизитСправочника("Name",Вид) Then
      аЭл.Name:="...Синхронизация...";
    EndIf;  
    If Struct.Ref(Вид).Parents.Count()>0 Then
      аЭл2:=НайтиРодителя(Вид,ВнешнийКод2,ЛокальныйКод2);
      If IsEmpty(аЭл2) Then
        ФлУдачно:=0;
        Exit;
      EndIf;
      аЭл.Parent(аЭл2);
    EndIf;
    аЭл.Save();
    ФлИзмененных:=ФлИзмененных+1;
    If Struct.Ref(Вид).Trigger Then
      //Новый будет неизмененным
      аЭл.SetTrigger(2);
      ФлИзмененных:=ФлИзмененных+1;
    EndIf;
    
    бЭл2:=Ref.рознСопоставлениеОбъектовОбмена;
    бЭл2.New();
    бЭл2.Parent(Элемент);
    бЭл2.ВнешнийКод:=ВнешнийКод2;
    бЭл2.Объект:=аЭл;
    бЭл2.Save();
    бЭл2.SetTrigger(2);
    ФлИзмененных:=ФлИзмененных+2;
    If IsEmpty(бЭл) Then
      бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
      бЭл.New();
      бЭл.Parent(Элемент);
      бЭл.Вид:=Вид;
      бЭл.ВнешнийКод:=ВнешнийКод2;
      бЭл.Объект:=аЭл;
      бЭл.Режим:=10+флПоискРодителя;
      бЭл.Save();
      ФлИзмененных:=ФлИзмененных+1;
    ElseIf бЭл.Режим<>10+флПоискРодителя Then
      бЭл.Режим:=10+флПоискРодителя;
      бЭл.Save();
      ФлИзмененных:=ФлИзмененных+1;
    EndIf;
    Exit аЭл;
  EndIf;
  
  If IsEmpty(бЭл) Then
    бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
    бЭл.New();
    бЭл.Parent(Элемент);
    бЭл.Вид:=Вид;
    бЭл.ВнешнийКод:=ВнешнийКод2;
    бЭл.Режим:=10+флПоискРодителя;
    бЭл.Save();
    ФлИзмененных:=ФлИзмененных+1;
  ElseIf (бЭл.Режим=10)And(флПоискРодителя) Then
    бЭл.Режим:=1;
    бЭл.Save();
    ФлИзмененных:=ФлИзмененных+1;
  EndIf;
  ФлУдачно:=0;
EndFunction


Function ВосстановитьЗначениеРеквизита(СтрЗначение,ТипЗначения,ByRef ФлУдачно2)
  //<Значение>: <Строка дата или число> или <ENUM><#31><Вид><#31><Индекс перечисления> или <REF><#31><ПолныйКодИВид справочника> или <DOC><#31><Вид><#31><Дата документа><#6><Номер документа>
  //ТипЗначения: ANY, REF..., DOC..., ENUM..., NUMBER..., DATE..., STRING...
  If Pos(Chr(31),СтрЗначение)=0 Then
    ТипЗначения:=TearStr(ТипЗначения,",");
    ТипЗначения:=TearStr(ТипЗначения,".");
    If ТипЗначения="STRING" Then
      Exit ReplaceCharacters(СтрЗначение,Chr(15)+Chr(16),Chr(10)+Chr(13));
    ElseIf ТипЗначения="NUMBER" Then
      Exit Number(СтрЗначение);
    ElseIf ТипЗначения="DATE" Then
      Exit Date(СтрЗначение);
    EndIf;
    Exit;
  Else
    ТипЗначения:=TearStr(СтрЗначение,Chr(31));
  EndIf;
  
  If ТипЗначения="ENUM" Then
    Вид:=TearStr(СтрЗначение,Chr(31));
    If not IsEmpty(Struct.Enum(Вид)) Then
      СтрЗначение:=Number(СтрЗначение);
      If (СтрЗначение>0)And(СтрЗначение<=Struct.Enum(Вид).Values.Count()) Then
        Exit Enum.GetByIndex(Вид,СтрЗначение);
      EndIf;
    EndIf;
  ElseIf ТипЗначения="REF" Then
    Вид:=СтрЗначение;
    Вид:=TearStr(Вид,Chr(31));
    If not IsEmpty(Struct.Ref(Вид)) Then
      Exit НайтиИлиСоздатьЭлемент(СтрЗначение,"",Вид,0,ФлУдачно2);
    EndIf;
  ElseIf ТипЗначения="DOC" Then
    Вид:=TearStr(СтрЗначение,Chr(31));
    Дата:=Date(TearStr(СтрЗначение,Chr(31)));
    Номер:=TearStr(СтрЗначение,Chr(31));
    If not IsEmpty(Struct.Doc(Вид)) Then
      аДок:=DB("Doc."+Вид);
      НДата:=BegOfYear(Дата);
      КДата:=EndOfYear(Дата)+1;
      If аДок.FindEx(3,,"~(DocDate>=НДата)And(DocDate<КДата)And(DocNum=Номер)") Then
        Exit аДок;
      Else
        аДок.New();
        аДок.DocDate:=Дата;
        аДок.DocNum:=Номер;
        аДок.ПрефиксУдаленнойБазы:=ПрефиксУдаленнойИБ;
        аДок.ФлагОбмена:=2;
        аДок.Save();
        ФлИзмененных:=ФлИзмененных+1;
        Exit аДок;
      EndIf;
    EndIf;
  EndIf;
EndFunction

Function НайтиДокументПоНомеру(НомерДокумента,Разделитель=Chr(31),ФлНеСоздавать=0)
  //<Вид><#1><Дата><#1><Номер>
  Вид:=TearStr(НомерДокумента,Разделитель);
  Дата:=Date(TearStr(НомерДокумента,Разделитель));
  Номер:=TearStr(НомерДокумента,Разделитель);
  If not IsEmpty(Struct.Doc(Вид)) Then
    аДок:=DB("Doc."+Вид);
    НДата:=BegOfYear(Дата);
    КДата:=EndOfYear(Дата)+1;
    If аДок.FindEx(3,,"~(DocDate>=НДата)And(DocDate<КДата)And(DocNum=Номер)") Then
      Exit аДок;
    Else
      If ФлНеСоздавать Then
        Exit;
      EndIf;
      аДок.New();
      аДок.DocDate:=Дата;
      аДок.DocNum:=Номер;
      аДок.ПрефиксУдаленнойБазы:=ПрефиксУдаленнойИБ;
      аДок.ФлагОбмена:=2;
      аДок.Save();
      ФлИзмененных:=ФлИзмененных+1;
      Exit аДок;
    EndIf;
  EndIf;
EndFunction


Function ОбновитьРеквизитСтрочнойЧасти(аЭл,bTab,ВидСЧ,СтрРеквизит,ByRef ФлУдачно,ФлНакопитель=0)
  //<Реквизит>: <+ если период><Имя реквизита><#4><Значение реквизита>
  ФлУдачно2:=1;
  ФлДокумент:=DBTypeStr(аЭл)="DOC";
  Вид:=аЭл.DBName();
  ФлПериод:=Left(СтрРеквизит,1)="+";
  If ФлПериод Then
    СтрРеквизит:=Mid(СтрРеквизит,2);
  EndIf;
  Имя:=TearStr(СтрРеквизит,Chr(4));
  If bTab.GetColumnIndex(Имя)=0 Then
    Exit;
  EndIf;
  If ФлНакопитель Then
    Фл:=0;
    If Имя="_EXPENSE" Then
      ТипДанных:="NUMBER";
    Else
      ТипДанных:=?(ФлНакопитель,Struct.Stor(ВидСЧ).Props(Имя).DataType,Struct.Doc(Вид).LineParts(ВидСЧ).Props(Имя).DataType);
    EndIf;
  ElseIf ФлДокумент Then
    Фл:=Struct.Doc(Вид).LineParts(ВидСЧ).Props(Имя).Periodical;
    ТипДанных:=Struct.Doc(Вид).LineParts(ВидСЧ).Props(Имя).DataType;
  Else
    Фл:=Struct.Ref(Вид).LineParts(ВидСЧ).Props(Имя).Periodical;
    ТипДанных:=Struct.Ref(Вид).LineParts(ВидСЧ).Props(Имя).DataType;
  EndIf;
  If Фл Then
    If аЭл.Selected()=-1 Then
      аЭл.Save(0,1);
      ФлИзмененных:=ФлИзмененных+1;
    EndIf;
    If ФлПериод Then
      //<Дата 1><#5><Значение 1><#5><Дата 2><#5><Значение 2> (для периодических)
      Фл:=0;
      aNum:=0;
      aTab:=аЭл.LoadPeriodicalValues(ВидСЧ+"."+bTab.CurLine+"."+Имя);
      aTab.Select();
      While СтрРеквизит<>"" Do
        аДата:=Date(TearStr(СтрРеквизит,Chr(5)));
        аЗначение:=ВосстановитьЗначениеРеквизита(TearStr(СтрРеквизит,Chr(5)),ТипДанных,ФлУдачно2);
        If not aTab.Next() Then
          aTab.NewLine();
          Фл:=1;
        EndIf;
        aNum:=aNum+1;
        If not ФлУдачно2 Then
          Break;
        EndIf;
        If (aTab["_Date"]<>аДата)Or((aTab["_Value"]<>аЗначение)And(IsEmpty(aTab["_Value"])+IsEmpty(аЗначение)<2)) Then
          Фл:=1;
          aTab["_Date"]:=аДата;
          aTab["_Value"]:=аЗначение;
        EndIf;
      EndDo;
      If aNum<aTab.Size() Then
        aTab.Size(aNum);
        Фл:=1;
      EndIf;
      If (ФлУдачно2)And(Фл) Then
        аЭл.SavePeriodicalValues(ВидСЧ+"."+bTab.CurLine+"."+Имя,aTab);
        ФлИзмененных:=ФлИзмененных+aTab.Size();
      EndIf;
    Else
      //Установить на дату
      Зн:=ВосстановитьЗначениеРеквизита(СтрРеквизит,ТипДанных,ФлУдачно2);
      Зн2:=аЭл.GetValue(ВидСЧ+"."+bTab.CurLine+"."+Имя,'01.01.1981');
      If _And(ФлУдачно2,Зн2<>Зн,IsEmpty(Зн)+IsEmpty(Зн2)<2) Then
        аЭл.SetValue(ВидСЧ+"."+bTab.CurLine+"."+Имя,Зн,'01.01.1981');
        ФлИзмененных:=ФлИзмененных+1;
      EndIf;
    EndIf;
  Else
    If ФлПериод Then
      //<Дата 1><#5><Значение 1><#5><Дата 2><#5><Значение 2> (для периодических)
      Стр:="";
      While СтрРеквизит<>"" Do
        TearStr(СтрРеквизит,Chr(5));
        Стр:=TearStr(СтрРеквизит,Chr(5));
      EndDo;
      Зн:=ВосстановитьЗначениеРеквизита(Стр,ТипДанных,ФлУдачно2);
      If _And(ФлУдачно2,bTab[Имя]<>Зн,IsEmpty(bTab[Имя])+IsEmpty(Зн)<2) Then
        bTab[Имя]:=Зн;
      EndIf;
    Else
      Зн:=ВосстановитьЗначениеРеквизита(СтрРеквизит,ТипДанных,ФлУдачно2);
      If _And(ФлУдачно2,bTab[Имя]<>Зн,IsEmpty(bTab[Имя])+IsEmpty(Зн)<2) Then
        bTab[Имя]:=Зн;
      EndIf;
    EndIf;
  EndIf;
  ФлУдачно:=ФлУдачно And ФлУдачно2;  
EndFunction

Function ОбновитьРеквизит(аЭл,СтрРеквизит,ByRef ФлУдачно)
  //<Реквизит>: <+ если период><Имя реквизита><#4><Значение реквизита>
  ФлУдачно2:=1;
  ФлДокумент:=DBTypeStr(аЭл)="DOC";
  Вид:=аЭл.DBName();
  ФлПериод:=Left(СтрРеквизит,1)="+";
  If ФлПериод Then
    СтрРеквизит:=Mid(СтрРеквизит,2);
  EndIf;
  Имя:=TearStr(СтрРеквизит,Chr(4));
  If ?(ФлДокумент,IsEmpty(Struct.Doc(Вид).Props(Имя)),IsEmpty(Struct.Ref(Вид).Props(Имя))) Then
    Exit;
  EndIf;
  ТипДанных:=?(ФлДокумент,Struct.Doc(Вид).Props(Имя).DataType,Struct.Ref(Вид).Props(Имя).DataType);
  If ?(ФлДокумент,Struct.Doc(Вид).Props(Имя).Periodical,Struct.Ref(Вид).Props(Имя).Periodical) Then
    If аЭл.Selected()=-1 Then
      аЭл.Save(0,1);
      ФлИзмененных:=ФлИзмененных+1;
    EndIf;
    If ФлПериод Then
      //<Дата 1><#5><Значение 1><#5><Дата 2><#5><Значение 2> (для периодических)
      Фл:=0;
      aNum:=0;
      aTab:=аЭл.LoadPeriodicalValues(Имя);
      aTab.Select();
      While СтрРеквизит<>"" Do
        аДата:=Date(TearStr(СтрРеквизит,Chr(5)));
        аЗначение:=ВосстановитьЗначениеРеквизита(TearStr(СтрРеквизит,Chr(5)),ТипДанных,ФлУдачно2);
        If not aTab.Next() Then
          aTab.NewLine();
          Фл:=1;
        EndIf;
        aNum:=aNum+1;
        If not ФлУдачно2 Then
          Break;
        EndIf;
        If (aTab["_Date"]<>аДата)Or((aTab["_Value"]<>аЗначение)And(IsEmpty(aTab["_Value"])+IsEmpty(аЗначение)<2)) Then
          Фл:=1;
          aTab["_Date"]:=аДата;
          aTab["_Value"]:=аЗначение;
        EndIf;
      EndDo;
      If aNum<aTab.Size() Then
        aTab.Size(aNum);
        Фл:=1;
      EndIf;
      If (ФлУдачно2)And(Фл) Then
        аЭл.SavePeriodicalValues(Имя,aTab);
        ФлИзмененных:=ФлИзмененных+aTab.Size();
      EndIf;
    Else
      //Установить на дату
      Зн:=ВосстановитьЗначениеРеквизита(СтрРеквизит,ТипДанных,ФлУдачно2);
      Зн2:=аЭл.GetValue(Имя,'01.01.1981');
      If _And(ФлУдачно2,Зн2<>Зн,IsEmpty(Зн)+IsEmpty(Зн2)<2) Then
        аЭл.SetValue(Имя,Зн,'01.01.1981');
        ФлИзмененных:=ФлИзмененных+1;
      EndIf;
    EndIf;
  Else
    If ФлПериод Then
      //<Дата 1><#5><Значение 1><#5><Дата 2><#5><Значение 2> (для периодических)
      Стр:="";
      While СтрРеквизит<>"" Do
        TearStr(СтрРеквизит,Chr(5));
        Стр:=TearStr(СтрРеквизит,Chr(5));
      EndDo;
      Зн:=ВосстановитьЗначениеРеквизита(Стр,ТипДанных,ФлУдачно2);
      If _And(ФлУдачно2,аЭл.GetValue(Имя)<>Зн,IsEmpty(аЭл.GetValue(Имя))+IsEmpty(Зн)<2) Then
        аЭл.SetValue(Имя,Зн);
      EndIf;
    Else
      Зн:=ВосстановитьЗначениеРеквизита(СтрРеквизит,ТипДанных,ФлУдачно2);
      If _And(ФлУдачно2,аЭл.GetValue(Имя)<>Зн,IsEmpty(аЭл.GetValue(Имя))+IsEmpty(Зн)<2) Then
        аЭл.SetValue(Имя,Зн);
      EndIf;
    EndIf;
  EndIf;
  ФлУдачно:=ФлУдачно And ФлУдачно2;
EndFunction
  


//аЭл = 1 -- особый справочник без синхронизации
//Функция вызывается как для справочников, так и для документов
Function ЗагрузитьИлиОбновитьРеквизиты(ByRef аЭл,СтрРеквизиты,ByRef ФлУдачно)

  Function ПолучитьПростойРеквизит(СтрРеквизиты,ИмяРеквизита,ByRef СтрЗначение)
    Стр0:=СтрРеквизиты;
    Стр0:=TearStr(Стр0,Chr(2));
    //<Реквизиты>: <Реквизит 1><#3><Реквизит 2><#3>...
    //<Реквизит>: <+ если период><Имя реквизита><#4><Значение реквизита>
    While Стр0<>"" Do
      СтрЗначение:=TearStr(Стр0,Chr(3));
      Стр:=TearStr(СтрЗначение,Chr(4));
      If Стр="" Then
        Continue;
      EndIf;
      If Стр[1]="+" Then
        If Mid(Стр,2)=ИмяРеквизита Then
          Exit 1;
        EndIf;
      ElseIf Стр=ИмяРеквизита Then
        Exit 1;
      EndIf;
    EndDo;
    Exit 0;
  EndFunction
  
  ФлДокумент:=DBTypeStr(аЭл)="DOC";
  //СтрРеквизиты: <ПолныйКодИВид><#1><ПолныйУдаленныйКод><#1><КодПапки><#1><Наименование><#1><Флаги><#1><Доп.реквизиты для сопоставления><#2><Реквизиты><#2><Строчная часть 1><#2><Строчная часть 2>...
  //              <Вид документа><#1><Дата и время документа><#1><Номер документа><#1><Статус документа><#2><Реквизиты заголовка><#2><Строчная часть или накопитель 1><#2><Строчная часть или накопитель 2>...
  СтрРеквизиты0:=СтрРеквизиты;
  ФлУдачно:=1;
  If not ФлДокумент Then
    Стр:=TearStr(СтрРеквизиты,Chr(2));
    ВнешнийКод2:=TearStr(Стр,Chr(1));
    ЛокальныйКод:=TearStr(Стр,Chr(1));
    Вид:=ПолучитьВидИзКода(ВнешнийКод2);
    аРодитель:=НайтиРодителя(Вид,ВнешнийКод2,ЛокальныйКод);
    If _And(Struct.Ref(Вид).Parents.Count()>0,IsEmpty(аРодитель)) Then
      Exit;
    EndIf;
    КодПапки:=TearStr(Стр,Chr(1));
    аПапка:=НайтиИлиСоздатьЭлемент(КодПапки,"",Вид,0,ФлУдачно);
    Наименование:=ReplaceCharacters(TearStr(Стр,Chr(1)),Chr(15)+Chr(16),Chr(10)+Chr(13));
    Флаги:=Number(TearStr(Стр,Chr(1)));
    ФлУдален:=Флаги And 1<>0;
  Else
    Стр:=TearStr(СтрРеквизиты,Chr(2));
    Вид:=TearStr(Стр,Chr(1));
    Дата:=Date(TearStr(Стр,Chr(1)));
    TearStr(Стр,Chr(1));
    СтатусДокумента:=Number(TearStr(Стр,Chr(1)));
    ФлУдален:=СтатусДокумента=1;
    If аЭл.DocDate<>Дата Then
      If GetYear(Дата)<>GetYear(аЭл.DocDate) Then
        Raise "Документ "+аЭл+" пришел в выгрузке с датой с другим годом!";
      EndIf;
      аЭл.DocDate:=Дата;
    EndIf;
  EndIf;
  
  ФлСоздатьСопоставление:=аЭл<>1;
  //Исключения
  If Вид="тмцСвойстваОсновныхСредств" Then
    //Один у родителя
    аЭл:=Ref.тмцСвойстваОсновныхСредств;
    If not аЭл.Find("@Parent",аРодитель) Then
      аЭл.New();
      аЭл.Parent(аРодитель);
      ФлИзмененных:=ФлИзмененных+1;
    EndIf;
  ElseIf Вид="цНаценкиНаГруппы" Then
    //Очищается один раз за загрузку
    аЭл:=Ref.цНаценкиНаГруппы;
    If ТЭлементыИсключения.FindAndGoto(аРодитель,,"Элемент")=0 Then
      ТЭлементыИсключения.AddLine("Элемент",аРодитель);
      аЭл.MassMark(1,"~(@Parent=аРодитель)");
      ФлИзмененных:=ФлИзмененных+аЭл.ElementsNumber("~(@Parent=аРодитель)");
    EndIf;
    If аЭл.Find("~(@Parent=аРодитель)And(@STATUS=1)") Then
      аЭл.Mark(0);
      ФлИзмененных:=ФлИзмененных+1;
    Else
      аЭл.New();
      аЭл.Parent(аРодитель);
    EndIf;
  ElseIf Вид="цЦены" Then
    //Найти ТипЦен в СтрРеквизиты
    СтрЗначение:="";
    If _Or(not ПолучитьПростойРеквизит(СтрРеквизиты,"ТипЦен",СтрЗначение),_And(СтрЗначение<>"",TearStr(СтрЗначение,Chr(31))<>"REF")) Then
      Raise "В реквизитах справочника цЦены отсутствует ТипЦен или реквизит имеет неверный тип";
    EndIf;
    If СтрЗначение="" Then
      Exit;
    EndIf;
    //СтрЗначение: <REF><#31><ПолныйКодИВид справочника>
    бЭл:=НайтиИлиСоздатьЭлемент(СтрЗначение,"","цТипыЦен",1);
    If IsEmpty(бЭл) Then
      Exit;//Невозможно загрузить сейчас
    EndIf;
    
    аЭл:=Ref.цЦены;
    If Not аЭл.Find("~(@Parent=аРодитель)And(ТипЦен=бЭл)") Then
      аЭл.New();
      аЭл.Parent(аРодитель);
      аЭл.ТипЦен:=бЭл;
    EndIf;
  ElseIf Вид="тмцМаркировкаПозиций" Then
    //Также требуется флСостояние
    СтрЗначение:="";
    If _Or(not ПолучитьПростойРеквизит(СтрРеквизиты,"флСостояние",СтрЗначение),Pos(Chr(31),СтрЗначение)>0) Then
      Raise "В реквизитах справочника тмцМаркировкаПозиций отсутствует флСостояние или реквизит имеет неверный тип";
    EndIf;
    аСостояние:=Number(СтрЗначение);
    аЭл:=Ref.тмцМаркировкаПозиций;
    If Not аЭл.Find("~(@Parent=аРодитель)And(флСостояние=аСостояние)") Then
      аЭл.New();
      аЭл.Parent(аРодитель);
      аЭл.флСостояние:=аСостояние;
    EndIf;
  ElseIf Вид="тмцШтрихкоды" Then
    аЭл:=Ref.тмцШтрихкоды;
    If Not аЭл.Find("~(@Parent=аРодитель)And(Name=Наименование)") Then
      аЭл.New();
      аЭл.Parent(аРодитель);
      аЭл.Name:=Наименование;
    EndIf;
  ElseIf Вид="тмцЕдиницыИзмерения" Then
    аЭл:=Ref.тмцЕдиницыИзмерения;
    If Not аЭл.Find("~(Name=Наименование)") Then
      аЭл.New();
      аЭл.Name:=Наименование;
    EndIf;
  ElseIf Вид="бухПланСчетов" Then
    //Всегда ищем по коду
    //ВнешнийКод2: <Вид><#31><+ если папка><Код>
    Код:=ВнешнийКод2;
    TearStr(Код,Chr(31));
    ФлПапка:=Left(Код,1)="+";
    If ФлПапка Then
      Код:=Mid(Код,2);
    EndIf;
    
    аЭл:=Ref.бухПланСчетов;
    If Not аЭл.Find("Code",Код) Then
      аЭл.New(ФлПапка);
      аЭл.Code:=Код;
      аЭл.Name:=Наименование;
    EndIf;
  ElseIf (Вид="адАдминистративныеДеления")Or(Вид="адСтраныМира")Or(Вид="бухВидыСубконто") Then
    //Всегда ищем по наименованию
    аЭл:=DB("Ref."+Вид);
    If Not аЭл.Find("Name",Наименование) Then
      аЭл.New();
      аЭл.Name:=Наименование;
    EndIf;
  ElseIf Вид="адГорода" Then
    Exit;//TODO: Нужно ли поддерживать загрузку/выгрузку?
  ElseIf Вид="адУлицы" Then
    Exit;//TODO: Нужно ли поддерживать загрузку/выгрузку?
  ElseIf Вид="общДополнительныеСвойства" Then
    Exit;//TODO: Нужно ли поддерживать загрузку/выгрузку?
  ElseIf аЭл=1 Then
    Raise "Неподдерживаемый особый справочник: "+Вид+"! Внутренняя ошибка!";
  EndIf;
  //Исключения

  If _And(аЭл.Selected()>0,not аЭл.Lock()) Then
    //Если не успешно, добавить или обновить запись с режимом 10 или 110
    бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
    If not бЭл.Find("~(@Parent=Элемент)And(Объект=аЭл)And(Режим<150)") Then
      бЭл.New();
      бЭл.Parent(Элемент);
      бЭл.Объект:=аЭл;
      бЭл.Вид:=Вид;
      бЭл.ВнешнийКод:=?(not ФлДокумент,ВнешнийКод2,"");
      бЭл.Данные:=СтрРеквизиты0;
      бЭл.Режим:=?(ФлДокумент,110,10);
      бЭл.Save();
      ФлИзмененных:=ФлИзмененных+1;
    ElseIf бЭл.Данные<>СтрРеквизиты0 Then
      бЭл.Данные:=СтрРеквизиты0;
      бЭл.Save();
      ФлИзмененных:=ФлИзмененных+1;
    EndIf;
    Exit; 
  EndIf;
  Try
    If аЭл.Selected()>0 Then
      аЭл.Reload();
    EndIf;
    If _And(not ФлДокумент,Struct.Ref(Вид).Parents.Count()>0,аЭл.Parent()<>аРодитель) Then
      аЭл.Parent(аРодитель);
    EndIf;
    If _And(not ФлДокумент,глЕстьРеквизитСправочника("Name",Вид),аЭл.Name<>Наименование) Then
      аЭл.Name:=Наименование;
    EndIf;
    If ФлУдачно Then
      If not ФлДокумент Then
        If _Or(IsEmpty(аПапка)<>IsEmpty(аЭл.Folder()),_And(IsEmpty(аПапка)+IsEmpty(аЭл.Folder())=0,аПапка<>аЭл.Folder())) Then
          аЭл.Folder(аПапка);
        EndIf;
      EndIf;
      //Заполнение реквизитов
      //СтрРеквизиты: <Реквизиты><#2><Строчная часть 1><#2><Строчная часть 2>...
      //<Реквизиты>: <Реквизит 1><#3><Реквизит 2><#3>...
      Стр:=TearStr(СтрРеквизиты,Chr(2));
      While Стр<>"" Do
        Стр2:=TearStr(Стр,Chr(3));
        ОбновитьРеквизит(аЭл,Стр2,ФлУдачно);
      EndDo;
      
      //Строчные части
      //Строчная часть: LP<#1><Имя строчной части><#1><Количество строк><#1><Строка 1><#1><Строка 1>
      //Накопитель:     STOR<#1><Имя><#1><Количество строк><#1><Строка 1><#1><Строка 1>
      спНакопители:=List.Create();
      While СтрРеквизиты<>"" Do
        Стр:=TearStr(СтрРеквизиты,Chr(2));
        СтрТип:=TearStr(Стр,Chr(1));
        ФлНакопитель:=0;
        If СтрТип="LP" Then
          ВидСЧ:=TearStr(Стр,Chr(1));
          TearStr(Стр,Chr(1));
          If _And(ФлДокумент,IsEmpty(Struct.Doc(Вид).LineParts(ВидСЧ))) Then
            Continue;
          ElseIf _And(not ФлДокумент,IsEmpty(Struct.Ref(Вид).LineParts(ВидСЧ))) Then
            Continue;
          EndIf;
          aTab:=аЭл.LineParts(ВидСЧ);
        ElseIf СтрТип<>"STOR" Then
          Raise "Неизвестный тип строчной части: "+СтрТип;
        Else
          ВидСЧ:=TearStr(Стр,Chr(1));
          TearStr(Стр,Chr(1));
          aTab:=спНакопители[ВидСЧ];
          If isEmpty(aTab) Then
            aTab:=аЭл.InitStorageTab(ВидСЧ);
            спНакопители[ВидСЧ]:=aTab;
          EndIf;  
          ФлНакопитель:=1;
        EndIf;
        
        iNum:=0;
        aTab.Select();
        While Стр<>"" Do
          Стр2:=TearStr(Стр,Chr(1));
          If not aTab.Next() Then
            aTab.NewLine();
          EndIf;
          iNum:=iNum+1;
          While Стр2<>"" Do
            Стр3:=TearStr(Стр2,Chr(3));
            ОбновитьРеквизитСтрочнойЧасти(аЭл,aTab,ВидСЧ,Стр3,ФлУдачно,ФлНакопитель);
          EndDo;
        EndDo;
        If iNum<aTab.Size() Then
          aTab.Size(iNum);
        EndIf;
      EndDo;
    EndIf;
    If (аЭл.Selected()=-1)Or(аЭл.Selected()=2) Then
      аЭл.Save();
      ФлИзмененных:=ФлИзмененных+1;
    EndIf;
    If _Or(_And(not ФлДокумент,ФлУдален<>аЭл.Status()),
        _And(ФлДокумент,(СтатусДокумента=1)<>(аЭл.Status()=1))) Then
      If аЭл.Status()=1 Then
        аЭл.Mark(0);
      Else
        аЭл.Mark(1);
      EndIf;
      ФлИзмененных:=ФлИзмененных+1;
    EndIf;
    
    If not ФлДокумент Then
      If Struct.Ref(Вид).Trigger Then
        //Мы обновили свойства элемента, все предыдущие утеряны, снять пометку изменения, если была
        аЭл.SetTrigger(2);
        ФлИзмененных:=ФлИзмененных+1;
      EndIf;
    
      If not ФлУдачно Then
        бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
        If not бЭл.Find("~(@Parent=Элемент)And(ВнешнийКод=ВнешнийКод2)And(Режим<20)") Then
          If ФлСервер Then
            //Для сервера требуется создать запись 10
            бЭл.New();
            бЭл.Parent(Элемент);
            бЭл.Name:=Наименование;
            бЭл.Вид:=Вид;
            бЭл.ВнешнийКод:=ВнешнийКод2;
            бЭл.Данные:=СтрРеквизиты0;
            бЭл.Режим:=10;
            бЭл.Объект:=?(аЭл.Selected()>0,аЭл,0);
            бЭл.Save();
            ФлИзмененных:=ФлИзмененных+1;
          EndIf;
        ElseIf бЭл.Данные<>СтрРеквизиты0 Then
          бЭл.Name:=Наименование;
          бЭл.Данные:=СтрРеквизиты0;
          бЭл.Объект:=?(аЭл.Selected()>0,аЭл,0);
          бЭл.Save();
          ФлИзмененных:=ФлИзмененных+1;
        EndIf;
      EndIf;
      If (ФлСоздатьСопоставление)And(аЭл.Selected()>0) Then
        бЭл:=Ref.рознСопоставлениеОбъектовОбмена;
        If not бЭл.Find("~(@Parent=Элемент)And(ВнешнийКод=ВнешнийКод2)") Then
          бЭл.New();
          бЭл.Parent(Элемент);
          бЭл.ВнешнийКод:=ВнешнийКод2;
          бЭл.Объект:=аЭл;
          бЭл.Save();
          ФлИзмененных:=ФлИзмененных+1;
        ElseIf бЭл.Объект<>аЭл Then
          бЭл.Объект:=аЭл;
          бЭл.Save();
          ФлИзмененных:=ФлИзмененных+1;
        EndIf;
        //Мы обновили свойства элемента, все предыдущие утеряны, снять пометку изменения, если была
        бЭл.SetTrigger(2);
        ФлИзмененных:=ФлИзмененных+1;
      EndIf;
    ElseIf ФлУдачно Then
      If СтатусДокумента>1 Then
        CommitTransaction();
        ФлИзмененных:=0;
      
        ФлОк:=0;
        BeginTransaction();
        Try
          аЭл.ClearStorages();
          аЭл.PublishedMark(СтатусДокумента-1);
          For i:=1 To спНакопители.Size() Do
            aTab:=спНакопители.Get(i);
            ИмяНак:=спНакопители.GetName(i);
            If aTab.Size()>0 Then
              аЭл.SaveStorage(ИмяНак,aTab,аЭл.DocDate);
            EndIf;  
          EndDo;
          аЭл.Save();
          ФлОк:=1;
        Finally
          SuppressException();
          Стр:=PopError();
          If ФлОк Then
            CommitTransaction();
          Else
            If not IsEmpty(Стр) Then
              MessageVisual(Стр,"!");
            EndIf;  
            RollbackTransaction();
            ФлУдачно:=0;
          EndIf;
        EndTry;
        
        BeginTransaction();
      EndIf;
      If ФлУдачно Then
        //Если успешно, удалить запись с режимом 110
        бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
        If бЭл.FindEx(3,,"~(@Parent=Элемент)And(Объект=аЭл)And(Режим=110)") Then
          бЭл.DeletePhysically();
          ФлИзмененных:=ФлИзмененных+1;
        EndIf;
      EndIf;
    Else
      //Если не успешно, добавить или обновить запись с режимом 0
      бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
      If not бЭл.Find("~(@Parent=Элемент)And(Объект=аЭл)And(Режим=110)") Then
        бЭл.New();
        бЭл.Parent(Элемент);
        бЭл.Вид:=Вид;
        бЭл.Данные:=СтрРеквизиты0;
        бЭл.Режим:=110;
        бЭл.Объект:=аЭл;
        бЭл.Save();
        ФлИзмененных:=ФлИзмененных+1;
      ElseIf бЭл.Данные<>СтрРеквизиты0 Then
        бЭл.Данные:=СтрРеквизиты0;
        бЭл.Save();
        ФлИзмененных:=ФлИзмененных+1;
      EndIf;
    EndIf;
  Finally
    If аЭл.IsLocked()=1 Then
      аЭл.Unlock();
    EndIf;
  EndTry;
EndFunction

Function ЗагрузитьИлиОбновитьДокументОстатков(аДок,СтрКоманда0,ByRef ФлУдачно)
  ВидНакопителя:="";
  ФлУдачно:=0;
  Try
    //<Вид накопителя><#1><Дата остатков><#2><#2><Движения накопителя>
    СтрКоманда:=СтрКоманда0;
    СтрКоманда:=TearStr(СтрКоманда,Chr(2));
    ВидНакопителя:=TearStr(СтрКоманда,Chr(1));
    СтрДвижения:=СтрКоманда0;
    TearStr(СтрДвижения,Chr(2));
    TearStr(СтрДвижения,Chr(2));
    СтрДвижения:=TearStr(СтрДвижения,Chr(2));

    If аДок.Lock() Then
      if аДок.Status()=1 Then
        аДок.Mark(0);
        ФлИзмененных:=ФлИзмененных+1;
      Elseif аДок.Status()>1 Then
        CommitTransaction();
        ФлИзмененных:=0;
        
        BeginTransaction();
        сп:=List.Create();
        сп["УровеньФорсирования"]:=1;
        сп["ИгнорироватьГлобальнуюДатуЗапрета"]:=1;
        глРаботаетРобот:=1;
        Try
          аДок.Unpublish(сп);
        Except  
          глРаботаетРобот:=0;
          RollbackTransaction();
          BeginTransaction();
          MessageVisual("Невозможно отменить обработку: "+аДок,"!");
          Exit;
        EndTry;
        глРаботаетРобот:=0;
        CommitTransaction();
        BeginTransaction();
      EndIf;
      аДок.Автор:=глПользователь;
      аДок.КодОперации:=Enum.коУниверсальныйДокумент.УниверсальныйДокумент;
      аДок.Магазин:=Магазин;
      аДок.ЮрЛицо:=ЮрЛицо;
      аДок.ФлагОбмена:=9;
      аДок.Комментарий:="Остатки по накопителю "+ВидНакопителя;
      
      TearStr(СтрДвижения,Chr(1));
      СпАктивы:=List.Create();
      For i:=1 To Struct.Stor(ВидНакопителя).Props.Count() Do
        If Struct.Stor(ВидНакопителя).Props(i).Asset Then
          СпАктивы.Add(Struct.Stor(ВидНакопителя).Props(i).Name);
        EndIf;
      EndDo;
      ФлУдачно2:=1;
      aTab:=аДок.LineParts("Содержание");
      aTab.ClearLines();
      While СтрДвижения<>"" Do
        Стр:=TearStr(СтрДвижения,Chr(1));
        aTab.NewLine();
        aTab.ИмяНакопителя:=ВидНакопителя;
        aTab.ЗнакДвижения:="+";
        СтрАккум:="";
        СтрАктивы:="";
        While Стр<>"" Do
          Стр2:=TearStr(Стр,Chr(3));
          Имя:=TearStr(Стр2,Chr(4));
          If Имя="_EXPENSE" Then
            aTab.ЗнакДвижения:=?(Number(Стр2)=1,"-","+");
            Continue;
          EndIf;
          Зн:=ВосстановитьЗначениеРеквизита(Стр2,Struct.Stor(ВидНакопителя).Props(Имя).DataType,ФлУдачно2);
          If СпАктивы.Find(Имя)>0 Then
            AppendStringToBufferedString(СтрАктивы,?(СтрАктивы<>"","###")+Имя+"@"+глЗашифроватьЗначениеУД(Зн));
          Else
            AppendStringToBufferedString(СтрАккум,?(СтрАккум<>"","###")+Имя+"@"+глЗашифроватьЗначениеУД(Зн));
          EndIf;
        EndDo;
        aTab.Аккумуляторы:=СтрАккум;
        aTab.Активы:=СтрАктивы;
      EndDo;
      
      If (aTab.Size()>0)And(ФлУдачно2) Then
        CommitTransaction();
        ФлИзмененных:=0;
      
        BeginTransaction();
        сп:=List.Create();
        сп["УровеньФорсирования"]:=1;
        сп["ИгнорироватьГлобальнуюДатуЗапрета"]:=1;
        глРаботаетРобот:=1;
        Try
          аДок.Publish(сп);
        Except  
          глРаботаетРобот:=0;
          RollbackTransaction();
          BeginTransaction();
          MessageVisual("Невозможно обработать документ: "+аДок,"!");
          Exit;
        EndTry;
        глРаботаетРобот:=0;
        CommitTransaction();
        BeginTransaction();
      EndIf;
  
      ФлУдачно:=ФлУдачно2;
      аДок.UnLock();
    EndIf;
  Finally
    If not ФлУдачно Then
      бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
      If not бЭл.Find("~(@Parent=Элемент)And(Объект=аДок)And(Режим=111)") Then
        бЭл.New();
        бЭл.Parent(Элемент);
        бЭл.Вид:=ВидНакопителя;
        бЭл.Данные:=СтрКоманда0;
        бЭл.Объект:=аДок;
        бЭл.Режим:=111;
        бЭл.Save();
        ФлИзмененных:=ФлИзмененных+1;
      ElseIf бЭл.Данные<>СтрКоманда0 Then
        бЭл.Данные:=СтрКоманда0;
        бЭл.Save();
        ФлИзмененных:=ФлИзмененных+1;
      EndIf;
    EndIf;
  EndTry;
EndFunction


//ЭлементПротокола -- должен быть уже заблокирован
Function ОбработатьОчередьВОжидании(ЭлементПротокола)
  Элемент:=ЭлементПротокола;
  бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
  бЭл.Select("~(@Parent=Элемент)And(Данные<>"""")And(Режим<>100)And(not IsEmpty(Объект))");
  ФлИзмененных:=0;
  BeginTransaction();
  Try
    aNum:=0;
    While бЭл.Next() Do
      aNum:=aNum+1;
      If aNum%10=0 Then
        Form.StatusText("Обработка очереди загрузки: "+aNum);
      EndIf;
      ФлУдачно:=1;
      If бЭл.Режим<111 Then
        ЗагрузитьИлиОбновитьРеквизиты(бЭл.Объект,бЭл.Данные,ФлУдачно);
      ElseIf бЭл.Режим=111 Then
        ЗагрузитьИлиОбновитьДокументОстатков(бЭл.Объект,бЭл.Данные,ФлУдачно);          
      EndIf;
      If ФлУдачно Then
        бЭл.DeletePhysically();
        ФлИзмененных:=ФлИзмененных+1;
      EndIf;
      
      If ФлИзмененных>50 Then
        CommitTransaction();
        ФлИзмененных:=0;
        BeginTransaction();
      EndIf;
    EndDo;
    Exit 1;
  Finally
    If IsTransactionActive() Then
      CommitTransaction();
    EndIf;
  EndTry;
EndFunction


Function ВыполнитьЗагрузку(ФлТолькоЗагрузка=0)
  //Создаем таблицу магазинов по их префиксу
  ТМагазиныПоПрефиксу:=Tab.Create("Префикс,Магазин");
  СпОбменыДляОбновления:=Ref.рознПротоколыОбменаМагазинов.Load(0,"@Status,ПутьДрайвераОбмена",0,Элемент.ПутьДрайвераОбмена);
  For i:=1 To СпОбменыДляОбновления.Size() Do
    If СпОбменыДляОбновления[i].УникальныйИдентификатор<>"" Then
      If ТМагазиныПоПрефиксу.FindAndGoto(СпОбменыДляОбновления[i].УникальныйИдентификатор,,"Префикс")>0 Then
        If ТМагазиныПоПрефиксу.Магазин<>СпОбменыДляОбновления[i].Parent() Then
          Raise "Найдено более одного магазина с одинаковым префиксом ИБ: "+ТМагазиныПоПрефиксу.Магазин+" и "+СпОбменыДляОбновления[i].Parent();
        EndIf;
      Else
        ТМагазиныПоПрефиксу.AddLine("Префикс,Магазин",СпОбменыДляОбновления[i].УникальныйИдентификатор,СпОбменыДляОбновления[i].Parent());
      EndIf;
    EndIf;
  EndDo;
  
  ТЭлементыИсключения:=Tab.Create("Элемент");
  
  Тответ:=Text.Create(1);
  Тответ.AddString("SF.EX.1");
  Тответ.AddString(ПрефиксИБ+Chr(1)+ПрефиксУдаленнойИБ);
  ФлБылиНовыеЭлементы:=0;
  
  Ф:=File.Create();
  Ф.FindOpen(AddBackSlash(ЛокальнаяПапка)+"sfex_"+ПрефиксИБ+"_*.*");
  While Ф.FindNextFile()<>"" Do
    Файл:=AddBackSlash(ЛокальнаяПапка)+Ф.FileName;
    if Ф.IsDirectory(Файл) Then
      Continue;
    EndIf;
    Расш:=Uppercase(GetExt(Файл));
    If Расш="ZIP" Then
      //TODO: распаковать
      Continue;
    ElseIf Расш<>"BIN" Then
      Continue;
    Else
      Т:=Text.Create();
      Т.Load(Файл,0);
    EndIf;
    
    If Т.Size()<2 Then
      Continue;
    EndIf;
    If Т.GetLine(1)<>"SF.EX.1" Then
      Continue;
    EndIf;
    Стр:=Т.GetLine(2);
    ПрефиксИБ2:=TearStr(Стр,Chr(1));
    ПрефиксУдаленнойИБ2:=TearStr(Стр,Chr(1));
    //ПрефиксИБ+Chr(1)+ПрефиксУдаленнойИБ
    If ПрефиксУдаленнойИБ2<>ПрефиксИБ Then
      Raise "Файл "+Файл+" предназначен для другой БД с префиксом "+ПрефиксУдаленнойИБ2;
    EndIf;
    //Ищем требуемый магазин для загрузки
    If ТМагазиныПоПрефиксу.FindAndGoto(ПрефиксИБ2,,"Префикс")=0 Then
      Raise "Не найден локальный магазин с префиксом "+ПрефиксИБ2;
    EndIf;
    ИмяФайла:=GetFileName(Файл);
    Магазин:=ТМагазиныПоПрефиксу.Магазин;
    ФлИзмененных:=0;
    BeginTransaction();
    Try
      For iLoop:=3 To Т.Size() Do
        СтрКоманда:=Т.GetLine(iLoop);
        If СтрКоманда="" Then
          Continue;
        EndIf;
        Form.StatusText("Загрузка "+ИмяФайла+", "+iLoop+" из "+Т.Size());
        Стр:=TearStr(СтрКоманда,Chr(1));
        If Стр="ELM" Then
          //Загрузка элемента справочника
          //<ELM><#1><ПолныйУдаленныйКодИВид><#1><ПолныйЛокальныйКодИВид><#1><КодПапки><#1><Наименование><#1><Флаги><#1><Доп.реквизиты для сопоставления><#2><Реквизиты><#2><Строчная часть 1><#2><Строчная часть 2>...
          СтрКоманда0:=СтрКоманда;
          ВнешнийКод2:=TearStr(СтрКоманда,Chr(1));
          ЛокальныйКод:=TearStr(СтрКоманда,Chr(1));
          Вид:=ПолучитьВидИзКода(ВнешнийКод2);
          ФлБезСинхронизации:=спСправочникиБезЭлементовСинхронизации.Find(Вид,,1)>0;
          
          If not ФлБезСинхронизации Then
            аЭл:=НайтиЭлементСправочникаПоЛокальномуКоду(ЛокальныйКод);
            If IsEmpty(аЭл) Then
              аЭл:=НайтиЭлементСправочникаПоВнешнемуКоду(ВнешнийКод2);
            EndIf;
            If _And(IsEmpty(аЭл),not ФлСервер) Then
              аЭл:=DB("Ref."+Вид);
              аЭл.New(ЭтоПапкаИзКода(ВнешнийКод2));
            EndIf;
          Else
            аЭл:=1;
          EndIf;
          If IsEmpty(аЭл) Then
            //Поместить реквизиты, сохранить
            СтрКоманда:=СтрКоманда0;
            СтрКоманда:=TearStr(СтрКоманда,Chr(2));
            TearStr(СтрКоманда,Chr(1));
            TearStr(СтрКоманда,Chr(1));
            TearStr(СтрКоманда,Chr(1));
            Наименование:=ReplaceCharacters(TearStr(СтрКоманда,Chr(1)),Chr(15)+Chr(16),Chr(10)+Chr(13));
            бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
            If not бЭл.Find("~(@Parent=Элемент)And(ВнешнийКод=ВнешнийКод2)And(Режим<20)") Then
              бЭл.New();
              бЭл.Parent(Элемент);
              бЭл.Name:=Наименование;
              бЭл.Вид:=Вид;
              бЭл.ВнешнийКод:=ВнешнийКод2;
              бЭл.Данные:=СтрКоманда0;
              бЭл.Режим:=10;
              бЭл.Save();
              ФлИзмененных:=ФлИзмененных+1;
            ElseIf бЭл.Данные<>СтрКоманда0 Then
              бЭл.Name:=Наименование;
              бЭл.Данные:=СтрКоманда0;
              бЭл.Save();
              ФлИзмененных:=ФлИзмененных+1;
            EndIf;
            Тответ.AddString("ACP"+Chr(1)+ВнешнийКод2);
          Else
            ФлБылиНовыеЭлементы:=1;
            ФлУдачно:=1;
            ЗагрузитьИлиОбновитьРеквизиты(аЭл,СтрКоманда0,ФлУдачно);
            If аЭл<>1 Then
              If ФлУдачно Then
                бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
                If бЭл.FindEx(3,,"~(@Parent=Элемент)And(Объект=аЭл)And(Режим>=10)And(Режим<20)") Then
                  бЭл.DeletePhysically();
                  ФлИзмененных:=ФлИзмененных+1;
                ElseIf бЭл.FindEx(3,,"~(@Parent=Элемент)And(ВнешнийКод=ВнешнийКод2)And(Режим>=10)And(Режим<20)") Then
                  бЭл.DeletePhysically();
                  ФлИзмененных:=ФлИзмененных+1;
                EndIf;
              EndIf;
              Тответ.AddString("ACD"+Chr(1)+ПолучитьПолныйКод(аЭл)+Chr(1)+ВнешнийКод2);
            EndIf;
          EndIf;
        ElseIf Left(Стр,2)="EL" Then
          //Особое начальное сопоставление
          //<EL?><#1><ПолныйКодИВид>
          ВнешнийКод2:=TearStr(СтрКоманда,Chr(1));
          If Стр="EL0" Then
            СопоставитьОсобыйЭлементСправочника(Магазин,ВнешнийКод2);
            Тответ.AddString("ACD"+Chr(1)+ПолучитьПолныйКод(Магазин)+Chr(1)+ВнешнийКод2);
          ElseIf Стр="EL1" Then
            If not IsEmpty(Магазин.ТипЦенПоступления) Then
              СопоставитьОсобыйЭлементСправочника(Магазин.ТипЦенПоступления,ВнешнийКод2);
              Тответ.AddString("ACD"+Chr(1)+ПолучитьПолныйКод(Магазин.ТипЦенПоступления)+Chr(1)+ВнешнийКод2);
            EndIf;
          ElseIf Стр="EL2" Then
            If not IsEmpty(Магазин.ТипЦенРеализации) Then
              СопоставитьОсобыйЭлементСправочника(Магазин.ТипЦенРеализации,ВнешнийКод2);
              Тответ.AddString("ACD"+Chr(1)+ПолучитьПолныйКод(Магазин.ТипЦенРеализации)+Chr(1)+ВнешнийКод2);
            EndIf;
          ElseIf Стр="EL3" Then
            If not IsEmpty(Магазин.Склад) Then
              СопоставитьОсобыйЭлементСправочника(Магазин.Склад,ВнешнийКод2);
              Тответ.AddString("ACD"+Chr(1)+ПолучитьПолныйКод(Магазин.Склад)+Chr(1)+ВнешнийКод2);
            EndIf;
          ElseIf Стр="EL4" Then
            If not IsEmpty(Магазин.ЮрЛицо) Then
              СопоставитьОсобыйЭлементСправочника(Магазин.ЮрЛицо,ВнешнийКод2);
              Тответ.AddString("ACD"+Chr(1)+ПолучитьПолныйКод(Магазин.ЮрЛицо)+Chr(1)+ВнешнийКод2);
            EndIf;
          ElseIf Стр="EL5" Then
            If not IsEmpty(Магазин.ДоговорРозничногоПокупателя) Then
              СопоставитьОсобыйЭлементСправочника(Магазин.ДоговорРозничногоПокупателя,ВнешнийКод2);
              Тответ.AddString("ACD"+Chr(1)+ПолучитьПолныйКод(Магазин.ДоговорРозничногоПокупателя)+Chr(1)+ВнешнийКод2);
            EndIf;
          Else
            Raise "В файле "+Файл+" обнаружена неизвестная команда начального сопоставления "+СтрКоманда;
          EndIf;
          ДобавитьУстановку("Производилась начальная выгрузка","1",1);
        ElseIf СтрКоманда="ACP" Then //Подверждение от ЦБ, элемент пока не создан
          //Снять триггер с рознСопоставлениеОбъектовОбмена для этого элемента (только для периферийной базы)
          //<ACP><#1><ЛокальныйКод>
          ЛокальныйКод:=TearStr(СтрКоманда,Chr(1));
          аЭл:=НайтиЭлементСправочникаПоЛокальномуКоду(ЛокальныйКод);
          If not IsEmpty(аЭл) Then
            If аЭл.Lock() Then
              If аЭл.GetTrigger()=3 Then
                аЭл.SetTrigger(2);
                ФлИзмененных:=ФлИзмененных+1;
              EndIf;
              аЭл.Unlock();
            EndIf;
          EndIf;
        ElseIf Стр="ACD" Then //Получение внешнего кода
          //Обновить ВнешнийКод в рознСопоставлениеОбъектовОбмена
          //<ACD><#1><ВнешнийКод><#1><ЛокальныйКод>
          ВнешнийКод2:=TearStr(СтрКоманда,Chr(1));
          ЛокальныйКод:=TearStr(СтрКоманда,Chr(1));
          бЭл:=0;
          аЭл:=НайтиЭлементСправочникаПоВнешнемуКоду(ВнешнийКод2,бЭл);
          If IsEmpty(аЭл) Then
            аЭл:=НайтиЭлементСправочникаПоЛокальномуКоду(ЛокальныйКод);
          EndIf;
          If not IsEmpty(бЭл) Then
            If бЭл.GetTrigger()=3 Then
              бЭл.SetTrigger(2);
              ФлИзмененных:=ФлИзмененных+1;
            EndIf;
          EndIf;
          If _And(not IsEmpty(бЭл),бЭл.ВнешнийКод<>ВнешнийКод2) Then
            If бЭл.Lock() Then
              бЭл.ВнешнийКод:=ВнешнийКод2;
              бЭл.Save();
              ФлИзмененных:=ФлИзмененных+1;
              бЭл.Unlock();
            EndIf;
          ElseIf _And(IsEmpty(бЭл),not IsEmpty(аЭл),спСправочникиБезЭлементовСинхронизации.Find(аЭл.DBName(),,1)=0) Then
            бЭл:=Ref.рознСопоставлениеОбъектовОбмена;
            бЭл.New();
            бЭл.Parent(Элемент);
            бЭл.Объект:=аЭл;
            бЭл.ВнешнийКод:=ВнешнийКод2;
            бЭл.Save();
            бЭл.SetTrigger(2);
            ФлИзмененных:=ФлИзмененных+2;
          EndIf;
        ElseIf Стр="ACK" Then //Запрос выгрузки элемента
          //Поместить требуемые элементы в Тответ или создать команду AKD, если элемент не найден
          //<ACK><#1><ВнешнийКод><#1><ЛокальныйКод><#1><СПодчиненными>
          ВнешнийКод2:=TearStr(СтрКоманда,Chr(1));
          ЛокальныйКод:=TearStr(СтрКоманда,Chr(1));
          Фл:=Number(TearStr(СтрКоманда,Chr(1)));
          бЭл:=0;
          аЭл:=НайтиЭлементСправочникаПоВнешнемуКоду(ВнешнийКод2,бЭл);
          If IsEmpty(аЭл) Then
            аЭл:=НайтиЭлементСправочникаПоЛокальномуКоду(ЛокальныйКод);
            If IsEmpty(аЭл) Then
              бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
              If not бЭл.FindEx(3,,"~(@Parent=Элемент)And(ВнешнийКод=ВнешнийКод2)") Then
                Тответ.AddString("AKD"+Chr(1)+ВнешнийКод2);
              EndIf;
            ElseIf _And(ВнешнийКод2<>"",IsEmpty(бЭл)) Then
              бЭл:=Ref.рознСопоставлениеОбъектовОбмена;
              бЭл.New();
              бЭл.Parent(Элемент);
              бЭл.Объект:=аЭл;
              бЭл.ВнешнийКод:=ВнешнийКод2;
              бЭл.Save();
              бЭл.SetTrigger(2);
              ФлИзмененных:=ФлИзмененных+2;
            EndIf;
          EndIf;
          If not IsEmpty(аЭл) Then
            ДобавитьЭлементСправочникаВТаблицуВыгрузки(Тответ,аЭл,ВнешнийКод2);
            If Фл Then
              //Добавим все подчиненные справочники  
              СпРод:=List.Create(аЭл);
              For i:=1 To Struct.Ref(аЭл.DBName()).Children.Count() Do
                Имя2:=Struct.Ref(аЭл.DBName()).Children(i).Name;
                If Имя2="цЦены" Then
                  If ((ФлСервер)And(ФлЛокальныеЦены))Or((not ФлСервер)And(not ФлЛокальныеЦены)) Then
                    Continue;
                  EndIf;
                EndIf;
                If спПропуститьСправочники.Find(Имя2,,1)>0 Then
                  Continue;
                EndIf;
                If not ВыгрузитьНесопоставленные(Имя2,Тответ,СпРод,"@PARENT") Then
                  Exit 0;
                EndIf;
              EndDo;
            EndIf;
          EndIf;
        ElseIf Стр="ACK2" Then //Запрос выгрузки внешнего кода
          //Вернуть ACD, если элемент уже принят
          //<ACK2><#1><ВнешнийКод>
          ВнешнийКод2:=TearStr(СтрКоманда,Chr(1));
          аЭл:=НайтиЭлементСправочникаПоВнешнемуКоду(ВнешнийКод2);
          If not IsEmpty(аЭл) Then
            Тответ.AddString("ACD"+Chr(1)+ПолучитьПолныйКод(аЭл)+Chr(1)+ВнешнийКод2);
          Else
            бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
            If not бЭл.FindEx(3,,"~(@Parent=Элемент)And(ВнешнийКод=ВнешнийКод2)") Then
              Тответ.AddString("AKD"+Chr(1)+ВнешнийКод2);
            EndIf;
          EndIf;
        ElseIf Стр="AKD" Then //Элемент больше не существует
          //Удалить сопоставление элемента
          //<ACD><#1><ЛокальныйКод>
          ЛокальныйКод:=TearStr(СтрКоманда,Chr(1));
          аЭл:=НайтиЭлементСправочникаПоЛокальномуКоду(ЛокальныйКод);
          If not IsEmpty(аЭл) Then
            бЭл:=Ref.рознСопоставлениеОбъектовОбмена;
            If бЭл.FindEx(3,,"~(@Parent=Элемент)And(Объект=аЭл)") Then
              бЭл.DeletePhysically();
            EndIf;
            бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
            If бЭл.FindEx(3,,"~(@Parent=Элемент)And(Объект=аЭл)") Then
              бЭл.DeletePhysically();
            EndIf;
          EndIf;
        ElseIf Стр="DOC" Then //Документ был обновлен или создан
          //Загрузить или обновить документ, флаг 0
          //<DOC><#1><Вид документа><#1><Дата и время документа><#1><Номер документа><#1><Статус документа><#2><Реквизиты заголовка><#2><Строчная часть или накопитель 1><#2><Строчная часть или накопитель 2>...
          //<Строчная часть или накопитель>: <Тип><#1><Имя><#1><Количество строк><#1><Строка 1><#1><Строка 1>
          //<Тип>: STOR или LP
          СтрКоманда0:=СтрКоманда;
          Вид:=TearStr(СтрКоманда,Chr(1));
          Дата:=Date(TearStr(СтрКоманда,Chr(1)));
          Номер:=TearStr(СтрКоманда,Chr(1));
          Статус:=Number(TearStr(СтрКоманда,Chr(1)));
          If IsEmpty(Struct.Doc(Вид)) Then
            Continue;
          EndIf;
          //Поиск документа
          аДок:=DB("Doc."+Вид);
          НДата:=BegOfYear(Дата);
          КДата:=EndOfYear(Дата)+1;
          If not аДок.FindEx(3,,"~(DocDate>=НДата)And(DocDate<КДата)And(DocNum=Номер)") Then
            аДок.New();
            аДок.DocDate:=Дата;
            аДок.DocNum:=Номер;
            аДок.ПрефиксУдаленнойБазы:=ПрефиксУдаленнойИБ;
            аДок.ФлагОбмена:=2;
            аДок.Save();
            ФлИзмененных:=ФлИзмененных+1;
          EndIf;
          ФлУдачно:=1;
          ЗагрузитьИлиОбновитьРеквизиты(аДок,СтрКоманда0,ФлУдачно);
          //Очистка одновременных изменений
          бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
          Код:=Вид+Chr(1)+BegOfYear(Дата)+Chr(1)+Номер;
          If бЭл.FindEx(3,,"~(@Parent=Элемент)And(ВнешнийКод=Код)And(Режим=100)") Then
            бЭл.DeletePhysically();
            ФлИзмененных:=ФлИзмененных+1;
          EndIf;
          Тответ.AddString("DAC"+Chr(1)+"DOC"+Chr(1)+Вид+Chr(1)+Дата+Chr(1)+Номер);
        ElseIf Стр="DCD" Then //Документ был удален
          //Удалить документ, ответить DAC 
          //<DCD><#1><Вид><#1><Дата><#1><Номер>
          аДок:=НайтиДокументПоНомеру(СтрКоманда,Chr(1),1);
          If not isEmpty(аДок) Then
            If глУдалить(аДок,1) Then
              Тответ.AddString("DAC"+Chr(1)+"DCD"+Chr(1)+СтрКоманда);
            EndIf;
          Else
            Тответ.AddString("DAC"+Chr(1)+"DCD"+Chr(1)+СтрКоманда);
          EndIf;
        ElseIf Стр="DAC" Then //Документ был получен на другой стороне
          //Снять пометку изменения с документов, удалить записи режим=100
          //<DCD><#1><Ответ на команду DOC или DCD><#1><Вид><#1><Дата><#1><Номер>
          ФлУдален:=TearStr(СтрКоманда,Chr(1))="DCD";
          аДок:=НайтиДокументПоНомеру(СтрКоманда,Chr(1),1);
          If not isEmpty(аДок) Then
            If аДок.Lock() Then
              Try
                аДок.Reload();
                If _Or(_And(not ФлУдален,аДок.ФлагОбмена=8),_And(ФлУдален,аДок.Status()<2)) Then
                  аДок.ФлагОбмена:=2;
                  аДок.Save();
                  ФлИзмененных:=ФлИзмененных+1;
                EndIf;  
              Finally  
                аДок.Unlock();
              EndTry;  
            EndIf;
          EndIf;
          бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
          Код:=TearStr(СтрКоманда,Chr(1))+Chr(1)+BegOfYear(TearStr(СтрКоманда,Chr(1)))+Chr(1)+TearStr(СтрКоманда,Chr(1));
          If бЭл.FindEx(3,,"~(@Parent=Элемент)And(ВнешнийКод=Код)And(Режим=100)") Then
            бЭл.DeletePhysically();
            ФлИзмененных:=ФлИзмененных+1;
          EndIf;
        ElseIf Стр="DSD" Then //Документ начальных остатков
          //<DSD><#1><Вид накопителя><#1><Дата остатков><#2><#2><Движения накопителя>
          //<Движения накопителя>: <#1><Строка 1><#1><Строка 1>
          СтрКоманда0:=СтрКоманда;
          СтрКоманда:=TearStr(СтрКоманда,Chr(2));
          ВидНакопителя:=TearStr(СтрКоманда,Chr(1));
          Дата:=BegOfDay(Date(TearStr(СтрКоманда,Chr(1))));
          Дата1:=Дата+1;
          аДок:=Doc.УниверсальныйДокумент;
          If not аДок.Find("~(DocDate>=Дата)And(DocDate<Дата1)And(ПрефиксУдаленнойБазы=ПрефиксУдаленнойИБ)And(УникальныйИдентификатор=ВидНакопителя)") Then
            аДок.New();
            аДок.DocDate:=Дата;
            аДок.КодОперации:=Enum.коУниверсальныйДокумент.УниверсальныйДокумент;
            аДок.ПрефиксУдаленнойБазы:=ПрефиксУдаленнойИБ;
            аДок.УникальныйИдентификатор=ВидНакопителя;
            аДок.ФлагОбмена:=9;
            аДок.Save();
            ФлИзмененных:=ФлИзмененных+1;
          EndIf;
          
          ФлУдачно:=1;
          ЗагрузитьИлиОбновитьДокументОстатков(аДок,СтрКоманда0,ФлУдачно);          
          If (ФлУдачно)And(аДок.Status()>0) Then
            бЭл:=Ref.рознВременнаяТаблицаОбъектовОбмена;
            If бЭл.FindEx(3,,"~(@Parent=Элемент)And(Объект=аДок)And(Режим=111)") Then
              бЭл.DeletePhysically();
              ФлИзмененных:=ФлИзмененных+1;
            EndIf;
          EndIf;
        Else
          Raise "В файле "+Файл+" обнаружена неизвестная команда "+СтрКоманда;
        EndIf;
        
        If Тответ.Size()>1000 Then
          aNum:=Тответ.Size()-2;
          If not ОтправитьФайлНаУдаленнуюСторону(Тответ) Then
            Exit 0;
          EndIf;
          MessageVisual("Успешно выгружено ответов: "+aNum,"I");
        EndIf;
        If ФлИзмененных>50 Then
          CommitTransaction();
          ФлИзмененных:=0;
          BeginTransaction();
        EndIf;
      EndDo;//Цикл по строкам файла
    Finally
      If IsTransactionActive() Then
        CommitTransaction();
      EndIf;
    EndTry;

    If Тответ.Size()>2 Then
      aNum:=Тответ.Size()-2;
      If not ОтправитьФайлНаУдаленнуюСторону(Тответ) Then
        Exit 0;
      EndIf;
      MessageVisual("Успешно выгружено ответов: "+aNum,"I");
    EndIf;
    
    If not Ф.DeleteFile(Файл) Then
      MessageVisual("Не удалось удалить файл "+Файл+"!","!");
    EndIf;
  EndDo;
  
  If not ФлТолькоЗагрузка Then
    //Выгрузка запросов для справочников
    Тответ:=Text.Create(1);
    Тответ.AddString("SF.EX.1");
    Тответ.AddString(ПрефиксИБ+Chr(1)+ПрефиксУдаленнойИБ);
    If not ВыгрузкаЗапросовНаЗаполнениеСправочников(Тответ) Then
      Exit 0;
    EndIf;      
  EndIf;
  
  If ФлБылиНовыеЭлементы Then
    ОбработатьОчередьВОжидании(Элемент);
  EndIf;
  
  Exit 1;
EndFunction


Function СохранитьУстановки(ФлЗакрыть=0)
  оТМЦ:=Form.оТМЦ.Value;
  оТМЦ.Select();
  Стр:="";
  While оТМЦ.Next() Do
    AppendStringToBufferedString(Стр,?(Стр<>"",",","")+оТМЦ.Номенклатура.Code);
  EndDo;
  Ини.AddLeaf("Номенклатура",Стр);
  оМг:=Form.оМг.Value.Get(1);
  Стр:="";
  For i:=1 To оМг.Size() Do
    AppendStringToBufferedString(Стр,?(Стр<>"",",","")+оМг[i].Code);
  EndDo;
  Ини.AddLeaf("Магазины",Стр);  
  оКасса:=Form.оКасса.Value.Get(1);
  Стр:="";
  For i:=1 To оКасса.Size() Do
    AppendStringToBufferedString(Стр,?(Стр<>"",",","")+оКасса[i].Code);
  EndDo;
  Ини.AddLeaf("Кассы",Стр);  
  Ини.AddLeaf("Способ",Form.оСпособ.Value.SelectedLine);
  Ини.AddLeaf("ФлВсеДокументы",Form.оВсеДокументы.Value);
  Ини.AddLeaf("ФлЛокальныеЦены",Form.оЛокальныеЦены.Value);
  Ини.AddLeaf("Сервер",Form.оСервер.Value);
  Ини.AddLeaf("ЛокальнаяПапка",Form.оПуть.Value);
  Ини.AddLeaf("АдресСервера",Form.оАдресСервера.Value);
  Ини.AddLeaf("ПрефиксУдаленнойИБ",Form.оПрефиксУдаленнойИБ.Value);
  Ини.AddLeaf("РасписаниеВыгрузки1",Form.оРасписаниеВыгрузки1.Value);
  Ини.AddLeaf("РасписаниеВыгрузки2",Form.оРасписаниеВыгрузки2.Value);
  Ини.AddLeaf("РасписаниеВыгрузки3",Form.оРасписаниеВыгрузки3.Value);
  Ини.AddLeaf("ДатаНачала",Form.оДатаНачала.Value);
  Элемент.Настройки:=Ини.StoreToString("");
  Элемент.УникальныйИдентификатор:=Form.оПрефиксУдаленнойИБ.Value;
  
  глОбновитьРасписаниеПротоколаОбмена(Элемент,"распределенная база","Modules\FreeForms\ПротоколыОбмена\РаспределеннаяБаза\",Form.оРасписаниеВыгрузки1.Value,Form.оРасписаниеВыгрузки2.Value,
    "Краткая выгрузка","Полная выгрузка","Выгрузка только справочников","Выгрузка");
  глОбновитьРасписаниеПротоколаОбмена(Элемент,"распределенная база","Modules\FreeForms\ПротоколыОбмена\РаспределеннаяБаза\",Form.оРасписаниеВыгрузки3.Value,"",
    "Загрузка из локальной папки","","Загрузка и обработка очереди","");
  
  If ФлЗакрыть Then
    Form.IsChanged(0);
    Form.Close();
  EndIf;
EndFunction


Function OnOpen()
  Result:=0;
  If TypeStr(Param)<>"LIST" Then
    MessageVisual("Эта обработка запускается автоматически или вызывается из формы магазина!","!");
    Exit;
  EndIf;
  Элемент:=Param["Элемент"];
  СтрКоманда:=Param["Команда"];
  СтрОпция:=Param["Опция"];
  
  If Элемент.IsLocked()<>1 Then
    Элемент:=Элемент.Copy();
    If not глЗаблокировать(Элемент,1) Then //Будет разблокирован при закрытии обработки
      Exit;
    EndIf;
    Элемент.Reload();
  EndIf;
    
  Магазин:=Элемент.Parent();
  ЮрЛицо:=Магазин.ЮрЛицо;
  Try
    Ини:=Ini.Create();
    Ини.AddFromString(Элемент.Настройки);
  Except
    Ини.AddLeaf("Способ",1);
  EndTry;
  Способ:=Max(1,Number(Ини.GetData("Способ")));
  ФлСервер:=Number(Ини.GetData("Сервер"));
  ЛокальнаяПапка:=Ини.GetData("ЛокальнаяПапка");
  АдресСервера:=Ини.GetData("АдресСервера");
  ПрефиксУдаленнойИБ:=Ини.GetData("ПрефиксУдаленнойИБ","");
  ФлВсеДокументы:=Number(Ини.GetData("ФлВсеДокументы"));
  ФлЛокальныеЦены:=Number(Ини.GetData("ФлЛокальныеЦены"));
  РасписаниеВыгрузки1:=Ини.GetData("РасписаниеВыгрузки1");
  РасписаниеВыгрузки2:=Ини.GetData("РасписаниеВыгрузки2");
  РасписаниеВыгрузки3:=Ини.GetData("РасписаниеВыгрузки3");
  ДатаНачала:=Date(Ини.GetData("ДатаНачала"));
  ФлБылаНачальнаяВыгрузка:=Number(ПолучитьУстановку("Производилась начальная выгрузка"));
  
  спКассы:=List.Create();
  СтрКассы:=Ини.GetData("Кассы","");
  aList:=List.Create();
  While СтрКассы<>"" Do
    Стр:=TearStr(СтрКассы,",");
    aList.Add(Стр);
  EndDo;
  If aList.Size()>0 Then
    спКассы:=Ref.общКассы.LoadEx(0,2,"Code","->Code",aList);
  EndIf;
  
  спНоменклатура:=List.Create();
  СтрНоменклатура:=Ини.GetData("Номенклатура","");
  aList:=List.Create();
  While СтрНоменклатура<>"" Do
    Стр:=TearStr(СтрНоменклатура,",");
    aList.Add(Стр);
  EndDo;
  If aList.Size()>0 Then
    спНоменклатура:=Ref.тмцНоменклатура.LoadEx(0,2,"Code","->Code",aList);
  EndIf;
  
  спМагазины:=List.Create();
  СтрМагазины:=Ини.GetData("Магазины","");
  aList:=List.Create();
  While СтрМагазины<>"" Do
    Стр:=TearStr(СтрМагазины,",");
    aList.Add(Стр);
  EndDo;
  If aList.Size()>0 Then
    спМагазины:=Ref.рознМагазины.LoadEx(0,2,"Code","->Code",aList);
  EndIf;
  If спМагазины.Find(Магазин)=0 Then
    спМагазины.Add(Магазин);
  EndIf;
  
  спЮрЛица:=List.Create();
  For i:=1 To спМагазины.Size() Do
    спЮрЛица.Add(спМагазины[i].ЮрЛицо);
  EndDo;
  спЮрЛица.Group();
  ПрефиксИБ:=Trim(DBVar.ПрефиксИБ);
  
  If (СтрКоманда="Визуальный запуск")or(IsEmpty(СтрКоманда)) Then
    Result:=1;
    Exit;
  EndIf;
  If ЛокальнаяПапка="" Then
    Элемент.UnLock();
    Raise "Переменная "+ЛокальнаяПапка+" не указана!";
  EndIf;
  If Trim(ПрефиксУдаленнойИБ)="" Then
    Элемент.UnLock();
    Raise "Не задан префикс удаленной базы данных!";
  EndIf;
  
  ФлПолнаяВыгрузка:=СтрКоманда="Полная начальная выгрузка (справочники; документы; остатки)";
  ФлВыгрузкаНачальныхОстатков:=СтрКоманда="Выгрузка начальных остатков";
  If (ФлВыгрузкаНачальныхОстатков)And(IsEmpty(ДатаНачала)) Then
    Элемент.UnLock();
    Raise "Для выгрузки начальных остатков необходимо задать дату начала работы!";
  EndIf;
  ИмяОбмена:="Обмен_"+Элемент.Code;аПольз:="";аМаш:="";аДата:="";
  If not DBLockStringMutex(ИмяОбмена,аПольз,аМаш,аДата) Then
    MessageVisual("Обмен по протоколу "+Элемент+" для магазина "+Магазин+" уже был запущен пользователем "+аПольз+" ("+аМаш+") в "+аДата,"!");
  EndIf;
  Try
    //Команды: Визуальный запуск,Выгрузка,Загрузка,Загрузка и выгрузка
    If (СтрКоманда="Выгрузка")Or((ФлПолнаяВыгрузка)And(ФлСервер))Or((ФлВыгрузкаНачальныхОстатков)And(ФлСервер)) Then
      If (not ФлБылаНачальнаяВыгрузка)And(not ФлПолнаяВыгрузка) Then
        Raise "Первая выгрузка должна быть полной выгрузкой с сервера для синхронизации основных элементов обмена";
      EndIf;
      If not ВыполнитьВыгрузку(?(ФлВыгрузкаНачальныхОстатков,0,3)) Then
        Raise "Ошибка при выполнении выгрузки";
      EndIf;
      If not ВыполнитьЗагрузку(1) Then
        Raise "Ошибка при выполнении загрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Выгрузка только справочников" Then    
      If not ФлБылаНачальнаяВыгрузка Then
        Raise "Первая выгрузка должна быть полной выгрузкой с сервера для синхронизации основных элементов обмена";
      EndIf;
      If not ВыполнитьВыгрузку(1) Then
        Raise "Ошибка при выполнении выгрузки справочников";
      EndIf;
      If not ВыполнитьЗагрузку(1) Then
        Raise "Ошибка при выполнении загрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Выгрузка только документов" Then    
      If not ФлБылаНачальнаяВыгрузка Then
        Raise "Первая выгрузка должна быть полной выгрузкой с сервера для синхронизации основных элементов обмена";
      EndIf;
      If not ВыполнитьВыгрузку(2) Then
        Raise "Ошибка при выполнении выгрузки документов";
      EndIf;
      If not ВыполнитьЗагрузку(1) Then
        Raise "Ошибка при выполнении загрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Загрузка" Then
      If not ВыполнитьЗагрузку() Then
        Raise "Ошибка при выполнении загрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Обработка очереди ожидания загрузки" Then
      If not ОбработатьОчередьВОжидании(Элемент) Then
        Raise "Ошибка при выполнении обработки очереди ожидания";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Загрузка и обработка очереди" Then
      If not ВыполнитьЗагрузку() Then
        Raise "Ошибка при выполнении загрузки";
      EndIf;
      If not ОбработатьОчередьВОжидании(Элемент) Then
        Raise "Ошибка при выполнении обработки очереди ожидания";
      EndIf;
      Param["Удачно"]:=1;
    Else
      MessageVisual("Команда """+СтрКоманда+""" не поддерживается в режиме "+?(ФлСервер,"сервера","клиента")+"!","!");
    EndIf;
  Finally
    Элемент.UnLock();
    DBUnlockStringMutex(ИмяОбмена);
  EndTry;
EndFunction