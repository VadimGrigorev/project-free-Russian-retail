//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var Ини Export;
Var Версия Export, Способ Export, ПутьПротокола Export, РасписаниеВыгрузки Export, РасписаниеЗагрузки Export, КодыОбмена Export;
Var ФайлВыгрузки Export, ФайлЗагрузки Export, ФайлЗапросаВыгрузки Export, КассаЗагрузки Export, КодыНоменклатуры Export, КодыПартий Export, НестандарныеВыгрузки Export, ОбъединениеРеализаций Export;
Var Магазин Export;
Var Элемент Export;
Var спТипыДокументов Export;
Var тКодыНоменклатуры Export, тКодыПартий Export;
Var СемафорИзмененияКодов Export, МаксимальныйКод Export, ФлИзмененных Export;
Var СпВсеМагазины Export, аЗапросПоМаркам Export;

//https://frontol.ru/upload/distr/Frontol 6/Frontol 6. Руководство интегратора.pdf

Function ПолучитьУстановку(Имя)
  aEl:=Ref.рознУстановкиОбменаМагазинов;
  If aEl.Find("~(@Parent=Элемент)And(@Status=0)And(Name=Имя)") Then
    Exit aEl.Установка; 
  EndIf;
  Exit "";
EndFunction

Function MessageVisual(Стр,Тип="")
  If not IsExecutingInSeparateThread Then
    Message(Стр,Тип);
  EndIf;
EndFunction

Function ДобавитьУстановку(Имя,Код,ФлОбновить=0)
  aEl:=Ref.рознУстановкиОбменаМагазинов;
  If Not aEl.Find("~(@Parent=Элемент)And(@Status=0)And(Name=Имя)") Then
    aEl.New();
    aEl.Parent(Элемент);
    aEl.Name:=Имя;
    aEl.Установка:=Код;
    aEl.Save();
  ElseIf ФлОбновить Then
    aEl.Установка:=Код;
    aEl.Save();
  EndIf;
EndFunction

Function СохранитьУстановки(ФлЗакрыть=0)
  Ини.AddLeaf("Версия",Form.оВерсия.Value.SelectedLine);
  Ини.AddLeaf("Способ",Form.оСпособ.Value.SelectedLine);
  Ини.AddLeaf("Путь",Form.оПуть.Value);
  Ини.AddLeaf("РасписаниеВыгрузки",Form.оРасписаниеВыгрузки.Value);
  Ини.AddLeaf("РасписаниеЗагрузки",Form.оРасписаниеЗагрузки.Value);
  Ини.AddLeaf("ФайлВыгрузки",Form.оФайлВыгрузки.Value);
  Ини.AddLeaf("ФайлЗапросаВыгрузки",Form.оФайлЗапросаВыгрузки.Value);
  Ини.AddLeaf("ФайлЗагрузки",Form.оФайлЗагрузки.Value);
  Ини.AddLeaf("КодыОбмена",Form.оКодыОбмена.Value.SelectedLine);
  Ини.AddLeaf("Касса",Form.оКасса.Value.Code);
  Ини.AddLeaf("КодыНоменклатуры",Form.оКодыНоменклатуры.Value.Code);
  Ини.AddLeaf("КодыПартий",Form.оКодыПартий.Value.Code);
  Ини.AddLeaf("НестандарныеВыгрузки",Form.оНестандарныеВыгрузки.Value);
  Ини.AddLeaf("ОбъединениеРеализаций",Form.оОбъединениеРеализаций.Value);
  Элемент.Настройки:=Ини.StoreToString("");  

  ДобавитьУстановку("Дата начала обмена","");
  
  глОбновитьРасписаниеПротоколаОбмена(Элемент,"Фронтол сервер","Modules\FreeForms\ПротоколыОбмена\ФронтолСервер\",Form.оРасписаниеВыгрузки.Value,Form.оРасписаниеЗагрузки.Value);
  
  If ФлЗакрыть Then
    Form.IsChanged(0);
    Form.Close();
  EndIf;
EndFunction

Function ОбновитьВремяЗапуска(Ид)
  Элемент.SetValue(Ид,Date());
  Элемент.Save();
EndFunction

Function НайтиНоменклатуруИлиПартию(пКод,ByRef зН,ByRef зПартия,iLoop,пМарки)
  //Очищаем партию для позиций без марочного учета, либо это вообще не партионный товар, либо нужно, чтобы списание было по методу FIFO
  Function _ПроверитьПартию()
    If _And(not IsEmpty(зН),зН.флПартионныйУчет,_Or(not IsEmpty(зН.ГИСМТТоварнаяГруппа),зН.флАлкогольнаяПродукция),пМарки<>"") Then
      //Марочный товар?
      аМарка:=Ref.тмцМаркировкаПозиций;
      Стр:=TearStr(пМарки,"¤");
      If Стр<>"" Then
        If аМарка.Find("~(@Status<>1)And(флСостояние<2)And(КодМарки=Стр)And(@Parent.@Parent=зН)") Then
          зПартия:=аМарка.Parent();
          зН:=зПартия.Parent();
        ElseIf аМарка.Find("~(флСостояние<2)And(КодМарки=Стр)And(@Parent.@Parent=зН)") Then
          зПартия:=аМарка.Parent();
          зН:=зПартия.Parent();
        EndIf;
      EndIf;
    ElseIf not IsEmpty(зПартия) Then
      If _Or(not зН.флПартионныйУчет,not зПартия.флМарочныйУчет) Then
        зПартия:=Ref.тмцПартииТМЦ;
      EndIf;
    EndIf;
  EndFunction

  If КодыОбмена<3 Then
    пКодПартии:="";
    If Length(пКод)>12 Then
      пКодТМЦ:=Right(пКод,12);
      пКодПартии:=Right("000000000000"+Left(пКод,Length(пКод)-12),12);
    Else
      пКодТМЦ:=Right("000000000000"+пКод,12);
    EndIf;
    зН:=Ref.тмцНоменклатура;
    If not зН.Find("Code",пКодТМЦ) Then
      MessageVisual("Номенклатура с кодом "+пКодТМЦ+" не найдена в базе! Загрузка остановлена! Строка: "+iLoop,"!");
      Exit 0;
    EndIf;
    зПартия:=Ref.тмцПартииТМЦ;
    If пКодПартии<>"" Then
      If not зПартия.Find("@Parent,Code",зН,пКодПартии) Then
        MessageVisual("Партия "+пКодПартии+" номенкларуры "+зН+" ("+зН.Code+") не найдена в базе! Загрузка остановлена! Строка: "+iLoop,"!");
        Exit 0;
      EndIf;
    EndIf;
    _ПроверитьПартию();
    Exit 1;
  EndIf;
  
  If тКодыНоменклатуры=0 Then
    ТЗ:="(зКод:=Ref.общДополнительныеСвойства.Name;
    |зТип:=Ref.общДополнительныеСвойства.ТипСвойства;
    |Condition(зТип=КодыНоменклатуры);
    |Condition(зКод<>"""");
    |зН:=Ref.общДополнительныеСвойства.Элемент..Ref.тмцНоменклатура;
    |Group зН,зКод;) Postprocessing (SkipVariables зТип;)";
    З:=Query.Create();
    тКодыНоменклатуры:=З.Execute(ТЗ,0);
    MassLoadObjects(тКодыНоменклатуры,"зН",,,1);
    тКодыНоменклатуры.Sort("зКод");
  
    ТЗ:="(зКод:=Ref.общДополнительныеСвойства.Name;
    |зТип:=Ref.общДополнительныеСвойства.ТипСвойства;
    |Condition(зТип=КодыПартий);
    |Condition(зКод<>"""");
    |зПартия:=Ref.общДополнительныеСвойства.Элемент..Ref.тмцПартииТМЦ;
    |Group зПартия,зКод;) Postprocessing (SkipVariables зТип;)";
    З:=Query.Create();
    тКодыПартий:=З.Execute(ТЗ,0);
    MassLoadObjects(тКодыПартий,"зПартия",,,1);
    тКодыПартий.Sort("зКод");
  EndIf;
  
  пКод:=Str(пКод);
  If тКодыПартий.FindAndGoto(пКод,,"зКод",1) Then
    зПартия:=тКодыПартий.зПартия;
    зН:=зПартия.Parent();
    _ПроверитьПартию();
    Exit 1;
  EndIf;
  If тКодыНоменклатуры.FindAndGoto(пКод,,"зКод",1) Then
    зН:=тКодыНоменклатуры.зН;
    _ПроверитьПартию();
    Exit 1;
  EndIf;
  аСв:=Ref.общДополнительныеСвойства;
  If аСв.Find("~(ТипСвойства=КодыНоменклатуры)And(Name=пКод)And(@Status=0)") Then
    зН:=аСв.Элемент;
    тКодыНоменклатуры.AddLineSorted("зКод","зКод,зН",пКод,зН);
    Exit 1;
  EndIf;
  If аСв.Find("~(ТипСвойства=КодыПартий)And(Name=пКод)And(@Status=0)") Then
    зПартия:=аСв.Элемент;
    зН:=зПартия.Parent();
    тКодыПартий.AddLineSorted("зКод","зКод,зПартия",пКод,зПартия);
    _ПроверитьПартию();
    Exit 1;
  EndIf;
  MessageVisual("Позиция с кодом "+пКод+" не сопоставлена с удаленной базой, но присутствует в документах загрузки! Загрузка остановлена! Строка: "+iLoop,"!");
  Exit 0;
EndFunction

Function ЗаблокироватьДокумент(зДок)
  аПольз:="";аМаш:="";аВремя:="";
  If зДок.Lock(аПольз,аМаш,аВремя)=0 Then
    MessageVisual("Невозможно заблокировать документ "+зДок+", который был заблокирован пользователем "+аПольз+" на "+аМаш+" в "+аВремя+"!","!");
    Exit 0;    
  EndIf;
  зДок.Reload();
  Exit 1;
EndFunction

Function ЗаблокироватьЭлемент(зЭл)
  аПольз:="";аМаш:="";аВремя:="";
  If зЭл.Lock(аПольз,аМаш,аВремя)=0 Then
    MessageVisual("Невозможно заблокировать элемент справочника "+зЭл+", который был заблокирован пользователем "+аПольз+" на "+аМаш+" в "+аВремя+"!","!");
    Exit 0;    
  EndIf;
  зЭл.Reload();
  Exit 1;
EndFunction

Function СохранитьИОбработатьДокумент(зДок)
  If зДок.Status()=1 Then
    If зДок.Selected()=2 Then
      If not глЗаписать(зДок,0,1) Then
        MessageVisual("Невозможно сохранить документ "+зДок+"!","!");
        Exit 0;
      EndIf;
    EndIf;
    If not глОтменитьУдаление(зДок,1) Then
      MessageVisual("Невозможно отменить удаление документа "+зДок+"!","!");
      Exit 0;
    EndIf;
  EndIf;
  If not глОбработать(зДок,1) Then
    MessageVisual("Невозможно обработать документ "+зДок+"!","!");
    Exit 0;
  EndIf;
  Exit 1;
EndFunction            


Function СоздатьНовыйРозничныйДокумент(ФлВозврат,аДата,СтрУИ)
  зДок:=?(ФлВозврат,Doc.ВозвратОтПокупателя,Doc.Реализация);
  зДок.New();
  зДок.DocDate:=аДата;
  зДок.Автор:=глПользователь;
  зДок.ЮрЛицо:=Магазин.ЮрЛицо;
  зДок.Магазин:=Магазин;
  глУстановитьНовыйНомер(зДок);
  зДок.Склад:=Магазин.Склад;
  зДок.КодОперации:=?(ФлВозврат,Enum.коВозвратОтПокупателя.ВозвратРозничный,Enum.коРеализация.РеализацияРозничная);
  зДок.УчитыватьВНалоговомУчете:=1;
  зДок.УникальныйИдентификатор:=СтрУИ;
  зДок.УникальныйИдентификатор3:="=";
  зДок.ТипЦен:=Магазин.ТипЦенРеализации;
  зДок.Контрагент:=Магазин.ДоговорРозничногоПокупателя.Parent();
  зДок.Договор:=Магазин.ДоговорРозничногоПокупателя;
  Exit зДок;
EndFunction

Function СоздатьНовыйКассовыйДокумент(ФлВозврат,аДата)
  зДок2:=?(ФлВозврат,Doc.РКО,Doc.ПКО);
  зДок2.New();
  зДок2.DocDate:=аДата;
  зДок2.ЮрЛицо:=Магазин.ЮрЛицо;
  зДок2.Магазин:=Магазин;
  глУстановитьНовыйНомер(зДок2);
  зДок2.Автор:=глПользователь;
  зДок2.КодОперации:=?(ФлВозврат,Enum.коРКО.ВозвратПокупателю,Enum.коПКО.ОплатаПокупателя);
  зДок2.УчитыватьВНалоговомУчете:=1;
  зДок2.СуммаВзаиморасчетов:=0;
  зДок2.Касса:=КассаЗагрузки;
  зДок2.Договор:=Магазин.ДоговорРозничногоПокупателя;
  зДок2.Контрагент:=зДок2.Договор.Parent();
  If ФлВозврат Then
    зЦЗ:=Ref.зтЦентрыЗатрат;
    If not зЦЗ.Find("Name,ВнутреннееПеремещение","Внутренние перемещения",1) Then
      If not зЦЗ.Find("ВнутреннееПеремещение",1) Then
        зЦЗ.New();
        зЦЗ.Name:="Внутренние перемещения";
        зЦЗ.ВнутреннееПеремещение:=1;
        зЦЗ.Save();
      EndIf;
    EndIf;
    зСЗ:=Ref.зтСтатьиЗатрат;
    If not зСЗ.Find("@Parent,Name",зЦЗ,"Возвраты покупателям") Then
      зСЗ.New();
      зСЗ.Parent(зЦЗ);
      зСЗ.Name:="Возвраты покупателям";
      зСЗ.Save();
    EndIf;
    зДок2.ЦентрЗатрат:=зЦЗ;
    зДок2.СтатьяЗатрат:=зСЗ;
  EndIf;
  Exit зДок2;
EndFunction

Function ИзменитьМаркетингПриУдалении(cTab,СпБлокировка)
  //Возвращаем бюджет по акциям и скид. картам, блокируем, но не сохраняем элементы
  cTab.Select();
  While cTab.Next() Do
    аСтатья:=cTab.СтатьяМаркетинга;
    If аСтатья.Name<>"Ручная скидка" Then
      If аСтатья.DBName()="рознУсловияПродажИМаркетинговыеАкции" Then
        If (аСтатья.БюджетРубли<0)And(аСтатья.БюджетШтуки<0) Then
          Continue;
        EndIf;
      EndIf;
      If СпБлокировка.Find(аСтатья)=0 Then
        If not ЗаблокироватьЭлемент(аСтатья) Then
          Exit 0;
        EndIf;
        СпБлокировка.Add(аСтатья);
      EndIf;
      аСтатья.Reload();
      If аСтатья.DBName()="рознСкидочныеКарты" Then
        аСтатья.ИтогоПродаж:=Max(0,аСтатья.ИтогоПродаж-cTab.СуммаДокумента);
        аСтатья.ИтогоСкидка:=Max(0,аСтатья.ИтогоСкидка-cTab.Сумма);
        If аСтатья.Бюджет>=0 Then
          аСтатья.Бюджет:=аСтатья.Бюджет+cTab.Сумма;
        EndIf;
      ElseIf аСтатья.DBName()="рознУсловияПродажИМаркетинговыеАкции" Then
        If аСтатья.БюджетРубли>=0 Then
          аСтатья.БюджетРубли:=аСтатья.БюджетРубли+cTab.Сумма;
        EndIf;
        If аСтатья.БюджетШтуки>=0 Then
          аСтатья.БюджетШтуки:=аСтатья.БюджетШтуки+cTab.Количество;
        EndIf;
      EndIf;
    EndIf;
  EndDo;
  Exit 1;
EndFunction

Function ЗарегистироватьМаркиДокумента(зДок,ТМаркиДокумента,ФлНовыйДокумент)
  //Регистрация марок
  If ТМаркиДокумента.Size()>0 Then
    //Проставляем партии из движения
    ФлИзменилсяДокумент:=0;
    ТПартии:=Tab.Create("Номенклатура,Партия");
    bTab:=зДок.LoadStorage("ОстаткиТМЦ");
    ТМаркиДокумента.Select();
    While ТМаркиДокумента.Next() Do
      If not IsEmpty(ТМаркиДокумента.Партия) Then
        Continue;
      EndIf;
      If bTab.FindAndGoto(ТМаркиДокумента.Номенклатура,,"Номенклатура")>0 Then
        If bTab.Партия.Selected()<>0 Then
          ТМаркиДокумента.Партия:=bTab.Партия;
          bTab.Количество:=bTab.Количество-1;
          If bTab.Количество=0 Then
            bTab.Remove(bTab.CurLine);
          EndIf;
          Continue;
        EndIf;
      EndIf;
      //Партия не попала в документ, находим самую новую из партий номенклатуры
      аПартия:=Ref.тмцПартииТМЦ;
      аПартия.UseOrder("Code-");
      If ТПартии.FindAndGoto(ТМаркиДокумента.Номенклатура,,"Номенклатура")>0 Then
        аПартия:=ТПартии.Партия;
      ElseIf аПартия.Find("~(@Status=0)And(@Parent=ТМаркиДокумента.Номенклатура)") Then
        ТПартии.AddLine("Номенклатура,Партия",ТМаркиДокумента.Номенклатура,аПартия);
      Else
        MessageVisual("Для номенкларуры "+ТМаркиДокумента.Номенклатура+" ("+ТМаркиДокумента.Номенклатура.Code+") не задано ни одной партии! Загрузка остановлена!","!");
        Exit 0;
      EndIf;
      ТМаркиДокумента.Партия:=аПартия;
      //К сожалению, придется еще раз обработать документ
      aTab:=зДок.LineParts("Номенклатура");
      aTab.CurLine:=0;
      While aTab.LocateAndGoto("Номенклатура,Партия",ТМаркиДокумента.Номенклатура,Ref.тмцПартииТМЦ)>0 Do
        aTab.Партия:=аПартия;
        aTab.CurLine:=0;
      EndDo;
      ФлИзменилсяДокумент:=1;
    EndDo;
    If ФлИзменилсяДокумент Then
      If not глОбработать(зДок,1) Then
        ФлНеУдалятьФайл:=1;
        MessageVisual("Невозможно обработать документ "+зДок+"!","!");
        Exit 0;
      EndIf;            
    EndIf;

    If not глМаркиЗарегистрироватьДокумент(зДок,ТМаркиДокумента,4,,ФлНовыйДокумент) Then
      ФлНеУдалятьФайл:=1;
      MessageVisual("Невозможно зарегистрировать марки документа "+зДок+"!","!");
      Exit 0;
    EndIf;
  EndIf;
  Exit 1;
EndFunction
            


Function ЗагрузитьКомбинированныеДокументы(ТекДата,спКомбинированныеДокументы,СпБлокировка)
  //спКомбинированныеДокументы: Реализация,Возврат,СуммаПКО0,СуммаРКО0,СуммаПКО1,СуммаРКО1,МаркиРеализации,МаркиВозврата
  СтрУИ:="Ф:"+Магазин.Code+"/"+FormatDate(ТекДата,"ddmmYYYY");
  ФлОк:=0;
  BeginTransaction();
  Try
    For i:=1 To 2 Do  //Реализация, Возврат
      зДок:=?(i=2,Doc.ВозвратОтПокупателя,Doc.Реализация);
      зДок2:=спКомбинированныеДокументы[?(i=2,"Возврат","Реализация")];
      СуммаНал:=Number(спКомбинированныеДокументы[?(i=2,"СуммаРКО0","СуммаПКО0")]);
      СуммаДеп:=Number(спКомбинированныеДокументы[?(i=2,"СуммаРКО1","СуммаПКО1")]);
      ФлБезИзм:=0;//Документ не изменялся    
      If зДок.Find(">=DocDate,<DocDate,КодОперации,УникальныйИдентификатор",BegOfDay(ТекДата),BegOfDay(ТекДата)+1,
            ?(i=2,Enum.коВозвратОтПокупателя.ВозвратРозничный,Enum.коРеализация.РеализацияРозничная),СтрУИ) Then
        If _Or(IsEmpty(зДок2),зДок2.LineParts("Номенклатура").Size()=0) Then
          If зДок.Status()>1 Then
            cTab:=зДок.LineParts("МаркетингПокупателей");
            If not ИзменитьМаркетингПриУдалении(cTab,СпБлокировка) Then
              Exit 0;
            EndIf;
            If not глУдалить(зДок,1) Then
              MessageVisual("Невозможно удалить документ "+зДок+"!","!");
              Exit 0;
            EndIf;
          EndIf;
          ФлБезИзм:=1;
        Else
          aTab2:=зДок2.LineParts("Номенклатура");
          aTab:=зДок.LineParts("Номенклатура");
          СмБезналичная:=Round(aTab2.Sum("Сумма")-СуммаНал,2);
          If _And(Round(СуммаДеп-зДок.СуммаСертификатов,2)=0,Round(СмБезналичная-?(i=2,зДок.СуммаБезналичногоВозврата,зДок.СуммаБезналичнойПродажи),2)=0) Then
            If aTab.Size()=aTab2.Size() Then
              aTab2:=aTab2.Copy();
              aTab:=aTab.Copy();
              aTab2.Sort("Номенклатура,Партия,Количество");
              aTab.Sort("Номенклатура,Партия,Количество");
              ФлБезИзм:=1;
              aTab.Select();
              aTab2.Select();
              While aTab.Next() Do
                aTab2.Next();
                If _Or(Round(aTab.Количество-aTab2.Количество,6)<>0,Round(aTab.Сумма-aTab2.Сумма,2)<>0) Then
                  ФлБезИзм:=0;
                  Break;
                EndIf;
              EndDo;
              //Суммы маркетинга
              If ФлБезИзм Then
                cTab:=зДок.LineParts("МаркетингПокупателей");
                cTab2:=зДок2.LineParts("МаркетингПокупателей");
                ФлБезИзм:=_And(cTab.Size()=cTab2.Size(),Round(cTab.Sum("Количество")-cTab2.Sum("Количество"),6)=0,Round(cTab.Sum("Сумма")-cTab2.Sum("Сумма"),2)=0);
              EndIf;
              
              If not ФлБезИзм Then
                If зДок.Status()>1 Then
                  cTab:=зДок.LineParts("МаркетингПокупателей");
                  If not ИзменитьМаркетингПриУдалении(cTab,СпБлокировка) Then
                    Exit 0;
                  EndIf;
                EndIf;
              ElseIf зДок.Status()<2 Then
                ФлБезИзм:=0;
              EndIf;
            EndIf;
          EndIf;
        EndIf;
      Else
        If IsEmpty(зДок2) Then
          ФлБезИзм:=1;
        Else
          зДок:=зДок2;
         EndIf;
      EndIf;
  
      If not ФлБезИзм Then
        aTab:=зДок.LineParts("Номенклатура");
        aTab2:=зДок2.LineParts("Номенклатура");
        If зДок<>зДок2 Then
          aTab.ClearLines();
          aTab2.CopyTo(aTab,,,"Номенклатура,Партия,Количество,Цена,Сумма,СтавкаНДС");
          aTab.Select();
          While aTab.Next() Do
            глПересчитатьСтроку(зДок,aTab,"Количество2@СуммаНДС");
          EndDo;
          
          cTab:=зДок.LineParts("МаркетингПокупателей");
          cTab2:=зДок2.LineParts("МаркетингПокупателей");
          cTab.ClearLines();
          cTab2.CopyTo(cTab,,,"Номенклатура,Количество,СтатьяМаркетинга,Сумма,СуммаДокумента");
        EndIf;
        зДок.СуммаВзаиморасчетов:=aTab.Sum("Сумма");
        СмБезналичная:=Round(зДок.СуммаВзаиморасчетов-СуммаНал,2);
        If i=2 Then
          зДок.СуммаБезналичногоВозврата:=СмБезналичная;
        Else
          зДок.СуммаБезналичнойПродажи:=СмБезналичная;
        EndIf;
        зДок.СуммаСертификатов:=СуммаДеп;
        зДок.DocDate:=спКомбинированныеДокументы["ДатаПоследнегоДокумента"];
        If not СохранитьИОбработатьДокумент(зДок) Then
          Exit 0;
        Endif;
        ТМаркиДокумента:=спКомбинированныеДокументы[?(i=2,"МаркиВозврата","МаркиРеализации")];
        If not ЗарегистироватьМаркиДокумента(зДок,ТМаркиДокумента,зДок=зДок2) Then
          Exit 0;
        EndIf;
      Else
        If (ProgramMode()=1)And(not IsEmpty(зДок)) Then
          MessageVisual("Документ, не содержащий изменений, пропущен: "+зДок+"!");
        EndIf;
      EndIf;
      
      зДок3:=?(i=2,Doc.РКО,Doc.ПКО);
      ФлБезИзм:=0;//Документ не изменялся    
      If зДок3.Find(">=DocDate,<DocDate,КодОперации,УникальныйИдентификатор",BegOfDay(ТекДата),BegOfDay(ТекДата)+1,
            ?(i=2,Enum.коРКО.ВозвратПокупателю,Enum.коПКО.ОплатаПокупателя),СтрУИ) Then
        If СуммаНал=0 Then
          If зДок3.Status()>1 Then
            If not глУдалить(зДок3,1) Then
              MessageVisual("Невозможно удалить документ "+зДок3+"!","!");
              Exit 0;
            EndIf;
          EndIf;
          ФлБезИзм:=1;
        Else
          ФлБезИзм:=1;    
          If зДок3.ДокОснование<>зДок Then
            ФлБезИзм:=0;
            зДок3.ДокОснование:=зДок;
          EndIf;
          If зДок3.СуммаВзаиморасчетов<>СуммаНал Then
            ФлБезИзм:=0;
            зДок3.СуммаВзаиморасчетов:=СуммаНал;
          EndIf;
          If зДок3.Status()<2 Then
            ФлБезИзм:=0;
          EndIf;
        EndIf;
      ElseIf СуммаНал=0 Then
        ФлБезИзм:=1;
      Else
        зДок3:=СоздатьНовыйКассовыйДокумент(i=2,ТекДата);
        зДок3.ДокОснование:=зДок;
        зДок3.УникальныйИдентификатор:=СтрУИ;
        зДок3.СуммаВзаиморасчетов:=СуммаНал;
      EndIf;
      If not ФлБезИзм Then
        If not СохранитьИОбработатьДокумент(зДок3) Then
          Exit 0;
        Endif;
      Else
        If (ProgramMode()=1)And(not IsEmpty(зДок3)) Then
          MessageVisual("Документ, не содержащий изменений, пропущен: "+зДок3+"!");
        EndIf;
      EndIf;
    EndDo;
    
    For i:=1 To СпБлокировка.Size() Do
      aEl:=СпБлокировка[i];
      If _And(DBTypeStr(aEl)="REF",not IsEmpty(aEl),aEl.Selected()=2) Then
        aEl.Save();
      EndIf;
    EndDo;
    ФлОк:=1;
    CommitTransaction();
  Finally
    If not ФлОк Then
      RollbackTransaction();
    EndIf;
    MassUnlock(СпБлокировка);
    СпБлокировка.Clear();
  EndTry;
  Exit 1;
EndFunction



Function ВыполнитьЗагрузку()
  Способ:=Max(1,Способ);
  If (Способ<>1)And(Способ<>2) Then
    Raise "В данный момент поддерживается только способ загрузки из локальной папки и FTP!";
  EndIf;
  
  ИмяФайла:=ФайлЗагрузки;
  If ИмяФайла="" Then
    ИмяФайла:="goods_report.txt";
  EndIf;
  
  If Способ=1 Then
    If ПутьПротокола="" Then
      Raise "Не задана папка для загрузки!";
    EndIf;
    ПутьЗагрузки:=AddBackSlash(ПутьПротокола);
  ElseIf Способ=2 Then
    If ПутьПротокола="" Then
      Raise "Не заданы параметры для загрузки!";
    EndIf;
    //ПутьПротокола:<Пользователь>:<Пароль>@<АдресСервера>@<Путь на сервере>@<Временная локальная папка>@[SOCKSПроксиАдрес:SOCKSПроксиПорт[:Пользователь:Пароль]]
    //FtpGet <login>:<pass>@<ftpsite> <path> <okFlagFile> <localpath> <remotemask> [DeleteFiles=1] [SOCKSServerAddr:SOCKSServerPort[:UserName:Password]]
    Стр:=ПутьПротокола;
    СтрКомСтрока:=TearStr(Стр,"@")+"@"+TearStr(Стр,"@");
    ПутьНаСервере:=TearStr(Стр,"@");
    ВремПуть:=TearStr(Стр,"@");
    If _And(ВремПуть<>"",ВремПуть[1]="""",ВремПуть[Length(ВремПуть)]="""") Then
      ВремПуть:=Mid(ВремПуть,2,Length(ВремПуть)-2);
    EndIf;
    If ВремПуть="" Then
      ВремПуть:=Addbackslash(GetTempDirectory())+Элемент.Code+"\";
      File.CreateDirectory(ВремПуть);
    EndIf;
    ВремПуть:=AddBackslash(ВремПуть);
    ПутьЗагрузки:=AddBackSlash(ВремПуть);
    Флаг:=ВремПуть+"In.flg";
    File.DeleteFile(Флаг);
    СтрКомСтрока:=СтрКомСтрока+" "+ПутьНаСервере+" """+Флаг+""" """+ВремПуть+""" """+ИмяФайла+""" 1";
    If Стр<>"" Then
      СтрКомСтрока:=СтрКомСтрока+" "+TearStr(Стр,"@");
    EndIf;
  
    Имя:="Modules\FreeForms\ВнутренниеОбработки\УниверсальнаяВыгрузкаЗагрузка\FtpGet.exe";
    If not IsExecutingInSeparateThread Then
      SysExec(Имя+" "+СтрКомСтрока,1);
    Else
      SysExecNoConsole(Имя+" "+СтрКомСтрока,1);
    EndIf;
    If not File.DoesFileExist(Флаг) Then
      Message("Невозможно загрузить файлы с FTP!","!");
    EndIf;
  EndIf;
  
  If IsEmpty(КассаЗагрузки) Then
    Raise "Не выбрана касса загрузки в установках протокола!";
  EndIf;
  If КодыОбмена=3 Then
    If IsEmpty(КодыНоменклатуры)+IsEmpty(КодыПартий)>0 Then
      Raise "Не выбраны коды номенклатуры или коды партий в установках протокола!";
    EndIf;
  EndIf;
  тКодыНоменклатуры:=0;
  тКодыПартий:=0;
  
  Файлы:=List.Create();
  Ф:=File.Create();
  Ф.FindOpen(Trim(ПутьЗагрузки)+ИмяФайла);
  While Ф.FindNextFile()<>"" Do
    Файл:=Trim(ПутьЗагрузки)+Ф.FileName;
    Файлы.Add(Файл);
  EndDo;
  
  //Операция: 0 -- продажа                      Реализация
  //          1 -- возврат                      Возврат
  //          2 -- аннулирование                -
  //          4 -- внесение                     -
  //          5 -- выплата                      -
  //          6 -- пользовательская             -
  //          8 -- открытие смены               -
  //          9 -- операция в ККМ               -
  //         10 -- закрытие смены               -
  //         11 -- закр. смены плат. систем     -
  //         12 -- ред. списка сотрудников      -
  //         13 -- служебная операция           -
  //         14 -- приход                       Возврат
  //         15 -- расход                       Реализация
  //         16 -- инвентаризация               -
  //         17 -- переоценка                   -
  //         18 -- вскрытие тары                Реализация
  //         21 –- предоплата                   Реализация
  //         22 –- возврат предоплаты           Возврат
  //         23 –- оплата кредита               Реализация (ПКО)
  //         24 -– возврат оплаты кредита       Возврат (РКО)
  //         25 -– расход                       Реализация
  //         26 –- возврат расхода              Возврат
  //         512 -- комплектация товара, списание
  //         513 -- комплектация товара, приход
  //         515 -- скидки внутри документа
  СпТипыОпераций:=List.Create();//1 -- реализация, 2 -- возврат
  СпТипыОпераций["0"]:=1;
  СпТипыОпераций["1"]:=2;
  СпТипыОпераций["14"]:=2;
  СпТипыОпераций["15"]:=1;
  СпТипыОпераций["18"]:=1;
  СпТипыОпераций["21"]:=1;
  СпТипыОпераций["22"]:=2;
  СпТипыОпераций["23"]:=1;
  СпТипыОпераций["24"]:=2;
  СпТипыОпераций["25"]:=1;
  СпТипыОпераций["26"]:=2;
  аДатаНачалаОбмена:=Date(ПолучитьУстановку("Дата начала обмена"));
  
  If Файлы.Size()>0 Then
    ОбновитьВремяЗапуска("ПоследняяЗагрузка");
  EndIf;
  
  //Условия карт этого магазина
  ФлПроверятьУсловия:=0;
  спУсловияКарт:=List.Create();
  аУсловия:=Ref.рознУсловияСкидочныхКарт;
  аУсловия.Select();
  While аУсловия.Next() Do
    ФлПроверятьУсловия:=1;
    aTab:=аУсловия.LineParts("Магазины");
    If _And(aTab.Size()>0,aTab.Find(Магазин,,"МагазинИлиГруппа")=0,aTab.Find(Магазин.ГруппаМагазина,,"МагазинИлиГруппа")=0) Then
      Continue;
    EndIf;
    спУсловияКарт.Add(аУсловия.Copy());
  EndDo;
  
  ФлБылиФайлы:=0;
  For iФайлы:=1 To Файлы.Size() Do
    Файл:=Файлы[iФайлы];
    MessageVisual("Загрузка файла "+Файл+"...");
    тФайл:=Text.Create();
    тФайл.Load(Файл,0);
    If _Or(тФайл.Size()<2,тФайл[1]<>"#") Then
      MessageVisual("Файл "+Файл+" имеет неверный формат или уже был загружен!","!");
      Continue;
    EndIf;
    ФлНеУдалятьФайл:=0;
    НачДатаФайла:=0;
    КонДатаФайла:=0;
    СпКомплектации:=List.Create();//комплектации, участвовавшие в загрузке (остальные удалить)
    ФлБылиФайлы:=1;
    //Переменные комбинируемых файлов
    спКомбинированныеДокументы:=List.Create();//Реализация,Возврат,СуммаПКО0,СуммаРКО0,СуммаПКО1,СуммаРКО1,МаркиРеализации,МаркиВозврата,ДатаПоследнегоДокумента
    ТекДата:=0;
    ФлОбъединенныеДокументы:=-1;
    
    СпБлокировка:=List.Create();
    Try
      For iLoop:=4 To тФайл.Size() Do
        If not IsExecutingInSeparateThread Then
          Form.StatusText(""+iLoop+" из "+тФайл.Size());
        EndIf;
        //Загрузка документа в цикле:
        //42 -- начало документа
        //  повторяются для каждой строки:
        //  1,11 -- продажа или 2,12 -- сторно или 6,16 -- новый тип регистрации
        //41 или 40 -- оплата
        //55 -- закрытие документа или 56 -- отмена документа (выход в основной цикл)
        
        Стр:=тФайл[iLoop];
        //Ищем начало документа
        TearStr(Стр,";");//Номер транзакции
        аДата:=TearStr(Стр,";");
        аВремя:=TearStr(Стр,";");
        аДата:=Date(аДата+" "+аВремя);//Дата транзакции
        If _And(not IsEmpty(аДатаНачалаОбмена),BegOfDay(аДата)<аДатаНачалаОбмена) Then
          Continue;
        EndIf;
      
        If НачДатаФайла=0 Then
          НачДатаФайла:=BegOfDay(аДата);
        Else
          НачДатаФайла:=Min(НачДатаФайла,BegOfDay(аДата));
        EndIf;
        If КонДатаФайла=0 Then
          КонДатаФайла:=BegOfDay(аДата);
        Else
          КонДатаФайла:=Max(НачДатаФайла,BegOfDay(аДата));
        EndIf;
        If ТекДата<>BegOfDay(аДата) Then
          If ТекДата<>0 Then
            If _And(ФлОбъединенныеДокументы=1,not ЗагрузитьКомбинированныеДокументы(ТекДата,спКомбинированныеДокументы,СпБлокировка)) Then
              Exit 0;
            EndIf;
          EndIf;
          спКомбинированныеДокументы:=List.Create();
          ТекДата:=BegOfDay(аДата);
          ФлОбъединенныеДокументы:=-1;
        EndIf;
        
        аТип:=Number(TearStr(Стр,";"));
        If аТип<>42 Then
          Continue;
        EndIf;
        
        TearStr(Стр,";");//Код РМ
        НомерДок:=TearStr(Стр,";");
        зДок:=0;
        TearStr(Стр,";");//Код кассира
        TearStr(Стр,";");//Номера карт
        TearStr(Стр,";");//Коды разрезов
        TearStr(Стр,";");
        TearStr(Стр,";");
        TearStr(Стр,";");
        аОперация:=Number(TearStr(Стр,";"));
        аОперация:=Number(СпТипыОпераций[Str(аОперация)]);
        If аОперация=0 Then //Неподдерживаемый документ, пропускаем
          Continue;
        EndIf;
        ФлВозврат:=аОперация-1;
        ТМаркиДокумента:=Tab.Create("Номенклатура,Партия,Ящик,Марка");
        
        //Ищем документ
        ФлНовыйДокумент:=1;
        зДок:=?(ФлВозврат,Doc.ВозвратОтПокупателя,Doc.Реализация);
        зДок2:=?(ФлВозврат,Doc.РКО,Doc.ПКО);
        зДок3:=0;//Комплектация товара
        СтрУИ:="Ф:"+Магазин.Code+":"+НомерДок;
        СтрУИ2:="Ф:"+Магазин.Code+"/"+FormatDate(аДата,"ddmmYYYY");
        If _Or(ФлОбъединенныеДокументы=1,not зДок.Find(">=DocDate,<DocDate,КодОперации,УникальныйИдентификатор",BegOfDay(аДата),BegOfDay(аДата)+1,
            ?(ФлВозврат,Enum.коВозвратОтПокупателя.ВозвратРозничный,Enum.коРеализация.РеализацияРозничная),СтрУИ)) Then
          //Здесь:
          //ФлОбъединенныеДокументы: -1 -- зДок не найден, возможен режим комбинированных документов, даже если ОбъединениеРеализаций=0
          //                          0 -- зДок не найден, новый документ
          //                          1 -- зДок не искался, режим комбинированных документов
          If _Or(ФлОбъединенныеДокументы=1,
                 _And(ФлОбъединенныеДокументы=-1,ОбъединениеРеализаций),
                 _And(ФлОбъединенныеДокументы=-1,зДок.Find(">=DocDate,<DocDate,КодОперации,УникальныйИдентификатор",BegOfDay(аДата),BegOfDay(аДата)+1,
                    ?(ФлВозврат,Enum.коВозвратОтПокупателя.ВозвратРозничный,Enum.коРеализация.РеализацияРозничная),СтрУИ2))) Then
            //Документы должны загружаться последовательно, если первого нет, значит, не будет остальных и можно включить режим комбинирования
            ФлОбъединенныеДокументы:=1;
            зДок:=спКомбинированныеДокументы[?(ФлВозврат,"Возврат","Реализация")];
            If IsEmpty(зДок) Then
              зДок:=СоздатьНовыйРозничныйДокумент(ФлВозврат,аДата,"Ф:"+Магазин.Code+"/"+FormatDate(аДата,"ddmmYYYY"));
              спКомбинированныеДокументы[?(ФлВозврат,"Возврат","Реализация")]:=зДок;
              спКомбинированныеДокументы[?(ФлВозврат,"МаркиВозврата","МаркиРеализации")]:=ТМаркиДокумента;
            Else
              ТМаркиДокумента:=спКомбинированныеДокументы[?(ФлВозврат,"МаркиВозврата","МаркиРеализации")];
            EndIf;
            спКомбинированныеДокументы["ДатаПоследнегоДокумента"]:=аДата;
          Else
            ФлОбъединенныеДокументы:=0;
            MassUnlock(СпБлокировка);
            СпБлокировка:=List.Create();
            зДок:=СоздатьНовыйРозничныйДокумент(ФлВозврат,аДата,СтрУИ);
          EndIf;
          aTab:=зДок.LineParts("Номенклатура");
          cTab:=зДок.LineParts("МаркетингПокупателей");
        Else
          ФлОбъединенныеДокументы:=0;
          MassUnlock(СпБлокировка);
          СпБлокировка:=List.Create();
          If зДок.Status()>1 Then
            If ProgramMode()=1 Then
              MessageVisual("Обработанный документ пропущен: "+зДок+"!");
            EndIf;
            Continue;
          EndIf;
          If not ЗаблокироватьДокумент(зДок) Then
            ФлНеУдалятьФайл:=1;
            Continue;
          EndIf;
          СпБлокировка.Add(зДок);
          
          ФлНовыйДокумент:=0;
          зДок2:=глНайтиПодчиненныйПоВиду(зДок,?(ФлВозврат,"РКО","ПКО"),1);
          aTab:=зДок.LineParts("Номенклатура");
          cTab:=зДок.LineParts("МаркетингПокупателей");
          If not ИзменитьМаркетингПриУдалении(cTab,СпБлокировка) Then
            ФлНеУдалятьФайл:=1;
            Continue;
          EndIf;
          aTab.ClearLines();
          cTab.ClearLines();
        EndIf;
        
        If ФлОбъединенныеДокументы<>1 Then
          If IsEmpty(зДок2) Then
            зДок2:=СоздатьНовыйКассовыйДокумент(ФлВозврат,аДата);
          Else
            If not ЗаблокироватьДокумент(зДок2) Then
              ФлНеУдалятьФайл:=1;
              Continue;
            EndIf;
            СпБлокировка.Add(зДок2);
            зДок2.СуммаВзаиморасчетов:=0;
          EndIf;
        EndIf;
        
        //Цикл загрузки документа
        While iLoop<тФайл.Size() Do
          iLoop:=iLoop+1;
          Стр:=тФайл[iLoop];
          If not IsExecutingInSeparateThread Then
            Form.StatusText(""+iLoop+" из "+тФайл.Size());
          EndIf;
          
          TearStr(Стр,";");//Номер транзакции
          TearStr(Стр,";");
          TearStr(Стр,";");
          аТип:=Number(TearStr(Стр,";"));
          If аТип=42 Then
            MessageVisual("Строка "+iLoop+": метка начала файла без окончания предыдущего. Предыдущий документ будет пропущен!","!");
            iLoop:=iLoop-1;
            Continue 2;
          EndIf;
          TearStr(Стр,";");//Код РМ
          НомерДок2:=TearStr(Стр,";");
          If НомерДок2<>НомерДок Then
            MessageVisual("Строка "+iLoop+": обнаружен документ "+НомерДок2+", без окончания предыдущего "+НомерДок+". Предыдущий документ будет пропущен!","!");
            iLoop:=iLoop-1;
            Continue 2;
          EndIf;
          If (аТип=1)or(аТип=11) Then
            TearStr(Стр,";");//Код кассира
            пКод:=TearStr(Стр,";");//Код товара
            TearStr(Стр,";");
            TearStr(Стр,";");//Цена без скидок
            пКоличество:=Abs(Number(Replace(TearStr(Стр,";"),",",".")));//Количество товара
            TearStr(Стр,";");//Сумма без скидок
            TearStr(Стр,";");//Тип документа, используется из 42
            TearStr(Стр,";");//Номер смены
            пЦена:=Number(Replace(TearStr(Стр,";"),",","."));//Цена товара
            пСумма:=Abs(Number(Replace(TearStr(Стр,";"),",",".")));//Сумма строки
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");//Штрихкод
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");//Тип товара ГИС МТ (здесь не имеет смысла)
            пМаркиГИС:=Replace(TearStr(Стр,";"),"№",";");//Марки ГИС МТ, по одной марке на строку, или с делением ¤
            пМаркиЕГАИС:=TearStr(Стр,";");//Марки ЕГАИС с делением ¤
            пМарки:=пМаркиГИС+?((пМаркиГИС<>"")And(пМаркиЕГАИС<>""),"¤")+пМаркиЕГАИС;
            
            //Ищем номенклатуру или/и партию
            зН:=Ref.тмцНоменклатура;
            зПартия:=Ref.тмцПартииТМЦ;
            If not НайтиНоменклатуруИлиПартию(пКод,зН,зПартия,iLoop,пМарки) Then
              Exit 0;
            EndIf;
            
            //Такая строка уже есть?
            aTab.CurLine:=0;
            If aTab.LocateAndGoto("Номенклатура,Партия",зН,зПартия)>0 Then
              aTab.Количество:=aTab.Количество+пКоличество;
              aTab.Сумма:=aTab.Сумма+пСумма;
              aTab.Цена:=?(aTab.Количество>0,aTab.Сумма/aTab.Количество);
            Else
              aTab.AddLine("Номенклатура,Партия,Количество,Цена,Сумма,СтавкаНДС",зН,зПартия,пКоличество,пЦена,пСумма,зН.СтавкаНДС);
            EndIf;
            глПересчитатьСтроку(зДок,aTab,"Количество2@СуммаНДС");
            
            пМаркиГИС:=пМаркиГИС+?(пМаркиГИС<>"","¤")+пМаркиЕГАИС;
            While пМаркиГИС<>"" Do
              Стр:=Trim(TearStr(пМаркиГИС,"¤"));
              If Стр<>"" Then
                ТМаркиДокумента.AddLine("Номенклатура,Партия,Марка",зН,зПартия,Стр);
              EndIf;
            EndDo;
          ElseIf (аТип=512)or(аТип=513) Then
            СтрУИ:="Ф:"+Магазин.Code+":"+НомерДок;
            СпКомплектации.AddValue(СтрУИ,,,1);
            If зДок3=0 Then
              зДок3:=Doc.КомплектацияТовара;
              If not зДок3.Find(">=DocDate,<DocDate,УникальныйИдентификатор",BegOfDay(аДата),BegOfDay(аДата)+1,СтрУИ) Then
                зДок3.New();
              Else
                If зДок3.Status()>1 Then
                  If ProgramMode()=1 Then
                    MessageVisual("Обработанный документ пропущен: "+зДок3+"!");
                  EndIf;
                  Continue 2;
                EndIf;
                зДок3.LineParts("ВходящаяНоменклатура").ClearLines();
                зДок3.LineParts("ИсходящаяНоменклатура").ClearLines();
                ФлНовыйДокумент:=0;
              EndIf;
              зДок3.DocDate:=аДата;
              зДок3.Автор:=глПользователь;
              зДок3.ЮрЛицо:=Магазин.ЮрЛицо;
              зДок3.Магазин:=Магазин;
              глУстановитьНовыйНомер(зДок3);
              зДок3.Склад:=Магазин.Склад;
              зДок3.КодОперации:=Enum.коКомплектацияТовара.КомплектацияТовара;
              зДок3.УникальныйИдентификатор:=СтрУИ;
              зДок3.УникальныйИдентификатор3:="=";
              зДок3.ТипЦен:=Магазин.ТипЦенРеализации;
            EndIf;
            bTab:=?(аТип=512,зДок3.LineParts("ВходящаяНоменклатура"),зДок3.LineParts("ИсходящаяНоменклатура"));
            TearStr(Стр,";");//Код кассира
            пКод:=TearStr(Стр,";");//Код товара
            TearStr(Стр,";");
            TearStr(Стр,";");//Цена без скидок
            пКоличество:=Abs(Number(Replace(TearStr(Стр,";"),",",".")));//Количество товара
            TearStr(Стр,";");//Сумма без скидок
            TearStr(Стр,";");//Тип документа, используется из 42
            TearStr(Стр,";");//Номер смены
            пЦена:=Number(Replace(TearStr(Стр,";"),",","."));//Цена товара
            пСумма:=Abs(Number(Replace(TearStr(Стр,";"),",",".")));//Сумма строки
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");//Штрихкод
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");//Тип товара ГИС МТ (здесь не имеет смысла)
            пМаркиГИС:=Replace(TearStr(Стр,";"),"№",";");//Марки ГИС МТ, по одной марке на строку, или с делением ¤
            пМаркиЕГАИС:=TearStr(Стр,";");//Марки ЕГАИС с делением ¤
            пМарки:=пМаркиГИС+?((пМаркиГИС<>"")And(пМаркиЕГАИС<>""),"¤")+пМаркиЕГАИС;
            
            //Ищем номенклатуру или/и партию
            зН:=Ref.тмцНоменклатура;
            зПартия:=Ref.тмцПартииТМЦ;
            If not НайтиНоменклатуруИлиПартию(пКод,зН,зПартия,iLoop,пМарки) Then
              Exit 0;
            EndIf;
            
            //Такая строка уже есть?
            bTab.CurLine:=0;
            If bTab.LocateAndGoto("Номенклатура,Партия",зН,зПартия)>0 Then
              bTab.Количество:=aTab.Количество+пКоличество;
              bTab.Сумма:=aTab.Сумма+пСумма;
              bTab.Цена:=?(aTab.Количество>0,aTab.Сумма/aTab.Количество);
            Else
              bTab.AddLine("Номенклатура,Партия,Количество,Цена,Сумма,СтавкаНДС",зН,зПартия,пКоличество,пЦена,пСумма,зН.СтавкаНДС);
            EndIf;
            глПересчитатьСтроку(зДок3,bTab,"Количество2@СуммаНДС");
            
            пМаркиГИС:=пМаркиГИС+?(пМаркиГИС<>"","¤")+пМаркиЕГАИС;
            While пМаркиГИС<>"" Do
              Стр:=Trim(TearStr(пМаркиГИС,"¤"));
              If Стр<>"" Then
                ТМаркиДокумента.AddLine("Номенклатура,Партия,Марка",зН,зПартия,Стр);
              EndIf;
            EndDo;
          ElseIf аТип=515 Then //Скидки
            //<Номер транзакции>;<Дата транзакции>;<Время транзакции>;515;;; | ;;;<Тип статьи>;<Штрихкод карты или ID статьи>;<Код товара>;<Количество>;<Сумма>;<Сумма документа>
            //Тип статьи: 0 -- ручная скидка
            //            1 -- статья маркетинга
            //            2 -- скидочная карта
            //            3 -- депозит
            TearStr(Стр,";");
            TearStr(Стр,";");
            TearStr(Стр,";");
            пТип:=Number(TearStr(Стр,";"));
            аШтрихкод:=Replace(Trim(TearStr(Стр,";")),"¤",";");
            пКод:=TearStr(Стр,";");//Код товара
            пКоличество:=Number(Replace(TearStr(Стр,";"),",","."));
            пСумма:=Abs(Number(Replace(TearStr(Стр,";"),",",".")));//Сумма скидки строки
            пСуммаДокумента:=Abs(Number(Replace(TearStr(Стр,";"),",",".")));//Сумма документа строки
            //Ищем номенклатуру или/и партию
            зН:=Ref.тмцНоменклатура;
            If _And(not IsEmpty(пКод),пТип<>0) Then
              зПартия:=Ref.тмцПартииТМЦ;
              If not НайтиНоменклатуруИлиПартию(пКод,зН,зПартия,iLoop,"") Then
                Exit 0;
              EndIf;
            EndIf;
            If пТип=0 Then
              аСтатья:=Ref.рознСкидочныеКарты;
              If not аСтатья.Find("Name","Ручная скидка") Then
                аСтатья.New();
                аСтатья.Name:="Ручная скидка";
                аСтатья.ТипКарты:=Enum.рознТипыСкидочныхКарт.СкидочнаяКарта;
                аСтатья.Save();
              EndIf;
            ElseIf пТип=1 Then
              аСтатья:=Ref.рознУсловияПродажИМаркетинговыеАкции;
              If not аСтатья.Find("~(@Parent=Магазин)And(Code=аШтрихкод)") Then
                MessageVisual("Не найдена статья маркетинга с кодом "+аШтрихкод+" из документа "+НомерДок+"! Загрузка остановлена!","!");
                Exit 0;
              EndIf;
              If (аСтатья.БюджетРубли>=0)Or(аСтатья.БюджетШтуки>=0) Then
                If СпБлокировка.Find(аСтатья)=0 Then
                  If not ЗаблокироватьЭлемент(аСтатья) Then
                    ФлНеУдалятьФайл:=1;
                    Continue;
                  EndIf;
                  СпБлокировка.Add(аСтатья);
                  аСтатья.Reload();
                EndIf;
                //Изменить бюджет
                If аСтатья.БюджетРубли>=0 Then
                  аСтатья.БюджетРубли:=?(ФлОбъединенныеДокументы=1,аСтатья.БюджетРубли-пСумма,Max(0,аСтатья.БюджетРубли-пСумма));
                EndIf;
                If аСтатья.БюджетШтуки>=0 Then
                  аСтатья.БюджетШтуки:=?(ФлОбъединенныеДокументы=1,аСтатья.БюджетШтуки-пКоличество,Max(0,аСтатья.БюджетШтуки-пКоличество));
                EndIf;
              EndIf;
            ElseIf (пТип=2)Or(пТип=3) Then
              аСтатья:=Ref.рознСкидочныеКарты;
              If пТип=3 Then
                аДепозит:=Enum.рознТипыСкидочныхКарт.Депозит;
                If not аСтатья.Find("~(Name=аШтрихкод)And(ТипКарты=аДепозит)") Then
                  //Создаем депозит автоматически
                  аСтатья.New();
                  аСтатья.Name:=аШтрихкод;
                  аСтатья.ТипКарты:=аДепозит;
                  аСтатья.Бюджет:=0;
                  аСтатья.ФлОбнулятьДепозитПриЗакрытииЧека:=1;
                  аСтатья.Save();
                EndIf;
              ElseIf ?(ФлПроверятьУсловия,not аСтатья.Find("~(Name=аШтрихкод)And((УсловиеДействия IN спУсловияКарт)Or(IsEmpty(УсловиеДействия)))"),not аСтатья.Find("Name",аШтрихкод)) Then
                MessageVisual("Не найдена скидочная карта с кодом "+аШтрихкод+" из документа "+НомерДок+"! Загрузка остановлена!","!");
                Exit 0;
              EndIf;
              If СпБлокировка.Find(аСтатья)=0 Then
                If not ЗаблокироватьЭлемент(аСтатья) Then
                  ФлНеУдалятьФайл:=1;
                  Continue;
                EndIf;
                СпБлокировка.Add(аСтатья);
                аСтатья.Reload();
              EndIf;
              //Изменить бюджет
              If аСтатья.Бюджет>=0 Then
                аСтатья.Бюджет:=?(ФлОбъединенныеДокументы=1,аСтатья.БюджетРубли-пСумма,Max(0,аСтатья.БюджетРубли-пСумма));
              EndIf;
              аСтатья.ИтогоПродаж:=аСтатья.ИтогоПродаж+пСуммаДокумента;
              аСтатья.ИтогоСкидка:=аСтатья.ИтогоСкидка+пСумма;
            Else
              MessageVisual("Неизвестный тип акции "+пТип+" в документе "+НомерДок+"! Загрузка остановлена!","!");
              Exit 0;
            EndIf;
            cTab.AddLine("СтатьяМаркетинга,Номенклатура,Количество,Сумма,СуммаДокумента",аСтатья,зН,пКоличество,пСумма,пСуммаДокумента);
          ElseIf (аТип=40)or(аТип=41) Then
            TearStr(Стр,";");//Код кассира
            пКод:=TearStr(Стр,";");//Номер карты
            TearStr(Стр,";");//Код вида оплаты
            //Операция: 0 -- наличная
            //          1 -- банковской картой
            //          6,8 -- сертификатом
            ФлОперация:=Number(TearStr(Стр,";"));
            TearStr(Стр,";");
            пСумма:=Abs(Number(Replace(TearStr(Стр,";"),",",".")));//Сумма оплаты
            TearStr(Стр,";");//Тип документа, используется из 42
            TearStr(Стр,";");//Номер смены
            If ФлОбъединенныеДокументы=1 Then
              If (ФлОперация=0)Or(ФлОперация=6)Or(ФлОперация=8) Then
                СтрТип:=?(ФлВозврат,"СуммаРКО","СуммаПКО")+?(ФлОперация=0,"0","1");
                спКомбинированныеДокументы[СтрТип]:=Round(Number(спКомбинированныеДокументы[СтрТип])+пСумма,2);
              EndIf;
            ElseIf ФлОперация=0 Then
              зДок2.СуммаВзаиморасчетов:=Round(зДок2.СуммаВзаиморасчетов+пСумма,2);
            ElseIf (ФлОперация=6)Or(ФлОперация=8) Then
              зДок.СуммаСертификатов:=пСумма;
            EndIf;
          ElseIf аТип=56 Then //Отмена
            If (зДок.Status()<>-1)And(зДок.Status()<>1) Then
              If not глУдалить(зДок,1) Then
                ФлНеУдалятьФайл:=1;
                MessageVisual("Невозможно удалить документ "+зДок+"!","!");
              EndIf;
            EndIf;
            If (зДок2.Status()<>-1)And(зДок2.Status()<>1) Then
              If not глУдалить(зДок2,1) Then
                ФлНеУдалятьФайл:=1;
                MessageVisual("Невозможно удалить документ "+зДок2+"!","!");
              EndIf;
            EndIf;
          ElseIf аТип=55 Then //Подтверждение
            If (ФлОбъединенныеДокументы=1)And(not IsDBObject(зДок3)) Then
              Continue 2;
            EndIf;
            If IsDBObject(зДок3) Then
              зДок:=зДок3;
              aTab:=зДок3.LineParts("ВходящаяНоменклатура");
            EndIf;
            зДок.СуммаВзаиморасчетов:=aTab.Sum("Сумма");
            //Безналичная сумма
            СмБезналичная:=зДок.СуммаВзаиморасчетов;
            If not IsEmpty(зДок2) Then
              СмБезналичная:=СмБезналичная-зДок2.СуммаВзаиморасчетов;
            EndIf;
            If not IsDBObject(зДок3) Then
              If ФлВозврат Then
                зДок.СуммаБезналичногоВозврата:=СмБезналичная;
              Else
                зДок.СуммаБезналичнойПродажи:=СмБезналичная;
              EndIf;
            EndIf;
            If aTab.Size()=0 Then
              //Удалить
              If (зДок.Status()<>-1)And(зДок.Status()<>1) Then
                If not глУдалить(зДок,1) Then
                  ФлНеУдалятьФайл:=1;
                  MessageVisual("Невозможно удалить документ "+зДок+"!","!");
                EndIf;
              EndIf;
              If (зДок2.Status()<>-1)And(зДок2.Status()<>1) Then
                If not глУдалить(зДок2,1) Then
                  ФлНеУдалятьФайл:=1;
                  MessageVisual("Невозможно удалить документ "+зДок2+"!","!");
                EndIf;
              EndIf;
              Continue 2;
            EndIf;
            
            
            ФлОк:=0;
            BeginTransaction();
            Try
              For i:=1 To СпБлокировка.Size() Do
                aEl:=СпБлокировка[i];
                If _And(DBTypeStr(aEl)="REF",not IsEmpty(aEl),aEl.Selected()=2) Then
                  aEl.Save();
                EndIf;
              EndDo;
            
              If not СохранитьИОбработатьДокумент(зДок) Then
                ФлНеУдалятьФайл:=1;
                Continue 2;          
              Endif;
              If not ЗарегистироватьМаркиДокумента(зДок,ТМаркиДокумента,ФлНовыйДокумент) Then
                ФлНеУдалятьФайл:=1;
                Continue 2;
              EndIf;
              
              //ПКО/РКО
              If зДок.DBName()<>"КомплектацияТовара" Then
                If зДок2.СуммаВзаиморасчетов>0 Then
                  зДок2.ДокОснование:=зДок;
                  If not СохранитьИОбработатьДокумент(зДок2) Then
                    ФлНеУдалятьФайл:=1;
                    Continue 2;          
                  Endif;
                Else
                  If (зДок2.Status()<>-1)And(зДок2.Status()<>1) Then
                    If not глУдалить(зДок2,1) Then
                      ФлНеУдалятьФайл:=1;
                      MessageVisual("Невозможно удалить документ "+зДок2+"!","!");
                      Continue 2;
                    EndIf;
                  EndIf;
                EndIf;
              EndIf;
            
              ФлОк:=1;
              CommitTransaction();
            Finally
              If not ФлОк Then
                RollbackTransaction();
              EndIf;
            EndTry;
            MassUnlock(СпБлокировка);
            СпБлокировка:=List.Create();
            Continue 2;
          Else
            Continue;
          EndIf;//Проверка типа документа
        EndDo;//Цикл загрузки одного документа
      EndDo;//Общий цикл
      
      If ТекДата<>0 Then
        If _And(ФлОбъединенныеДокументы=1,not ЗагрузитьКомбинированныеДокументы(ТекДата,спКомбинированныеДокументы,СпБлокировка)) Then
          Exit 0;
        EndIf;
      EndIf;
    Finally
      If СпБлокировка.Size()>0 Then
        MassUnlock(СпБлокировка);
      EndIf;  
    EndTry;
    
    If (not ФлНеУдалятьФайл)And(НачДатаФайла<>0)And(КонДатаФайла<>0) Then
      //Удалить документы Комплектация товара, не попавшие в период, но существующие в тек. базе
      СтрУИ:="Ф:"+Магазин.Code+":";
      ТЗ:="зДата:=BegOfDay(Doc.КомплектацияТовара.DocDate);Condition((зДата>=НачДатаФайла)And(зДата<=КонДатаФайла));
      |зСтатус:=Doc.КомплектацияТовара.@Status;Condition(зСтатус>1);
      |зМг:=Doc.КомплектацияТовара.Магазин;
      |Condition(зМг=Магазин);
      |зУИ:=Doc.КомплектацияТовара.УникальныйИдентификатор;
      |Condition(зУИ NOT IN СпКомплектации);
      |Condition(Left(Doc.КомплектацияТовара.УникальныйИдентификатор,"+Length(СтрУИ)+")=СтрУИ);
      |зДок:=Doc.КомплектацияТовара;
      |Group зДок;";
      З:=Query.Create();
      aTab:=З.Execute(ТЗ,0);
      aTab.Select();
      While aTab.Next() Do
        зДок:=aTab.зДок;
        If not глУдалить(зДок,1) Then
          ФлНеУдалятьФайл:=1;
          MessageVisual("Невозможно удалить документ "+зДок+"!","!");
        EndIf;
      EndDo;
    EndIf;
    
    
    If ФлНеУдалятьФайл Then
      MessageVisual("Файл "+Файл+" был загружен с ошибками, загрузка остановлена, последующие файлы (если есть) загружены не будут!","!");
      Exit 0;
    EndIf;
    
    If not File.DeleteFile(Файл) Then
      MessageVisual("Невозможно удалить загруженный файл данных "+Файл+"!","!");
      Exit 0;
    EndIf;
  EndDo;//по всем загружаемым файлам
  
  If ФлБылиФайлы Then
    ОбновитьВремяЗапуска("ПоследняяУдачнаяЗагрузка");
  EndIf;
  Exit 1;
EndFunction


Function Экранирование(Стр)
  Exit Replace(Стр,";","¤");
EndFunction

Function НайтиКодНоменклатурыИПартии(зН,зПартия=0)
  If КодыОбмена<3 Then
    If IsEmpty(зПартия) Then
      Exit ?(КодыОбмена=2,Str(Number(зН.Code)),зН.Code);
    ElseIf КодыОбмена=2 Then
      //YYYYYYYYXXXXXXXXXXXX -- Y - код партии, X -- код номенклатуры
      Exit Right(""+Str(Number(зПартия.Code))+зН.Code,20);
    Else
      //YYYYYYYYXXXXXXXXXXXX -- Y - код партии, X -- код номенклатуры
      Exit Right(зПартия.Code+зН.Code,20);
    EndIf;
  EndIf;  
  
  If тКодыНоменклатуры=0 Then
    ТЗ:="(зКод:=Ref.общДополнительныеСвойства.Name;
    |зТип:=Ref.общДополнительныеСвойства.ТипСвойства;
    |Condition(зТип=КодыНоменклатуры);
    |Condition(зКод<>"""");
    |Condition(Ref.общДополнительныеСвойства.@Status=0);
    |зН:=Ref.общДополнительныеСвойства.Элемент..Ref.тмцНоменклатура;
    |Group зН,зКод;) Postprocessing (SkipVariables зТип;)";
    З:=Query.Create();
    тКодыНоменклатуры:=З.Execute(ТЗ,0);
    MassLoadObjects(тКодыНоменклатуры);
    тКодыНоменклатуры.Sort("зН");
  
    ТЗ:="(зКод:=Ref.общДополнительныеСвойства.Name;
    |зТип:=Ref.общДополнительныеСвойства.ТипСвойства;
    |Condition(зТип=КодыПартий);
    |Condition(зКод<>"""");
    |Condition(Ref.общДополнительныеСвойства.@Status=0);
    |зПартия:=Ref.общДополнительныеСвойства.Элемент..Ref.тмцПартииТМЦ;
    |Group зПартия,зКод;) Postprocessing (SkipVariables зТип;)";
    З:=Query.Create();
    тКодыПартий:=З.Execute(ТЗ,0);
    MassLoadObjects(тКодыПартий);
    тКодыПартий.Sort("зПартия");
  EndIf;
  
  If not IsEmpty(зПартия) Then
    If тКодыПартий.FindAndGoto(зПартия,,"зПартия",1) Then
      Exit тКодыПартий.зКод;
    EndIf;
  ElseIf тКодыНоменклатуры.FindAndGoto(зН,,"зН",1) Then
    Exit тКодыНоменклатуры.зКод;
  EndIf;
  аСв:=Ref.общДополнительныеСвойства;
  If not IsEmpty(зПартия) Then
    If аСв.Find("~(ТипСвойства=КодыПартий)And(Элемент=зПартия)And(@Status=0)And(Name<>"""")") Then
      тКодыПартий.AddLineSorted("зПартия","зПартия,зКод",зПартия,аСв.Name);
      Exit аСв.Name;
    EndIf;
  Else
    If аСв.Find("~(ТипСвойства=КодыНоменклатуры)And(Элемент=зН)And(@Status=0)And(Name<>"""")") Then
      тКодыНоменклатуры.AddLineSorted("зН","зН,зКод",зН,аСв.Name);
      Exit аСв.Name;
    EndIf;
  EndIf;
  
  If IsEmpty(СемафорИзмененияКодов) Then
    Имя:="ФРОНТСРВ_"+КодыНоменклатуры.Code;
    аДата:=Date();
    While not DBLockStringMutex(Имя) Do
      If GetPeriodMs(аДата)>300000 Then //5 мин
        Raise "Невозможно заблокировать семафор "+Имя+" для создания новых кодов номенклатуры и партий. Повторите выгрузку позднее!";
      EndIf;
      Sleep(250);
      Form.StatusText("Попытка блокировки семафора изменения кодов выгрузки ("+(GetPeriodMs(аДата)\1000)+" с.)...");
    EndDo;
    СемафорИзмененияКодов:=Имя;
    аСв:=Ref.общДополнительныеСвойства;
    ТЗ:="(зКод:=Number(Ref.общДополнительныеСвойства.Name);
    |зТип:=Ref.общДополнительныеСвойства.ТипСвойства;
    |Condition((зТип=КодыНоменклатуры)or(зТип=КодыПартий));
    |Group зКод;) Postprocessing (SkipVariables зТип;)";
    З:=Query.Create();
    aTab:=З.Execute(ТЗ,0);
    aTab.Sort("зКод");
    
    МаксимальныйКод:=0;
    If aTab.Size()>0 Then
      МаксимальныйКод:=aTab["зКод",aTab.Size()];
    EndIf;
  EndIf;
  
  //Новый код
  МаксимальныйКод:=МаксимальныйКод+1;
  аСв:=Ref.общДополнительныеСвойства;
  If not IsEmpty(зПартия) Then
    If not аСв.Find("~(ТипСвойства=КодыПартий)And(Элемент=зПартия)And(@Status=0)") Then
      аСв.New();
    EndIf;
    аСв.Элемент:=зПартия;
    аСв.ТипСвойства:=КодыПартий;
    аСв.Name:=Str(МаксимальныйКод);
    аСв.Save();
    ФлИзмененных:=ФлИзмененных+1;
    тКодыПартий.AddLineSorted("зПартия","зПартия,зКод",зПартия,аСв.Name);
  Else
    If not аСв.Find("~(ТипСвойства=КодыНоменклатуры)And(Элемент=зН)And(@Status=0)") Then
      аСв.New();
    EndIf;
    аСв.Элемент:=зН;
    аСв.ТипСвойства:=КодыНоменклатуры;
    аСв.Name:=Str(МаксимальныйКод);
    аСв.Save();
    ФлИзмененных:=ФлИзмененных+1;
    тКодыНоменклатуры.AddLineSorted("зН","зН,зКод",зН,аСв.Name);
  EndIf;
  If ФлИзмененных>50 Then
    CommitTransaction();
    ФлИзмененных:=0;
    BeginTransaction();
  EndIf;
  
  Exit аСв.Name;
EndFunction

Function ОсвободитьСемафор(ByRef СемафорИзмененияКодов)
  If СемафорИзмененияКодов<>"" Then
    DBUnlockStringMutex(СемафорИзмененияКодов);
    СемафорИзмененияКодов:="";
  EndIf;
EndFunction

Function ВыполнитьОтправку(ФлПолнаяВыгрузка=0,ФлИзОбщейВыгрузки=0)
  ОбновитьВремяЗапуска("ПоследняяВыгрузка");
  If not ФлИзОбщейВыгрузки Then
    ОсвободитьСемафор(СемафорИзмененияКодов);
  EndIf;
  //Последовательность выгрузки:
  //$$$ADDTAXRATES,$$$ADDTAXGROUPS,$$$ADDTAXGROUPRATES
  //$$$ADDASPECTVALUES (максимальная розничная цена)
  //$$$ADDQUANTITY (каталог продуктов)
  //$$$ADDBARCODES (доп. штрихкоды)
  //$$$ADDMARKETINGACTIONS,$$$ADDMARKETINGEVENTS (запреты продаж)
  //$$$EXCAMPAIGNS
  //  <Тип строки=0 (акция)>;<Наименование акции>;<Идентификатор или код акции (32)>;<Тип акции>;<Дата начала>;<Дата окончания>;<Бюджет рубли>;<Бюджет штуки>;<Общий процент скидки>;<Мин. сумма документа для скидки с суммы>;<Base64 условие>
  //  <Тип строки=1 (номенклатуры акции)>;<Код товара>;<Процент скидки>;<Сумма скидки>;<Макс. количество>
  //  <Тип строки=2 (номенклатуры условия)>;<Код товара>;<Количество>
  //Тип акции: 0 -- программное условие, 1 -- скидка на позицию, 2 -- скидка с суммы продажи
  //$$$EXDISCOUNTCARDS
  //  <Тип строки=0 (условие карты)>;<Наименование условия>;<Идентификатор или код условия (32)>;<Base64 условие>;<1>
  //  <Тип строки=1 (номенклатура условия)>;<Код товара>
  //  <Тип строки=2 (карта)>;<Штрихкод карты>;<Тип карты>;<Идентификатор условия карты>;<Дата начала>;<Дата окончания>;<Бюджет>;<Наименование контрагента карты>;<ИНН/КПП контрагента карты>;<Процент скидки>;<Итого продаж>;<Итого скидка>
  //Тип карты: 0 -- скидочная карта, 1 -- подарочный сертификат
  //$$$EXMARKS
  //  <КодМарки>;<КодВыгрузки>
  //Строки файла загрузки:
  //##@@&&                           -- заголовок
  //#                                -- если @, файл уже был загружен
  //[Команда 1]                      -- если команда отсутствует, считается, что это $$$ADDQUANTITY
  //...
  //
  //В файле могут присутствовать комментарии, начинающиеся с //
  
  Способ:=Max(1,Способ);
  If (Способ<>1)And(Способ<>2) Then
    Raise "В данный момент поддерживается только способ выгрузки в локальную папку и FTP!";
  EndIf;
  If КодыОбмена=3 Then
    If IsEmpty(КодыНоменклатуры)+IsEmpty(КодыПартий)>0 Then
      Raise "Не выбраны коды номенклатуры или коды партий в установках протокола!";
    EndIf;
  EndIf;
  тКодыНоменклатуры:=0;
  тКодыПартий:=0;
  
  If Способ=1 Then
    If ПутьПротокола="" Then
      Raise "Не задана папка для выгрузки!";
    EndIf;
  ElseIf Способ=2 Then
    If ПутьПротокола="" Then
      Raise "Не заданы параметры для выгрузки!";
    EndIf;
  EndIf;
  
  //Начало файла всегда одинаковое
  Т:=Text.Create(1);
  Т.AddString("##@@&&");
  Т.AddString("#");
  Т.AddString("$$$DELETEALLWARES");
  Т.AddString("$$$DELETEALLBARCODES");
  Т.AddString("$$$DELETEALLASPECTSCHMS");
  Т.AddString("$$$DELETEALLASPECTS");
  Т.AddString("$$$DELETEALLASPECTVALUES");
  Т.AddString("$$$ADDASPECTSCHMS");
  Т.AddString("1;Характеристики;Характеристики;");
  Т.AddString("");
  Т.AddString("$$$ADDASPECTS");
  Т.AddString("1;1;Характеристики;Характеристики;");
  Т.AddString("");
  Т.AddString("$$$ADDTAXRATES");
  Т.AddString("1;НДС 0%;НДС 0%;0;0;1;");
  Т.AddString("2;НДС 10%;НДС 10%;0;10;2;");
  Т.AddString("3;НДС 20%;НДС 20%;0;20;3;");
  Т.AddString("4;Без НДС;Без НДС;0;0;4;");
  Т.AddString("");
  Т.AddString("$$$ADDTAXGROUPS");
  Т.AddString("1;НДС 0%;НДС 0%;");
  Т.AddString("2;НДС 10%;НДС 10%;");
  Т.AddString("3;НДС 20%;НДС 20%;");
  Т.AddString("4;Без НДС;Без НДС;");
  Т.AddString("");
  Т.AddString("$$$ADDTAXGROUPRATES");
  Т.AddString("1;1;1;0;");
  Т.AddString("2;2;2;0;");
  Т.AddString("3;3;3;0;");
  Т.AddString("4;4;4;0;");
  If НестандарныеВыгрузки=1 Then //Дата и время последнего загруженного документа
    аДата:=0;
    aDoc:=Doc.Реализация;
    aDoc.UseOrder("DocDate-");
    If aDoc.Find("Магазин,УникальныйИдентификатор3",Магазин,"=") Then
      аДата:=aDoc.DocDate;
    EndIf;
    aDoc:=Doc.ВозвратОтПокупателя;
    aDoc.UseOrder("DocDate-");
    If aDoc.Find("Магазин,УникальныйИдентификатор3",Магазин,"=") Then
      аДата:=?(IsEmpty(аДата),aDoc.DocDate,Max(aDoc.DocDate,аДата));
    EndIf;
    If not IsEmpty(аДата) Then
      Т.AddString("");
      Т.AddString("$$$LASTDOCUMENTDATE");
      Т.AddString(FormatDate(аДата,"dd.mm.YYYY hh:tt:ss.ppp"));
    EndIf;
  EndIf;
  
  СпСтавкиНДС:=List.Create(Enum.СтавкиНДС.НДС0,Enum.СтавкиНДС.НДС10,Enum.СтавкиНДС.НДС20,Enum.СтавкиНДС.БезНДС);
  
  //"Код группы гис МТ" := Код Фронтол
  СпКодированиеГруппГИСМТ:=List.Create();
  СпКодированиеГруппГИСМТ["14"]:=2;
  СпКодированиеГруппГИСМТ["15"]:=3;
  СпКодированиеГруппГИСМТ["19"]:=3;
  СпКодированиеГруппГИСМТ["3"]:=4;
  СпКодированиеГруппГИСМТ["16"]:=4;
  СпКодированиеГруппГИСМТ["2"]:=5;
  //СпКодированиеГруппГИСМТ["?"]:=7; -- по умолчанию
  СпКодированиеГруппГИСМТ["6"]:=8;
  СпКодированиеГруппГИСМТ["4"]:=9;
  СпКодированиеГруппГИСМТ["5"]:=10;
  СпКодированиеГруппГИСМТ["1"]:=11;
  СпКодированиеГруппГИСМТ["12"]:=12;
  СпКодированиеГруппГИСМТ["8"]:=13;
  //СпКодированиеГруппГИСМТ["?"]:=14;
  СпКодированиеГруппГИСМТ["13"]:=15;
  //СпКодированиеГруппГИСМТ["?"]:=16;
  //СпКодированиеГруппГИСМТ["?"]:=17;
  СпКодированиеГруппГИСМТ["15"]:=18;
  
  СпН:=List.Create();
  aTab:=Магазин.LineParts("Номенклатура");
  If aTab.Size()=0 Then
    Raise "Не задана номенклатура выгрузки для магазина "+Магазин+"!";
  EndIf;
  aTab.CopyTo(СпН,,,"Номенклатура");
  
  //TODO:$$$ADDASPECTVALUES
  
  //$$$ADDQUANTITY (каталог продуктов)
  If ФлПолнаяВыгрузка Then
    ТЗ:="(зН:=Ref.тмцНоменклатура;
    |Condition(зН IN СпН);
    |Condition(Ref.тмцНоменклатура.@IsFolder=0);
    |зСтатус:=Ref.тмцНоменклатура.@Status;Condition(зСтатус=0);
    |Group зН with folders;) Postprocessing (
    |RemoveLev0Lines 1;)";
    З:=Query.Create();
    aTab:=З.Execute(ТЗ);
  EndIf;
  
  //Остатки
  аСк:=Магазин.Склад;
  КДата:=BegOfDay(Date());
  НДата:=?(not ФлПолнаяВыгрузка,BegOfMonth(КДата-15),КДата);
  ТЗ:="(Period From НДата to КДата;
  |зН:=Storage.ОстаткиТМЦ.Номенклатура;
  |Condition(зН IN СпН);
  |зЮЛ:=Storage.ОстаткиТМЦ.ЮрЛицо;
  |зСк:=Storage.ОстаткиТМЦ.Склад;
  |Condition(зСк=Магазин.Склад);
  |Condition(зЮЛ=Магазин.ЮрЛицо);"+
  ?(not ФлПолнаяВыгрузка,"","зКл2:=Expense(Количество);")+
  "зКл:=EndTotals(Количество);"+
  ?(not ФлПолнаяВыгрузка,"Group зН with folders;","Group зН;")+
  ") Postprocessing (RemoveLev0Lines 1;)";
  З:=Query.Create();
  З.Execute(ТЗ);
  If not ФлПолнаяВыгрузка Then
    aTab:=З.ResultTable;
  EndIf;
  //Найти ту папку, в которую входят все, чтобы исключить ее из выгрузки
  аВерхняяПапка:=0;
  If aTab.Size()>1 Then
    If _And(aTab["зН",1].IsFolder(),aTab["зН",2].IsFolder(),aTab["зН",1].Contains(aTab["зН",2])) Then
      аВерхняяПапка:=aTab["зН",1];
    EndIf;
  EndIf;
  
  
  //Остатки по макс. ценам (сигареты)
  НДата2:=BegOfMonth(КДата-15);
  ТЗ:="Period From НДата2 to КДата;
  |зН:=Storage.ОстаткиТМЦ.Номенклатура;
  |Condition(зН IN СпН);
  |зПартия:=Storage.ОстаткиТМЦ.Партия;
  |зЮЛ:=Storage.ОстаткиТМЦ.ЮрЛицо;
  |зСк:=Storage.ОстаткиТМЦ.Склад;
  |Condition(зСк=Магазин.Склад);
  |Condition(зЮЛ=Магазин.ЮрЛицо);
  |Condition(Storage.ОстаткиТМЦ.Номенклатура.флПодлежитПрослеживаемости=1);
  |Condition(Storage.ОстаткиТМЦ.Партия.ЦенаМаксимальнаяПродажная>0);
  |зКл:=EndTotals(Количество);
  |зКл2:=Expense(Количество);
  |Group зН,зПартия;";
  З2:=Query.Create();
  З2.Execute(ТЗ);
  
  Т.AddString("");
  Т.AddString("$$$REPLACEQUANTITY");
  
  ФлИзмененных:=0;
  BeginTransaction();
  Try
    ЦеныНаДату:=Date();
    спПапки:=List.Create();
    ТВыгружены:=Tab.Create("КодНоменклатуры,КодВыгрузки");//Сортивка: КодНоменклатуры
    //Выгрузка товаров
    aTab.Select();
    While aTab.Next() Do
      If _And(ProgramMode()=1,aTab.CurLine%10=0) Then
        Form.StatusText(""+aTab.CurLine+" из "+aTab.Size()+" (Товары)");
      EndIf;
      //<Код товара>;<Штрихкоды ч/з запятую>;<Наименование>;<Наименование 2>;<Цена>;<Остаток>;;<Флаги ч/з запятую>;<Минимальная цена>;<Срок годности>;<Коды разрезов>;<Вариант разрезов>;<xPos: Тип товара>;
      //  <Коэффициент штрихкода>;;<Код группы>;<Товар 1 или пусто, группа 0>;;;<Серия>;<Сертификат>;;<Код налоговой группы>;<Код весов>;<PLU-код>;<Артикул>;<Тип скидки>;
      //  <Значение скидки>;<Максимальная скидка %>;;<Имя файла картинки>;<Описание>;<Кратность количества>;<Код ценника>;<Тип вознаграждения>;<Значение вознаграждения>;
      //  <Номер секции ККМ>;<ГТД>;<Код группы печати>;<Код группы печати копии>;<Код группы печати марки>;<Код предприятия>;;<Номер сообщения в весах>;<КодОКЕИ -- расширение sf>;<Визуальный выбор>;
      //  <Левая граница модификаторов>;<Правая граница модификаторов>;<Сообщение для весов>;<0 -- товар, 1 -- услуга>;<Код услуги>;<Код вида АП>;<Емкость тары в л.>;
      //  <0 -- обычный товар, 1 -- алкоголь, 2 -- маркированная продукция>;<0 -- алкоголь без марки, 1 -- с маркой>;<Крепость алкоголя %>
      //<Тип товара>: 1 -- товар, 2 -- акцизный товар, 3 -- работа, 4 -- услуга, 5 -- составной товар, 6 -- иной товар, 7 -- аванс
      зН:=aTab.зН;
      If зН=аВерхняяПапка Then
        Continue;
      EndIf;
      пКод:=НайтиКодНоменклатурыИПартии(зН);

      пКодГруппы:="";
      If not IsEmpty(зН.Folder()) Then
        If аВерхняяПапка<>зН.Folder() Then
          aNum:=спПапки.Find(зН.Folder(),,1);
          If aNum>0 Then
            пКодГруппы:=НайтиКодНоменклатурыИПартии(спПапки[aNum]);
          EndIf;
        EndIf;
      EndIf;
      
      If зН.IsFolder() Then
        Т.AddString(пКод+";;"+Экранирование(зН.Name)+";"+Экранирование(зН.Name)+";;;;0,1,1,,1,1,1,1,1,0,1;;;;1;;;;"+пКодГруппы+";0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0;0;;");
        спПапки.Add(зН,,,1);
        Continue;
      EndIf;
      
      пЦена:=Replace(Max(0,глПолучитьРозничнуюЦену(зН,Магазин.ТипЦенРеализации,Магазин,1,ЦеныНаДату,1)),".",",");
      пМинЦена:=Replace(зН.ЦенаМинимальнаяПродажная,".",",");
      пТипТовара:=?(зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Услуга,4,?((зН.флПодлежитПрослеживаемости)And(зН.ГИСМТТоварнаяГруппа.Selected()=0),2,1));
      пНДС:=СпСтавкиНДС.Find(зН.СтавкаНДС);
      пНДС:=?(пНДС=0,4,пНДС);
      пPLU:="";
      If зН.флВесовойТовар Then
        aPLU:=Ref.тмцPLUКоды;
        If aPLU.Find("@Parent,Магазин",зН,Магазин) Then
          пPLU:=aPLU.PLUКод;
        EndIf;
      EndIf;
      пАПКод:=Trim(зН.ЕГАИСКодАП);
      пОбъем:=Replace(зН.ОбъемЛитров,".",",");
      пКодТГ:=?(зН.флАлкогольнаяПродукция,1,0);
      If зН.флПодлежитПрослеживаемости Then
        If зН.ГИСМТТоварнаяГруппа.Selected()<>0 Then
          пКодТГ:=СпКодированиеГруппГИСМТ[зН.ГИСМТТоварнаяГруппа.ВнешнийКод];
          If IsEmpty(пКодТГ) Then
            пКодТГ:=7;
          EndIf;
        EndIf;
      EndIf;
      ФлМарочная:=0;
      пКрепость:="";
      If зН.флАлкогольнаяПродукция Then
        aEl:=Ref.тмцПартииТМЦ;
        aEl.UseOrder("Code-");
        aList:=aEl.Load(2,"~(@Status=0)And(@Parent=зН)");
        If aList.Size()>1 Then
          ФлМарочная:=Max(ФлМарочная,aList[1].флМарочныйУчет,aList[2].флМарочныйУчет);
        ElseIf aList.Size()>0 Then
          ФлМарочная:=Max(ФлМарочная,aList[1].флМарочныйУчет);
        EndIf;
        пКрепость:=Replace(зН.сертКрепость,".",",");
        If aList.Size()>0 Then
          If Trim(aList[1].ЕГАИСКодАП)<>"" Then
            пАПКод:=Trim(aList[1].ЕГАИСКодАП);
          EndIf;
        EndIf;
      EndIf;
      пОстаток:=0;
      If ФлПолнаяВыгрузка Then
        If З.ResultTable.FindAndGoto(зН,,"зН")>0 Then
          пОстаток:=З.ResultTable.зКл;
        EndIf;
      Else
        пОстаток:=aTab.зКл;
      EndIf;
      ФлБылиПартии:=0;
      //<Флаги ч/з запятую>: 1 -- весовой, 2-9 -- не важно, 10 -- разливаемый товар, 11-14 -- не важно
      СтрФлаги:=""+зН.флВесовойТовар+",1,1,,1,1,1,1,1,"+зН.флВесовойТовар+",1";
      If (зН.флПодлежитПрослеживаемости)And(зН.ГИСМТТоварнаяГруппа.Selected()<>0) Then
        //Дробление табачной номенклатуры по остаткам по макс. розничным ценам?
        З2.ResultTable.CurLine:=0;
        If З2.ResultTable.LocateAndGoto("@LEVEL,зН",2,зН)>0 then
          //Перераспределяем отрицательные остатки на положительные
          ТабПартии:=Tab.Create("Партия,Код,Количество,МРЦ");
          While З2.Next(2) Do
            ТабПартии.AddLine("Партия,Количество,МРЦ,Код",З2.зПартия,З2.зКл,З2.зПартия.ЦенаМаксимальнаяПродажная,З2.зПартия.Code);
          EndDo;
          ТабПартии.Sort("МРЦ+,Код+");
          ТабПартии.Group("МРЦ","Партия:FIRST,Код:FIRST,Количество");
          ТабПартии.Select();
          While ТабПартии.Next() Do
            ТабПартии.Код:=ТабПартии.Партия.Code;
          EndDo;
          ТабПартии.Sort("Количество+,Код+");
          ТабПартии.Select();
          While ТабПартии.Next() Do
            If _And(ТабПартии.CurLine<ТабПартии.Size(),ТабПартии.Количество<0) Then
              ТабПартии["Количество",ТабПартии.Size()]:=ТабПартии["Количество",ТабПартии.Size()]+ТабПартии.Количество;
              ТабПартии.Количество:=0;
            EndIf;
          EndDo;
          If ТабПартии.Size()>0 Then
            пОстаток:=пОстаток-ТабПартии.Sum("Количество");
            ТабПартии["Количество",ТабПартии.Size()]:=ТабПартии["Количество",ТабПартии.Size()]+пОстаток;
            пОстаток:=0;
          EndIf;
          
          ТабПартии.Select();
          While ТабПартии.Next() Do
            зПартия:=ТабПартии.Партия;
            If зПартия.ЦенаМаксимальнаяПродажная>0 Then
              пДоб:=" "+зПартия.ЦенаМаксимальнаяПродажная+" руб.";
              пЦена2:=Replace(зПартия.ЦенаМаксимальнаяПродажная,".",",");
              пОстаток2:=Replace(ТабПартии.Количество,".",",");
              пКод2:=НайтиКодНоменклатурыИПартии(зН,зПартия);
              Т.AddString(пКод2+";;"+Экранирование(зН.Name+пДоб)+";"+Экранирование(зН.Name+пДоб)+";"+пЦена2+";"+пОстаток2+";;"+СтрФлаги+";"+пМинЦена+";;;1;"+пТипТовара+";;;"
                +пКодГруппы+";1;;;;;;"+пНДС+";;"+пPLU+";;;;;;;;;;;;;;;;;;;;;;;;;;;;"+пАПКод+";"+пОбъем+";"+пКодТГ+";"+?(ФлМарочная,0,1)+";"+пКрепость+";2");
              ФлБылиПартии:=1;
              ТВыгружены.AddLineSorted("КодНоменклатуры","КодНоменклатуры,КодВыгрузки",пКод,пКод2);
            EndIf;
          EndDo;
        EndIf;
      EndIf;
      If _And(ФлБылиПартии,пОстаток=0) Then
        Continue;
      EndIf;
      Т.AddString(пКод+";;"+Экранирование(зН.Name)+";"+Экранирование(зН.Name)+";"+пЦена+";"+пОстаток+";;"+СтрФлаги+";"+пМинЦена+";;;1;"+пТипТовара+";;;"
        +пКодГруппы+";1;;;;;;"+пНДС+";;"+пPLU+";;;;;;;;;;;"+?(НестандарныеВыгрузки=1,зН.базЕдиница.ВнешнийКод)+";;;;;;;;;;;;;;;;;"+пАПКод+";"+пОбъем+";"+пКодТГ+";"+?(ФлМарочная,0,1)+";"+пКрепость+";2");
      ТВыгружены.AddLineSorted("КодНоменклатуры","КодНоменклатуры,КодВыгрузки",пКод,пКод);
    EndDo;
  
    //$$$ADDBARCODES
    Т.AddString("");
    Т.AddString("$$$ADDBARCODES");
    
    ТЗ:="зН:=Ref.тмцШтрихкоды.@Parent..Ref.тмцНоменклатура;
    |Condition(зН IN СпН);
    |зКф:=Ref.тмцШтрихкоды.Коэффициент;
    |Condition((зКф=0)Or(зКф=1));
    |зСтатус:=Ref.тмцШтрихкоды.@Status;Condition(зСтатус=0);
    |зКод:=Ref.тмцШтрихкоды.Name;
    |Group зН,зКод;";
    З:=Query.Create();
    aTab:=З.Execute(ТЗ,0);
    MassLoadObjects(aTab,"зН",,,2,"Code");
    aTab.Select();
    While aTab.Next() Do
      If _And(ProgramMode()=1,aTab.CurLine%10=0) Then
        Form.StatusText(""+aTab.CurLine+" из "+aTab.Size()+" (Штрихкоды)");
      EndIf;
      If _And(aTab.зКод<>"",not IsEmpty(aTab.зН)) Then
        пКодТМЦ:=НайтиКодНоменклатурыИПартии(aTab.зН);
        ТВыгружены.CurLine:=0;
        If ТВыгружены.LocateAndGoto("КодНоменклатуры",пКодТМЦ)>0 Then
          Repeat
            Т.AddString(aTab.зКод+";"+ТВыгружены.КодВыгрузки+";;1;1;");
            If ТВыгружены.CurLine=ТВыгружены.Size() Then
              Break;
            EndIf;
            ТВыгружены.CurLine:=ТВыгружены.CurLine+1;
          Until ТВыгружены["КодНоменклатуры"]<>пКодТМЦ;
        EndIf;
      EndIf;
    EndDo;
    
    If НестандарныеВыгрузки=1 Then
      //$$$EXCAMPAIGNS
      //  <Тип строки=0 (акция)>;<Наименование акции>;<Идентификатор или код акции (32)>;<Тип акции>;<Дата начала>;<Дата окончания>;<Бюджет рубли>;<Бюджет штуки>;<Общий процент скидки>;<Мин. сумма документа для скидки с суммы>;<Base64 условие>
      //  <Тип строки=1 (номенклатуры акции)>;<Код товара>;<Процент скидки>;<Сумма скидки>;<Макс. количество>
      //  <Тип строки=2 (номенклатуры условия)>;<Код товара>;<Количество>
      //Тип акции: 0 -- программное условие, 1 -- скидка на позицию, 2 -- скидка с суммы продажи, 3 -- запрет скидок на группу номенклатуры
      ФлСтроки:=0;
      аАкции:=Ref.рознУсловияПродажИМаркетинговыеАкции;
      If Магазин.ГруппаМагазина.Selected()<>0 Then
        аАкции.Select("~((@Parent=Магазин)Or(@Parent=Магазин.ГруппаМагазина))And(@Status<>1)");
      Else
        аАкции.Select("~(@Parent=Магазин)And(@Status<>1)");
      EndIf;
      While аАкции.Next() Do
        If _And(not IsEmpty(аАкции.ДатаНачалаДействия),аАкции.ДатаНачалаДействия>Date()) Then
          Continue;
        EndIf;
        If _And(not IsEmpty(аАкции.ДатаОкончанияДействия),аАкции.ДатаОкончанияДействия<Date()) Then
          Continue;
        EndIf;
        If not ФлСтроки Then
          Т.AddString("$$$EXCAMPAIGNS");
          ФлСтроки:=1;
        EndIf;
        пУсловие:=?(аАкции.Условие="","",EncodeString(Unicode(аАкции.Условие),"base64"));
        Т.AddString("0;"+Экранирование(аАкции.Name)+";"+аАкции.Code+";"+(Max(1,аАкции.ТипУсловия.Index())-1)+";"+?(IsEmpty(аАкции.ДатаНачалаДействия),"",аАкции.ДатаНачалаДействия)+";"+
          ?(IsEmpty(аАкции.ДатаОкончанияДействия),"",аАкции.ДатаОкончанияДействия)+";"+аАкции.БюджетРубли+";"+аАкции.БюджетШтуки+";"+аАкции.ПроцентСкидки+";"+аАкции.СуммаДокумента+";"+
          пУсловие);
        aTab:=аАкции.LineParts("Номенклатура");
        aTab.Select();
        While aTab.Next() Do
          пКод:=НайтиКодНоменклатурыИПартии(aTab.Номенклатура);
          //If ТВыгружены.FindAndGoto(пКод,,"КодНоменклатуры",1)=0 Then
          //  Raise "В номенклатуру акции магазина входят позиции или папки, запрещенные для выгрузки по данному магазину!";
          //EndIf;
          Т.AddString("1;"+пКод+";"+aTab.ПроцентСкидки+";"+aTab.СуммаСкидки+";"+aTab.МаксКоличество);
        EndDo;
        aTab:=аАкции.LineParts("НоменклатураУсловия");
        aTab.Select();
        While aTab.Next() Do
          пКод:=НайтиКодНоменклатурыИПартии(aTab.Номенклатура);
          //If ТВыгружены.FindAndGoto(пКод,,"КодНоменклатуры",1)=0 Then
          //  Raise "В номенклатуру условия акции магазина входят позиции или папки, запрещенные для выгрузки по данному магазину!";
          //EndIf;
          Т.AddString("2;"+пКод+";"+aTab.Количество);
        EndDo;
      EndDo;
      
      //$$$EXDISCOUNTCARDS
      //  <Тип строки=0 (условие карты)>;<Наименование условия>;<Идентификатор или код условия (32)>;<Base64 условие>;<1>
      //  <Тип строки=1 (номенклатура условия)>;<Код товара>
      //  <Тип строки=2 (карта)>;<Штрихкод карты>;<Тип карты>;<Идентификатор условия карты>;<Дата начала>;<Дата окончания>;<Бюджет>;<Наименование контрагента карты>;<ИНН/КПП контрагента карты>;<E-mail и телефон ч/з затятые>;<Процент скидки>;<Итого продаж>;<Итого скидка>
      //Тип карты: 0 -- скидочная карта, 1 -- подарочный сертификат
      ФлСтроки:=0;
      ФлПроверятьУсловия:=0;
      спУсловия:=List.Create();
      аУсловия:=Ref.рознУсловияСкидочныхКарт;
      аУсловия.Select();
      While аУсловия.Next() Do
        If not ФлСтроки Then
          Т.AddString("$$$EXDISCOUNTCARDS");
          ФлСтроки:=1;
        EndIf;
        ФлПроверятьУсловия:=1;
        aTab:=аУсловия.LineParts("Магазины");
        If _And(aTab.Size()>0,aTab.Find(Магазин,,"МагазинИлиГруппа")=0,aTab.Find(Магазин.ГруппаМагазина,,"МагазинИлиГруппа")=0) Then
          Continue;
        EndIf;
        спУсловия.Add(аУсловия.Copy());
        пУсловие:=?(аУсловия.Условие="","",EncodeString(Unicode(аУсловия.Условие),"base64"));
        Т.AddString("0;"+Экранирование(аУсловия.Name)+";"+аУсловия.Code+";"+пУсловие+";1");
        aTab:=аУсловия.LineParts("Номенклатура");
        aTab.Select();
        While aTab.Next() Do
          пКод:=НайтиКодНоменклатурыИПартии(aTab.Номенклатура);
          //If ТВыгружены.FindAndGoto(пКод,,"КодНоменклатуры",1)>0 Then
          //  Т.AddString("1;"+пКод);
          //EndIf;
          Т.AddString("1;"+пКод);
        EndDo;
      EndDo;
      
      If (not ФлПроверятьУсловия)or(спУсловия.Size()>0) Then
        аКарты:=Ref.рознСкидочныеКарты;
        аКарты.Select("~(@Status<>1)And(Name<>"""")"+?(ФлПроверятьУсловия,"And((УсловиеДействия IN спУсловия)Or(IsEmpty(УсловиеДействия)))"));
        While аКарты.Next() Do
          If _And(not IsEmpty(аКарты.ДатаНачалаДействия),аКарты.ДатаНачалаДействия>Date()) Then
            Continue;
          EndIf;
          If _And(not IsEmpty(аКарты.ДатаОкончанияДействия),аКарты.ДатаОкончанияДействия<Date()) Then
            Continue;
          EndIf;
          If not ФлСтроки Then
            Т.AddString("$$$EXDISCOUNTCARDS");
            ФлСтроки:=1;
          EndIf;
          пТелефоны:=Replace(аКарты.Телефоны," ","");
          пКонтрагент:=";";
          If аКарты.Контрагент.Selected()<>0 Then
            пКонтрагент:=Экранирование(аКарты.Контрагент.Name)+";"+аКарты.Контрагент.ИНН;
            If IsEmpty(пТелефоны) Then
              пТелефоны:=Replace(аКарты.Контрагент.Телефоны," ","");
            EndIf;
          EndIf;
          Т.AddString("2;"+Экранирование(аКарты.Name)+";"+(Max(1,аКарты.ТипКарты.Index())-1)+";"+аКарты.УсловиеДействия.Code+";"+?(IsEmpty(аКарты.ДатаНачалаДействия),"",аКарты.ДатаНачалаДействия)+";"+
            ?(IsEmpty(аКарты.ДатаОкончанияДействия),"",аКарты.ДатаОкончанияДействия)+";"+аКарты.Бюджет+";"+пКонтрагент+";"+Экранирование(пТелефоны)+";"+аКарты.ПроцентСкидки+";"+аКарты.ИтогоПродаж+";"+аКарты.ИтогоСкидка);
        EndDo;
      EndIf;
      
      //$$$EXMARKS
      //<КодМарки>;<КодВыгрузки>;<Флаг папки>;<КодМаркиПапки>
      If IsEmpty(аЗапросПоМаркам) Then
        If ProgramMode()=1 Then
          Form.StatusText("Запрос по маркам в наличии для выгрузки...");
        EndIf;
        аГод:=BegOfDay(Date()-365);
        аЗапросПоМаркам:=TempDB.Create("зМагазин:DB,зН:DB,зП:=DB,яПапка:NUMBER.1,зМарка:STRING.200,зМаркаПапка:STRING.200");
        аЗапросПоМаркам.LoadFrom("Ref.тмцМаркировкаПозиций","КодМарки->зМарка,@Parent..Ref.тмцПартииТМЦ.@Parent->зН,@Parent->зП,@IsFolder->яПапка,@Folder..Ref.тмцМаркировкаПозиций.КодМарки->зМаркаПапка,Документ..Doc.ПоступлениеТМЦ.Магазин->зМагазин",
          "@Status=0","флСостояние=1","Документ..Doc.ПоступлениеТМЦ.DocDate>аГод","Документ..Doc.ПоступлениеТМЦ.Магазин IN СпВсеМагазины");
      EndIf;
      тМарки:=Tab.Create("зМарка,зН,зП,яПапка,зМаркаПапка");
      аЗапросПоМаркам.Unload(тМарки,"зМарка,зН,зП,яПапка,зМаркаПапка","зМагазин=Магазин");
      If тМарки.Size()>0 Then
        Т.AddString("");
        Т.AddString("$$$EXMARKS");
        MassLoadObjects(тМарки,"зН",,,1);
        тМарки.Sort("зН,зП,яПапка-");
      
        зНом:=0;
        зПар:=0;
        пКодТМЦ:="";
        тМарки.Select();
        While тМарки.Next() Do
          If _And(ProgramMode()=1,тМарки.CurLine%10=0) Then
            Form.StatusText(""+тМарки.CurLine+" из "+тМарки.Size()+" (Маркировки позиций)");
          EndIf;
          If _And(тМарки.зМарка<>"",not IsEmpty(тМарки.зН)) Then
            If _Or(зНом<>тМарки.зН,зПар<>тМарки.зП) Then
              пКодТМЦ:=НайтиКодНоменклатурыИПартии(тМарки.зН,тМарки.зП);
              зПар:=тМарки.зП;
              зНом:=тМарки.зН;
            EndIf;
            Т.AddString(Экранирование(тМарки.зМарка)+";"+пКодТМЦ+";"+тМарки.яПапка+";"+Экранирование(тМарки.зМаркаПапка)+";");
          EndIf;
        EndDo;
      EndIf;
    EndIf;
    
    //TODO: $$$ADDMARKETINGACTIONS,$$$ADDMARKETINGEVENTS (запреты продаж)
  Finally
    If IsTransactionActive() Then
      CommitTransaction();
    EndIf;
    If not ФлИзОбщейВыгрузки Then
      ОсвободитьСемафор(СемафорИзмененияКодов);
    EndIf;
  EndTry;
  
  ИмяФайла:=ФайлВыгрузки;
  If ИмяФайла="" Then
    ИмяФайла:="goods_out.txt";
  EndIf;
  If ИмяФайла[1]="""" Then
    Try
      ИмяФайла:=Eval(ИмяФайла);
    Except
      Message("Ошибка при создании имени файла выгрузки: "+PopError(),"!");
      Exit 0;
    EndTry;
  EndIf;
  
  ИмяФлага:=ФайлЗапросаВыгрузки;
  If _And(ИмяФлага<>"",ИмяФлага[1]="""") Then
    Try
      ИмяФлага:=Eval(ИмяФлага);
    Except
      Message("Ошибка при создании имени флага выгрузки: "+PopError(),"!");
      Exit 0;
    EndTry;
  EndIf;
  
  If Способ=1 Then
    If ПутьПротокола="" Then
      Raise "Не задана папка для выгрузки!";
    EndIf;
    ПутьПротокола:=AddBackSlash(ПутьПротокола);
    If not Т.Save(ПутьПротокола+ИмяФайла,0) Then
      Raise "Невозможно сохранить файл "+ИмяФайла+" в папку "+ПутьПротокола+"!";
    EndIf;
    
    If ИмяФлага<>"" Then
      Т:=Text.Create();
      If not Т.Save(ПутьПротокола+ИмяФлага,0) Then
        Raise "Невозможно сохранить файл "+ИмяФлага+" в папку "+ПутьПротокола+"!";
      EndIf;
    EndIf;
  ElseIf Способ=2 Then
    //ПутьПротокола:<Пользователь>:<Пароль>@<АдресСервера>@<Путь на сервере>@<Временная локальная папка>@[SOCKSПроксиАдрес:SOCKSПроксиПорт[:Пользователь:Пароль]]
    //FtpPut <login>:<pass>@<ftpsite> <path> <okFlagFile> <localpath\localmask> [DeleteFiles=1] [SOCKSServerAddr:SOCKSServerPort[:UserName:Password]]
    Стр:=ПутьПротокола;
    СтрКомСтрока:=TearStr(Стр,"@")+"@"+TearStr(Стр,"@");
    ПутьНаСервере:=TearStr(Стр,"@");
    ВремПуть:=TearStr(Стр,"@");
    If _And(ВремПуть<>"",ВремПуть[1]="""",ВремПуть[Length(ВремПуть)]="""") Then
      ВремПуть:=Mid(ВремПуть,2,Length(ВремПуть)-2);
    EndIf;
    If ВремПуть="" Then
      ВремПуть:=Addbackslash(GetTempDirectory())+Элемент.Code+"\";
      File.CreateDirectory(ВремПуть);
    EndIf;
    ВремПуть:=AddBackslash(ВремПуть);
    If not Т.Save(ВремПуть+ИмяФайла,0) Then
      Raise "Невозможно сохранить файл "+ИмяФайла+" в папку "+ВремПуть+"!";
    EndIf;
    If ИмяФлага<>"" Then
      Т:=Text.Create();
      If not Т.Save(ВремПуть+ИмяФлага,0) Then
        Raise "Невозможно сохранить файл "+ИмяФлага+" в папку "+ПутьПротокола+"!";
      EndIf;
    EndIf;
    Флаг:=ВремПуть+"Out.flg";
    File.DeleteFile(Флаг);
    СтрКомСтрока:=СтрКомСтрока+" "+ПутьНаСервере+" """+Флаг+""" """+ВремПуть+"%%%%%%%%"+""" 1";
    If Стр<>"" Then
      СтрКомСтрока:=СтрКомСтрока+" "+TearStr(Стр,"@");
    EndIf;
  
    Имя:="Modules\FreeForms\ВнутренниеОбработки\УниверсальнаяВыгрузкаЗагрузка\FtpPut.exe";
    If not IsExecutingInSeparateThread Then
      SysExec(Имя+" "+Replace(СтрКомСтрока,"%%%%%%%%",ИмяФайла),1);
    Else
      SysExecNoConsole(Имя+" "+Replace(СтрКомСтрока,"%%%%%%%%",ИмяФайла),1);
    EndIf;
    If not File.DoesFileExist(Флаг) Then
      Raise "Невозможно выгрузить файл на FTP!";
    EndIf;
    If ИмяФлага<>"" Then
      File.DeleteFile(Флаг);
      If not IsExecutingInSeparateThread Then
        SysExec(Имя+" "+Replace(СтрКомСтрока,"%%%%%%%%",ИмяФлага),1);
      Else
        SysExecNoConsole(Имя+" "+Replace(СтрКомСтрока,"%%%%%%%%",ИмяФлага),1);
      EndIf;
      If not File.DoesFileExist(Флаг) Then
        Raise "Невозможно выгрузить флаг на FTP!";
      EndIf;
    EndIf;
  EndIf;
  
  ОбновитьВремяЗапуска("ПоследняяУдачнаяВыгрузка");
  Exit 1;
EndFunction


Function ЗаполнитьПеременные(Ини)
  Версия:=Max(1,Number(Ини.GetData("Версия")));
  Способ:=Max(1,Number(Ини.GetData("Способ")));
  ПутьПротокола:=Ини.GetData("Путь");
  РасписаниеВыгрузки:=Ини.GetData("РасписаниеВыгрузки");
  РасписаниеЗагрузки:=Ини.GetData("РасписаниеЗагрузки");
  ФайлВыгрузки:=Ини.GetData("ФайлВыгрузки","goods_out.txt");
  ФайлЗапросаВыгрузки:=Ини.GetData("ФайлЗапросаВыгрузки","goods_flagin.txt");
  ФайлЗагрузки:=Ини.GetData("ФайлЗагрузки","goods_report.txt");
  НестандарныеВыгрузки:=Number(Ини.GetData("НестандарныеВыгрузки","0"));
  ОбъединениеРеализаций:=Number(Ини.GetData("ОбъединениеРеализаций","0"));
  КодыОбмена:=Max(1,Number(Ини.GetData("КодыОбмена")));
  КассаЗагрузки:=Ref.общКассы;
  КассаКод:=Ини.GetData("Касса","");
  If КассаКод<>"" Then
    КассаЗагрузки.Find("Code",КассаКод);
  EndIf;
  КодыНоменклатуры:=Ref.общТипыДополнительныхСвойств;
  Стр:=Ини.GetData("КодыНоменклатуры","");
  If Стр<>"" Then
    КодыНоменклатуры.Find("Code",Стр);
  EndIf;
  КодыПартий:=Ref.общТипыДополнительныхСвойств;
  Стр:=Ини.GetData("КодыПартий","");
  If Стр<>"" Then
    КодыПартий.Find("Code",Стр);
  EndIf;
EndFunction


Function ВыполнитьОбменДляВсехМагазинов(ФлТип,СпМагазины=0)
  ПутьДрайвера:="Modules\FreeForms\ПротоколыОбмена\ФронтолСервер\";
  ОсвободитьСемафор(СемафорИзмененияКодов);
  Try
    СтрФильтр:="~(@Status=0)And(ПутьДрайвераОбмена=ПутьДрайвера)And(@Parent.@Status=0)"+?(not IsEmpty(СпМагазины),"And(@Parent IN СпМагазины)");
    bNum:=0;
    СпВсеМагазины:=Ref.рознПротоколыОбменаМагазинов.Load(,СтрФильтр);
    aNum:=СпВсеМагазины.Size();
    For i:=1 To СпВсеМагазины.Size() Do
      СпВсеМагазины[i]:=СпВсеМагазины[i].Parent();
    EndDo;
    СпВсеМагазины.Group();
    
    аПротокол:=Ref.рознПротоколыОбменаМагазинов;
    аПротокол.Select(СтрФильтр);
    While аПротокол.Next() Do
      bNum:=bNum+1;
      Элемент:=аПротокол;
      Магазин:=Элемент.Parent();
      MessageVisual("Обработка "+bNum+" из "+aNum+", "+аПротокол+" для "+Магазин,"I");
      ИмяОбмена:="Обмен_"+Элемент.Code;аПольз:="";аМаш:="";аДата:="";
      If not DBLockStringMutex(ИмяОбмена,аПольз,аМаш,аДата) Then
        Message("Обмен по протоколу %LINK% для магазина %LINK% уже был запущен пользователем "+аПольз+" ("+аМаш+") в "+аДата,"!",Элемент,Магазин);
        Continue;
      EndIf;
      Try
        ЮрЛицо:=Магазин.ЮрЛицо;
        Try
          Ини:=Ini.Create();
          Ини.AddFromString(Элемент.Настройки);
        Except
          Message(PopError(),"!");
          Continue;
        EndTry;
        ЗаполнитьПеременные(Ини);
      
        If ФлТип=1 Then
          Фл:=ВыполнитьОтправку();
        ElseIf ФлТип=2 Then
          Фл:=ВыполнитьЗагрузку();
        ElseIf ФлТип=3 Then
          //1. Загрузка и обработка очереди
          //2. Полная выгрузка
          Фл:=ВыполнитьЗагрузку();
          If Фл Then
            Фл:=ВыполнитьОтправку();
          EndIf;
        EndIf;
        If not Фл Then
          Message("Ошибка обмена для магазина: %LINK%",,аПротокол.Parent());
        EndIf;
      Finally
        DBUnlockStringMutex(ИмяОбмена);
        Стр:=PopError();
        SuppressException();
        If not IsEmpty(Стр) Then
          Message(Стр,"!");
        EndIf;
      EndTry;
    EndDo;
  Finally
    ОсвободитьСемафор(СемафорИзмененияКодов);
    Стр:=PopError();
    SuppressException();
  EndTry;
EndFunction


Function OnOpen()
  Result:=0;
  If TypeStr(Param)<>"LIST" Then
    MessageVisual("Эта обработка запускается автоматически или вызывается из формы магазина!","!");
    Exit;
  EndIf;
  СемафорИзмененияКодов:="";
  МаксимальныйКод:=0;
  спТипыДокументов:=List.Create("Реализация","ВозвратОтПокупателя","ПоступлениеТМЦ","ВозвратПоставщику","РегистрацияТМЦ","РегистрацияОС","ПеремещениеТМЦ","Сторнирование","АктПоСкладу","УниверсальныйДокумент",
    "ПКО","РКО","ВыпискаБанкаПриход","ВыпискаБанкаРасход","КорректировкаДолга","ПодотчетнаяОперация","ПоступлениеПрочее","РеализацияПрочее","КомплектацияТовара");  
  аЗапросПоМаркам:=0;
  
  СтрКоманда:=Param["Команда"];
  If СтрКоманда="Выгрузка всех магазинов" Then
    ВыполнитьОбменДляВсехМагазинов(1,Param["СпМагазины"]);
    Exit;
  ElseIf СтрКоманда="Загрузка всех магазинов" Then
    ВыполнитьОбменДляВсехМагазинов(2,Param["СпМагазины"]);
    Exit;
  ElseIf СтрКоманда="Загрузка и выгрузка всех магазинов" Then
    ВыполнитьОбменДляВсехМагазинов(3,Param["СпМагазины"]);
    Exit;
  EndIf;
  
  Элемент:=Param["Элемент"];
  If _Or(Элемент.Status()=1,Элемент.Parent().Status()=1) Then
    MessageVisual("Элемент протокола или магазина удален!","!");
    Exit;
  EndIf;
  If Элемент.IsLocked()<>1 Then
    Элемент:=Элемент.Copy();
    If not глЗаблокировать(Элемент,1) Then //Будет разблокирован при закрытии обработки
      Exit;
    EndIf;
    Элемент.Reload();
  EndIf;
    
  Магазин:=Элемент.Parent();
  СпВсеМагазины:=List.Create(Магазин);
  Try
    Ини:=Ini.Create();
    Ини.AddFromString(Элемент.Настройки);
  Except
    Ини.AddLeaf("Версия",1);
    Ини.AddLeaf("Способ",1);
    Ини.AddLeaf("Период",7);
  EndTry;
  ЗаполнитьПеременные(Ини);
  
  If (СтрКоманда="Визуальный запуск")or(IsEmpty(СтрКоманда)) Then
    Result:=1;
    Exit;
  EndIf;
  
  ИмяОбмена:="Обмен_"+Элемент.Code;аПольз:="";аМаш:="";аДата:="";
  If not DBLockStringMutex(ИмяОбмена,аПольз,аМаш,аДата) Then
    MessageVisual("Обмен по протоколу "+Элемент+" для магазина "+Магазин+" уже был запущен пользователем "+аПольз+" ("+аМаш+") в "+аДата,"!");
  EndIf;
  Try
    //Команды: Визуальный запуск,Выгрузка,Загрузка,Загрузка и выгрузка
    If СтрКоманда="Выгрузка" Then    
      If not ВыполнитьОтправку() Then
        Raise "Ошибка при выполнении выгрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Полная начальная выгрузка номенклатуры" Then    
      If not ВыполнитьОтправку(1) Then
        Raise "Ошибка при выполнении выгрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Загрузка" Then
      If not ВыполнитьЗагрузку() Then
        Raise "Ошибка при выполнении загрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Загрузка и выгрузка" Then
      If not ВыполнитьЗагрузку() Then
        Raise "Ошибка при выполнении загрузки";
      EndIf;
      If not ВыполнитьОтправку() Then
        Raise "Ошибка при выполнении выгрузки";
      EndIf;
      Param["Удачно"]:=1;
    Else
      MessageVisual("Неизвестная команда: "+СтрКоманда+"!","!");
    EndIf;
  Finally
    DBUnlockStringMutex(ИмяОбмена);
  EndTry;
EndFunction