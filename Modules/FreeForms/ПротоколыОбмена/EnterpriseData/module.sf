//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var Ини Export;
Var Способ Export, ПутьПротокола Export, РасписаниеВыгрузки Export, РасписаниеЗагрузки Export, КодБД Export, ФлВсеДокументы Export, Период Export;
Var НачДата Export, КонДата Export, ДатаНачала Export, спН Export;
Var Магазин Export;
Var Элемент Export;
Var пЮрЛицоСсылка Export;

Function ПолучитьУстановку(Имя)
  aEl:=Ref.рознУстановкиОбменаМагазинов;
  If aEl.Find("~(@Parent=Элемент)And(@Status=0)And(Name=Имя)") Then
    Exit aEl.Установка; 
  EndIf;
  Exit "";
EndFunction

Function MessageVisual(Стр,Тип="")
  If not IsExecutingInSeparateThread Then
    Message(Стр,Тип);
  EndIf;
EndFunction

Function ДобавитьУстановку(Имя,Код,ФлОбновить=0)
  aEl:=Ref.рознУстановкиОбменаМагазинов;
  If Not aEl.Find("~(@Parent=Элемент)And(@Status=0)And(Name=Имя)") Then
    aEl.New();
    aEl.Parent(Элемент);
    aEl.Name:=Имя;
    aEl.Установка:=Код;
    aEl.Save();
  ElseIf ФлОбновить Then
    aEl.Установка:=Код;
    aEl.Save();
  EndIf;
EndFunction

Function ОбновитьВремяЗапуска(Ид)
  Элемент.SetValue(Ид,Date());
  Элемент.Save();
EndFunction

Function Дата1С(аДата)
  //2022-05-04T22:00:00
  Exit FormatDate(аДата,"YYYY-mm-dd""T""hh:tt:ss");
EndFunction

Function НайтиВнешнийКод(Эл)
  aEl:=Ref.рознСопоставлениеОбъектовОбмена;
  If aEl.Find("Объект,@Status",Эл,0) Then
    Exit aEl.ВнешнийКод;
  EndIf;
  Exit aEl.Code;
EndFunction

Function ВыгрузитьСправочник(ByRef СтрСправочники,Эл)
  //Выгружаемые справочники (выгружаются только присутствующие в документах, если не указано иное):
  //+  Справочник "Организации" -- юр. лица
  //+  Справочник "Склады" -- магазины
  //+  Справочник "Контрагенты" -- контрагенты
  //  Справочник "Договоры" -- договоры
  //  Справочник "Банковские счета" -- банк. счета
  //  Справочник "Номенклатура" -- номенклатура
  //  Справочник "Штрихкоды номенклатуры" -- штрихкоды
  //  Справочник "Упаковки" -- создается из справочника номенклатура
  //  Справочник "Характеристики номенклатуры" -- выгружается для МРЦ
  //  Справочник "Физические лица" -- создается из контрагенты для требуемых элементов
  //  Справочник "Валюты" -- только один элемент
  //  Справочник "Банки" -- банки
  //  Справочник "Единицы измерения" -- ед. измерения
  //  Справочник "Страны мира" -- страны мира
  //?? Нестандартные объекты (обмен с бухгалтерией):
  //?? Документ.ИнвентаризацияТоваров, Документ.ЧекККМ, Справочник.ВидыНоменклатуры, Справочник.ДисконтныеКарты, Справочник.КассыККМ, Справочник.МаркировкаУпаковки
  
  Вид:=Эл.DBName();
  If Вид="кнтКонтрагенты" Then
    пКПП:=Эл.ИНН;
    пИНН:=TearStr(пКПП,"/");
    AppendStringToBufferedString(СтрСправочники,"<Справочник.Контрагенты><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка>"+
      "<НаименованиеПолное>"+EncodeXMLString(Эл.ПолнНаименование)+"</НаименованиеПолное><ИНН>"+пИНН+"</ИНН>"+?(пКПП<>"","<КПП>"+пКПП+"</КПП>")+"<ЮридическоеФизическоеЛицо>"+
      ?(Эл.ВидКонтрагента<>Enum.ВидыКонтрагентов.ФизЛицо,"ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></КлючевыеСвойства>"+
      "<Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование><ОКПО>"+Эл.ОКПО+"</ОКПО></Справочник.Контрагенты>");
  ElseIf Вид="общСклады" Then
    If Эл.Магазин.Selected()=0 Then
      Raise "Для склада "+Эл+" не выбран магазин!";
    EndIf;
    ВыгрузитьСправочник(СтрСправочники,Эл.Магазин);
  ElseIf Вид="рознМагазины" Then
    AppendStringToBufferedString(СтрСправочники,"<Справочник.Склады><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка>"+
      "<Наименование>"+EncodeXMLString(Эл.НазваниеМагазина)+"</Наименование><ТипСклада>Розничный</ТипСклада></КлючевыеСвойства>"+
      "<АдресСтрокой>"+EncodeXMLString(Эл.ФактАдрес)+"</АдресСтрокой></Справочник.Склады>");
  Else
    Raise "Неподдерживаемый вид справочника для выгрузки: "+Эл.DBName();
  EndIf;
EndFunction

Function ВыгрШапкаДокумента(aDoc,Ссылка)
  Exit "<КлючевыеСвойства><Ссылка>"+Ссылка+"</Ссылка><Дата>"+Дата1С(aDoc.DocDate)+"</Дата><Номер>"+aDoc.DocNum+"</Номер>"+
    пЮрЛицоСсылка+"</КлючевыеСвойства>";
EndFunction

Function ВыгрКонтрагентДокумента(aDoc,ByRef СтрСправочники)
  ВыгрузитьСправочник(СтрСправочники,aDoc.Контрагент);
  пКПП:=aDoc.Контрагент.ИНН;
  пИНН:=TearStr(пКПП,"/");
  Exit "<Контрагент><Ссылка>"+НайтиВнешнийКод(aDoc.Контрагент)+"</Ссылка><Наименование>"+EncodeXMLString(aDoc.Контрагент.Name)+"</Наименование><НаименованиеПолное>"+EncodeXMLString(aDoc.Контрагент.ПолнНаименование)+
    "</НаименованиеПолное><ИНН>"+пИНН+"</ИНН>"+?(пКПП<>"","<КПП>"+пКПП+"</КПП>")+"<ЮридическоеФизическоеЛицо>"+
    ?(aDoc.Контрагент.ВидКонтрагента<>Enum.ВидыКонтрагентов.ФизЛицо,"ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></Контрагент>";
EndFunction

Function ВыгрСкладДокумента(aDoc,ByRef СтрСправочники)
  If aDoc.Склад.Магазин.Selected()=0 Then
    Raise "Для склада "+aDoc.Склад+" не выбран магазин!";
  EndIf;
  ВыгрузитьСправочник(СтрСправочники,aDoc.Склад.Магазин);
  Exit "<Склад><Ссылка>"+НайтиВнешнийКод(aDoc.Склад.Магазин)+"</Ссылка><Наименование>"+EncodeXMLString(aDoc.Склад.Магазин.НазваниеМагазина)+"</Наименование><ТипСклада>Розничный</ТипСклада></Склад>";
EndFunction

Function СтавкаНДС(Ставка)
  If Ставка=Enum.СтавкиНДС.БезНДС Then
    Exit "БезНДС";
  ElseIf Ставка=Enum.СтавкиНДС.НДС0 Then
    Exit "НДС0";
  ElseIf Ставка=Enum.СтавкиНДС.НДС10 Then
    Exit "НДС10";
  ElseIf Ставка=Enum.СтавкиНДС.НДС18 Then
    Exit "НДС18";
  ElseIf Ставка=Enum.СтавкиНДС.НДС20 Then
    Exit "НДС20";
  EndIf;
EndFunction


//ФлТип: бит 1: без сумм НДС и прослеживаемости
Function ВыгрузитьТабличнуюЧасть(aDoc,ФлТип,ByRef СмСумма,ByRef СтрСправочники,ByRef СмСуммаНДС=0)
  СтрСтроки:="";
  aNum:=0;
  aTab:=aDoc.LineParts("Номенклатура");
  aTab.Select();
  While aTab.Next() Do
    зН:=aTab.Номенклатура;
    If _And(спН.Size()>0,not спН.Contains(зН)) Then
      Continue;
    EndIf;
    СмСумма:=Round(СмСумма+aTab.Сумма,2);
    СмСуммаНДС:=Round(СмСуммаНДС+aTab.СуммаНДС,2);
    aNum:=aNum+1;
    ВыгрузитьСправочник(СтрСправочники,зН.базЕдиница);
    ВыгрузитьСправочник(СтрСправочники,зН);
    //ВозвратнаяТара,ГотоваяПродукция,ИнвентарьИХозяйственныеПринадлежности,КомиссионныеТовары,СобственныеТовары,Топливо
    ТипНоменклатуры:="СобственныеТовары";
    If зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара Then
      ТипНоменклатуры:="ВозвратнаяТара";
    ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь Then
      ТипНоменклатуры:="ИнвентарьИХозяйственныеПринадлежности";
    ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.АрендованноеИмущество Then
      ТипНоменклатуры:="КомиссионныеТовары";
    EndIf;
    AppendStringToBufferedString(СтрСтроки,"<Строка><НомерСтрокиДокумента>"+aNum+"</НомерСтрокиДокумента><ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(зН.базЕдиница)+"</Ссылка><ДанныеКлассификатора>"+
      "<Код>"+зН.базЕдиница.Code+"</Код><Наименование>"+EncodeXMLString(зН.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения><Количество>"+aTab.Количество+"</Количество>"+
      "<Номенклатура><Ссылка>"+НайтиВнешнийКод(зН)+"</Ссылка><НаименованиеПолное>"+EncodeXMLString(зН.Name)+"</НаименованиеПолное><КодВПрограмме>"+зН.Code+"</КодВПрограмме></Номенклатура>"+
      "<Сумма>"+aTab.Сумма+"</Сумма><Цена>"+aTab.Цена+"</Цена><ТипЗапасов>"+ТипНоменклатуры+"</ТипЗапасов>");
    If ФлТип and 1=0 Then
      AppendStringToBufferedString(СтрСтроки,"<СтавкаНДС>"+СтавкаНДС(зН.СтавкаНДС)+"</СтавкаНДС><СуммаНДС>"+aTab.СуммаНДС+"</СуммаНДС><ПрослеживаемыйТовар>"+?(зН.флПодлежитПрослеживаемости,"true","false")+"</ПрослеживаемыйТовар>");
    EndIf;
    AppendStringToBufferedString(СтрСтроки,"</Строка>");
  EndDo;
  Exit СтрСтроки;
EndFunction


Function ВыгрузитьДокументОстатков(aDoc,ByRef СтрДокументы,ByRef СтрСправочники,ФлПлюс)
  //Выгружаемые документы:
  //+  [О] Документ "Реализация товаров и услуг" -- Реализация (в т.ч. розничная)
  //+  [О] Документ "Поступление товаров и услуг" -- Поступление
  //+  [О] Документ "Возврат товаров от покупателя" -- Возврат от покупателя (в т.ч. розничный)
  //+  [О] Документ "Возврат товаров поставщику" -- Возврат поставщику
  //+-  [О,В] Документ "Счет-фактура выданный" - для юр. лиц с НДС, любой документ
  //+-  [О,В] Документ "Счет-фактура полученный" - для юр. лиц с НДС, любой документ
  //  [TODO] Документ "Реализация подарочных сертификатов"
  //  [TODO] Документ "Возврат подарочных сертификатов"
  //  [TODO] Документ "Аннулирование подарочных сертификатов"
  //+-  [О] Документ "Оприходование товаров" -- Регистрация ТМЦ, любой невыгружаемый документ, влияющий на остатки на складах
  //+-  [О] Документ "Списание товаров" -- Регистрация ТМЦ, любой невыгружаемый документ, влияющий на остатки на складах
  //+  [О] Документ "Перемещение товаров" -- Перемещение ТМЦ
  //+  [О] Документ "Сборка товаров" -- Комплектация товара
  //  Документ "Передача материалов в эксплуатацию" -- Регистрация ОС
  //  Документ "Возврат материалов из эксплуатации" -- Регистрация ОС
  //  [В,Д] Поступление безналичных денежных средств -- Выписка банка приход
  //  [В,Д] Списание безналичных денежных средств -- Выписка банка расход
  //  [В,Д] Поступление наличных денежных средств -- ПКО
  //  [В,Д] Выплата наличных денежных средств -- РКО
  //  [В] Документ "Корректировка долга" -- Корректировка долга, любой невыгружаемый документ, влияющий на взаиморасчеты
  //  [Д] Документ "Авансовый отчет" -- Подотчетная операция
  //  [???] Документ "Установка цен номенклатуры" -- TODO -- выгружать изменение цен за период?

  Вид:=aDoc.DBName();
  Ссылка:=Вид+"_"+aDoc.DocNum+"_"+GetYear(aDoc.DocDate);
  If Вид="Реализация" Then
    //ВидОперации: ОтгрузкаБезПереходаПравСобственности_Реализовано, ПередачаНаКомиссию, РеализацияКлиенту
    СмСумма:=0;
    СмСуммаНДС:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧасть(aDoc,0,СмСумма,СтрСправочники,СмСуммаНДС);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ.РеализацияТоваровУслуг>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидОперации>РеализацияКлиенту</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>"+ВыгрКонтрагентДокумента(aDoc,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,ВыгрСкладДокумента(aDoc,СтрСправочники)+"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС><Товары>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"<Товары></Документ.РеализацияТоваровУслуг>");
    
    If aDoc.ЮрЛицо.УчитыватьНДС Then
      AppendStringToBufferedString(СтрДокументы,"<Документ.СчетФактураВыданный>"+ВыгрШапкаДокумента(aDoc,"СФ_"+Ссылка));
      AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидСчетаФактуры>НаРеализацию</ВидСчетаФактуры>");
      AppendStringToBufferedString(СтрДокументы,"<Выставлен>true</Выставлен>"+ВыгрКонтрагентДокумента(aDoc,СтрСправочники));
      AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаНДС>"+Round(СмСуммаНДС,2)+"</СуммаНДС><СуммаВключаетНДС>true</СуммаВключаетНДС></Документ.СчетФактураВыданный>");
    EndIf;
  ElseIf Вид="ВозвратОтПокупателя" Then
    //ВидОперации: ВозвратОтКлиента, ВозвратОтКомиссионера, ВозвратОтРозничногоПокупателя
    СмСумма:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧасть(aDoc,0,СмСумма,СтрСправочники);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    Ссылка2:="";
    If _And(not IsEmpty(aDoc.ДокОснование),aDoc.ДокОснование.DBName()="Реализация",BegOfDay(aDoc.ДокОснование.DocDate)>=ДатаНачала,aDoc.ДокОснование.Status()>1) Then
      Ссылка2:="<ДокументРеализации><Ссылка>"+aDoc.ДокОснование.DBName()+"_"+aDoc.ДокОснование.DocNum+"_"+GetYear(aDoc.ДокОснование.DocDate)+"</Ссылка></ДокументРеализации>";
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ.ВозвратТоваровОтПокупателя>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,Ссылка2+"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидОперации>ВозвратОтКлиента</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>"+ВыгрКонтрагентДокумента(aDoc,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,ВыгрСкладДокумента(aDoc,СтрСправочники)+"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС><Товары>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"<Товары></Документ.ВозвратТоваровОтПокупателя>");
  ElseIf Вид="ВозвратПоставщику" Then
    //ВидОперации: ВозвратКомитенту, ВозвратПоставщику
    СмСумма:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧасть(aDoc,0,СмСумма,СтрСправочники);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    Ссылка2:="";
    If _And(not IsEmpty(aDoc.ДокОснование),aDoc.ДокОснование.DBName()="ПоступлениеТМЦ",BegOfDay(aDoc.ДокОснование.DocDate)>=ДатаНачала,aDoc.ДокОснование.Status()>1) Then
      Ссылка2:="<ДокументПоступления><Ссылка>"+aDoc.ДокОснование.DBName()+"_"+aDoc.ДокОснование.DocNum+"_"+GetYear(aDoc.ДокОснование.DocDate)+"</Ссылка></ДокументПоступления>";
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ.ВозвратТоваровПоставщику>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,Ссылка2+"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидОперации>ВозвратПоставщику</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>"+ВыгрКонтрагентДокумента(aDoc,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,ВыгрСкладДокумента(aDoc,СтрСправочники)+"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС><Товары>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"<Товары></Документ.ВозвратТоваровПоставщику>");
  ElseIf Вид="ПоступлениеТМЦ" Then
    //ВидОперации: ЗакупкаПоИмпорту, ПокупкаУПоставщика, ПриемНаКомиссию
    СмСумма:=0;
    СмСуммаНДС:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧасть(aDoc,0,СмСумма,СтрСправочники,СмСуммаНДС);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    СтрВходящий:="";
    If _And(aDoc.НомерДокВходящий<>"",not IsEmpty(aDoc.ДатаДокВходящий)) Then
      СтрВходящий:="<НомерВходящегоДокумента>"+EncodeXMLString(aDoc.НомерДокВходящий)+"</НомерВходящегоДокумента><ДатаВходящегоДокумента>"+Дата1С(aDoc.ДатаДокВходящий)+"</ДатаВходящегоДокумента>";
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ.ПоступлениеТоваровУслуг>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,СтрВходящий+"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидОперации>ПокупкаУПоставщика</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>"+ВыгрКонтрагентДокумента(aDoc,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,ВыгрСкладДокумента(aDoc,СтрСправочники)+"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС><Товары>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"<Товары></Документ.ПоступлениеТоваровУслуг>");
    
    If aDoc.ЮрЛицо.УчитыватьНДС Then
      If _And(aDoc.НомерДокВходящийСФ<>"",not IsEmpty(aDoc.ДатаДокВходящийСФ)) Then
        СтрВходящий:="<НомерВходящегоДокумента>"+EncodeXMLString(aDoc.НомерДокВходящийСФ)+"</НомерВходящегоДокумента><ДатаВходящегоДокумента>"+Дата1С(aDoc.ДатаДокВходящийСФ)+"</ДатаВходящегоДокумента>";
      EndIf;
      If СтрВходящий<>"" Then
        AppendStringToBufferedString(СтрДокументы,"<Документ.СчетФактураПолученный>"+ВыгрШапкаДокумента(aDoc,"СФ_"+Ссылка));
        AppendStringToBufferedString(СтрДокументы,СтрВходящий+"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидСчетаФактуры>НаПоступление</ВидСчетаФактуры>");
        AppendStringToBufferedString(СтрДокументы,"<ДатаПолучения>"+Дата1С(aDoc.DocDate)+"</ДатаПолучения>"+ВыгрКонтрагентДокумента(aDoc,СтрСправочники));
        AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаНДС>"+Round(СмСуммаНДС,2)+"</СуммаНДС><СуммаВключаетНДС>true</СуммаВключаетНДС></Документ.СчетФактураПолученный>");
      EndIf;
    EndIf;
  ElseIf Вид="КомплектацияТовара" Then
    //ВидОперации: Разборка, Сборка
    aTab:=aDoc.LineParts("ВходящаяНоменклатура");
    aTab2:=aDoc.LineParts("ИсходящаяНоменклатура");
    If ((aTab.Size()>1)And(aTab2.Size()>1))or(aTab.Size()=0)or(aTab2.Size()=0) Then
      Raise "Документ "+aDoc+" слишком сложный для выгрузки в данный момент! Обратитесь к разработчику!";
    EndIf;
    ТипОперации:=?(aTab2.Size()=1,"Сборка","Разборка");
    зН:=?(aTab2.Size()=1,aTab2["Номенклатура",1],aTab["Номенклатура",1]);
    зКл:=?(aTab2.Size()=1,aTab2["Количество",1],aTab["Количество",1]);
    aTab:=?(aTab.Size()=1,aTab2,aTab);
    
    ВыгрузитьСправочник(СтрСправочники,зН.базЕдиница);
    ВыгрузитьСправочник(СтрСправочники,зН);
    AppendStringToBufferedString(СтрДокументы,"<Документ.СборкаТоваров>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(зН.базЕдиница)+"</Ссылка><ДанныеКлассификатора>"+
        "<Код>"+зН.базЕдиница.Code+"</Код><Наименование>"+EncodeXMLString(зН.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения><Количество>"+зКл+"</Количество>"+
        "<Номенклатура><Ссылка>"+НайтиВнешнийКод(зН)+"</Ссылка><НаименованиеПолное>"+EncodeXMLString(зН.Name)+"</НаименованиеПолное><КодВПрограмме>"+зН.Code+"</КодВПрограмме></Номенклатура>");
    AppendStringToBufferedString(СтрДокументы,"<ВидОперации>"+ТипОперации+"</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,ВыгрСкладДокумента(aDoc,СтрСправочники)+"<Товары>");
    
    aTab.Select();
    While aTab.Next() Do
      зН:=aTab.Номенклатура;
      aNum:=aNum+1;
      //ВозвратнаяТара,ГотоваяПродукция,ИнвентарьИХозяйственныеПринадлежности,КомиссионныеТовары,СобственныеТовары,Топливо
      ТипНоменклатуры:="СобственныеТовары";
      If зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара Then
        ТипНоменклатуры:="ВозвратнаяТара";
      ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь Then
        ТипНоменклатуры:="ИнвентарьИХозяйственныеПринадлежности";
      ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.АрендованноеИмущество Then
        ТипНоменклатуры:="КомиссионныеТовары";
      EndIf;
      ВыгрузитьСправочник(СтрСправочники,зН.базЕдиница);
      ВыгрузитьСправочник(СтрСправочники,зН);
      AppendStringToBufferedString(СтрСтроки,"<Строка><НомерСтрокиДокумента>"+aNum+"</НомерСтрокиДокумента><ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(зН.базЕдиница)+"</Ссылка><ДанныеКлассификатора>"+
        "<Код>"+зН.базЕдиница.Code+"</Код><Наименование>"+EncodeXMLString(зН.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения><Количество>"+aTab.Количество+"</Количество>"+
        "<Номенклатура><Ссылка>"+НайтиВнешнийКод(зН)+"</Ссылка><НаименованиеПолное>"+EncodeXMLString(зН.Name)+"</НаименованиеПолное><КодВПрограмме>"+зН.Code+"</КодВПрограмме></Номенклатура>"+
        "<ТипЗапасов>"+ТипНоменклатуры+"</ТипЗапасов></Строка>");
    EndDo;
    AppendStringToBufferedString(СтрДокументы,"<Товары></Документ.СборкаТоваров>");
  Else //Списание, оприходование (остальные операции)
    //ВидОперации: ОтгрузкаБезПереходаПравСобственности_Реализовано, ПередачаНаКомиссию, РеализацияКлиенту
    If Вид="ПеремещениеТМЦ" Then
      СтрТип:=?(aDoc.Склад.Магазин=Магазин,"СписаниеТоваров","ОприходованиеТоваров");
    ElseIf Вид="РегистрацияТМЦ" Then
      СтрТип:=?(aDoc.КодОперации=Enum.коРегистрацияТМЦ.ОприходованиеТМЦ,"ОприходованиеТоваров","СписаниеТоваров");
    Else
      СтрТип:=?(ФлПлюс,"ОприходованиеТоваров","СписаниеТоваров");
    EndIf;
    СмСумма:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧасть(aDoc,1,СмСумма,СтрСправочники);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ."+СтрТип+">"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,ВыгрСкладДокумента(aDoc,СтрСправочники)+"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС><Товары>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"<Товары></Документ."+СтрТип+">");
  EndIf;
  
  Exit 1;
EndFunction


Function ВыполнитьОтправку()
  //Документы ввода остатков (ранее даты начала работы):
  //  Остатки задолженности подотчетных лиц -- накопитель ПодотчетныеОперации 
  //  Остатки безналичных денежных средств -- накопитель Банк
  //  Остатки наличных денежных средств -- накопитель Касса
  //  Остатки расчетов по кредитам и займам -- накопитель Банк
  //  Остатки задолженности покупателей -- накопитель Взаиморасчеты
  //  Остатки авансов покупателей -- накопитель Взаиморасчеты
  //  Остатки задолженности перед поставщиками -- накопитель Взаиморасчеты
  //  Остатки авансов поставщикам -- накопитель Взаиморасчеты
  //  Остатки собственных ТМЦ -- накопитель ОстаткиТМЦ
  //  Остатки тары переданной -- накопитель Взаиморасчеты
  //  Остатки тары принятой -- накопитель Взаиморасчеты
  //  [TODO] Остатки товаров, принятых на комиссию -- накопитель КомиссионныеТМЦ
  //  [TODO] Остатки товаров, переданных на комиссию -- накопитель КомиссионныеТМЦ
  //
  //Все удаленные и необработанные документы выгружаются с помощью <УдалениеОбъекта>
  //<УдалениеОбъекта>
  //  <СсылкаНаОбъект>
  //    <СсылкаНаОбъект>
  //      <ОтчетОРозничныхПродажахСсылка>c0667859-e8a5-4d17-9374-b42fa1d3cbbc</ОтчетОРозничныхПродажахСсылка>
  //    </СсылкаНаОбъект>
  //  </СсылкаНаОбъект>
  //</УдалениеОбъекта>
  
  
  Способ:=Max(1,Способ);
  If Способ<>1 Then
    Raise "В данный момент поддерживается только способ выгрузки в локальную папку!";
  EndIf;
  ОбновитьВремяЗапуска("ПоследняяВыгрузка");
  СтрДокументы:="";
  СтрСправочники:="<Справочник.Валюты><КлючевыеСвойства><Ссылка>1</Ссылка><Код>643</Код></КлючевыеСвойства><Наименование>RUB</Наименование></Справочник.Валюты>";
  
  НомерИсходящего:=Number(ПолучитьУстановку("Исходящее сообщение"));
  НомерВходящего:=Number(ПолучитьУстановку("Входящее сообщение"));
  ЮрЛицо:=Магазин.ЮрЛицо;
  
  ВыгрузитьСправочник(СтрСправочники,ЮрЛицо);
  пКПП:=ЮрЛицо.ИНН;
  пИНН:=TearStr(пКПП,"/");
  пЮрЛицоСсылка:="<Организация><Ссылка>"+НайтиВнешнийКод(ЮрЛицо)+"</Ссылка><Наименование>"+EncodeXMLString(ЮрЛицо.Name)+"</Наименование><НаименованиеСокращенное>"+EncodeXMLString(ЮрЛицо.Name)+"</НаименованиеСокращенное>"+
    "<НаименованиеПолное>"+EncodeXMLString(ЮрЛицо.ПолнНаименование)+"</НаименованиеПолное><ИНН>"+пИНН+"</ИНН>"+?(пКПП<>"","<КПП>"+пКПП+"</КПП>")+
    "<ЮридическоеФизическоеЛицо>"+?(пКПП<>"","ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></Организация>";
  
  If (НачДата<ДатаНачала)And(КонДата>=ДатаНачала) Then
    //TODO: Выгрузка остатков
  EndIf;
  НачДата:=Max(НачДата,ДатаНачала);
  If КонДата>=НачДата Then
    спВыгруженныеДокументы:=List.Create();
    
    спН:=List.Create();
    aTab:=Магазин.LineParts("Номенклатура");
    aTab.CopyTo(спН,,,"Номенклатура");
    
    коРеализация:=Enum.коРеализация.РеализацияРозничная;
    коВозврат:=Enum.коВозвратОтПокупателя.ВозвратРозничный;
    ТЗ:="Period From НачДата To КонДата;"+
    ?(ФлВсеДокументы,"зЮЛ:=Storage.ОстаткиТМЦ.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);","зМг:=Storage.ОстаткиТМЦ.Склад.Магазин;Condition(зМг=Магазин);")+
    "Документ:=Storage.ОстаткиТМЦ.@LINK;
    |Condition((Storage.ОстаткиТМЦ.@LINK..Doc.Реализация.КодОперации=коРеализация)Or(Storage.ОстаткиТМЦ.@LINK..Doc.ВозвратОтПокупателя.КодОперации=коВозврат));
    |зДень:=Storage.ОстаткиТМЦ.@DAY;
    |зН:=Storage.ОстаткиТМЦ.Номенклатура;
    |зКлП:=Income(Количество);
    |зКлР:=Expense(Количество);
    |Condition(зН IN спН);
    |Group зДень,Документ;";
    З:=Query.Create();
    aTab:=З.Execute(ТЗ,0);
    aTab.Sort("зДень+");
    
    //Собираем розничные продажи и возвраты в документы ОтчетОРозничныхПродажах
    ТабРозн:=Tab.Create("Номенклатура,Количество,Сумма");
    aTab.Select();
    While aTab.Next() Do
      //TODO
    EndDo;
    
    //Все остальное
    ТЗ:="Period From НачДата To КонДата;"+
    ?(ФлВсеДокументы,"зЮЛ:=Storage.ОстаткиТМЦ.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);","зМг:=Storage.ОстаткиТМЦ.Склад.Магазин;Condition(зМг=Магазин);")+
    "Документ:=Storage.ОстаткиТМЦ.@LINK;
    |зН:=Storage.ОстаткиТМЦ.Номенклатура;
    |зКлП:=Income(Количество);
    |зКлР:=Expense(Количество);
    |Condition(зН IN спН);
    |Group Документ;";
    З:=Query.Create();
    aTab:=З.Execute(ТЗ,0);
    
    aTab.Select();
    While aTab.Next() Do
      aDoc:=aTab.Документ.Copy();
      If спВыгруженныеДокументы.Find(aDoc,,1)=0 Then
        If not ВыгрузитьДокументОстатков(aDoc,СтрДокументы,СтрСправочники,(З.зКлП-З.зКлР)>0) Then
          Exit 0;
        EndIf;
        спВыгруженныеДокументы.Add(aTab.Документ,,,1);
      EndIf;
    EndDo;
    
    //Добавим документы, не попавшие в запрос (в т.ч. удаленные и необработанные документы)
    //TODO
    
  EndIf;

  ОбновитьВремяЗапуска("ПоследняяУдачнаяВыгрузка");
EndFunction

Function ВыполнитьЗагрузку()
EndFunction

Function СохранитьУстановки(ФлЗакрыть=0)
  Ини.AddLeaf("КодБД",Form.КодБД.Value);
  Ини.AddLeaf("Способ",Form.оСпособ.Value.SelectedLine);
  Ини.AddLeaf("ФлВсеДокументы",Form.ФлВсеДокументы.Value);
  Ини.AddLeaf("Путь",Form.оПуть.Value);
  Ини.AddLeaf("РасписаниеВыгрузки",Form.оРасписаниеВыгрузки.Value);
  Ини.AddLeaf("РасписаниеЗагрузки",Form.оРасписаниеЗагрузки.Value);
  Ини.AddLeaf("Период",Form.оДней.Value);
  Ини.AddLeaf("ДатаНачала",Form.оДатаНачала.Value);
  Элемент.Настройки:=Ини.StoreToString("");

  //Добавление номеров квитанций выгрузки/загрузки
  ДобавитьУстановку("Исходящее сообщение","0");
  ДобавитьУстановку("Входящее сообщение","0");
  
  глОбновитьРасписаниеПротоколаОбмена(Элемент,"Modules\FreeForms\ПротоколыОбмена\EnterpriseData\",Form.оРасписаниеВыгрузки.Value,Form.оРасписаниеЗагрузки.Value);
  
  If ФлЗакрыть Then
    Form.IsChanged(0);
    Form.Close();
  EndIf;
EndFunction

Function OnOpen()
  Result:=0;
  If TypeStr(Param)<>"LIST" Then
    MessageVisual("Эта обработка запускается автоматически или вызывается из формы магазина!","!");
    Exit;
  EndIf;
  Элемент:=Param["Элемент"];
  СтрКоманда:=Param["Команда"];
  
  If Элемент.IsLocked()<>1 Then
    Элемент:=Элемент.Copy();
    If not глЗаблокировать(Элемент,1) Then //Будет разблокирован при закрытии обработки
      Exit;
    EndIf;
    Элемент.Reload();
  EndIf;
    
  Магазин:=Элемент.Parent();
  Try
    Ини:=Ini.Create();
    Ини.AddFromString(Элемент.Настройки);
  Except
    Ини.AddLeaf("Способ",1);
    Ини.AddLeaf("Период",7);
  EndTry;
  КодБД:=Ини.GetData("КодБД");
  Способ:=Max(1,Number(Ини.GetData("Способ")));
  ПутьПротокола:=Ини.GetData("Путь");
  ФлВсеДокументы:=Number(Ини.GetData("ФлВсеДокументы"));
  РасписаниеВыгрузки:=Ини.GetData("РасписаниеВыгрузки");
  РасписаниеЗагрузки:=Ини.GetData("РасписаниеЗагрузки");
  ДатаНачала:=Date(Ини.GetData("ДатаНачала"));
  
  If (СтрКоманда="Визуальный запуск")or(IsEmpty(СтрКоманда)) Then
    Result:=1;
    Exit;
  EndIf;
  
  ФлФорсирование:=0;
  КонДата:=BegOfDay(Date())-1;
  НачДата:=КонДата-Max(Период-1,0);
  If _And(not IsEmpty(Param["КонДата"]),not IsEmpty(Param["НачДата"])) Then
    НачДата:=Param["НачДата"];
    КонДата:=Max(Param["НачДата"],Param["КонДата"]);
    ФлФорсирование:=1;
    MessageVisual("Форсирован период выгрузки с "+НачДата+" по "+КонДата+"!","I");
  EndIf;
  
  ИмяОбмена:="Обмен_"+Элемент.Code;аПольз:="";аМаш:="";аДата:="";
  If not DBLockStringMutex(ИмяОбмена,аПольз,аМаш,аДата) Then
    MessageVisual("Обмен по протоколу "+Элемент+" для магазина "+Магазин+" уже был запущен пользователем "+аПольз+" ("+аМаш+") в "+аДата,"!");
  EndIf;
  Try
    //Команды: Визуальный запуск,Выгрузка,Загрузка,Загрузка и выгрузка
    If СтрКоманда="Выгрузка" Then    
      If not ВыполнитьОтправку() Then
        Raise "Ошибка при выполнении выгрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Загрузка" Then
      If not ВыполнитьЗагрузку() Then
        Raise "Ошибка при выполнении загрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Загрузка и выгрузка" Then
      If not ВыполнитьЗагрузку() Then
        Raise "Ошибка при выполнении загрузки";
      EndIf;
      If not ВыполнитьОтправку() Then
        Raise "Ошибка при выполнении выгрузки";
      EndIf;
      Param["Удачно"]:=1;
    Else
      MessageVisual("Неизвестная команда: "+СтрКоманда+"!","!");
    EndIf;
  Finally
    DBUnlockStringMutex(ИмяОбмена);
  EndTry;
EndFunction
