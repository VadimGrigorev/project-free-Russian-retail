//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var Ини Export;
Var Способ Export, ПутьПротокола Export, РасписаниеВыгрузки Export, РасписаниеЗагрузки Export, КодБД Export, КодБД2 Export, Период Export;
Var ФлВсеДокументы Export, ФлДокументОРП Export, ФлСквознаяНумерация Export, ФлБезГИСМТТовара Export, ПрефиксОРП Export;
Var НачДата Export, КонДата Export, ДатаНачала Export, спН Export, Касса Export;
Var Магазин Export, ЮрЛицо Export, ФлИзмененных Export, ФлНеУдалятьФайл Export;
Var Элемент Export;
Var пЮрЛицоСсылка Export, ВремяТранзакции Export;
Var спСправочники Export, спГИСМТ1С Export;
Var СпТипыДокументов Export, СпТипыДокументов2 Export;

//https://its.1c.ru/db/metod8dev/content/5934/hdoc

Function ВыгрузитьСправочник(ByRef СтрСправочники,Эл,ФлФизЛицо=0) Forward;

Function ПолучитьУстановку(Имя)
  aEl:=Ref.рознУстановкиОбменаМагазинов;
  If aEl.Find("~(@Parent=Элемент)And(@Status=0)And(Name=Имя)") Then
    Exit aEl.Установка; 
  EndIf;
  Exit "";
EndFunction

Function MessageVisual(Стр,Тип="")
  If not IsExecutingInSeparateThread Then
    Message(Стр,Тип);
  EndIf;
EndFunction

Function ДобавитьУстановку(Имя,Код,ФлОбновить=0)
  aEl:=Ref.рознУстановкиОбменаМагазинов;
  If Not aEl.Find("~(@Parent=Элемент)And(@Status=0)And(Name=Имя)") Then
    aEl.New();
    aEl.Parent(Элемент);
    aEl.Name:=Имя;
    aEl.Установка:=Код;
    aEl.Save();
  ElseIf ФлОбновить Then
    aEl.Установка:=Код;
    aEl.Save();
  EndIf;
EndFunction

Function ОбновитьВремяЗапуска(Ид)
  Элемент.SetValue(Ид,Date());
  Элемент.Save();
EndFunction

Function Дата1С(аДата)
  //2022-05-04T22:00:00
  Exit FormatDate(аДата,"YYYY-mm-dd""T""hh:tt:ss");
EndFunction

Function ДатаSF(СтрДата)
  //2022-05-04T22:00:00
  Exit Date(Mid(СтрДата,9,2)+"."+Mid(СтрДата,6,2)+"."+Mid(СтрДата,1,4)+" "+Mid(СтрДата,12,8));
EndFunction

Function НайтиВнешнийКод(Эл,ВнКод="",ФлСоздатьКод=1)
  aEl:=Ref.рознСопоставлениеОбъектовОбмена;
  If ВнКод<>"" Then
    If IsEmpty(Эл) Then
      If aEl.Find("@Parent,ВнутреннийКод,@Status",Элемент,ВнКод,0) Then
        Exit aEl.ВнешнийКод;
      EndIf;
    ElseIf aEl.Find("Объект,@Parent,ВнутреннийКод,@Status",Эл,Элемент,ВнКод,0) Then
      Exit aEl.ВнешнийКод;
    EndIf;  
  ElseIf IsEmpty(Эл) Then
    Exit "";
  ElseIf aEl.Find("Объект,@Parent,ВнутреннийКод,@Status",Эл,Элемент,"",0) Then
    Exit aEl.ВнешнийКод;
  EndIf;
  If not ФлСоздатьКод Then
    Exit "";
  EndIf;
  aEl.New();
  aEl.Parent(Элемент);
  aEl.ВнешнийКод:=Lowercase(CreateGUID());
  aEl.ВнутреннийКод:=ВнКод;
  aEl.Объект:=Эл;
  aEl.Save();
  ФлИзмененных:=ФлИзмененных+1;
  If _Or(ФлИзмененных>50,GetPeriodMs(ВремяТранзакции)>5000) Then
    ВремяТранзакции:=Date();
    CommitTransaction();
    ФлИзмененных:=0;
    BeginTransaction();
  EndIf;
  Exit aEl.ВнешнийКод;
EndFunction

Function СтавкаНДСИзСтроки(Ставка)
  If Ставка="БезНДС" Then
    Exit Enum.СтавкиНДС.БезНДС;
  ElseIf Ставка="НДС0" Then
    Exit Enum.СтавкиНДС.НДС0;
  ElseIf Ставка="НДС10" Then
    Exit Enum.СтавкиНДС.НДС10;
  ElseIf Ставка="НДС18" Then
    Exit Enum.СтавкиНДС.НДС18;
  ElseIf Ставка="НДС20" Then
    Exit Enum.СтавкиНДС.НДС20;
  EndIf;
  Exit Enum.СтавкиНДС.НДС20;
EndFunction

Function СтавкаНДС(Ставка)
  If Ставка=Enum.СтавкиНДС.БезНДС Then
    Exit "БезНДС";
  ElseIf Ставка=Enum.СтавкиНДС.НДС0 Then
    Exit "НДС0";
  ElseIf Ставка=Enum.СтавкиНДС.НДС10 Then
    Exit "НДС10";
  ElseIf Ставка=Enum.СтавкиНДС.НДС18 Then
    Exit "НДС18";
  ElseIf Ставка=Enum.СтавкиНДС.НДС20 Then
    Exit "НДС20";
  Else
    Exit "БезНДС";
  EndIf;
EndFunction

Function ЗаблокироватьДокумент(aDoc)
  аПольз:="";аМаш:="";аВремя:="";
  If aDoc.Lock(аПольз,аМаш,аВремя)=0 Then
    MessageVisual("Невозможно выполнить загрузку документа "+aDoc+", так как был заблокирован пользователем "+аПольз+" на "+аМаш+" в "+аВремя+"!","!");
    ФлНеУдалятьФайл:=1;
    Exit 0;
  EndIf;
  aDoc.Reload();
  Exit 1;
EndFunction

Function СоздатьСсылкуНаЭлемент(Эл,СтрСсылка,ФлПроверить=0,ВнКод="")
  aEl:=Ref.рознСопоставлениеОбъектовОбмена;
  If _And(ФлПроверить,ВнКод<>"",aEl.Find("ВнешнийКод,ВнутреннийКод,@Parent,@Status",СтрСсылка,ВнКод,Элемент,0)) Then
    Exit;
  ElseIf _And(ФлПроверить,ВнКод="",aEl.Find("ВнешнийКод,@Parent,@Status",СтрСсылка,Элемент,0)) Then
    Exit;
  EndIf;
  aEl.New();
  aEl.Parent(Элемент);
  aEl.ВнешнийКод:=СтрСсылка;
  aEl.ВнутреннийКод:=ВнКод;
  aEl.Объект:=Эл;
  aEl.Save();
  ФлИзмененных:=ФлИзмененных+1;
EndFunction

//ФлПапка: 2 -- элемент, форсирование поиска не папок
Function НайтиЭлементСправочника(ФлПапка,ИмяСпр,СтрСсылка,СтрДопРекв="",СтрДопЗнач="")
  Эл:=DB("Ref."+ИмяСпр);
  If Not IsEmpty(СтрСсылка) Then
    aEl:=Ref.рознСопоставлениеОбъектовОбмена;
    If aEl.Find("@Parent,ВнешнийКод,@Status",Элемент,СтрСсылка,0) Then
      Exit aEl.Объект;
    EndIf;
  EndIf;
  If СтрДопРекв="*" Then
    If ИмяСпр="общЮридическиеЛица" Then
      If Эл.Find("~(Left(ИНН,"+Length(СтрДопЗнач)+")=СтрДопЗнач)") Then
        Exit Эл;
      EndIf;
    Else
      Raise "Неизвестный объект для специального поиска: "+ИмяСпр;
    EndIf;
  ElseIf СтрДопРекв<>"" Then
    If ФлПапка>0 Then
      If Эл.Find(СтрДопРекв+",@IsFolder",СтрДопЗнач,ФлПапка And 1) Then
        Exit Эл;
      EndIf;    
    ElseIf Эл.Find(СтрДопРекв,СтрДопЗнач) Then
      Exit Эл;
    EndIf;
  EndIf;
  Эл.New(ФлПапка And 1);
  Exit Эл;
EndFunction

Function НайтиДокумент(СтрСсылка,ByRef ВнКод="")
  If Not IsEmpty(СтрСсылка) Then
    aEl:=Ref.рознСопоставлениеОбъектовОбмена;
    If _And(ВнКод<>"",aEl.Find("@Parent,ВнешнийКод,ВнутреннийКод,@Status",Элемент,СтрСсылка,ВнКод,0)) Then
      Exit aEl.Объект;
    ElseIf _And(ВнКод="",aEl.Find("@Parent,ВнешнийКод,@Status",Элемент,СтрСсылка,0)) Then
      ВнКод:=aEl.ВнутреннийКод;
      Exit aEl.Объект;
    EndIf;
  EndIf;
  ВнКод:="";
  Exit GetNothing();
EndFunction

Function УдалитьДокумент(СтрСсылка,ВнКод="")
  If Not IsEmpty(СтрСсылка) Then
    aEl:=Ref.рознСопоставлениеОбъектовОбмена;
    If _And(ВнКод<>"",aEl.Find("@Parent,ВнешнийКод,ВнутреннийКод,@Status",Элемент,СтрСсылка,ВнКод,0)) Then
      If aEl.Объект.Status()>1 Then
        If not глУдалить(aEl.Объект,1) Then
          Raise "Невозможно удалить документ: "+aEl.Объект+"!";
        EndIf;
      EndIf;
    ElseIf _And(ВнКод="",aEl.Find("@Parent,ВнешнийКод,@Status",Элемент,СтрСсылка,0)) Then
      If aEl.Объект.Status()>1 Then
        If not глУдалить(aEl.Объект,1) Then
          Raise "Невозможно удалить документ: "+aEl.Объект+"!";
        EndIf;
      EndIf;
    EndIf;
  EndIf;
EndFunction

Function НайтиИлиСоздатьДокумент(Tr,ВидДок,ByRef ВнКод="")
  Tr2:=Tr["КлючевыеСвойства"];
  Дата:=ДатаSF(Tr2["Дата"]);
  Номер:=Tr2["Номер"];
  Ссылка:=Tr2["Ссылка"];
  aEl:=Ref.рознСопоставлениеОбъектовОбмена;
  aDoc:=0;
  If ВнКод<>"" Then
    If aEl.Find("@Parent,ВнешнийКод,ВнутреннийКод,@Status",Элемент,Ссылка,ВнКод,0) Then
      ВнКод:=aEl.ВнутреннийКод;
      aDoc:=aEl.Объект;
    EndIf;  
  ElseIf aEl.Find("@Parent,ВнешнийКод,@Status",Элемент,Ссылка,0) Then
    ВнКод:=aEl.ВнутреннийКод;
    aDoc:=aEl.Объект;
    If _And(IsEmpty(aDoc),ВнКод<>"") Then
      MessageVisual("Невозможно загрузить сборный документ "+Ссылка+", из текущей базы разрешается только выгрузка документа!","!");
      Exit 0;
    EndIf;
  EndIf;
  If IsEmpty(aDoc) Then
    //Новый
    aDoc:=DB("Doc."+ВидДок);
    aDoc.New();
    aDoc.DocDate:=?(IsEmpty(Дата),Date(),Дата);
    aDoc.Автор:=глПользователь;
    aDoc.ЮрЛицо:=ЮрЛицо;
    aDoc.Магазин:=Магазин;
    If глЕстьРеквизитДокумента("УникальныйИдентификатор",aDoc.DBName()) Then
      aDoc.УникальныйИдентификатор:=Номер;
    EndIf;
    глУстановитьНовыйНомер(aDoc);
  Else
    If aDoc.DBName()<>ВидДок Then
      MessageVisual("Локальный документ "+aDoc+" не соответствует виду удаленного "+ВидДок+", документ не будет загружен! Некоторые документы, выгруженные из локальной базы, запрещено изменять в центральной базе!","!");
      Exit 0;
    EndIf;
    аПольз:="";аМаш:="";аВремя:="";
    If aDoc.Lock(аПольз,аМаш,аВремя)=0 Then
      MessageVisual("Невозможно выполнить загрузку документа "+aDoc+", так как был заблокирован пользователем "+аПольз+" на "+аМаш+" в "+аВремя+"!","!");
      ФлНеУдалятьФайл:=1;
      Exit 0;
    EndIf;
    aDoc.Reload();
  EndIf;
  If _And(aDoc.DocDate<>?(IsEmpty(Дата),aDoc.DocDate,Дата),GetYear(aDoc.DocDate)=GetYear(?(IsEmpty(Дата),aDoc.DocDate,Дата))) Then
    aDoc.DocDate:=Дата;
  EndIf;  
  Exit aDoc;
EndFunction



Function УменьшитьНомерДокумента(Тип,Номер)
  //В текущей базе длина номера 12, в 1С 11 (обычно, хотя правилами не регламентируется)
  ТипДок:="0";
  If ФлСквознаяНумерация Then
    aNum:=СпТипыДокументов.Find(Тип);
    If aNum=0 Then
      Raise "Выбрана опция ""использовать сквозную нумерацию"", и в выгрузку попал неподдерживаемый документ "+Тип+". Обратитесь к разработчику!";
    EndIf;
    ТипДок:=СпТипыДокументов.GetName(aNum);
  EndIf;

  iNum:=Pos("0",Номер);
  If iNum=1 Then
    Exit ТипДок+Right(Номер,10);
  ElseIf _And(iNum>1,_Or(Номер[iNum-1]<"0",Номер[iNum-1]>"9")) Then
    Exit Left(Номер,iNum-1)+ТипДок+Mid(Номер,iNum+2);
  Else
    Exit ?(ТипДок="0","",ТипДок)+Номер;//Невозможно удалить нули, весь номер заполнен
  EndIf;
EndFunction

Function ПустойНомер(Тип)
  //В текущей базе длина номера 12, в 1С 11 (обычно, хотя правилами не регламентируется)

  ТипДок:="0";
  If ФлСквознаяНумерация Then
    aNum:=СпТипыДокументов.Find(Тип);
    If aNum=0 Then
      Raise "Выбрана опция ""использовать сквозную нумерацию"", и в выгрузку попал неподдерживаемый документ "+Тип+". Обратитесь к разработчику!";
    EndIf;
    ТипДок:=СпТипыДокументов.GetName(aNum);
  EndIf;
  Exit ТипДок+"0000000001";
EndFunction

Function ВыгрКонтрагентаДокумента(Контрагент,ByRef СтрСправочники,СтрТег="Контрагент")
  ВыгрузитьСправочник(СтрСправочники,Контрагент);
  пКПП:=Контрагент.ИНН;
  пИНН:=TearStr(пКПП,"/");
  Exit "<"+СтрТег+"><Ссылка>"+НайтиВнешнийКод(Контрагент)+"</Ссылка><Наименование>"+EncodeXMLString(Контрагент.Name)+"</Наименование><НаименованиеПолное>"+EncodeXMLString(Контрагент.ПолнНаименование)+
    "</НаименованиеПолное><ИНН>"+пИНН+"</ИНН>"+?(пКПП<>"","<КПП>"+пКПП+"</КПП>")+"<ЮридическоеФизическоеЛицо>"+
    ?(Контрагент.ВидКонтрагента<>Enum.ВидыКонтрагентов.ФизЛицо,"ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></"+СтрТег+">";
EndFunction

Function ВыгрДоговорДокумента(Договор,ByRef СтрСправочники)
  ВыгрузитьСправочник(СтрСправочники,Договор);
  Exit "<Договор><Ссылка>"+НайтиВнешнийКод(Договор)+"</Ссылка><ВидДоговора>СПоставщиком</ВидДоговора>"+пЮрЛицоСсылка+ВыгрКонтрагентаДокумента(Договор.Parent(),СтрСправочники)+
    "<ВалютаВзаиморасчетов><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаВзаиморасчетов>"+
    "<Наименование>"+EncodeXMLString(Договор.Name)+"</Наименование></Договор>";
EndFunction

Function ВыгрШапкаДокумента(aDoc,Ссылка,ByRef СтрСправочники=0,ФлКонтрагент=0,Тег="КлючевыеСвойства")
  Exit "<"+Тег+"><Ссылка>"+Ссылка+"</Ссылка><Дата>"+Дата1С(aDoc.DocDate)+"</Дата><Номер>"+УменьшитьНомерДокумента(aDoc.DBName(),aDoc.DocNum)+"</Номер>"+
    пЮрЛицоСсылка+?(ФлКонтрагент,ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники))+"</"+Тег+">";
EndFunction

Function ВыгрШапкаДокументаСФ(aDoc,Ссылка,ByRef СтрСправочники=0,ФлКонтрагент=0)
  Exit "<КлючевыеСвойства><Ссылка>"+Ссылка+"</Ссылка>"+
    ?(глЕстьРеквизитДокумента("НомерДокВходящийСФ",aDoc.DBName()),
      "<НомерВходящегоДокумента>"+EncodeXMLString(aDoc.НомерДокВходящийСФ)+"</НомерВходящегоДокумента><ДатаВходящегоДокумента>"+FormatDate(aDoc.ДатаДокВходящийСФ,"YYYY-mm-dd")+"</ДатаВходящегоДокумента>",
      "<Номер>"+УменьшитьНомерДокумента(aDoc.DBName(),aDoc.DocNum)+"</Номер><Дата>"+Дата1С(aDoc.DocDate)+"</Дата>")+
    ?(_And(глЕстьРеквизитДокумента("НомерДокИсправление",aDoc.DBName()),aDoc.НомерДокИсправление<>""),"<НомерИсправления>"+EncodeXMLString(aDoc.НомерДокИсправление)+"</НомерИсправления><ДатаИсправления>"+Дата1С(aDoc.ДатаДокИсправление)+"</ДатаИсправления>")+
    пЮрЛицоСсылка+?(ФлКонтрагент,ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники))+"</КлючевыеСвойства>";
EndFunction


Function ВыгрСкладДокумента(aDoc,ByRef СтрСправочники)
  If aDoc.Склад.Магазин.Selected()=0 Then
    Raise "Для склада "+aDoc.Склад+" не выбран магазин!";
  EndIf;
  ВыгрузитьСправочник(СтрСправочники,aDoc.Склад.Магазин);
  Exit "<Склад><Ссылка>"+НайтиВнешнийКод(aDoc.Склад.Магазин)+"</Ссылка><Наименование>"+EncodeXMLString(aDoc.Склад.Магазин.НазваниеМагазина)+"</Наименование><ТипСклада>Розничный</ТипСклада></Склад>";
EndFunction


Function ВыгрузитьСправочник(ByRef СтрСправочники,Эл,ФлФизЛицо=0)
  //Выгружаемые справочники (выгружаются только присутствующие в документах, если не указано иное):
  //+  Справочник "Организации" -- юр. лица
  //+  Справочник "Склады" -- магазины
  //+  Справочник "Контрагенты" -- контрагенты
  //+  Справочник "Договоры" -- договоры
  //+  Справочник "Банковские счета" -- банк. счета
  //+  Справочник "Номенклатура" -- номенклатура
  //  Справочник "Штрихкоды номенклатуры" -- штрихкоды
  //  Справочник "Упаковки" -- создается из справочника номенклатура
  //  Справочник "Характеристики номенклатуры" -- выгружается для МРЦ
  //+  Справочник "Физические лица" -- создается из контрагенты для требуемых элементов
  //  Справочник "Валюты" -- только один элемент
  //+  Справочник "Банки" -- банки
  //+  Справочник "Единицы измерения" -- ед. измерения
  //+  Справочник "Страны мира" -- страны мира
  //?? Нестандартные объекты (обмен с бухгалтерией):
  //?? Документ.ИнвентаризацияТоваров, Документ.ЧекККМ, Справочник.ВидыНоменклатуры, Справочник.ДисконтныеКарты, Справочник.КассыККМ, Справочник.МаркировкаУпаковки
  
  If IsEmpty(Эл) Then
    Exit;
  EndIf;
  If спСправочники.Find(Эл.DBCode+ФлФизЛицо,,1)>0 Then
    Exit;
  EndIf;
  спСправочники.Add(Эл.DBCode+ФлФизЛицо,,,1);
  
  Вид:=Эл.DBName();
  If Вид="кнтКонтрагенты" Then
    пКПП:=Эл.ИНН;
    пИНН:=TearStr(пКПП,"/");
    If ФлФизЛицо Then
      AppendStringToBufferedString(СтрСправочники,"<Справочник.ФизическиеЛица><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка>"+
        "<ФИО>"+EncodeXMLString(Эл.ПолнНаименование)+"</ФИО><ИНН>"+пИНН+"</ИНН></КлючевыеСвойства></Справочник.ФизическиеЛица>");
    Else
      Ссылка:=НайтиВнешнийКод(Эл);
      AppendStringToBufferedString(СтрСправочники,"<Справочник.Контрагенты><КлючевыеСвойства><Ссылка>"+Ссылка+"</Ссылка>"+
        "<Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование><НаименованиеПолное>"+EncodeXMLString(Эл.ПолнНаименование)+"</НаименованиеПолное><ИНН>"+пИНН+"</ИНН>"+?(пКПП<>"","<КПП>"+пКПП+"</КПП>")+"<ЮридическоеФизическоеЛицо>"+
        ?(Эл.ВидКонтрагента<>Enum.ВидыКонтрагентов.ФизЛицо,"ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></КлючевыеСвойства>"+
        "<ОКПО>"+Эл.ОКПО+"</ОКПО>"+?(Эл.ВидКонтрагента=Enum.ВидыКонтрагентов.ФизЛицо,"<ФизическоеЛицо><Ссылка>"+Ссылка+"</Ссылка><ФИО>"+EncodeXMLString(Эл.ПолнНаименование)+"</ФИО></ФизическоеЛицо>")+"</Справочник.Контрагенты>");
      If Эл.ВидКонтрагента=Enum.ВидыКонтрагентов.ФизЛицо Then
        If спСправочники.Find(Эл.DBCode+"1",,1)=0 Then
          спСправочники.Add(Эл.DBCode+"1",,,1);
          AppendStringToBufferedString(СтрСправочники,"<Справочник.ФизическиеЛица><КлючевыеСвойства><Ссылка>"+Ссылка+"</Ссылка>"+
            "<ФИО>"+EncodeXMLString(Эл.ПолнНаименование)+"</ФИО><ИНН>"+пИНН+"</ИНН></КлючевыеСвойства></Справочник.ФизическиеЛица>");
        EndIf;
      EndIf;  
    EndIf;
  ElseIf Вид="общСклады" Then
    If Эл.Магазин.Selected()=0 Then
      Raise "Для склада "+Эл+" не выбран магазин!";
    EndIf;
    ВыгрузитьСправочник(СтрСправочники,Эл.Магазин);
  ElseIf Вид="рознМагазины" Then
    AppendStringToBufferedString(СтрСправочники,"<Справочник.Склады><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка>"+
      "<Наименование>"+EncodeXMLString(Эл.НазваниеМагазина)+"</Наименование><ТипСклада>Розничный</ТипСклада></КлючевыеСвойства>"+
      "<АдресСтрокой>"+EncodeXMLString(Эл.ФактАдрес)+"</АдресСтрокой></Справочник.Склады>");
  ElseIf Вид="кнтДоговоры" Then
    ВыгрузитьСправочник(СтрСправочники,Эл.Parent());
    AppendStringToBufferedString(СтрСправочники,"<Справочник.Договоры><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка><ВидДоговора>СПоставщиком</ВидДоговора>"+пЮрЛицоСсылка+
      ВыгрКонтрагентаДокумента(Эл.Parent(),СтрСправочники)+
      "<Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование>"+?(not IsEmpty(Эл.ДатаЗаключенияДоговора),"<Дата>"+FormatDate(Эл.ДатаЗаключенияДоговора,"YYYY-mm-dd")+"</Дата>")+"</КлючевыеСвойства></Справочник.Договоры>");
  ElseIf Вид="кнтБанковскиеСчета" Then
    ВыгрузитьСправочник(СтрСправочники,Эл.Банк);
    If Эл.Parent().СвоеЮрЛицо=ЮрЛицо Then
      AppendStringToBufferedString(СтрСправочники,"<Справочник.БанковскиеСчета><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка><НомерСчета>"+EncodeXMLString(Эл.НомерСчета)+"</НомерСчета>"+
        "<Банк><Ссылка>"+НайтиВнешнийКод(Эл.Банк)+"</Ссылка><ДанныеКлассификатораБанков><Наименование>"+EncodeXMLString(Эл.Банк.Name)+"</Наименование><БИК>"+EncodeXMLString(Эл.Банк.БИК)+"</БИК>"+
        "<КоррСчет>"+EncodeXMLString(Эл.Банк.КоррСчет)+"</КоррСчет></ДанныеКлассификатораБанков></Банк>"+
        "<Владелец>"+Replace(пЮрЛицоСсылка,"Организация>","ОрганизацииСсылка>")+"</Владелец></КлючевыеСвойства>"+
        "<Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование><ВалютаДенежныхСредств><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаДенежныхСредств></Справочник.БанковскиеСчета>");
    Else
      пКПП:=Эл.Parent().ИНН;
      пИНН:=TearStr(пКПП,"/");
      ВыгрузитьСправочник(СтрСправочники,Эл.Parent());
      AppendStringToBufferedString(СтрСправочники,"<Справочник.БанковскиеСчета><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка><НомерСчета>"+EncodeXMLString(Эл.НомерСчета)+"</НомерСчета>"+
        "<Банк><Ссылка>"+НайтиВнешнийКод(Эл.Банк)+"</Ссылка><ДанныеКлассификатораБанков><Наименование>"+EncodeXMLString(Эл.Банк.Name)+"</Наименование><БИК>"+EncodeXMLString(Эл.Банк.БИК)+"</БИК>"+
        "<КоррСчет>"+EncodeXMLString(Эл.Банк.КоррСчет)+"</КоррСчет></ДанныеКлассификатораБанков></Банк>"+
        "<Владелец><КонтрагентыСсылка><Ссылка>"+НайтиВнешнийКод(Эл.Parent())+"</Ссылка><Наименование>"+EncodeXMLString(Эл.Parent().Name)+"</Наименование>"+
          "<ИНН>"+пИНН+"</ИНН>"+?(пКПП<>"","<КПП>"+пКПП+"</КПП>")+"<ЮридическоеФизическоеЛицо>"+?(пКПП<>"","ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></КонтрагентыСсылка>"+
          "</Владелец></КлючевыеСвойства>"+
        "<Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование><ВалютаДенежныхСредств><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаДенежныхСредств></Справочник.БанковскиеСчета>");
    EndIf;
  ElseIf Вид="адСтраныМира" Then
    AppendStringToBufferedString(СтрСправочники,"<Справочник.СтраныМира><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка>"+
      "<ДанныеКлассификатора><Код>"+Эл.ВнешнийКод+"</Код><Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование></ДанныеКлассификатора>"+
      "</КлючевыеСвойства></Справочник.СтраныМира>");
    If IsEmpty(Эл.ВнешнийКод) Then
      Raise "Элемент справочника страны мира с кодом "+Эл.Code+" не имеет внешнего кода!";
    EndIf;
  ElseIf Вид="тмцНоменклатура" Then
    If not IsEmpty(Эл.Folder()) Then
      ВыгрузитьСправочник(СтрСправочники,Эл.Folder());
    EndIf;
    If Эл.IsFolder() Then
      AppendStringToBufferedString(СтрСправочники,"<Справочник.НоменклатураГруппа><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка><Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование>"+
        "<КодВПрограмме>"+Эл.Code+"</КодВПрограмме>");
      If not IsEmpty(Эл.Folder()) Then
        AppendStringToBufferedString(СтрСправочники,"<Группа><Ссылка>"+НайтиВнешнийКод(Эл.Folder())+"</Ссылка><Наименование>"+EncodeXMLString(Эл.Folder().Name)+"</Наименование></Группа>");
      EndIf;
      AppendStringToBufferedString(СтрСправочники,"</КлючевыеСвойства></Справочник.НоменклатураГруппа>");
    Else
      If IsEmpty(Эл.базЕдиница) Then
        Raise "Для номенклатуры "+Эл+" не выбрана базовая единица измерения!";
      EndIf;
      ВыгрузитьСправочник(СтрСправочники,Эл.базЕдиница);
      Страна:=Эл.сертСтранаПроисхождения;
      If Страна.Selected()=0 Then
        Страна:=Ref.адСтраныМира;
        If not Страна.Find("ВнешнийКод","643") Then
          Raise "Не найдена страна мира Россия с внешним кодом 643!";
        EndIf;
      EndIf;
      ВыгрузитьСправочник(СтрСправочники,Страна);
      
      AppendStringToBufferedString(СтрСправочники,"<Справочник.Номенклатура><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка><НаименованиеПолное>"+EncodeXMLString(Эл.Name)+"</НаименованиеПолное>"+
        "<КодВПрограмме>"+Эл.Code+"</КодВПрограмме><Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование>");
      If not IsEmpty(Эл.Folder()) Then
        AppendStringToBufferedString(СтрСправочники,"<Группа><Ссылка>"+НайтиВнешнийКод(Эл.Folder())+"</Ссылка><Наименование>"+EncodeXMLString(Эл.Folder().Name)+"</Наименование></Группа>");
      EndIf;
      пТип:="Товар";
      If Эл.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара Then
        пТип:="МногооборотнаяТара";
      ElseIf Эл.ВидНоменклатуры=Enum.ВидыНоменклатуры.Услуга Then
        пТип:="Услуга";
      EndIf;
      пАлко:="";
      ФлМарочная:=0;
      If Эл.флАлкогольнаяПродукция Then
        aEl:=Ref.тмцПартииТМЦ;
        aEl.UseOrder("Code-");
        aList:=aEl.Load(2,"~(@Status=0)And(@Parent=Эл)");
        If aList.Size()>1 Then
          ФлМарочная:=Max(ФлМарочная,aList[1].флМарочныйУчет,aList[2].флМарочныйУчет);
        ElseIf aList.Size()>0 Then
          ФлМарочная:=Max(ФлМарочная,aList[1].флМарочныйУчет);
        EndIf;
        пКодАП:=Эл.ЕГАИСКодАП;
        пИмп:="<ИмпортнаяАлкогольнаяПродукция>false</ИмпортнаяАлкогольнаяПродукция>";
        If aList.Size()>0 Then
          aEl:=aList[1];
          пКодАП:=aEl.ЕГАИСКодАП;
          If aEl.флИмпортнаяПродукция Then
            пИмп:="<ИмпортнаяАлкогольнаяПродукция>false</ИмпортнаяАлкогольнаяПродукция>";
          EndIf;
        EndIf;
        пАлко:="<ДанныеАлкогольнойПродукции><АлкогольнаяПродукция>true</АлкогольнаяПродукция><ВидАлкогольнойПродукции><Код>"+пКодАП+"</Код>"+
          ?(ФлМарочная,"<ВидЛицензии>АлкогольнаяПродукция</ВидЛицензии><Маркируемый>true</Маркируемый>","<ВидЛицензии>Пиво</ВидЛицензии><Маркируемый>false</Маркируемый>")+
          "</ВидАлкогольнойПродукции>"+пИмп+"<ОбъемДАЛ>"+Round(Эл.ОбъемЛитров/10,4)+"</ОбъемДАЛ><Крепость>"+Эл.сертКрепость+"</Крепость></ДанныеАлкогольнойПродукции>"+
          "<СтранаПроисхождения><Ссылка>"+НайтиВнешнийКод(Страна)+"</Ссылка><ДанныеКлассификатора><Код>"+Страна.ВнешнийКод+"</Код><Наименование>"+EncodeXMLString(Страна.Name)+"</Наименование></ДанныеКлассификатора></СтранаПроисхождения>"+
          ?(ФлМарочная,"<ПризнакПредметаРасчета>ПодакцизныйТовар</ПризнакПредметаРасчета>","");
      Else
        пАлко:="<СтранаПроисхождения><Ссылка>"+НайтиВнешнийКод(Страна)+"</Ссылка><ДанныеКлассификатора><Код>"+Страна.ВнешнийКод+"</Код><Наименование>"+EncodeXMLString(Страна.Name)+"</Наименование></ДанныеКлассификатора></СтранаПроисхождения>";
      EndIf;
      пИС:="";
      If (Эл.флПодлежитПрослеживаемости)And(not ФлБезГИСМТТовара) Then
        aNum:=спГИСМТ1С.Find(Эл.ГИСМТТоварнаяГруппа);
        If aNum>0 Then
          пИС:="<ВидПродукцииИС>"+спГИСМТ1С.GetName(aNum)+"</ВидПродукцииИС>";
        EndIf;
      EndIf;
      ФлМарочная:=Max(ФлМарочная,(Эл.флПодлежитПрослеживаемости)And(not ФлБезГИСМТТовара));
      AppendStringToBufferedString(СтрСправочники,"</КлючевыеСвойства><ТипНоменклатуры>"+пТип+"</ТипНоменклатуры><ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(Эл.базЕдиница)+"</Ссылка><ДанныеКлассификатора>"+
      "<Код>"+Эл.базЕдиница.ВнешнийКод+"</Код><Наименование>"+EncodeXMLString(Эл.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения><СтавкаНДС>"+СтавкаНДС(Эл.СтавкаНДС)+
      "</СтавкаНДС>"+пАлко+"<Весовой>"+?(Эл.флВесовойТовар,"true","false")+"</Весовой><Маркируемый>"+?(ФлМарочная,"true","false")+"</Маркируемый>"+
      ?(ФлМарочная,"<ПодакцизныйТовар>true</ПодакцизныйТовар>","<ПодакцизныйТовар>false</ПодакцизныйТовар>")+пИС+"</Справочник.Номенклатура>");
    EndIf;
  ElseIf Вид="тмцЕдиницыИзмерения" Then
    AppendStringToBufferedString(СтрСправочники,"<Справочник.ЕдиницыИзмерения><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка>"+
      "<ДанныеКлассификатора><Код>"+Эл.ВнешнийКод+"</Код><Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование></ДанныеКлассификатора>"+
      "</КлючевыеСвойства></Справочник.ЕдиницыИзмерения>");
    If IsEmpty(Эл.ВнешнийКод) Then
      Raise "Элемент справочника единицы измерения с кодом "+Эл.Code+" не имеет код ОКЕИ!";
    EndIf;
  ElseIf Вид="общБанки" Then
    AppendStringToBufferedString(СтрСправочники,"<Справочник.Банки><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка><ДанныеКлассификатораБанков>"+
      "<Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование><БИК>"+EncodeXMLString(Эл.БИК)+"</БИК>"+
      "<КоррСчет>"+EncodeXMLString(Эл.КоррСчет)+"</КоррСчет></ДанныеКлассификатораБанков></КлючевыеСвойства>"+
      "<Город>"+EncodeXMLString(Эл.Местонахождение)+"</Город><Адрес>"+EncodeXMLString(Эл.Адрес)+"</Адрес></Справочник.Банки>");
  ElseIf Вид="общЮридическиеЛица" Then
    пКПП:=ЮрЛицо.ИНН;
    пИНН:=TearStr(пКПП,"/");
    AppendStringToBufferedString(СтрСправочники,"<Справочник.Организации><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(ЮрЛицо)+"</Ссылка><Наименование>"+EncodeXMLString(ЮрЛицо.Name)+"</Наименование>"+
    "<НаименованиеПолное>"+EncodeXMLString(ЮрЛицо.ПолнНаименование)+"</НаименованиеПолное><ИНН>"+пИНН+"</ИНН>"+?(пКПП<>"","<КПП>"+пКПП+"</КПП>")+
    "<ЮридическоеФизическоеЛицо>"+?(пКПП<>"","ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></КлючевыеСвойства><Наименование>"+EncodeXMLString(ЮрЛицо.Name)+"</Наименование></Справочник.Организации>");
  Else
    Raise "Неподдерживаемый вид справочника для выгрузки: "+Эл.DBName();
  EndIf;
EndFunction

//ФлТип: бит 1: без сумм НДС и прослеживаемости
Function ВыгрузитьТабличнуюЧасть(aDoc,ФлТип,ByRef СмСумма,ByRef СтрСправочники,ByRef СмСуммаНДС=0)
  СтрСтроки:="";
  aNum:=0;
  aTab:=aDoc.LineParts("Номенклатура");
  aTab.Select();
  While aTab.Next() Do
    зН:=aTab.Номенклатура;
    If _And(спН.Size()>0,not спН.Contains(зН)) Then
      Continue;
    EndIf;
    См:=0;
    СмНДС:=0;
    Цн:=0;
    If aTab.GetColumnIndex("Сумма")>0 Then
      См:=aTab.Сумма;
      Цн:=aTab.Цена;
      СмНДС:=aTab.СуммаНДС;
      СмСумма:=Round(СмСумма+aTab.Сумма,2);
      СмСуммаНДС:=Round(СмСуммаНДС+aTab.СуммаНДС,2);
    EndIf;
    aNum:=aNum+1;
    ВыгрузитьСправочник(СтрСправочники,зН.базЕдиница);
    ВыгрузитьСправочник(СтрСправочники,зН);
    //ВозвратнаяТара,ГотоваяПродукция,ИнвентарьИХозяйственныеПринадлежности,КомиссионныеТовары,СобственныеТовары,Топливо
    ТипНоменклатуры:="СобственныеТовары";
    If зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара Then
      ТипНоменклатуры:="ВозвратнаяТара";
    ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь Then
      ТипНоменклатуры:="ИнвентарьИХозяйственныеПринадлежности";
    ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.АрендованноеИмущество Then
      ТипНоменклатуры:="КомиссионныеТовары";
    EndIf;
    AppendStringToBufferedString(СтрСтроки,"<Строка><НомерСтрокиДокумента>"+aNum+"</НомерСтрокиДокумента>"+
      "<ДанныеНоменклатуры><Номенклатура><Ссылка>"+НайтиВнешнийКод(зН)+"</Ссылка><КодВПрограмме>"+зН.Code+"</КодВПрограмме><Наименование>"+EncodeXMLString(зН.Name)+"</Наименование></Номенклатура></ДанныеНоменклатуры>"+
      "<ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(зН.базЕдиница)+"</Ссылка><ДанныеКлассификатора>"+
      "<Код>"+зН.базЕдиница.ВнешнийКод+"</Код><Наименование>"+EncodeXMLString(зН.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения><Количество>"+aTab.Количество+"</Количество>"+
      "<Сумма>"+См+"</Сумма><Цена>"+Цн+"</Цена>");
    If ФлТип and 1=0 Then
      AppendStringToBufferedString(СтрСтроки,"<СтавкаНДС>"+СтавкаНДС(зН.СтавкаНДС)+"</СтавкаНДС><СуммаНДС>"+СмНДС+"</СуммаНДС>");
    EndIf;
    AppendStringToBufferedString(СтрСтроки,"<ТипЗапасов>"+ТипНоменклатуры+"</ТипЗапасов>");
    If aDoc.DBName()="ВозвратОтПокупателя" Then
      AppendStringToBufferedString(СтрСтроки,"<ВозвратПодДеятельность>ПоФактическомуИспользованию</ВозвратПодДеятельность>");
    EndIf;
    If ФлТип and 1=0 Then
      AppendStringToBufferedString(СтрСтроки,"<ПрослеживаемыйТовар>"+?((зН.флПодлежитПрослеживаемости)And(not ФлБезГИСМТТовара),"true","false")+"</ПрослеживаемыйТовар>");
    EndIf;
    AppendStringToBufferedString(СтрСтроки,"</Строка>");
  EndDo;
  Exit СтрСтроки;
EndFunction

Function ВыгрузитьТабличнуюЧастьСодержание(aDoc,ByRef СмСумма,ByRef СтрСправочники,ByRef СмСуммаНДС=0)
  СтрСтроки:="";
  aNum:=0;
  aTab:=aDoc.LineParts("Содержание");
  aTab.Select();
  While aTab.Next() Do
    СмСумма:=Round(СмСумма+aTab.Сумма,2);
    СмСуммаНДС:=Round(СмСуммаНДС+aTab.СуммаНДС,2);
    aNum:=aNum+1;
    AppendStringToBufferedString(СтрСтроки,"<Строка><НомерСтрокиДокумента>"+aNum+"</НомерСтрокиДокумента><Количество>"+aTab.Количество+"</Количество>"+
      "<Сумма>"+aTab.Сумма+"</Сумма><Цена>"+aTab.Цена+"</Цена>");
    AppendStringToBufferedString(СтрСтроки,"<СтавкаНДС>"+СтавкаНДС(aTab.СтавкаНДС)+"</СтавкаНДС><СуммаНДС>"+aTab.СуммаНДС+"</СуммаНДС>");
    AppendStringToBufferedString(СтрСтроки,"<Содержание>"+EncodeXMLString(aTab.Содержание)+"</Содержание></Строка>");
  EndDo;
  Exit СтрСтроки;
EndFunction



Function ВыгрузитьДокументыНачальныхОстатков(ByRef СтрДокументы,ByRef СтрСправочники)
  //Документы ввода остатков (ранее даты начала работы):
  //+  Остатки задолженности подотчетных лиц -- накопитель ПодотчетныеОперации 
  //+  Остатки безналичных денежных средств -- накопитель Банк
  //+  Остатки наличных денежных средств -- накопитель Касса
  //  Остатки расчетов по кредитам и займам -- накопитель Банк
  //+  Остатки задолженности покупателей -- накопитель Взаиморасчеты
  //-  Остатки авансов покупателей -- накопитель Взаиморасчеты
  //+  Остатки задолженности перед поставщиками -- накопитель Взаиморасчеты
  //-  Остатки авансов поставщикам -- накопитель Взаиморасчеты
  //  Остатки собственных ТМЦ -- накопитель ОстаткиТМЦ
  //  [TODO] Остатки тары переданной -- накопитель Взаиморасчеты (не описаны документы работы с тарой)
  //  [TODO] Остатки тары принятой -- накопитель Взаиморасчеты (не описаны документы работы с тарой)
  //  [TODO] Остатки товаров, принятых на комиссию -- накопитель КомиссионныеТМЦ
  //  [TODO] Остатки товаров, переданных на комиссию -- накопитель КомиссионныеТМЦ
  //

  //Остатки наличных денежных средств
  If IsEmpty(Касса) Then
    спКасса:=List.Create();
  Else
    спКасса:=List.Create(Касса);
  EndIf;
  ТЗ:="Period From ДатаНачала To ДатаНачала;
  |зЮЛ:=Storage.Касса.ЮрЛицо;"+
  ?(ФлВсеДокументы,"Condition(зЮЛ=ЮрЛицо);","зКс:=Storage.Касса.Касса;Condition(зКс IN спКасса);")+
  "зСм:=BegTotals(Сумма);
  |Group зЮЛ;";
  З:=Query.Create();
  З.Execute(ТЗ);
  
  Ссылка:=НайтиВнешнийКод(0,"КАССА_"+ДатаНачала);
  СтрДокументы2:="";
  While З.Next(1) Do
    AppendStringToBufferedString(СтрДокументы2,"<Строка><Сумма>"+Round(З.зСм,2)+"</Сумма><Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта></Строка>");
  EndDo;
  If СтрДокументы2<>"" Then
    AppendStringToBufferedString(СтрДокументы,"<Документ.ОстаткиНаличныхДенежныхСредств><Дата>"+Дата1С(ДатаНачала-1)+"</Дата><Номер>"+ПустойНомер("ОстаткиНаличныхДенежныхСредств")+"</Номер>"+
      пЮрЛицоСсылка+"<ДенежныеСредства>");
    AppendStringToBufferedString(СтрДокументы,СтрДокументы2);
    AppendStringToBufferedString(СтрДокументы,"</ДенежныеСредства><Ссылка>"+Ссылка+"</Ссылка></Документ.ОстаткиНаличныхДенежныхСредств>");
  EndIf;
  
  //Остатки безналичных денежных средств
  If ФлВсеДокументы Then
    ТЗ:="Period From ДатаНачала To ДатаНачала;
    |зЮЛ:=Storage.Банк.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);
    |зСч:=Storage.Банк.БанковскийСчет;
    |зСм:=BegTotals(Сумма);
    |Group зСч;";
    З:=Query.Create();
    З.Execute(ТЗ);
    
    Ссылка:=НайтиВнешнийКод(0,"БАНК_"+ДатаНачала);
    СтрДокументы2:="";
    While З.Next(1) Do
      Form.StatusText("Остатки, банк: "+З.зСч);
      ВыгрузитьСправочник(СтрСправочники,З.зСч);
      AppendStringToBufferedString(СтрДокументы2,"<Строка><Сумма>"+Round(З.зСм,2)+"</Сумма>");
      AppendStringToBufferedString(СтрДокументы2,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
      AppendStringToBufferedString(СтрДокументы2,"<БанковскийСчет><Ссылка>"+НайтиВнешнийКод(З.зСч)+"</Ссылка><Владелец>"+пЮрЛицоСсылка+"</Владелец><НомерСчета>"+EncodeXMLString(З.зСч.НомерСчета)+"</НомерСчета></БанковскийСчет></Строка>");
    EndDo;
    If СтрДокументы2<>"" Then
      AppendStringToBufferedString(СтрДокументы,"<Документ.ОстаткиБезналичныхДенежныхСредств><Дата>"+Дата1С(ДатаНачала-1)+"</Дата><Номер>"+ПустойНомер("ОстаткиБезналичныхДенежныхСредств")+"</Номер>"+
        пЮрЛицоСсылка+"<ДенежныеСредства>");
      AppendStringToBufferedString(СтрДокументы,СтрДокументы2);
      AppendStringToBufferedString(СтрДокументы,"</ДенежныеСредства><Ссылка>"+Ссылка+"</Ссылка></Документ.ОстаткиБезналичныхДенежныхСредств>");
    EndIf;
  EndIf;
  
  //Остатки задолженности подотчетных лиц
  If ФлВсеДокументы Then
    аТип:=Enum.ТипыПодотчетныхОпераций.ПодотчетнаяОперация;
    ТЗ:="Period From ДатаНачала To ДатаНачала;
    |зЮЛ:=Storage.ПодотчетныеОперации.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);
    |зТип:=Storage.ПодотчетныеОперации.ТипОперации;Condition(зТип=аТип);
    |зК:=Storage.ПодотчетныеОперации.ПодотчетноеЛицо;
    |зСм:=BegTotals(Сумма);
    |Group зК;";
    З:=Query.Create();
    З.Execute(ТЗ);
  
    Ссылка:=НайтиВнешнийКод(0,"ПОДОТ_"+ДатаНачала);
    СтрДокументы2:="";
    While З.Next(1) Do
      Form.StatusText("Остатки, подотчет: "+З.зК);
      ВыгрузитьСправочник(СтрСправочники,З.зК,1);
      AppendStringToBufferedString(СтрДокументы2,"<Строка><ФизическоеЛицо><Ссылка>"+НайтиВнешнийКод(З.зК)+"</Ссылка><ФИО>"+EncodeXMLString(З.зК.ПолнНаименование)+"</ФИО></ФизическоеЛицо>");
      AppendStringToBufferedString(СтрДокументы2,"<Сумма>"+Round(З.зСм,2)+"</Сумма><ВалютаВзаиморасчетов><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаВзаиморасчетов></Строка>");
    EndDo;
    If СтрДокументы2<>"" Then
      AppendStringToBufferedString(СтрДокументы,"<Документ.ОстаткиЗадолженностиПодотчетныхЛиц><Дата>"+Дата1С(ДатаНачала-1)+"</Дата><Номер>"+ПустойНомер("ОстаткиЗадолженностиПодотчетныхЛиц")+"</Номер>"+
        пЮрЛицоСсылка+"<Расчеты>");
      AppendStringToBufferedString(СтрДокументы,СтрДокументы2);
      AppendStringToBufferedString(СтрДокументы,"</Расчеты><Ссылка>"+Ссылка+"</Ссылка></Документ.ОстаткиЗадолженностиПодотчетныхЛиц>");
    EndIf;
  EndIf;
  
  //Взаиморасчеты
  If ФлВсеДокументы Then
    ТЗ:="Period From ДатаНачала To ДатаНачала;
    |зЮЛ:=Storage.Взаиморасчеты.Договор.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);
    |зВД:=Storage.Взаиморасчеты.ВидДолга;
    |зТара:=Storage.Взаиморасчеты.Тара;Condition(IsEmpty(зТара));
    |зК:=Storage.Взаиморасчеты.Договор.@Parent;
    |зСм:=BegTotals(Сумма);
    |Group зВД,зК;";
    З:=Query.Create();
    З.Execute(ТЗ);
  
    While З.Next(1) Do
      If З.зВД=Enum.ПокупательПоставщик.Покупатель Then
        Ссылка:=НайтиВнешнийКод(0,"ВЗАИМПК_"+ДатаНачала);
        СтрДокументы2:="";
        While З.Next(2) Do
          Form.StatusText("Остатки, взаиморасчеты: "+З.зК);
          ВыгрузитьСправочник(СтрСправочники,З.зК);
          AppendStringToBufferedString(СтрДокументы2,"<Строка><Контрагент><Ссылка>"+НайтиВнешнийКод(З.зК)+"</Ссылка><Наименование>"+EncodeXMLString(З.зК.Name)+"</Наименование><ЮридическоеФизическоеЛицо>"+
            ?(З.зК.ВидКонтрагента<>Enum.ВидыКонтрагентов.ФизЛицо,"ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></Контрагент>");
          AppendStringToBufferedString(СтрДокументы2,"<Сумма>"+Round(З.зСм,2)+"</Сумма><СуммаРегл>"+Round(З.зСм,2)+"</СуммаРегл>");
          AppendStringToBufferedString(СтрДокументы2,"<ДанныеВзаиморасчетов><ВалютаВзаиморасчетов><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаВзаиморасчетов></ДанныеВзаиморасчетов></Строка>");
        EndDo;
        If СтрДокументы2<>"" Then
          AppendStringToBufferedString(СтрДокументы,"<Документ.ОстаткиРасчетовСПокупателямиДолги><Дата>"+Дата1С(ДатаНачала-1)+"</Дата><Номер>"+ПустойНомер("ОстаткиРасчетовСПокупателямиДолги")+"</Номер>"+
            пЮрЛицоСсылка+"<Расчеты>");
          AppendStringToBufferedString(СтрДокументы,СтрДокументы2);
          AppendStringToBufferedString(СтрДокументы,"</Расчеты><Ссылка>"+Ссылка+"</Ссылка></Документ.ОстаткиРасчетовСПокупателямиДолги>");
        EndIf;
      ElseIf З.зВД=Enum.ПокупательПоставщик.Поставщик Then
        Ссылка:=НайтиВнешнийКод(0,"ВЗАИМПС_"+ДатаНачала);
        СтрДокументы2:="";
        While З.Next(2) Do
          Form.StatusText("Остатки, взаиморасчеты: "+З.зК);
          ВыгрузитьСправочник(СтрСправочники,З.зК);
          AppendStringToBufferedString(СтрДокументы,"<Строка><Контрагент><Ссылка>"+НайтиВнешнийКод(З.зК)+"</Ссылка><ЮридическоеФизическоеЛицо>"+
            ?(З.зК.ВидКонтрагента<>Enum.ВидыКонтрагентов.ФизЛицо,"ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></Контрагент>");
          AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(З.зСм,2)+"</Сумма><СуммаРегл>"+Round(З.зСм,2)+"</СуммаРегл>");
          AppendStringToBufferedString(СтрДокументы,"<ДанныеВзаиморасчетов><ВалютаВзаиморасчетов><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаВзаиморасчетов></ДанныеВзаиморасчетов></Строка>");
        EndDo;
        If СтрДокументы2<>"" Then
          AppendStringToBufferedString(СтрДокументы,"<Документ.ОстаткиРасчетовСПоставщикамиДолги><Дата>"+Дата1С(ДатаНачала-1)+"</Дата><Номер>"+ПустойНомер("ОстаткиРасчетовСПоставщикамиДолги")+"</Номер>"+
            пЮрЛицоСсылка+"<Расчеты>");
          AppendStringToBufferedString(СтрДокументы,СтрДокументы2);
          AppendStringToBufferedString(СтрДокументы,"</Расчеты><Ссылка>"+Ссылка+"</Ссылка></Документ.ОстаткиРасчетовСПоставщикамиДолги>");
        EndIf;
      EndIf;
   EndDo;
  EndIf;
  
  //Остатки ТМЦ
  ТЗ:="Period From НачДата To КонДата;
  |зМг:=Storage.ОстаткиТМЦ.Склад.Магазин;"+
  ?(ФлВсеДокументы,"зЮЛ:=Storage.ОстаткиТМЦ.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);","Condition(зМг=Магазин);")+
  "зН:=Storage.ОстаткиТМЦ.Номенклатура;
  |зСм:=BegTotals(Количество);
  |Condition(зН IN спН);
  |Group зМг,зН;";
  З:=Query.Create();
  З.Execute(ТЗ);

  While З.Next(1) Do
    зМг:=З.зМг;
    If IsEmpty(зМг) Then
      MessageVisual("Выгрузка остатков для складов без указания магазина не будет производиться!","!");
      Continue;
    EndIf;
    ВыгрузитьСправочник(СтрСправочники,зМг);
    Ссылка:=НайтиВнешнийКод(0,"ОСТ_"+зМг.Code+"_"+ДатаНачала);
    СтрДокументы2:="";
    While З.Next(2) Do
      Form.StatusText("Остатки, остатки ТМЦ: "+З.ResultTable.CurLine+" из "+З.ResultTable.Size());
      зН:=З.зН;
      ВыгрузитьСправочник(СтрСправочники,зН.базЕдиница);
      ВыгрузитьСправочник(СтрСправочники,зН,1);
      //ВозвратнаяТара,ГотоваяПродукция,ИнвентарьИХозяйственныеПринадлежности,КомиссионныеТовары,СобственныеТовары,Топливо
      ТипНоменклатуры:="СобственныеТовары";
      If зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара Then
        ТипНоменклатуры:="ВозвратнаяТара";
      ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь Then
        ТипНоменклатуры:="ИнвентарьИХозяйственныеПринадлежности";
      ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.АрендованноеИмущество Then
        ТипНоменклатуры:="КомиссионныеТовары";
      EndIf;
      зСм0:=глПолучитьОсновнуюЦену(зН,зМг.Склад,ДатаНачала-1,1)*З.зСм;
      зСмБНДС:=Round(зСм0,2);
      зСмНДС:=0;
      If ЮрЛицо.УчитыватьНДС Then
        зСмБНДС:=Round(зСм0*глКоэффНДС(зН.СтавкаНДС),2);
        зСмНДС:=Round(зСм0-зСмНДС,2);
      EndIf;
      AppendStringToBufferedString(СтрДокументы2,"<Строка>"+
        "<ДанныеНоменклатуры><Номенклатура><Ссылка>"+НайтиВнешнийКод(зН)+"</Ссылка><КодВПрограмме>"+зН.Code+"</КодВПрограмме><Наименование>"+EncodeXMLString(зН.Name)+"</Наименование></Номенклатура></ДанныеНоменклатуры>"+
        "<ВидЗапасов>"+ТипНоменклатуры+"</ВидЗапасов><ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(зН.базЕдиница)+"</Ссылка><ДанныеКлассификатора>"+
        "<Код>"+зН.базЕдиница.ВнешнийКод+"</Код><Наименование>"+EncodeXMLString(зН.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения>"+
        "<Количество>"+Round(З.зСм,6)+"</Количество><СуммаБезНДС>"+зСмБНДС+"</СуммаБезНДС><СтавкаНДС>"+СтавкаНДС(зН.СтавкаНДС)+"</СтавкаНДС><СуммаНДС>"+зСмНДС+"</СуммаНДС>"+
        "<ДанныеГТД><НомерГТД>"+EncodeXMLString(зН.сертНомерГТД)+"</НомерГТД><СтранаПроисхождения><Код>"+
        зН.сертСтранаПроисхождения.Code+"</Код><Наименование>"+EncodeXMLString(зН.сертСтранаПроисхождения)+"</Наименование></СтранаПроисхождения></ДанныеГТД></Строка>");
    EndDo;
    If СтрДокументы2<>"" Then
      AppendStringToBufferedString(СтрДокументы,"<Документ.ОстаткиСобственныхТМЦ><Дата>"+Дата1С(ДатаНачала-1)+"</Дата><Номер>"+ПустойНомер("ОстаткиСобственныхТМЦ")+"</Номер>"+
        пЮрЛицоСсылка+"<Склад><Ссылка>"+НайтиВнешнийКод(зМг)+"</Ссылка><Наименование>"+EncodeXMLString(зМг.НазваниеМагазина)+"</Наименование><ТипСклада>Розничный</ТипСклада></Склад><ТМЦ>");
      AppendStringToBufferedString(СтрДокументы,СтрДокументы2);
      AppendStringToBufferedString(СтрДокументы,"</ТМЦ><Ссылка>"+Ссылка+"</Ссылка></Документ.ОстаткиСобственныхТМЦ>");
    EndIf;
  EndDo;
  
  Exit 1;
EndFunction

Function ВыгрузитьДокументВзаиморасчетов(aDoc,ByRef СтрДокументы,ByRef СтрСправочники,ФлПлюс)
  //Выгружаемые документы:
  //  [В] Документ "Корректировка долга" -- Корректировка долга, любой невыгружаемый документ, влияющий на взаиморасчеты

  Вид:=aDoc.DBName();
  If Вид="РеализацияПрочее" Then
    Ссылка:=НайтиВнешнийКод(aDoc,"РП");
    СмСумма:=0;
    СмСуммаНДС:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧастьСодержание(aDoc,СмСумма,СтрСправочники,СмСуммаНДС);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    ВыгрузитьСправочник(СтрСправочники,Магазин);
    AppendStringToBufferedString(СтрДокументы,"<Документ.РеализацияТоваровУслуг>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<ВидОперации>РеализацияКлиенту</ВидОперации><Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС>");
    AppendStringToBufferedString(СтрДокументы,"<Склад><Ссылка>"+НайтиВнешнийКод(Магазин)+"</Ссылка><Наименование>"+EncodeXMLString(Магазин.НазваниеМагазина)+"</Наименование><ТипСклада>Розничный</ТипСклада></Склад>");
    AppendStringToBufferedString(СтрДокументы,ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,"<ДанныеВзаиморасчетов><ВалютаВзаиморасчетов><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаВзаиморасчетов></ДанныеВзаиморасчетов>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий><Услуги>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"</Услуги></Документ.РеализацияТоваровУслуг>");
    
    If (aDoc.ЮрЛицо.УчитыватьНДС)And(aDoc.УчитыватьВНалоговомУчете) Then
      Ссылка2:=НайтиВнешнийКод(aDoc,"СФ");
      AppendStringToBufferedString(СтрДокументы,"<Документ.СчетФактураВыданный>"+ВыгрШапкаДокументаСФ(aDoc,Ссылка2));
      AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
      AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма>"+ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники));
      AppendStringToBufferedString(СтрДокументы,"<СуммаНДС>"+Round(СмСуммаНДС,2)+"</СуммаНДС><ВидСчетаФактуры>НаРеализацию</ВидСчетаФактуры><Выставлен>true</Выставлен><СпособВыставления>ВЭлектронномВиде</СпособВыставления>");
      AppendStringToBufferedString(СтрДокументы,"<ДокументыОснования><Строка><ДокументОснование>"+ВыгрШапкаДокумента(aDoc,Ссылка,,,"РеализацияТоваровУслугСсылка")+"</ДокументОснование></Строка></ДокументыОснования></Документ.СчетФактураВыданный>");
    EndIf;
  ElseIf Вид="ПоступлениеПрочее" Then
    Ссылка:=НайтиВнешнийКод(aDoc,"ПП");
    СмСумма:=0;
    СмСуммаНДС:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧастьСодержание(aDoc,СмСумма,СтрСправочники,СмСуммаНДС);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    СтрВходящий:="";
    If _And(aDoc.НомерДокВходящий<>"",not IsEmpty(aDoc.ДатаДокВходящий)) Then
      СтрВходящий:="<НомерВходящегоДокумента>"+EncodeXMLString(aDoc.НомерДокВходящий)+"</НомерВходящегоДокумента><ДатаВходящегоДокумента>"+Дата1С(aDoc.ДатаДокВходящий)+"</ДатаВходящегоДокумента>";
    EndIf;
    ВыгрузитьСправочник(СтрСправочники,Магазин);
    AppendStringToBufferedString(СтрДокументы,"<Документ.ПоступлениеТоваровУслуг>"+ВыгрШапкаДокумента(aDoc,Ссылка,СтрСправочники,1)+"<Услуги>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"</Услуги><Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидОперации>ПокупкаУПоставщика</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС>");
    AppendStringToBufferedString(СтрДокументы,"<Склад><Ссылка>"+НайтиВнешнийКод(Магазин)+"</Ссылка><Наименование>"+EncodeXMLString(Магазин.НазваниеМагазина)+"</Наименование><ТипСклада>Розничный</ТипСклада></Склад>");
    AppendStringToBufferedString(СтрДокументы,"<ДанныеВзаиморасчетов><ВалютаВзаиморасчетов><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаВзаиморасчетов></ДанныеВзаиморасчетов>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,СтрВходящий+"</Документ.ПоступлениеТоваровУслуг>");
    
    If (aDoc.ЮрЛицо.УчитыватьНДС)And(aDoc.УчитыватьВНалоговомУчете) Then
      If aDoc.НомерДокВходящийСФ<>"" Then
        Ссылка2:=НайтиВнешнийКод(aDoc,"СФ");
        AppendStringToBufferedString(СтрДокументы,"<Документ.СчетФактураПолученный>"+ВыгрШапкаДокументаСФ(aDoc,Ссылка2,СтрСправочники,1)+"<ДатаПолучения>"+Дата1С(aDoc.DocDate)+"</ДатаПолучения>");
        AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
        AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма>"+ВыгрДоговорДокумента(aDoc.Договор,СтрСправочники));
        AppendStringToBufferedString(СтрДокументы,"<СуммаНДС>"+Round(СмСуммаНДС,2)+"</СуммаНДС><ВидСчетаФактуры>НаПоступление</ВидСчетаФактуры><СпособВыставления>ВЭлектронномВиде</СпособВыставления>");
        AppendStringToBufferedString(СтрДокументы,"<ДокументыОснования><Строка><ДокументОснование>"+ВыгрШапкаДокумента(aDoc,Ссылка,СтрСправочники,1,"ПоступлениеТоваровУслугСсылка")+"</ДокументОснование></Строка></ДокументыОснования></Документ.СчетФактураПолученный>");
      EndIf;
    EndIf;
  Else
    Ссылка:=НайтиВнешнийКод(aDoc);
    Сумма:=0;
    aTab:=aDoc.LoadStorage("Взаиморасчеты");
    aTab.Select();
    While aTab.Next() Do
      Сумма:=Round(Сумма+aTab.Сумма*?(aTab._Expense=0,1,-1),2);
    EndDo;
    зК:=aTab.Договор.Parent();
    
    AppendStringToBufferedString(СтрДокументы,"<Документ.КорректировкаДолга>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидОперации>ПроведениеВзаимозачета</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<"+?(Сумма>0,"СуммаДебиторскойЗадолженности","СуммаКредиторскойЗадолженности")+">"+Round(aTab.Сумма,2)+"</"+?(Сумма>0,"СуммаДебиторскойЗадолженности","СуммаКредиторскойЗадолженности")+">");
    AppendStringToBufferedString(СтрДокументы,ВыгрКонтрагентаДокумента(зК,СтрСправочники,?(Сумма>0,"КонтрагентДебитор","КонтрагентКредитор")));
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+?(глЕстьРеквизитДокумента("Комментарий",aDoc.DBName()),EncodeXMLString(aDoc.Комментарий))+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,"</Документ.КорректировкаДолга>");
  EndIf;
  
  Exit 1;
EndFunction

Function ВыгрузитьДокументПодотчета(aDoc,ByRef СтрДокументы,ByRef СтрСправочники,ФлПлюс)
  //Выгружаемые документы:
  //  [Д] Документ "Авансовый отчет" -- Подотчетная операция
  //коПодотчетнаяОперация.Прочее -- списание подотчета
  //коПодотчетнаяОперация.Оплата -- списание подотчета + корректировка долга перед контрагентами
  //Документ.АвансовыйОтчет
  
  Вид:=aDoc.DBName();
  Ссылка:=НайтиВнешнийКод(aDoc);
  If Вид="ПодотчетнаяОперация" Then
    ВыгрузитьСправочник(СтрСправочники,aDoc.ПодотчетноеЛицо,1);
    AppendStringToBufferedString(СтрДокументы,"<Документ.АвансовыйОтчет>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС>");
    AppendStringToBufferedString(СтрДокументы,"<ПодотчетноеЛицо><Ссылка>"+НайтиВнешнийКод(aDoc.ПодотчетноеЛицо)+"</Ссылка><ФИО>"+EncodeXMLString(aDoc.ПодотчетноеЛицо.ПолнНаименование)+"</ФИО><ВидРасчетов>Подотчет</ВидРасчетов></ПодотчетноеЛицо>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    If aDoc.КодОперации=Enum.коПодотчетнаяОперация.Оплата Then
      //Увеличение задолженности контрагентов
      СтрДокументы2:="";
      aTab:=aDoc.LineParts("Содержание");
      aTab.Select();
      While aTab.Next() Do
        AppendStringToBufferedString(СтрДокументы2,"<Строка>"+ВыгрКонтрагентаДокумента(aTab.Контрагент,СтрСправочники));
        AppendStringToBufferedString(СтрДокументы2,"<ДанныеВзаиморасчетов><ВалютаВзаиморасчетов><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаВзаиморасчетов></ДанныеВзаиморасчетов>");
        AppendStringToBufferedString(СтрДокументы2,"<Содержание>"+EncodeXMLString(aTab.Содержание)+"</Содержание><Сумма>"+Round(aTab.Сумма,2)+"</Сумма><СуммаВзаиморасчетов>"+Round(aTab.Сумма,2)+"</СуммаВзаиморасчетов>");
        AppendStringToBufferedString(СтрДокументы2,"<ВидыРасчетовСКонтрагентами>СПоставщиком</ВидыРасчетовСКонтрагентами></Строка>");
      EndDo;
      If СтрДокументы2<>"" Then
        AppendStringToBufferedString(СтрДокументы,"<ОплатаКонтрагентам>"+СтрДокументы2+"</ОплатаКонтрагентам>");
      EndIf;

      ////Увеличение задолженности контрагентов
      //aTab:=aDoc.LineParts("Содержание");
      //aTab.Select();
      //While aTab.Next() Do
      //  //TODO: При удалении строк документа, в ЦБ могут остаться неверные документы
      //  //TODO: Документы не привязаны к АвансовыйОтчет
      //  Ссылка:=НайтиВнешнийКод(aDoc,"ПО_"+aTab.CurLine);
      //  AppendStringToBufferedString(СтрДокументы,"<Документ.КорректировкаДолга>"+ВыгрШапкаДокумента(aDoc,Ссылка));
      //  AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
      //  AppendStringToBufferedString(СтрДокументы,"<ВидОперации>ПроведениеВзаимозачета</ВидОперации><СуммаДебиторскойЗадолженности>"+Round(aTab.Сумма,2)+"</СуммаДебиторскойЗадолженности>"+
      //    ВыгрКонтрагентаДокумента(aTab.Контрагент,СтрСправочники,"КонтрагентДебитор"));
      //  AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aTab.Содержание)+"</Комментарий></Документ.КорректировкаДолга>");
      //EndDo;
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<НалогообложениеНДСПродавца>НеОблагаетсяНДС</НалогообложениеНДСПродавца></Документ.АвансовыйОтчет>");
  Else //Другие документы
    aTab:=aDoc.LoadStorage("ПодотчетныеОперации");
    aTab.Select();
    While aTab.Next() Do
      См:=aTab.Сумма*?(aTab._Expense=0,1,-1);
      If См>0 Then
        MessageVisual("Неизвестный документ увеличения задолженности по подотчету "+aDoc+"! Выгрузка остановлена!","!");
        Exit 0;
      EndIf;
      If См=0 Then
        Continue;
      EndIf;
      См:=Abs(См);
      //TODO: При удалении строк документа, в ЦБ могут остаться неверные документы
      Ссылка:=НайтиВнешнийКод(aDoc,"ПО_"+aTab.CurLine);
      ВыгрузитьСправочник(СтрСправочники,aTab.ПодотчетноеЛицо,1);
      СтпДоп:="<Сотрудник><Ссылка>"+НайтиВнешнийКод(aTab.ПодотчетноеЛицо)+"</Ссылка><ФИО>"+EncodeXMLString(aTab.ПодотчетноеЛицо.ПолнНаименование)+"</ФИО></Сотрудник><ВидРасчетов>Подотчет</ВидРасчетов>";
      AppendStringToBufferedString(СтрДокументы,"<Документ.АвансовыйОтчет>"+ВыгрШапкаДокумента(aDoc,Ссылка));
      AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
      AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(См,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС>");
      AppendStringToBufferedString(СтрДокументы,"<ПодотчетноеЛицо><Ссылка>"+НайтиВнешнийКод(aTab.ПодотчетноеЛицо)+"</Ссылка><ФИО>"+EncodeXMLString(aTab.ПодотчетноеЛицо.ПолнНаименование)+"</ФИО><ВидРасчетов>Подотчет</ВидРасчетов></ПодотчетноеЛицо>");
      AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий><НалогообложениеНДСПродавца>НеОблагаетсяНДС</НалогообложениеНДСПродавца></Документ.АвансовыйОтчет>");
    EndDo;
  EndIf;
  
  Exit 1;
EndFunction  

Function ВыгрузитьДокументБанка(aDoc,ByRef СтрДокументы,ByRef СтрСправочники,ФлПлюс)
  //Выгружаемые документы:
  //  [В,Д] Поступление безналичных денежных средств -- Выписка банка приход
  //    ПБДСРасчетыСКонтрагентами,ПБДСРасчетыССотрудниками,ПБДСКонвертацияВалюты,ПБДСПрочиеДоходы,ПБДСПрочееПоступление
  //  [В,Д] Списание безналичных денежных средств -- Выписка банка расход
  //    СБДСРасчетыСКонтрагентами,СБДСРасчетыССотрудниками,СБДСКонвертацияВалюты,СБДСПереводНаДругойСчет,СБДСПеречислениеЗаработнойПлаты,СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета,СБДСПрочееСписание
  
  СтрДоп2:="";
  Вид:=aDoc.DBName();
  Ссылка:=НайтиВнешнийКод(aDoc);
  If Вид="ВыпискаБанкаПриход" Then
    //Виды расчетов: КредитыИЗаймы,Прочее,СПокупателем,СПоставщиком
    СтрДоп:="";
    If aDoc.КодОперации=Enum.коВыпискаБанкаПриход.ОплатаПокупателя Then
      ДокВид:="ПБДСРасчетыСКонтрагентами";
      СтрДоп:="<ВидРасчетов>СПокупателем</ВидРасчетов>"+ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники);
    ElseIf (aDoc.КодОперации=Enum.коВыпискаБанкаПриход.ВозвратОтПоставщика)or(aDoc.КодОперации=Enum.коВыпискаБанкаПриход.ОплатаУслуг) Then
      ДокВид:="ПБДСРасчетыСКонтрагентами";
      СтрДоп:="<ВидРасчетов>"+?(aDoc.КодОперации=Enum.коВыпискаБанкаПриход.ОплатаУслуг,"СПокупателем","СПоставщиком")+"</ВидРасчетов>"+ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники);
    ElseIf aDoc.КодОперации=Enum.коВыпискаБанкаПриход.РозничнаяВыручка Then
      ДокВид:="ПБДСПоПлатежнымКартам";
    Else //Enum.коВыпискаБанкаПриход.Прочее,Enum.коВыпискаБанкаПриход.Инкассация
      ДокВид:="ПБДСПрочееПоступление";
    EndIf;
    ВыгрузитьСправочник(СтрСправочники,aDoc.БанковскийСчет);
    AppendStringToBufferedString(СтрДокументы,"<Документ."+ДокВид+">"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<ОбщиеДанные><ДатаВыписки>"+FormatDate(aDoc.DocDate,"YYYY-mm-dd")+"</ДатаВыписки>"+
      "<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,"<БанковскийСчетОрганизации><Ссылка>"+НайтиВнешнийКод(aDoc.БанковскийСчет)+"</Ссылка><НомерСчета>"+EncodeXMLString(aDoc.БанковскийСчет.НомерСчета)+"</НомерСчета>"+
      "<Владелец>"+Replace(пЮрЛицоСсылка,"Организация>","ОрганизацииСсылка>")+"</Владелец></БанковскийСчетОрганизации></ОбщиеДанные>");
    AppendStringToBufferedString(СтрДокументы,СтрДоп+"<РасшифровкаПлатежа><Строка><Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><ДанныеВзаиморасчетов></ДанныеВзаиморасчетов></Строка></РасшифровкаПлатежа>"+
      СтрДоп2+"</Документ."+ДокВид+">");
  ElseIf Вид="ВыпискаБанкаРасход" Then
    СтрДоп:="";
    If aDoc.КодОперации=Enum.коВыпискаБанкаРасход.ВозвратПокупателю Then
      ДокВид:="СБДСРасчетыСКонтрагентами";
      СтрДоп:=ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники)+"<ВидРасчетов>СПокупателем</ВидРасчетов>";
    ElseIf (aDoc.КодОперации=Enum.коВыпискаБанкаРасход.ОплатаПоставщику)or(aDoc.КодОперации=Enum.коВыпискаБанкаРасход.ОплатаУслуг) Then
      ДокВид:="СБДСРасчетыСКонтрагентами";
      СтрДоп:=ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники)+"<ВидРасчетов>СПоставщиком</ВидРасчетов>";
    Else //Enum.коВыпискаБанкаРасход.Прочее,Enum.коВыпискаБанкаРасход.Инкассация
      ДокВид:="СБДСПрочееСписание";
      СтрДоп2:="<ВидОперации>ПрочееСписание</ВидОперации>";
    EndIf;
    ВыгрузитьСправочник(СтрСправочники,aDoc.БанковскийСчет);
    AppendStringToBufferedString(СтрДокументы,"<Документ."+ДокВид+">"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<ОбщиеДанные><ДатаВыписки>"+FormatDate(aDoc.DocDate,"YYYY-mm-dd")+"</ДатаВыписки>"+
      "<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,"<БанковскийСчетОрганизации><Ссылка>"+НайтиВнешнийКод(aDoc.БанковскийСчет)+"</Ссылка><НомерСчета>"+EncodeXMLString(aDoc.БанковскийСчет.НомерСчета)+"</НомерСчета>"+
      "<Владелец>"+Replace(пЮрЛицоСсылка,"Организация>","ОрганизацииСсылка>")+"</Владелец></БанковскийСчетОрганизации></ОбщиеДанные>");
    AppendStringToBufferedString(СтрДокументы,СтрДоп+"<РасшифровкаПлатежа><Строка><Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><ДанныеВзаиморасчетов></ДанныеВзаиморасчетов></Строка></РасшифровкаПлатежа>"+
      СтрДоп2+"</Документ."+ДокВид+">");
  Else //Другие банковские документы
    If ФлПлюс Then
      ДокВид:="ПБДСПрочееПоступление";
    Else
      ДокВид:="СБДСПрочееСписание";
    EndIf;
    ВыгрузитьСправочник(СтрСправочники,aDoc.БанковскийСчет);
    AppendStringToBufferedString(СтрДокументы,"<Документ."+ДокВид+">"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<ОбщиеДанные><ДатаВыписки>"+FormatDate(aDoc.DocDate,"YYYY-mm-dd")+"</ДатаВыписки>"+
      "<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,"<БанковскийСчетОрганизации><Ссылка>"+НайтиВнешнийКод(aDoc.БанковскийСчет)+"</Ссылка><НомерСчета>"+EncodeXMLString(aDoc.БанковскийСчет.НомерСчета)+"</НомерСчета>"+
      "<Владелец>"+Replace(пЮрЛицоСсылка,"Организация>","ОрганизацииСсылка>")+"</Владелец></БанковскийСчетОрганизации></ОбщиеДанные>");
    AppendStringToBufferedString(СтрДокументы,"<РасшифровкаПлатежа><Строка><Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><ДанныеВзаиморасчетов></ДанныеВзаиморасчетов></Строка></РасшифровкаПлатежа>"+
      СтрДоп2+"</Документ."+ДокВид+">");
  EndIf;
  
  Exit 1;  
EndFunction

Function ВыгрузитьДокументКассы(aDoc,ByRef СтрДокументы,ByRef СтрСправочники,ФлПлюс)
  //Выгружаемые документы:
  //  [В,Д] Поступление наличных денежных средств -- ПКО
  //    ПКОРасчетыСКонтрагентами,ПКОРасчетыССотрудниками,ПКОКонвертацияВалюты,ПКОПолучениеНаличныхВБанке,ПКОРозничнаяВыручка,ПКОВнутренняяПередача,ПКОПрочееПоступление,ПКОПрочиеДоходы
  //  [В,Д] Выплата наличных денежных средств -- РКО
  //    РКОРасчетыСКонтрагентами,РКОРасчетыССотрудниками,РКОКонвертацияВалюты,РКОНаБанковскийСчет,РКОВнутренняяПередача,РКОПрочаяВыдача,РКОПрочийРасход

  Вид:=aDoc.DBName();
  Ссылка:=НайтиВнешнийКод(aDoc);
  If Вид="ПКО" Then
    //Виды расчетов: КредитыИЗаймы,Прочее,СПокупателем,СПоставщиком
    СтрДоп:="";
    If aDoc.КодОперации=Enum.коПКО.ОплатаПокупателя Then
      ДокВид:=?(aDoc.Контрагент.фоРозничныйПокупатель,"ПКОРозничнаяВыручка","ПКОРасчетыСКонтрагентами");
      СтрДоп:=?(aDoc.Контрагент.фоРозничныйПокупатель,"<ВыручкаНТТ>true</ВыручкаНТТ>",ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники))+"<ВидРасчетов>СПокупателем</ВидРасчетов>"+
        "<РасшифровкаПлатежа><Строка><Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><ДанныеВзаиморасчетов></ДанныеВзаиморасчетов></Строка></РасшифровкаПлатежа>";
    ElseIf (aDoc.КодОперации=Enum.коПКО.ВозвратОтПоставщика)or(aDoc.КодОперации=Enum.коПКО.ОплатаУслуг) Then
      ДокВид:="ПКОРасчетыСКонтрагентами";
      СтрДоп:=ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники)+"<ВидРасчетов>"+?(aDoc.КодОперации=Enum.коПКО.ОплатаУслуг,"СПокупателем","СПоставщиком")+"</ВидРасчетов>"+
        "<РасшифровкаПлатежа><Строка><Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><ДанныеВзаиморасчетов></ДанныеВзаиморасчетов></Строка></РасшифровкаПлатежа>";
    ElseIf aDoc.КодОперации=Enum.коПКО.ВозвратОтПодотчетника Then
      ДокВид:="ПКОРасчетыССотрудниками";
      ВыгрузитьСправочник(СтрСправочники,aDoc.ПодотчетноеЛицо,1);
      СтрДоп:="<Сотрудник><Ссылка>"+НайтиВнешнийКод(aDoc.ПодотчетноеЛицо)+"</Ссылка><ФИО>"+EncodeXMLString(aDoc.ПодотчетноеЛицо.ПолнНаименование)+"</ФИО></Сотрудник><ВидРасчетов>Подотчет</ВидРасчетов>"+
        "<РасшифровкаПлатежа><Строка><Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><ДанныеВзаиморасчетов></ДанныеВзаиморасчетов></Строка></РасшифровкаПлатежа>";
    ElseIf aDoc.КодОперации=Enum.коПКО.Инкассация Then
      ДокВид:="ПКОПолучениеНаличныхВБанке";
      //ВыгрузитьСправочник(СтрСправочники,aDoc.БанковскийСчет);
      //СтрДоп:="<БанковскийСчет><Ссылка>"+НайтиВнешнийКод(aDoc.БанковскийСчет)+"</Ссылка><Владелец>"+пЮрЛицоСсылка+"</Владелец><НомерСчета>"+EncodeXMLString(aDoc.БанковскийСчет.НомерСчета)+"</НомерСчета></БанковскийСчет>"+
      СтрДоп:="<ВидОперации>Инкассация</ВидОперации>";
    Else //Enum.коПКО.Прочее,Enum.коПКО.ПолучениеКредита
      ДокВид:="ПКОПрочееПоступление";
      СтрДоп:="<РасшифровкаПлатежа><Строка><Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><ДанныеВзаиморасчетов></ДанныеВзаиморасчетов></Строка></РасшифровкаПлатежа>";
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ."+ДокВид+">"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<ОбщиеДанные><Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий></ОбщиеДанные>");
    AppendStringToBufferedString(СтрДокументы,СтрДоп+"</Документ."+ДокВид+">");
  ElseIf Вид="РКО" Then
    СтрДоп:="";
    If aDoc.КодОперации=Enum.коРКО.ВозвратПокупателю Then
      ДокВид:="РКОРасчетыСКонтрагентами";
      СтрДоп:=ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники)+"<ВидРасчетов>СПокупателем</ВидРасчетов>"+
        "<РасшифровкаПлатежа><Строка><Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><ДанныеВзаиморасчетов></ДанныеВзаиморасчетов></Строка></РасшифровкаПлатежа>";
    ElseIf (aDoc.КодОперации=Enum.коРКО.ОплатаПоставщику)or(aDoc.КодОперации=Enum.коРКО.ОплатаУслуг) Then
      ДокВид:="РКОРасчетыСКонтрагентами";
      СтрДоп:=ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники)+"<ВидРасчетов>СПоставщиком</ВидРасчетов>"+
        "<РасшифровкаПлатежа><Строка><Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><ДанныеВзаиморасчетов></ДанныеВзаиморасчетов></Строка></РасшифровкаПлатежа>";
    ElseIf aDoc.КодОперации=Enum.коРКО.ВыдачаПодотчет Then
      ДокВид:="РКОРасчетыССотрудниками";
      ВыгрузитьСправочник(СтрСправочники,aDoc.ПодотчетноеЛицо,1);
      СтрДоп:="<Сотрудник><Ссылка>"+НайтиВнешнийКод(aDoc.ПодотчетноеЛицо)+"</Ссылка><ФИО>"+EncodeXMLString(aDoc.ПодотчетноеЛицо.ПолнНаименование)+"</ФИО></Сотрудник><ВидРасчетов>Подотчет</ВидРасчетов>"+
        "<РасшифровкаПлатежа><Строка><Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><ДанныеВзаиморасчетов></ДанныеВзаиморасчетов></Строка></РасшифровкаПлатежа>";
    ElseIf aDoc.КодОперации=Enum.коРКО.Инкассация Then
      ДокВид:="РКОНаБанковскийСчет";
      //ВыгрузитьСправочник(СтрСправочники,aDoc.БанковскийСчет);
      //СтрДоп:="<БанковскийСчет><Ссылка>"+НайтиВнешнийКод(aDoc.БанковскийСчет)+"</Ссылка><Владелец>"+пЮрЛицоСсылка+"</Владелец><НомерСчета>"+EncodeXMLString(aDoc.БанковскийСчет.НомерСчета)+"</НомерСчета></БанковскийСчет>";
      СтрДоп:="<ВидОперации>Инкассация</ВидОперации>";
    Else //Enum.коРКО.Прочее,Enum.коРКО.ВозвратКредита
      ДокВид:="РКОПрочаяВыдача";
      СтрДоп:="<РасшифровкаПлатежа><Строка><Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><ДанныеВзаиморасчетов></ДанныеВзаиморасчетов></Строка></РасшифровкаПлатежа>";
    EndIf;
    
    AppendStringToBufferedString(СтрДокументы,"<Документ."+ДокВид+">"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<ОбщиеДанные><Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий></ОбщиеДанные>");
    AppendStringToBufferedString(СтрДокументы,СтрДоп+"</Документ."+ДокВид+">");
  Else //Другие кассовые документы
    If ФлПлюс Then
      ДокВид:="ПКОПрочееПоступление";
    Else
      ДокВид:="РКОПрочаяВыдача";
    EndIf;
    СтрДоп:="<РасшифровкаПлатежа><Строка><Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><ДанныеВзаиморасчетов></ДанныеВзаиморасчетов></Строка></РасшифровкаПлатежа>";
    AppendStringToBufferedString(СтрДокументы,"<Документ."+ДокВид+">"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<ОбщиеДанные><Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий></ОбщиеДанные>");
    AppendStringToBufferedString(СтрДокументы,СтрДоп+"</Документ."+ДокВид+">");
  EndIf;
  
  Exit 1;
EndFunction


Function ВыгрузитьДокументОстатков(aDoc,ByRef СтрДокументы,ByRef СтрСправочники,ФлПлюс)
  //Выгружаемые документы:
  //+  [О] Документ "Реализация товаров и услуг" -- Реализация (в т.ч. розничная)
  //+  [О] Документ "Поступление товаров и услуг" -- Поступление
  //+  [О] Документ "Возврат товаров от покупателя" -- Возврат от покупателя (в т.ч. розничный)
  //+  [О] Документ "Возврат товаров поставщику" -- Возврат поставщику
  //+  [О,В] Документ "Счет-фактура выданный" - для юр. лиц с НДС, любой документ
  //+  [О,В] Документ "Счет-фактура полученный" - для юр. лиц с НДС, любой документ
  //  [TODO] Документ "Реализация подарочных сертификатов"
  //  [TODO] Документ "Возврат подарочных сертификатов"
  //  [TODO] Документ "Аннулирование подарочных сертификатов"
  //+  [О] Документ "Оприходование товаров" -- Регистрация ТМЦ, любой невыгружаемый документ, влияющий на остатки на складах
  //+  [О] Документ "Списание товаров" -- Регистрация ТМЦ, любой невыгружаемый документ, влияющий на остатки на складах
  //+  [О] Документ "Перемещение товаров" -- Регистрация ТМЦ
  //+  [О] Документ "Сборка товаров" -- Комплектация товара
  //  Документ "Передача материалов в эксплуатацию" -- Регистрация ОС
  //  Документ "Возврат материалов из эксплуатации" -- Регистрация ОС
  //+  [В,Д] Поступление безналичных денежных средств -- Выписка банка приход
  //+  [В,Д] Списание безналичных денежных средств -- Выписка банка расход
  //+  [В,Д] Поступление наличных денежных средств -- ПКО
  //+  [В,Д] Выплата наличных денежных средств -- РКО
  //+  [В] Документ "Корректировка долга" -- Корректировка долга, любой невыгружаемый документ, влияющий на взаиморасчеты
  //+  [Д] Документ "Авансовый отчет" -- Подотчетная операция
  //  [???] Документ "Установка цен номенклатуры" -- TODO -- выгружать изменение цен за период?

  Вид:=aDoc.DBName();
  Ссылка:=НайтиВнешнийКод(aDoc);
  If Вид="Реализация" Then
    //ВидОперации: ОтгрузкаБезПереходаПравСобственности_Реализовано, ПередачаНаКомиссию, РеализацияКлиенту
    СмСумма:=0;
    СмСуммаНДС:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧасть(aDoc,0,СмСумма,СтрСправочники,СмСуммаНДС);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ.РеализацияТоваровУслуг>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<ВидОперации>РеализацияКлиенту</ВидОперации><Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС>"+ВыгрСкладДокумента(aDoc,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,"<ДанныеВзаиморасчетов><ВалютаВзаиморасчетов><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаВзаиморасчетов></ДанныеВзаиморасчетов>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий><Товары>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"</Товары></Документ.РеализацияТоваровУслуг>");
    
    If (aDoc.ЮрЛицо.УчитыватьНДС)And(aDoc.УчитыватьВНалоговомУчете) Then
      Ссылка2:=НайтиВнешнийКод(aDoc,"СФ");
      AppendStringToBufferedString(СтрДокументы,"<Документ.СчетФактураВыданный>"+ВыгрШапкаДокументаСФ(aDoc,Ссылка2));
      AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
      AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма>"+ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники));
      AppendStringToBufferedString(СтрДокументы,"<СуммаНДС>"+Round(СмСуммаНДС,2)+"</СуммаНДС><ВидСчетаФактуры>НаРеализацию</ВидСчетаФактуры><Выставлен>true</Выставлен><СпособВыставления>ВЭлектронномВиде</СпособВыставления>");
      AppendStringToBufferedString(СтрДокументы,"<ДокументыОснования><Строка><ДокументОснование>"+ВыгрШапкаДокумента(aDoc,Ссылка,,,"РеализацияТоваровУслугСсылка")+"</ДокументОснование></Строка></ДокументыОснования></Документ.СчетФактураВыданный>");
    EndIf;
  ElseIf Вид="ВозвратОтПокупателя" Then
    //ВидОперации: ВозвратОтКлиента, ВозвратОтКомиссионера, ВозвратОтРозничногоПокупателя
    СмСумма:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧасть(aDoc,0,СмСумма,СтрСправочники);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    Ссылка2:="";
    If _And(not IsEmpty(aDoc.ДокОснование),aDoc.ДокОснование.DBName()="Реализация",BegOfDay(aDoc.ДокОснование.DocDate)>=ДатаНачала,aDoc.ДокОснование.Status()>1) Then
      Ссылка2:="<ДокументРеализации>"+ВыгрШапкаДокумента(aDoc.ДокОснование,Ссылка,,,"РеализацияТоваровУслугСсылка")+"</ДокументРеализации>";
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ.ВозвратТоваровОтПокупателя>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<ВидОперации>ВозвратОтКлиента</ВидОперации><Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС>"+ВыгрСкладДокумента(aDoc,СтрСправочники)+ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,"<ДанныеВзаиморасчетов><ВалютаВзаиморасчетов><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаВзаиморасчетов></ДанныеВзаиморасчетов>");
    AppendStringToBufferedString(СтрДокументы,Ссылка2+"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий><Товары>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"</Товары></Документ.ВозвратТоваровОтПокупателя>");
  ElseIf Вид="ВозвратПоставщику" Then
    //ВидОперации: ВозвратКомитенту, ВозвратПоставщику
    СмСумма:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧасть(aDoc,0,СмСумма,СтрСправочники);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    Ссылка2:="";
    If _And(not IsEmpty(aDoc.ДокОснование),aDoc.ДокОснование.DBName()="ПоступлениеТМЦ",BegOfDay(aDoc.ДокОснование.DocDate)>=ДатаНачала,aDoc.ДокОснование.Status()>1) Then
      Ссылка2:=ВыгрШапкаДокумента(aDoc.ДокОснование,Ссылка,,,"ДокументПоступления");
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ.ВозвратТоваровПоставщику>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<ВидОперации>ВозвратПоставщику</ВидОперации><Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС>"+ВыгрСкладДокумента(aDoc,СтрСправочники)+ВыгрКонтрагентаДокумента(aDoc.Контрагент,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,"<ДанныеВзаиморасчетов><ВалютаВзаиморасчетов><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаВзаиморасчетов></ДанныеВзаиморасчетов>");
    AppendStringToBufferedString(СтрДокументы,Ссылка2+"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий><Товары>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"</Товары>");
    AppendStringToBufferedString(СтрДокументы,"<Налогообложение>ПродажаНеОблагаетсяНДС</Налогообложение></Документ.ВозвратТоваровПоставщику>");
  ElseIf Вид="ПоступлениеТМЦ" Then
    //ВидОперации: ЗакупкаПоИмпорту, ПокупкаУПоставщика, ПриемНаКомиссию
    СмСумма:=0;
    СмСуммаНДС:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧасть(aDoc,0,СмСумма,СтрСправочники,СмСуммаНДС);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    СтрВходящий:="";
    If _And(aDoc.НомерДокВходящий<>"",not IsEmpty(aDoc.ДатаДокВходящий)) Then
      СтрВходящий:="<НомерВходящегоДокумента>"+EncodeXMLString(aDoc.НомерДокВходящий)+"</НомерВходящегоДокумента><ДатаВходящегоДокумента>"+Дата1С(aDoc.ДатаДокВходящий)+"</ДатаВходящегоДокумента>";
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ.ПоступлениеТоваровУслуг>"+ВыгрШапкаДокумента(aDoc,Ссылка,СтрСправочники,1)+"<Товары>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"</Товары><Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидОперации>ПокупкаУПоставщика</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС>"+ВыгрСкладДокумента(aDoc,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,"<ДанныеВзаиморасчетов><ВалютаВзаиморасчетов><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаВзаиморасчетов></ДанныеВзаиморасчетов>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,СтрВходящий+"</Документ.ПоступлениеТоваровУслуг>");
    
    If (aDoc.ЮрЛицо.УчитыватьНДС)And(aDoc.УчитыватьВНалоговомУчете) Then
      If aDoc.НомерДокВходящийСФ<>"" Then
        Ссылка2:=НайтиВнешнийКод(aDoc,"СФ");
        AppendStringToBufferedString(СтрДокументы,"<Документ.СчетФактураПолученный>"+ВыгрШапкаДокументаСФ(aDoc,Ссылка2,СтрСправочники,1)+"<ДатаПолучения>"+Дата1С(aDoc.DocDate)+"</ДатаПолучения>");
        AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
        AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма>"+ВыгрДоговорДокумента(aDoc.Договор,СтрСправочники));
        AppendStringToBufferedString(СтрДокументы,"<СуммаНДС>"+Round(СмСуммаНДС,2)+"</СуммаНДС><ВидСчетаФактуры>НаПоступление</ВидСчетаФактуры><СпособВыставления>ВЭлектронномВиде</СпособВыставления>");
        AppendStringToBufferedString(СтрДокументы,"<ДокументыОснования><Строка><ДокументОснование>"+ВыгрШапкаДокумента(aDoc,Ссылка,СтрСправочники,1,"ПоступлениеТоваровУслугСсылка")+"</ДокументОснование></Строка></ДокументыОснования></Документ.СчетФактураПолученный>");
      EndIf;
    EndIf;
  ElseIf Вид="КомплектацияТовара" Then
    //ВидОперации: Разборка, Сборка
    aTab:=aDoc.LineParts("ВходящаяНоменклатура");
    aTab2:=aDoc.LineParts("ИсходящаяНоменклатура");
    If ((aTab.Size()>1)And(aTab2.Size()>1))or(aTab.Size()=0)or(aTab2.Size()=0) Then
      Raise "Документ "+aDoc+" слишком сложный для выгрузки в данный момент! Обратитесь к разработчику!";
    EndIf;
    If (aTab2.Size()=1)And(aTab.Size()=1) Then
      ТипОперации:="Разборка";
      зН:=aTab["Номенклатура",1];
      зКл:=aTab["Количество",1];
      aTab:=aTab2;
    Else
      ТипОперации:=?(aTab.Size()=1,"Разборка","Сборка");
      зН:=?(aTab.Size()=1,aTab["Номенклатура",1],aTab2["Номенклатура",1]);
      зКл:=?(aTab.Size()=1,aTab["Количество",1],aTab2["Количество",1]);
      aTab:=?(aTab.Size()=1,aTab2,aTab);
    EndIf;
    
    ВыгрузитьСправочник(СтрСправочники,зН.базЕдиница);
    ВыгрузитьСправочник(СтрСправочники,зН);
    
    ТипНоменклатуры:="СобственныеТовары";
    If зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара Then
      ТипНоменклатуры:="ВозвратнаяТара";
    ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь Then
      ТипНоменклатуры:="ИнвентарьИХозяйственныеПринадлежности";
    ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.АрендованноеИмущество Then
      ТипНоменклатуры:="КомиссионныеТовары";
    EndIf;
    
    AppendStringToBufferedString(СтрДокументы,"<Документ.СборкаТоваров>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<ВидОперации>"+ТипОперации+"</ВидОперации><Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>"+ВыгрСкладДокумента(aDoc,СтрСправочники)+
        "<ДанныеНоменклатуры><Номенклатура><Ссылка>"+НайтиВнешнийКод(зН)+"</Ссылка><КодВПрограмме>"+зН.Code+"</КодВПрограмме><Наименование>"+EncodeXMLString(зН.Name)+"</Наименование></Номенклатура></ДанныеНоменклатуры>"+
        "<ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(зН.базЕдиница)+"</Ссылка><ДанныеКлассификатора>"+
        "<Код>"+зН.базЕдиница.ВнешнийКод+"</Код><Наименование>"+EncodeXMLString(зН.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения><Количество>"+зКл+"</Количество><ТипЗапасов>"+ТипНоменклатуры+"</ТипЗапасов>");
    AppendStringToBufferedString(СтрДокументы,"<Товары>");
    
    aNum:=0;
    aTab.Select();
    While aTab.Next() Do
      зН:=aTab.Номенклатура;
      aNum:=aNum+1;
      //ВозвратнаяТара,ГотоваяПродукция,ИнвентарьИХозяйственныеПринадлежности,КомиссионныеТовары,СобственныеТовары,Топливо
      ТипНоменклатуры:="СобственныеТовары";
      If зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара Then
        ТипНоменклатуры:="ВозвратнаяТара";
      ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь Then
        ТипНоменклатуры:="ИнвентарьИХозяйственныеПринадлежности";
      ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.АрендованноеИмущество Then
        ТипНоменклатуры:="КомиссионныеТовары";
      EndIf;
      ВыгрузитьСправочник(СтрСправочники,зН.базЕдиница);
      ВыгрузитьСправочник(СтрСправочники,зН);
      AppendStringToBufferedString(СтрДокументы,"<Строка><НомерСтрокиДокумента>"+aNum+"</НомерСтрокиДокумента>"+
        "<ДанныеНоменклатуры><Номенклатура><Ссылка>"+НайтиВнешнийКод(зН)+"</Ссылка><КодВПрограмме>"+зН.Code+"</КодВПрограмме><Наименование>"+EncodeXMLString(зН.Name)+"</Наименование></Номенклатура></ДанныеНоменклатуры>"+
        "<ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(зН.базЕдиница)+"</Ссылка><ДанныеКлассификатора><Код>"+зН.базЕдиница.ВнешнийКод+"</Код><Наименование>"+EncodeXMLString(зН.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения><Количество>"+aTab.Количество+"</Количество>"+
        "<ДоляСтоимости>1</ДоляСтоимости><ТипЗапасов>"+ТипНоменклатуры+"</ТипЗапасов></Строка>");
    EndDo;
    AppendStringToBufferedString(СтрДокументы,"</Товары></Документ.СборкаТоваров>");
  Else //Списание, оприходование (остальные операции)
    //ВидОперации: ОтгрузкаБезПереходаПравСобственности_Реализовано, ПередачаНаКомиссию, РеализацияКлиенту
    If Вид="ПеремещениеТМЦ" Then
      СтрТип:=?(aDoc.Склад.Магазин=Магазин,"СписаниеЗапасов","ОприходованиеТоваров");
    ElseIf Вид="РегистрацияТМЦ" Then
      СтрТип:=?(aDoc.КодОперации=Enum.коРегистрацияТМЦ.ОприходованиеТМЦ,"ОприходованиеТоваров","СписаниеЗапасов");
    Else
      СтрТип:=?(ФлПлюс,"ОприходованиеТоваров","СписаниеЗапасов");
    EndIf;
    СмСумма:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧасть(aDoc,1,СмСумма,СтрСправочники);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ."+СтрТип+">"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,ВыгрСкладДокумента(aDoc,СтрСправочники)+"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС><Товары>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"</Товары></Документ."+СтрТип+">");
  EndIf;
  
  Exit 1;
EndFunction


Function ВыгрузитьДокументЧекККМ(aDoc,ТабРозн,ByRef СтрДокументы,ByRef СтрСправочники);
  ФлВозврат:=aDoc.DBName()="ВозвратОтПокупателя";
  Ссылка:=НайтиВнешнийКод(aDoc);
  ВыгрузитьСправочник(СтрСправочники,aDoc.Склад.Магазин);
  СмСумма:=0;
  СмСуммаБезнал:=0;
  aNum:=0;
  СтрСтроки:="";
  ТабРозн.Select();
  While ТабРозн.Next() Do
    ВыгрузитьСправочник(СтрСправочники,ТабРозн.Номенклатура.базЕдиница);
    ВыгрузитьСправочник(СтрСправочники,ТабРозн.Номенклатура);
    aNum:=aNum+1;
    Стр:="<Строка><НомерСтрокиДокумента>"+aNum+"</НомерСтрокиДокумента>"+
        "<ДанныеНоменклатуры><Номенклатура><Ссылка>"+НайтиВнешнийКод(ТабРозн.Номенклатура)+"</Ссылка><КодВПрограмме>"+ТабРозн.Номенклатура.Code+"</КодВПрограмме><Наименование>"+EncodeXMLString(ТабРозн.Номенклатура.Name)+"</Наименование></Номенклатура></ДанныеНоменклатуры>"+
        "<ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(ТабРозн.Номенклатура.базЕдиница)+"</Ссылка><ДанныеКлассификатора>"+
        "<Код>"+ТабРозн.Номенклатура.базЕдиница.ВнешнийКод+"</Код><Наименование>"+EncodeXMLString(ТабРозн.Номенклатура.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения><Количество>"+Abs(ТабРозн.Количество)+"</Количество>"+
        "<Сумма>"+Abs(ТабРозн.Сумма)+"</Сумма><Цена>"+Round(ТабРозн.Сумма/ТабРозн.Количество,2)+"</Цена><СтавкаНДС>"+СтавкаНДС(ТабРозн.Номенклатура.СтавкаНДС)+"</СтавкаНДС>"+
        "<СуммаНДС>"+Round(Abs(ТабРозн.Сумма*глКоэффНДС(ТабРозн.Номенклатура.СтавкаНДС)),2)+"</СуммаНДС></Строка>";
    AppendStringToBufferedString(СтрСтроки,Стр);
    СмСумма:=Round(СмСумма+Abs(ТабРозн.Сумма),2);
    СмСуммаБезнал:=Round(СмСуммаБезнал+Abs(ТабРозн.СуммаБезнал),2);
  EndDo;
  AppendStringToBufferedString(СтрДокументы,"<Документ.ЧекККМ><КлючевыеСвойства><Ссылка>"+Ссылка+"</Ссылка><Дата>"+Дата1С(aDoc.DocDate)+"</Дата><НомерКассовойСмены>1</НомерКассовойСмены>"+
    "<КассаККМ><Наименование>Касса</Наименование>"+пЮрЛицоСсылка+"</КассаККМ><НомерВПрограмме>"+УменьшитьНомерДокумента(aDoc.DBName(),aDoc.DocNum)+"</НомерВПрограмме></КлючевыеСвойства>");
  AppendStringToBufferedString(СтрДокументы,"<ДанныеОперацииККМ><Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><Сумма>"+Round(СмСумма,2)+"</Сумма></ДанныеОперацииККМ><Отменен>false</Отменен>");
  AppendStringToBufferedString(СтрДокументы,?(ФлВозврат,"<ТоварыВозвратПродажи>","<ТоварыПродажа>")+СтрСтроки+?(ФлВозврат,"</ТоварыВозвратПродажи>","</ТоварыПродажа>"));
  AppendStringToBufferedString(СтрДокументы,"<ОплатыККМ>");
  СмСуммаНал:=Round(СмСумма-СмСуммаБезнал,2);
  If СмСуммаНал<>0 Then
    AppendStringToBufferedString(СтрДокументы,"<Строка><Сумма>"+СмСуммаНал+"</Сумма><ТипОплаты>Наличные</ТипОплаты></Строка>");
  EndIf;
  If СмСуммаБезнал<>0 Then
    AppendStringToBufferedString(СтрДокументы,"<Строка><Сумма>"+СмСуммаБезнал+"</Сумма><ТипОплаты>Электронно</ТипОплаты></Строка>");
  EndIf;
  AppendStringToBufferedString(СтрДокументы,"</ОплатыККМ>");
  AppendStringToBufferedString(СтрДокументы,"<ПризнакСпособаРасчета>ПередачаСПолнойОплатой</ПризнакСпособаРасчета></Документ.ЧекККМ>");
EndFunction

Function ВыгрузитьДокументРозничныхПродаж(аДеньОт,аДеньДо,СпМагазины,ТабРозн,ByRef СтрДокументы,ByRef СтрСправочники);
  ВыгрузитьСправочник(СтрСправочники,Магазин);
  ТабРозн.Group("Номенклатура","Количество,Сумма,СуммаБезнал");
  If ТабРозн.Size()>0 Then
    Ссылка:=НайтиВнешнийКод(0,"ОРП_"+Магазин.Code+"_"+BegOfDay(аДеньОт));
    ФлСтроки:=0;
    СмСумма:=0;
    СмСуммаБезнал:=0;
    aNum:=0;
    aNum2:=0;
    СтрСтроки:="";
    СтрСтроки2:="";
    ТабРозн.Select();
    While ТабРозн.Next() Do
      If Round(ТабРозн.Количество,6)=0 Then
        Continue;
      EndIf;
      ФлВозврат:=Round(ТабРозн.Количество,6)<0;
      ВыгрузитьСправочник(СтрСправочники,ТабРозн.Номенклатура.базЕдиница);
      ВыгрузитьСправочник(СтрСправочники,ТабРозн.Номенклатура);
      ФлСтроки:=1;
      Стр:="<Строка><НомерСтрокиДокумента>"+?(ТабРозн.Количество>0,aNum+1,aNum2+1)+"</НомерСтрокиДокумента>"+
          "<ДанныеНоменклатуры><Номенклатура><Ссылка>"+НайтиВнешнийКод(ТабРозн.Номенклатура)+"</Ссылка><КодВПрограмме>"+ТабРозн.Номенклатура.Code+"</КодВПрограмме><Наименование>"+EncodeXMLString(ТабРозн.Номенклатура.Name)+"</Наименование></Номенклатура></ДанныеНоменклатуры>"+
          "<ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(ТабРозн.Номенклатура.базЕдиница)+"</Ссылка><ДанныеКлассификатора><Код>"+ТабРозн.Номенклатура.базЕдиница.ВнешнийКод+"</Код><Наименование>"+EncodeXMLString(ТабРозн.Номенклатура.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения><Количество>"+Abs(ТабРозн.Количество)+"</Количество>"+
          "<Сумма>"+Abs(ТабРозн.Сумма)+"</Сумма><Цена>"+Round(ТабРозн.Сумма/ТабРозн.Количество,2)+"</Цена><СтавкаНДС>"+СтавкаНДС(ТабРозн.Номенклатура.СтавкаНДС)+"</СтавкаНДС>"+?(not ФлВозврат,"<ТипЗапасов>СобственныеТовары</ТипЗапасов>")+
          "<ПрослеживаемыйТовар>"+?((ТабРозн.Номенклатура.флПодлежитПрослеживаемости)And(not ФлБезГИСМТТовара),"true","false")+"</ПрослеживаемыйТовар></Строка>";
      If not ФлВозврат Then
        aNum:=aNum+1;
        AppendStringToBufferedString(СтрСтроки,Стр);
      Else
        aNum2:=aNum2+1;
        AppendStringToBufferedString(СтрСтроки2,Стр);
      EndIf;
      СмСумма:=Round(СмСумма+ТабРозн.Сумма,2);
      СмСуммаБезнал:=Round(СмСуммаБезнал+ТабРозн.СуммаБезнал,2);
    EndDo;

    If ФлСтроки Then
      НомерДокумента:=Left(КодБД+ПрефиксОРП+"000000",6)+FormatDate(аДеньОт,"yymmdd");
      AppendStringToBufferedString(СтрДокументы,"<Документ.ОтчетОРозничныхПродажах><КлючевыеСвойства><Ссылка>"+Ссылка+"</Ссылка><Дата>"+Дата1С(аДеньОт)+"</Дата><Номер>"+УменьшитьНомерДокумента("ОтчетОРозничныхПродажах",НомерДокумента)+"</Номер>"+
        пЮрЛицоСсылка+"</КлючевыеСвойства>");
      AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
      AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС>");
      AppendStringToBufferedString(СтрДокументы,"<Склад><Ссылка>"+НайтиВнешнийКод(Магазин)+"</Ссылка><Наименование>"+EncodeXMLString(Магазин.НазваниеМагазина)+"</Наименование><ТипСклада>Розничный</ТипСклада></Склад>");
      If СтрСтроки<>"" Then
        AppendStringToBufferedString(СтрДокументы,"<ТоварыПродажа>"+СтрСтроки+"</ТоварыПродажа>");
      EndIf;
      If СтрСтроки2<>"" Then
        AppendStringToBufferedString(СтрДокументы,"<ТоварыВозвратПродажи>"+СтрСтроки2+"</ТоварыВозвратПродажи>");
      EndIf;
      If СмСуммаБезнал<>0 Then
        AppendStringToBufferedString(СтрДокументы,"<ОплатаПлатежнымиКартами><Строка><СуммаОплаты>"+СмСуммаБезнал+"</СуммаОплаты><ВидКарты>Неопределено</ВидКарты>"+
          "<НомерКарты>1</НомерКарты></Строка></ОплатаПлатежнымиКартами>");
      EndIf;
      AppendStringToBufferedString(СтрДокументы,"</Документ.ОтчетОРозничныхПродажах>");
    Else
      AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><ОтчетОРозничныхПродажахСсылка>"+Ссылка+"</ОтчетОРозничныхПродажахСсылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
    EndIf;
    аДеньОт:=аДеньОт+1;
  EndIf;
    
  While аДеньОт<аДеньДо Do
    аДеньОт:=аДеньОт+1;
    Ссылка:=НайтиВнешнийКод(0,"ОРП_"+Магазин.Code+"_"+BegOfDay(аДеньОт));
    AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><ОтчетОРозничныхПродажахСсылка>"+Ссылка+"</ОтчетОРозничныхПродажахСсылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
  EndDo;
EndFunction


Function ВыполнитьОтправку()
  //Проблемы: При изменении вида документа (ПКО, РКО и т.д.), старый документ остается в ЦБ, появляется новый

  //Все удаленные и необработанные документы выгружаются с помощью <УдалениеОбъекта>
  //<УдалениеОбъекта>
  //  <СсылкаНаОбъект>
  //    <СсылкаНаОбъект>
  //      <ОтчетОРозничныхПродажахСсылка>c0667859-e8a5-4d17-9374-b42fa1d3cbbc</ОтчетОРозничныхПродажахСсылка>
  //    </СсылкаНаОбъект>
  //  </СсылкаНаОбъект>
  //</УдалениеОбъекта>
  
  
  Способ:=Max(1,Способ);
  If (Способ<>1)And(Способ<>2) Then
    Raise "В данный момент поддерживается только способ загрузки из локальной папки и FTP!";
  EndIf;
  If Способ=1 Then
    If ПутьПротокола="" Then
      Raise "Не задана папка для выгрузки!";
    EndIf;
  ElseIf Способ=2 Then
    If ПутьПротокола="" Then
      Raise "Не заданы параметры для выгрузки!";
    EndIf;
  EndIf;
  
  ОбновитьВремяЗапуска("ПоследняяВыгрузка");
  СтрДокументы:="";
  СтрСправочники:="";//"<Справочник.Валюты><КлючевыеСвойства><Ссылка>1</Ссылка><Код>643</Код></КлючевыеСвойства><Наименование>RUB</Наименование></Справочник.Валюты>";
  
  НомерИсходящего:=Number(ПолучитьУстановку("Исходящее сообщение"));
  НомерВходящего:=Number(ПолучитьУстановку("Входящее сообщение"));
  ЮрЛицо:=Магазин.ЮрЛицо;
  
  //Алкогольная,Табак,Обувь,ЛегкаяПромышленность,МолочнаяПродукцияПодконтрольнаяВЕТИС,Шины,Фотоаппараты,Духи,Велосипеды,КреслаКоляски,АльтернативныйТабак,УпакованнаяВода,МолочнаяПродукцияБезВЕТИС
  спГИСМТ1С:=List.Create();
  спГИСМТ1С["Алкогольная"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","15");
  спГИСМТ1С["Табак"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","3");
  спГИСМТ1С["Обувь"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","2");
  спГИСМТ1С["ЛегкаяПромышленность"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","1");
  //спГИСМТ1С["МолочнаяПродукцияПодконтрольнаяВЕТИС"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","8");
  спГИСМТ1С["Шины"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","5");
  спГИСМТ1С["Фотоаппараты"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","6");
  спГИСМТ1С["Духи"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","4");
  спГИСМТ1С["Велосипеды"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","9");
  спГИСМТ1С["КреслаКоляски"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","10");
  спГИСМТ1С["АльтернативныйТабак"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","12");
  спГИСМТ1С["УпакованнаяВода"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","13");
  спГИСМТ1С["МолочнаяПродукцияБезВЕТИС"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","8");
  спГИСМТ1С.Sort();
  спСправочники:=List.Create();
  пКПП:=ЮрЛицо.ИНН;
  пИНН:=TearStr(пКПП,"/");
  пЮрЛицоСсылка:="<Организация><Ссылка>"+НайтиВнешнийКод(ЮрЛицо)+"</Ссылка><Наименование>"+EncodeXMLString(ЮрЛицо.Name)+"</Наименование><НаименованиеСокращенное>"+EncodeXMLString(ЮрЛицо.Name)+"</НаименованиеСокращенное>"+
    "<НаименованиеПолное>"+EncodeXMLString(ЮрЛицо.ПолнНаименование)+"</НаименованиеПолное><ИНН>"+пИНН+"</ИНН>"+?(пКПП<>"","<КПП>"+пКПП+"</КПП>")+
    "<ЮридическоеФизическоеЛицо>"+?(пКПП<>"","ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></Организация>";
  
  спН:=List.Create();
  aTab:=Магазин.LineParts("Номенклатура");
  aTab.CopyTo(спН,,,"Номенклатура");  
    
  ФлИзмененных:=0;//Измененных товаров/элементов внутри транзакции
  ВремяТранзакции:=Date();
  BeginTransaction();
  Try
    ВыгрузитьСправочник(СтрСправочники,ЮрЛицо);
  
    If (НачДата<ДатаНачала)And(КонДата>=ДатаНачала) Then
      If not ВыгрузитьДокументыНачальныхОстатков(СтрДокументы,СтрСправочники) Then
        Exit 0;
      EndIf;
    EndIf;
    
    НачДата:=Max(НачДата,ДатаНачала);
    If КонДата>=НачДата Then
      спВыгруженныеДокументы:=List.Create();
      
      Form.StatusText("Запрос по кассе...");
      If IsEmpty(Касса) Then
        спКасса:=List.Create();
      Else
        спКасса:=List.Create(Касса);
      EndIf;
      ТЗ:="Period From НачДата To КонДата;
      |Документ:=Storage.Касса.@LINK;"+
      ?(ФлВсеДокументы,"зЮЛ:=Storage.Касса.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);","зКс:=Storage.Касса.Касса;Condition(зКс IN спКасса);")+
      "зКлП:=Income(Сумма);
      |зКлР:=Expense(Сумма);
      |Group Документ;";
      З2:=Query.Create();
      aTabK:=З2.Execute(ТЗ,0);
      aTabK.AddColumn("ДокОснование");
      MassLoadObjects(aTabK,"Документ",,,1,"ДокОснование");
      aTabK.Select();
      While aTabK.Next() Do
        If _And(not IsEmpty(aTabK.Документ),глЕстьРеквизитДокумента("ДокОснование",aTabK.Документ.DBName())) Then
          aTabK.ДокОснование:=aTabK.Документ.ДокОснование;
        EndIf;
      EndDo;
      MassLoadObjects(aTabK,"ДокОснование",,,1);
      aTabK.Sort("ДокОснование");
      
      Form.StatusText("Запрос по остаткам ТМЦ (розница)...");
      коРеализация:=Enum.коРеализация.РеализацияРозничная;
      коВозврат:=Enum.коВозвратОтПокупателя.ВозвратРозничный;
      ТЗ:="Period From НачДата To КонДата;"+
      ?(ФлВсеДокументы,"зЮЛ:=Storage.ОстаткиТМЦ.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);","зМг:=Storage.ОстаткиТМЦ.Склад.Магазин;Condition(зМг=Магазин);")+
      "Документ:=Storage.ОстаткиТМЦ.@LINK;
      |Condition((Storage.ОстаткиТМЦ.@LINK..Doc.Реализация.КодОперации=коРеализация)Or(Storage.ОстаткиТМЦ.@LINK..Doc.ВозвратОтПокупателя.КодОперации=коВозврат));
      |зДень:=Storage.ОстаткиТМЦ.@DAY;
      |зН:=Storage.ОстаткиТМЦ.Номенклатура;
      |зКлП:=Income(Количество);
      |зКлР:=Expense(Количество);
      |Condition(зН IN спН);
      |Group зДень,Документ;";
      З:=Query.Create();
      aTab:=З.Execute(ТЗ,0);
      aTab.Sort("зДень+");
      
      If ФлВсеДокументы Then
        СпМагазины:=Ref.рознМагазины.Load(0,"ЮрЛицо",ЮрЛицо);
      Else
        СпМагазины:=List.Create(Магазин);
      EndIf;
      
      //Собираем розничные продажи и возвраты в документы ОтчетОРозничныхПродажах/ЧекиККМ
      аДень:=НачДата;
      ТабРозн:=Tab.Create("Магазин,Номенклатура,Количество,Сумма,СуммаБезнал");
      aTab.Select();
      While aTab.Next() Do
        If (ФлДокументОРП=1)And(аДень<aTab.зДень) Then
          ВыгрузитьДокументРозничныхПродаж(аДень,aTab.зДень,СпМагазины,ТабРозн,СтрДокументы,СтрСправочники);
          ТабРозн:=Tab.Create("Магазин,Номенклатура,Количество,Сумма,СуммаБезнал");
        EndIf;
        аДень:=aTab.зДень;
        Form.StatusText("Розничные продажи: "+аДень);
        
        aDoc:=aTab.Документ.Copy();
        If спВыгруженныеДокументы.Find(aDoc,,1)=0 Then
          СмНал:=0;
          If aTabK.FindAndGoto(aDoc,,"ДокОснование",1) Then
            СмНал:=aDoc.СуммаВзаиморасчетов;
            спВыгруженныеДокументы.Add(aTabK.Документ,,,1);
          EndIf;
          If ФлДокументОРП<>1 Then
            ТабРозн:=Tab.Create("Магазин,Номенклатура,Количество,Сумма,СуммаБезнал");
          EndIf;
          aTab2:=aDoc.LineParts("Номенклатура");
          aTab2.Select();
          While aTab2.Next() Do
            зН:=aTab2.Номенклатура;
            If _And(спН.Size()>0,not спН.Contains(зН)) Then
              Continue;
            EndIf;
            Фл:=?(aDoc.DBName()="Реализация",1,-1);
            СмБНал:=Round(Max(aTab2.Сумма-СмНал,0),2);
            СмНал:=Round(Max(СмНал-aTab2.Сумма,0),2);
            ТабРозн.AddLine("Магазин,Номенклатура,Количество,Сумма,СуммаБезнал",aDoc.Склад.Магазин,зН,Фл*aTab2.Количество,Фл*aTab2.Сумма,Фл*СмБНал);
          EndDo;
          спВыгруженныеДокументы.Add(aTab.Документ,,,1);
          If ФлДокументОРП<>1 Then
            ВыгрузитьДокументЧекККМ(aDoc,ТабРозн,СтрДокументы,СтрСправочники);
          EndIf;
        EndIf;
      EndDo;
      If ФлДокументОРП=1 Then
        ВыгрузитьДокументРозничныхПродаж(аДень,КонДата+1,СпМагазины,ТабРозн,СтрДокументы,СтрСправочники);
      EndIf;
      
      //Все остальное по складу
      Form.StatusText("Запрос по остаткам ТМЦ (остальное)...");
      ТЗ:="Period From НачДата To КонДата;"+
      ?(ФлВсеДокументы,"зЮЛ:=Storage.ОстаткиТМЦ.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);","зМг:=Storage.ОстаткиТМЦ.Склад.Магазин;Condition(зМг=Магазин);")+
      "Документ:=Storage.ОстаткиТМЦ.@LINK;
      |зН:=Storage.ОстаткиТМЦ.Номенклатура;
      |зКлП:=Income(Количество);
      |зКлР:=Expense(Количество);
      |Condition(зН IN спН);
      |Group Документ;";
      З:=Query.Create();
      aTab:=З.Execute(ТЗ,0);
      
      aTab.Select();
      While aTab.Next() Do
        aDoc:=aTab.Документ.Copy();
        If _And(спВыгруженныеДокументы.Find(aDoc,,1)=0,aTab.зКлП-aTab.зКлР<>0) Then
          Form.StatusText("Движения по складу: "+aDoc.DocDate);
          If not ВыгрузитьДокументОстатков(aDoc,СтрДокументы,СтрСправочники,(aTab.зКлП-aTab.зКлР)>0) Then
            Exit 0;
          EndIf;
          спВыгруженныеДокументы.Add(aTab.Документ,,,1);
        EndIf;
      EndDo;
      
      //Кассовые документы
      aTabK.Select();
      While aTabK.Next() Do
        aDoc:=aTabK.Документ.Copy();
        If _And(спВыгруженныеДокументы.Find(aDoc,,1)=0,aTabK.зКлП-aTabK.зКлР<>0) Then
          Form.StatusText("Движения по кассе: "+aDoc.DocDate);
          If not ВыгрузитьДокументКассы(aDoc,СтрДокументы,СтрСправочники,(aTabK.зКлП-aTabK.зКлР)>0) Then
            Exit 0;
          EndIf;
          спВыгруженныеДокументы.Add(aTabK.Документ,,,1);
        EndIf;
      EndDo;
      
      //Банковские документы
      If ФлВсеДокументы Then
        ТЗ:="Period From НачДата To КонДата;
        |Документ:=Storage.Банк.@LINK;
        |зЮЛ:=Storage.Банк.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);
        |зКлП:=Income(Сумма);
        |зКлР:=Expense(Сумма);
        |Group Документ;";
        З:=Query.Create();
        aTab:=З.Execute(ТЗ,0);
        aTab.Select();
        While aTab.Next() Do
          aDoc:=aTab.Документ.Copy();
          If _And(спВыгруженныеДокументы.Find(aDoc,,1)=0,aTab.зКлП-aTab.зКлР<>0) Then
            Form.StatusText("Движения по банку: "+aDoc.DocDate);
            If not ВыгрузитьДокументБанка(aDoc,СтрДокументы,СтрСправочники,(aTab.зКлП-aTab.зКлР)>0) Then
              Exit 0;
            EndIf;
            спВыгруженныеДокументы.Add(aTab.Документ,,,1);
          EndIf;
        EndDo;
      EndIf;
      
      //Документы по подотчету: ПодотчетнаяОперация (ПКО, РКО и пр. уже были выгружены)
      If ФлВсеДокументы Then
        аТип:=Enum.ТипыПодотчетныхОпераций.ПодотчетнаяОперация;
        ТЗ:="Period From НачДата To КонДата;
        |Документ:=Storage.ПодотчетныеОперации.@LINK;
        |зЮЛ:=Storage.ПодотчетныеОперации.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);
        |зТип:=Storage.ПодотчетныеОперации.ТипОперации;Condition(зТип=аТип);
        |зКлП:=Income(Сумма);
        |зКлР:=Expense(Сумма);
        |Group Документ;";
        З:=Query.Create();
        aTab:=З.Execute(ТЗ,0);
        aTab.Select();
        While aTab.Next() Do
          aDoc:=aTab.Документ.Copy();
          If _And(спВыгруженныеДокументы.Find(aDoc,,1)=0,aTab.зКлП-aTab.зКлР<>0) Then
            Form.StatusText("Движения по подотчету: "+aDoc.DocDate);
            If not ВыгрузитьДокументПодотчета(aDoc,СтрДокументы,СтрСправочники,(aTab.зКлП-aTab.зКлР)>0) Then
              Exit 0;
            EndIf;
            спВыгруженныеДокументы.Add(aTab.Документ,,,1);
          EndIf;
        EndDo;
      EndIf;
      
      //Документы по взаиморасчетам (кроме выгруженных) -- фактически корректировки долга: ПоступлениеПрочее (+сч/ф), РеализацияПрочее (+сч/ф), КорректировкаДолга
      If ФлВсеДокументы Then
        Form.StatusText("Запрос по взаиморасчету...");
        ТЗ:="Period From НачДата To КонДата;
        |Документ:=Storage.Взаиморасчеты.@LINK;
        |зТара:=Storage.Взаиморасчеты.Тара;Condition(IsEmpty(зТара));
        |зЮЛ:=Storage.Взаиморасчеты.Договор.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);
        |зКлП:=Income(Сумма);
        |зКлР:=Expense(Сумма);
        |Group Документ;";
        З:=Query.Create();
        aTab:=З.Execute(ТЗ,0);
        aTab.Select();
        While aTab.Next() Do
          aDoc:=aTab.Документ.Copy();
          If _And(спВыгруженныеДокументы.Find(aDoc,,1)=0,aTab.зКлП-aTab.зКлР<>0) Then
            Form.StatusText("Движения по взаиморасчетам: "+aDoc.DocDate);
            If not ВыгрузитьДокументВзаиморасчетов(aDoc,СтрДокументы,СтрСправочники,(aTab.зКлП-aTab.зКлР)>0) Then
              Exit 0;
            EndIf;
            спВыгруженныеДокументы.Add(aTab.Документ,,,1);
          EndIf;
        EndDo;
      EndIf;
      
      //Добавим документы, не попавшие в запрос (в т.ч. удаленные и необработанные документы)
      //Запрос по общему журналу
      //Реализация,ВозвратОтПокупателя,ВозвратПоставщику,ПоступлениеТМЦ,РегистрацияТМЦ,КомплектацияТовара,РегистрацияОС,ПКО,РКО,ВыпискаБанкаПриход,ВыпискаБанкаРасход,ПоступлениеПрочее, РеализацияПрочее, КорректировкаДолга
      ТЗ:="зСтатус:=Jor.ОбщийЖурнал.@Status;Condition(зСтатус<2);зДата:=BegOfDay(Jor.ОбщийЖурнал.DocDate);Condition((зДата>=НачДата)And(зДата<=КонДата));"+
      ?(ФлВсеДокументы,"зЮЛ:=Jor.ОбщийЖурнал.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);","зМг:=Jor.ОбщийЖурнал.Магазин;Condition(зМг=Магазин);")+
      "Документ:=Jor.ОбщийЖурнал.@LINK;
      |Group Документ;";
      З:=Query.Create();
      aTab:=З.Execute(ТЗ,0);
      
      aList:=List.Create();
      aList["РеализацияПрочее"]:="РеализацияТоваровУслуг";
      aList["ПоступлениеПрочее"]:="ПоступлениеТоваровУслуг";
      aList["КорректировкаДолга"]:="КорректировкаДолга";
      aList["ПодотчетнаяОперация"]:="#";
      aList["ВыпискаБанкаПриход"]:="#";
      aList["ВыпискаБанкаРасход"]:="#";
      aList["ПеремещениеДенегБанк"]:="#";
      aList["ПКО"]:="#";
      aList["РКО"]:="#";
      aList["ПеремещениеДенег"]:="#";
      aList["Реализация"]:="РеализацияТоваровУслуг";
      aList["ВозвратОтПокупателя"]:="ВозвратТоваровОтПокупателя";
      aList["ВозвратПоставщику"]:="ВозвратТоваровПоставщику";
      aList["ПоступлениеТМЦ"]:="ПоступлениеТоваровУслуг";
      aList["КомплектацияТовара"]:="СборкаТоваров";
      aList["ПеремещениеТМЦ"]:="#";
      aList["РегистрацияТМЦ"]:="#";
      //aList["РегистрацияОС"]:="#"; //TODO
      aTab.Select();
      While aTab.Next() Do
        aDoc:=aTab.Документ.Copy();
        If спВыгруженныеДокументы.Find(aDoc,,1)=0 Then
          Form.StatusText("Удаленные документы: "+aDoc.DocDate);
          спВыгруженныеДокументы.Add(aDoc.Copy(),,,1);
          Вид:=aDoc.DBName();
          УдВид:=aList[Вид];
          If IsEmpty(УдВид) Then
            Continue;
          EndIf;
          If УдВид="#" Then
            If Вид="ПодотчетнаяОперация" Then
              If aDoc.КодОперации=Enum.коПодотчетнаяОперация.Оплата Then
                УдВид:="КорректировкаДолга";
                aTab:=aDoc.LineParts("Содержание");
                aTab.Select();
                While aTab.Next() Do
                  Ссылка:=НайтиВнешнийКод(aDoc,"ПО_"+aTab.CurLine,0);
                  If Ссылка<>"" Then
                    AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><"+УдВид+"Ссылка>"+Ссылка+"</"+УдВид+"Ссылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
                  EndIf;
                EndDo;
              EndIf;
              УдВид:="АвансовыйОтчет";
            ElseIf Вид="ВыпискаБанкаПриход" Then
              If aDoc.КодОперации=Enum.коВыпискаБанкаПриход.ОплатаПокупателя Then
                УдВид:="ПБДСРасчетыСКонтрагентами";
              ElseIf (aDoc.КодОперации=Enum.коВыпискаБанкаПриход.ВозвратОтПоставщика)or(aDoc.КодОперации=Enum.коВыпискаБанкаПриход.ОплатаУслуг) Then
                УдВид:="ПБДСРасчетыСКонтрагентами";
              Else
                УдВид:="ПБДСПрочееПоступление";
              EndIf;
            ElseIf Вид="ВыпискаБанкаРасход" Then
              If aDoc.КодОперации=Enum.коВыпискаБанкаРасход.ВозвратПокупателю Then
                УдВид:="СБДСРасчетыСКонтрагентами";
              ElseIf (aDoc.КодОперации=Enum.коВыпискаБанкаРасход.ОплатаПоставщику)or(aDoc.КодОперации=Enum.коВыпискаБанкаРасход.ОплатаУслуг) Then
                УдВид:="СБДСРасчетыСКонтрагентами";
              Else
                УдВид:="СБДСПрочееСписание";
              EndIf;
            ElseIf Вид="ПеремещениеДенегБанк" Then
              УдВид:="ПБДСПрочееПоступление";
              Ссылка:=НайтиВнешнийКод(aDoc,"ПОСТ",0);
              If Ссылка<>"" Then
                AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><"+УдВид+"Ссылка>"+Ссылка+"</"+УдВид+"Ссылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
              EndIf;
              УдВид:="СБДСПрочееСписание";
            ElseIf Вид="ПКО" Then
              If aDoc.КодОперации=Enum.коПКО.ОплатаПокупателя Then
                УдВид:=?(aDoc.Контрагент.фоРозничныйПокупатель,"ПКОРозничнаяВыручка","ПКОРасчетыСКонтрагентами");
              ElseIf (aDoc.КодОперации=Enum.коПКО.ВозвратОтПоставщика)or(aDoc.КодОперации=Enum.коПКО.ОплатаУслуг) Then
                УдВид:="ПКОРасчетыСКонтрагентами";
              ElseIf aDoc.КодОперации=Enum.коПКО.ВозвратОтПодотчетника Then
                УдВид:="ПКОРасчетыССотрудниками";
              ElseIf aDoc.КодОперации=Enum.коПКО.Инкассация Then
                УдВид:="ПКОПолучениеНаличныхВБанке";
              Else
                УдВид:="ПКОПрочееПоступление";
              EndIf;
            ElseIf Вид="РКО" Then
              If aDoc.КодОперации=Enum.коРКО.ВозвратПокупателю Then
                УдВид:="РКОРасчетыСКонтрагентами";
              ElseIf (aDoc.КодОперации=Enum.коРКО.ОплатаПоставщику)or(aDoc.КодОперации=Enum.коРКО.ОплатаУслуг) Then
                УдВид:="РКОРасчетыСКонтрагентами";
              ElseIf aDoc.КодОперации=Enum.коРКО.ВыдачаПодотчет Then
                УдВид:="РКОРасчетыССотрудниками";
              ElseIf aDoc.КодОперации=Enum.коРКО.Инкассация Then
                УдВид:="РКОНаБанковскийСчет";
              Else
                УдВид:="РКОПрочаяВыдача";
              EndIf;
            ElseIf Вид="ПеремещениеДенег" Then
              УдВид:="ПКОПрочееПоступление";
              Ссылка:=НайтиВнешнийКод(aDoc,"ПОСТ",0);
              If Ссылка<>"" Then
                AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><"+УдВид+"Ссылка>"+Ссылка+"</"+УдВид+"Ссылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
              EndIf;
              УдВид:="РКОПрочаяВыдача";
            ElseIf Вид="ПеремещениеТМЦ" Then
              УдВид:="СписаниеЗапасов";
              Ссылка:=НайтиВнешнийКод(aDoc,"СПИС",0);
              If Ссылка<>"" Then
                AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><"+УдВид+"Ссылка>"+Ссылка+"</"+УдВид+"Ссылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
              EndIf;
              УдВид:="ОприходованиеТоваров";
            ElseIf Вид="РегистрацияТМЦ" Then
              УдВид:="СписаниеЗапасов";
              Ссылка:=НайтиВнешнийКод(aDoc,"",0);//Либо оприходование, либо списание
              If Ссылка<>"" Then
                AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><"+УдВид+"Ссылка>"+Ссылка+"</"+УдВид+"Ссылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
              EndIf;
              УдВид:="ОприходованиеТоваров";
            EndIf;
          EndIf;
          Ссылка:=НайтиВнешнийКод(aDoc,"",0);
          If Ссылка<>"" Then
            AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><"+УдВид+"Ссылка>"+Ссылка+"</"+УдВид+"Ссылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
          EndIf;
          //Сч.Ф?
          Ссылка:=НайтиВнешнийКод(aDoc,"СФ",0);
          If Ссылка<>"" Then
            AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><СчетФактураВыданныйСсылка>"+Ссылка+"</СчетФактураВыданныйСсылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
            AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><СчетФактураПолученныйСсылка>"+Ссылка+"</СчетФактураПолученныйСсылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
          EndIf;
        EndIf;
      EndDo;
    EndIf;
  Finally
    If IsTransactionActive() Then
      CommitTransaction();
    EndIf;
  EndTry;

  //Сохранение
  Т:=Text.Create(1);
  Т.AddString("<?xml version=""1.0"" encoding=""UTF-8""?>");
  Т.AddString("<Message xmlns:msg=""http://www.1c.ru/SSL/Exchange/Message"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">");
  Т.AddString("<msg:Header><msg:Format>http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.10</msg:Format><msg:CreationDate>"+Дата1С(Date())+"</msg:CreationDate><msg:Confirmation>"+
    "<msg:ExchangePlan>СинхронизацияДанныхЧерезУниверсальныйФормат</msg:ExchangePlan><msg:To>"+КодБД2+"</msg:To><msg:From>"+КодБД+"</msg:From>"+
    "<msg:MessageNo>"+НомерИсходящего+"</msg:MessageNo><msg:ReceivedNo>"+НомерВходящего+"</msg:ReceivedNo></msg:Confirmation>"+
    "<msg:AvailableVersion>1.8</msg:AvailableVersion><msg:AvailableVersion>1.7</msg:AvailableVersion><msg:AvailableVersion>1.6</msg:AvailableVersion>"+
    "<msg:AvailableVersion>1.5</msg:AvailableVersion><msg:AvailableVersion>1.4</msg:AvailableVersion><msg:AvailableVersion>1.3</msg:AvailableVersion>"+
    "<msg:AvailableVersion>1.2</msg:AvailableVersion><msg:AvailableVersion>1.10</msg:AvailableVersion>"+
    //TODO: are <msg:NewFrom>,<msg:AvailableObjectTypes>,<msg:Prefix> necessary?
    "</msg:Header><Body xmlns=""http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.10"">");
  Т.AddString(СтрСправочники);
  Т.AddString(СтрДокументы);
  Т.AddString("</Body></Message>");
  Form.StatusText("Сохранения результата...");
  
  ИмяФайла:="Message_"+КодБД+"_"+КодБД2+".xml";
  If Способ=1 Then
    ПутьПротокола:=AddBackSlash(ПутьПротокола);
    If not Т.Save(ПутьПротокола+ИмяФайла,65001,1) Then
      Raise "Невозможно сохранить файл "+ИмяФайла+" в папку "+ПутьПротокола+"!";
    EndIf;
  ElseIf Способ=2 Then
    //ПутьПротокола:<Пользователь>:<Пароль>@<АдресСервера>@<Путь на сервере>@<Временная локальная папка>@[SOCKSПроксиАдрес:SOCKSПроксиПорт[:Пользователь:Пароль]]
    //FtpPut <login>:<pass>@<ftpsite> <path> <okFlagFile> <localpath\localmask> [DeleteFiles=1] [SOCKSServerAddr:SOCKSServerPort[:UserName:Password]]
    Стр:=ПутьПротокола;
    СтрКомСтрока:=TearStr(Стр,"@")+"@"+TearStr(Стр,"@");
    ПутьНаСервере:=TearStr(Стр,"@");
    ВремПуть:=TearStr(Стр,"@");
    If _And(ВремПуть<>"",ВремПуть[1]="""",ВремПуть[Length(ВремПуть)]="""") Then
      ВремПуть:=Mid(ВремПуть,2,Length(ВремПуть)-2);
    EndIf;
    If ВремПуть="" Then
      ВремПуть:=Addbackslash(GetTempDirectory())+Элемент.Code+"\";
      File.CreateDirectory(ВремПуть);
    EndIf;
    ВремПуть:=AddBackslash(ВремПуть);
    If not Т.Save(ВремПуть+ИмяФайла,0) Then
      Raise "Невозможно сохранить файл "+ИмяФайла+" в папку "+ВремПуть+"!";
    EndIf;
    Флаг:=ВремПуть+"Out.flg";
    File.DeleteFile(Флаг);
    СтрКомСтрока:=СтрКомСтрока+" "+ПутьНаСервере+" """+Флаг+""" """+ВремПуть+"%%%%%%%%"+""" 1";
    If Стр<>"" Then
      СтрКомСтрока:=СтрКомСтрока+" "+TearStr(Стр,"@");
    EndIf;
  
    Имя:="Modules\FreeForms\ВнутренниеОбработки\УниверсальнаяВыгрузкаЗагрузка\FtpPut.exe";
    If not IsExecutingInSeparateThread Then
      SysExec(Имя+" "+Replace(СтрКомСтрока,"%%%%%%%%",ИмяФайла),1);
    Else
      SysExecNoConsole(Имя+" "+Replace(СтрКомСтрока,"%%%%%%%%",ИмяФайла),1);
    EndIf;
    If not File.DoesFileExist(Флаг) Then
      Raise "Невозможно выгрузить файл на FTP!";
    EndIf;
  EndIf;
  
  ОбновитьВремяЗапуска("ПоследняяУдачнаяВыгрузка");
  Exit 1;
EndFunction

Function ЗагрузитьРеквизиты(Т,ByRef iLoop,ЗакрТег)
  Tr:=Tree.Create();
  Result:=Tr;
  Tr2:=Tr;
  While iLoop<Т.Size() Do
    iLoop:=iLoop+1;
    Стр:=Т.GetLine(iLoop);
    If Стр=ЗакрТег Then
      If TypeStr(Result["КлючевыеСвойства"])<>"TREE.BRANCH" Then
        Result["КлючевыеСвойства","Ссылка"]:="";
      EndIf;
      Exit;
    EndIf;
    TearStr(Стр,"<");
    Стр2:=TearStr(Стр,">");
    If Стр="" Then
      If Стр2="" Then
        Continue;//error
      ElseIf Стр2[1]="/" Then
        Tr2:=Tr2.Parent();
        Continue;
      EndIf;
      Стр2:=Trim(TearStr(Стр2," "));
      Tr2:=Tr2.Add(,Стр2);
      Continue;
    EndIf;
    Стр2:=Trim(TearStr(Стр2," "));
    Стр:=TearStr(Стр,"<");
    Tr2.Add(Trim(DecodeXMLString(Стр)),Стр2);
  EndDo;
EndFunction;

//Флаги: бит 1 -- контрагент
//       бит 2 -- счет
//       бит 3 -- инкассация
Function ЗагрузитьПростойДокумент(Tr,ВидДок,зКО,ВнКод="",Флаги=0)
  //СуммаВключаетНДС?
  aDoc:=НайтиИлиСоздатьДокумент(Tr,ВидДок,ВнКод);
  If aDoc=0 Then
    Exit;
  EndIf;
  Ссылка:=Tr["КлючевыеСвойства","Ссылка"];
  If aDoc.КодОперации<>зКО Then
    aDoc.КодОперации:=зКО;
  EndIf;
  If aDoc.Комментарий<>Trim(Tr["Комментарий"]) Then
    aDoc.Комментарий:=Trim(Tr["Комментарий"]);
  EndIf;
  Сумма:=Number(Tr["Сумма"]);
  If aDoc.СуммаВзаиморасчетов<>Сумма Then
    aDoc.СуммаВзаиморасчетов:=Сумма;
  EndIf;
  If глЕстьРеквизитДокумента("ПринятоОт",aDoc.DBName()) Then
    ПринятоОт:=Tr["ПринятоОт"];
    If aDoc.ПринятоОт<>Left(ПринятоОт,80) Then
      aDoc.ПринятоОт:=Left(ПринятоОт,80);
    EndIf;
  EndIf;
  If глЕстьРеквизитДокумента("Выдать",aDoc.DBName()) Then
    ПринятоОт:=Tr["ПринятоОт"];
    If aDoc.Выдать<>Left(ПринятоОт,80) Then
      aDoc.Выдать:=Left(ПринятоОт,80);
    EndIf;
  EndIf;
  If глЕстьРеквизитДокумента("Касса",aDoc.DBName()) Then
    If aDoc.Касса<>Касса Then
      aDoc.Касса:=Касса;
    EndIf;
  EndIf;
  If глЕстьРеквизитДокумента("УчитыватьВНалоговомУчете",aDoc.DBName()) Then
    If aDoc.Status()<0 Then
      aDoc.УчитыватьВНалоговомУчете:=1;
    EndIf;
  EndIf;
  
  If Флаги And 1<>0 Then
    зК:=НайтиЭлементСправочника(0,"кнтКонтрагенты",Tr["Контрагент","Ссылка"]);
    If зК.Status()>=0 Then
      If aDoc.Контрагент<>зК Then
        aDoc.Контрагент:=зК;
      EndIf;
    Else
      MessageVisual("Невозможно найти контрагента документа: "+Ссылка,"!");
      ФлНеУдалятьФайл:=1;
    EndIf;
    зД:=НайтиЭлементСправочника(0,"кнтДоговоры",Tr["Договор","Ссылка"]);
    If зД.Status()>=0 Then
      If aDoc.Договор<>зД Then
        aDoc.Договор:=зД;
      EndIf;
    EndIf;
    If _And(not IsEmpty(aDoc.Договор),aDoc.Договор.Parent()<>aDoc.Контрагент) Then
      зД:=Ref.кнтДоговоры;
      If зД.Find("@Parent,ЮрЛицо",aDoc.Контрагент,ЮрЛицо) Then
        aDoc.Договор:=зД;
      Else
        aDoc.Договор:=0;
      EndIf;
    EndIf;
    If IsEmpty(aDoc.Договор) Then
      MessageVisual("Невозможно найти договор документа: "+Ссылка,"!");
      ФлНеУдалятьФайл:=1;
    Else
      If aDoc.Status()<0 Then
        глУстановитьНовыйНомер(aDoc);
      EndIf;
      If aDoc.ЮрЛицо<>aDoc.Договор.ЮрЛицо Then
        aDoc.ЮрЛицо:=aDoc.Договор.ЮрЛицо;
      EndIf;
    EndIf;
  ElseIf aDoc.ЮрЛицо<>ЮрЛицо Then
    aDoc.ЮрЛицо:=ЮрЛицо;
  EndIf;
  
  If Флаги and 2<>0 Then
    If aDoc.Счет.Selected()=0 Then
      //обмен 1С не предполагает передачу бух. счета
      aDoc.Счет:=глНайтиСчет("44.1");
      aDoc.Субконто1:=глНайтиСубконтоПоИмени(aDoc.Счет.ВидСубконто1,"Загрузка ED");
    EndIf;
  EndIf;
  
  If Флаги and 4<>0 Then
    If aDoc.ПодотчетноеЛицо.Selected()=0 Then
      //TODO: обмен 1С не предполагает передачу подотчетника (инкассатора)
      aDoc.ПодотчетноеЛицо:=Магазин.ДоговорРозничногоПокупателя.Parent();
    EndIf;
  EndIf;

  If aDoc.Selected()<>1 Then  
    aDoc.Save();
    СоздатьСсылкуНаЭлемент(aDoc,Ссылка,1,ВнКод);
    MessageVisual("Изменен: "+aDoc);
    If not глОбработать(aDoc,1,1) Then
      ФлНеУдалятьФайл:=1;
      Raise "Невозможно обработать документ "+aDoc+"!";//Транзакция все равно нарушена, продолжать цикл нельзя
    EndIf;
    ФлИзмененных:=ФлИзмененных+5;
  EndIf;
  aDoc:=0;//Разблокировка
EndFunction


Function НайтиНоменклатуруИПартию(Tr,СсылкаДок,ByRef зН,ByRef зП)
  СсылказН:=Trim(Tr["Номенклатура","Ссылка"]);
  If СсылказН="" Then
    СсылказН:=Trim(Tr["ДанныеНоменклатуры","Номенклатура","Ссылка"]);
  EndIf;
  зН:=НайтиЭлементСправочника(0,"тмцНоменклатура",СсылказН);
  If зН.Status()<0 Then
    MessageVisual("Невозможно найти номенклатуру "+СсылказН+" документа: "+СсылкаДок,"!");
    ФлНеУдалятьФайл:=1;
    Exit 0;
  EndIf;
  
  СсылказП:=Trim(Tr["Характеристика","Ссылка"]);
  зП:=НайтиЭлементСправочника(0,"тмцПартииТМЦ",СсылказП);
  If зП.Status()>=0 Then
    If зП.Parent()<>зН Then
      зП:=0;
    EndIf;
  Else
    зП:=0;
  EndIf;
  
  Exit 1;
EndFunction

Function ЗагрузитьДокументОстатков(Tr,ВидДок,зКО,ВнКод="",ТабЧасть="Товары",ByRef СуммаИтого=0)
  aDoc:=НайтиИлиСоздатьДокумент(Tr,ВидДок,ВнКод);
  If aDoc=0 Then
    Exit;
  EndIf;
  ФлБезНДС:=(Tr["СуммаВключаетНДС"]="false")And(Tr["Налогообложение"]="ОблагаетсяНДС");
  Ссылка:=Tr["КлючевыеСвойства","Ссылка"];
  If aDoc.КодОперации<>зКО Then
    aDoc.КодОперации:=зКО;
  EndIf;
  If aDoc.Комментарий<>Trim(Tr["Комментарий"]) Then
    aDoc.Комментарий:=Trim(Tr["Комментарий"]);
  EndIf;
  If aDoc.DBName()="ВозвратОтПокупателя" Then
    ДокОснование:=НайтиДокумент(Trim(Tr["РеализацияТоваровУслугСсылка","Ссылка"]));
    If not IsEmpty(ДокОснование) Then
      If ДокОснование<>aDoc.ДокОснование Then
        aDoc.ДокОснование:=ДокОснование;
      EndIf;
    EndIf;
  EndIf;
  
  If aDoc.DBName()="ПеремещениеТМЦ" Then
    зСк:=Магазин.Склад;
    зМг:=НайтиЭлементСправочника(0,"рознМагазины",Tr["СкладОтправитель","Ссылка"]);
    If зМг.Status()>=0 Then
      If aDoc.Склад<>зМг.Склад Then
        aDoc.Склад:=зМг.Склад;
      EndIf;
    Else
      MessageVisual("Невозможно найти магазин "+Tr["СкладОтправитель","Ссылка"]+" документа: "+Ссылка,"!");
      ФлНеУдалятьФайл:=1;
      Exit;
    EndIf;
    зМг2:=НайтиЭлементСправочника(0,"рознМагазины",Tr["СкладПолучатель","Ссылка"]);
    If зМг2.Status()>=0 Then
      If aDoc.СкладПолучатель<>зМг2.Склад Then
        aDoc.СкладПолучатель:=зМг2.Склад;
      EndIf;
    Else
      MessageVisual("Невозможно найти магазин "+Tr["СкладПолучатель","Ссылка"]+" документа: "+Ссылка,"!");
      ФлНеУдалятьФайл:=1;
      Exit;
    EndIf;
  Else
    зСк:=Магазин.Склад;
    зМг:=НайтиЭлементСправочника(0,"рознМагазины",Tr["Склад","Ссылка"]);
    If зМг.Status()>=0 Then
      If aDoc.Склад<>зМг.Склад Then
        aDoc.Склад:=зМг.Склад;
      EndIf;
    ElseIf Trim(Tr["Склад","Ссылка"])="" Then
      If IsEmpty(aDoc.Склад) Then
        aDoc.Склад:=Магазин.Склад;
      EndIf;
    Else
      MessageVisual("Невозможно найти магазин "+Tr["Склад","Ссылка"]+" документа: "+Ссылка,"!");
      ФлНеУдалятьФайл:=1;
    EndIf;
    If _And(not IsEmpty(aDoc.Склад),not IsEmpty(aDoc.Склад.Магазин),aDoc.Магазин<>aDoc.Склад.Магазин) Then
      aDoc.Магазин:=aDoc.Склад.Магазин;
    EndIf;
  EndIf;
  
  If _Or(aDoc.КодОперации=Enum.коРеализация.РеализацияРозничная,aDoc.КодОперации=Enum.коВозвратОтПокупателя.ВозвратРозничный) Then
    зД:=aDoc.Магазин.ДоговорРозничногоПокупателя;
    зК:=зД.Parent();
    If aDoc.Договор<>зД Then
      aDoc.Договор:=зД;
    EndIf;
    If aDoc.Контрагент<>зК Then
      aDoc.Контрагент:=зК;
    EndIf;
    If aDoc.Status()<0 Then
      глУстановитьНовыйНомер(aDoc);
    EndIf;
    If aDoc.ЮрЛицо<>aDoc.Договор.ЮрЛицо Then
      aDoc.ЮрЛицо:=aDoc.Договор.ЮрЛицо;
    EndIf;
  ElseIf (aDoc.DBName()<>"РегистрацияТМЦ")And(aDoc.DBName()<>"ПеремещениеТМЦ") Then
    зК:=НайтиЭлементСправочника(0,"кнтКонтрагенты",Tr["Контрагент","Ссылка"]);
    If зК.Status()>=0 Then
      If aDoc.Контрагент<>зК Then
        aDoc.Контрагент:=зК;
      EndIf;
    Else
      MessageVisual("Невозможно найти контрагента документа: "+Ссылка,"!");
      ФлНеУдалятьФайл:=1;
    EndIf;
    зД:=НайтиЭлементСправочника(0,"кнтДоговоры",Tr["Договор","Ссылка"]);
    If зД.Status()>=0 Then
      If aDoc.Договор<>зД Then
        aDoc.Договор:=зД;
      EndIf;
    EndIf;
    If _And(not IsEmpty(aDoc.Договор),aDoc.Договор.Parent()<>aDoc.Контрагент) Then
      зД:=Ref.кнтДоговоры;
      If зД.Find("@Parent,ЮрЛицо",aDoc.Контрагент,ЮрЛицо) Then
        aDoc.Договор:=зД;
      Else
        aDoc.Договор:=0;
      EndIf;
    EndIf;
    If IsEmpty(aDoc.Договор) Then
      MessageVisual("Невозможно найти договор документа: "+Ссылка,"!");
      ФлНеУдалятьФайл:=1;
    Else
      If aDoc.Status()<0 Then
        глУстановитьНовыйНомер(aDoc);
      EndIf;
      If aDoc.ЮрЛицо<>aDoc.Договор.ЮрЛицо Then
        aDoc.ЮрЛицо:=aDoc.Договор.ЮрЛицо;
      EndIf;
    EndIf;
  EndIf;
  
  If глЕстьРеквизитДокумента("НомерДокВходящий",aDoc.DBName()) Then
    Стр:=Trim(Tr["КлючевыеСвойства","НомерВходящегоДокумента"]);
    If (Стр<>"")And(Стр<>aDoc.НомерДокВходящий) Then
      aDoc.НомерДокВходящий:=Стр;
    EndIf;
    Стр:=ДатаSF(Trim(Tr["КлючевыеСвойства","ДатаВходящегоДокумента"]));
    If (not IsEmpty(Стр))And(Стр<>aDoc.ДатаДокВходящий) Then
      aDoc.ДатаДокВходящий:=Стр;
    EndIf;
  EndIf;
  If глЕстьРеквизитДокумента("УчитыватьВНалоговомУчете",aDoc.DBName()) Then
    If aDoc.Status()<0 Then
      aDoc.УчитыватьВНалоговомУчете:=1;
    EndIf;
  EndIf;
  
  If aDoc.DBName()="РегистрацияТМЦ" Then
    If aDoc.Счет.Selected()=0 Then
      aDoc.Счет:=глНайтиСчет("44.1");
      aDoc.Субконто1:=глНайтиСубконтоПоИмени(aDoc.Счет.ВидСубконто1,"Загрузка ED");
    EndIf;
  EndIf;
  
  ТМаркиДокумента:=Tab.Create("Партия,Ящик,Марка");
  iNum:=0;
  If _Or(aDoc.DBName()="ПоступлениеПрочее",aDoc.DBName()="РеализацияПрочее") Then
    СчетД:=глНайтиСчет("44.1");
    Суб1:=глНайтиСубконтоПоИмени(СчетД.ВидСубконто1,"Загрузка из ED");
  
    aTab:=aDoc.LineParts("Содержание");
    Tr2:=Tr["Услуги"];
    If TypeStr(Tr2)="TREE.BRANCH" Then
      For i:=1 To Tr2.Size() Do
        Tr3:=Tr2[i];
        If TypeStr(Tr3)="TREE.BRANCH" Then
          //Количество, Содержание, СтавкаНДС, Сумма, СуммаНДС, Цена, СчетЗатрат
          зКоличество:=Number(Tr3["Количество"]);
          If зКоличество=0 Then
            Continue;
          EndIf;
          зСумма:=Number(Tr3["Сумма"]);
          зСуммаНДС:=Number(Tr3["СуммаНДС"]);
          If ФлБезНДС Then
            зСумма:=Round(зСумма+зСуммаНДС,2);
          EndIf;
          зСтавкаНДС:=?(IsEmpty(Tr3["СтавкаНДС"]),Enum.СтавкиНДС.НДС20,СтавкаНДСИзСтроки(Tr3["СтавкаНДС"]));
          зСодержание:=Tr3["Содержание"];
          iNum:=iNum+1;
          If aTab.Size()<iNum Then
            aTab.NewLine();
          EndIf;
          aTab.CurLine:=iNum;
          If aTab.Содержание<>Left(зСодержание,80) Then
            aTab.Содержание:=Left(зСодержание,80);
          EndIf;
          If aTab.СтавкаНДС<>зСтавкаНДС Then
            aTab.СтавкаНДС:=зСтавкаНДС;
          EndIf;
          If aTab.Количество<>зКоличество Then
            aTab.Количество:=зКоличество;
          EndIf;
          If aTab.Сумма<>зСумма Then
            aTab.Сумма:=зСумма;
          EndIf;
          СуммаИтого:=Round(СуммаИтого+зСумма,2);
          If aTab.Счет.Selected()=0 Then
            aTab.Счет:=СчетД;
            aTab.Субконто1:=Суб1;
          EndIf;
        EndIf;
      EndDo;
    EndIf;
  Else
    aTab:=aDoc.LineParts("Номенклатура");
    СпНомераСтрок:=List.Create();
    Tr2:=Tr[ТабЧасть];
    If TypeStr(Tr2)="TREE.BRANCH" Then
      For i:=1 To Tr2.Size() Do
        Tr3:=Tr2[i];
        If TypeStr(Tr3)="TREE.BRANCH" Then
          //Количество, КоличествоУпаковок, Номенклатура, Себестоимость, СтавкаНДС, Сумма, СуммаНДС, Цена, Характеристика(партия для ИС)
          зКоличество:=Number(Tr3["Количество"]);
          If зКоличество=0 Then
            Continue;
          EndIf;
          зСебестоимость:=Number(Tr3["Себестоимость"]);
          зСумма:=Number(Tr3["Сумма"]);
          зСуммаНДС:=Number(Tr3["СуммаНДС"]);
          If ФлБезНДС Then
            зСумма:=Round(зСумма+зСуммаНДС,2);
          EndIf;
          СпНомераСтрок.Add(Number(Tr3["НомерСтрокиДокумента"]));
          Ссылка2:=Trim(Tr3["Номенклатура","Ссылка"]);
          If Ссылка2="" Then
            Ссылка2:=Trim(Tr3["ДанныеНоменклатуры","Номенклатура","Ссылка"]);
          EndIf;
          зН:=НайтиЭлементСправочника(0,"тмцНоменклатура",Ссылка2);
          If зН.Status()<0 Then
            MessageVisual("Невозможно найти номенклатуру "+Ссылка2+" документа: "+Ссылка,"!");
            ФлНеУдалятьФайл:=1;
            Continue;
          EndIf;
          //зСтавкаНДС:=?(IsEmpty(Tr3["СтавкаНДС"]),зН.СтавкаНДС,СтавкаНДСИзСтроки(Tr3["СтавкаНДС"]));
          зСтавкаНДС:=зН.СтавкаНДС;
          iNum:=iNum+1;
          If aTab.Size()<iNum Then
            aTab.NewLine();
          EndIf;
          aTab.CurLine:=iNum;
          If aTab.Номенклатура<>зН Then
            aTab.Номенклатура:=зН;
          EndIf;
          If _And(not IsEmpty(aTab.Партия),aTab.Партия.Parent<>зН) Then
            aTab.Партия:=0;
          EndIf;
          If aDoc.DBName()<>"ПеремещениеТМЦ" Then
            If aTab.СтавкаНДС<>зСтавкаНДС Then
              aTab.СтавкаНДС:=зСтавкаНДС;
            EndIf;
            If aTab.Сумма<>зСумма Then
              aTab.Сумма:=зСумма;
            EndIf;
          EndIf;
          If aTab.Количество<>зКоличество Then
            aTab.Количество:=зКоличество;
          EndIf;
          СуммаИтого:=Round(СуммаИтого+зСумма,2);
          If aTab.GetColumnIndex("ЦенаБезСкидки")>0 Then
            зЦ0:=Round(зСебестоимость/зКоличество,2);
            If зЦ0<>aTab.ЦенаБезСкидки Then
              aTab.ЦенаБезСкидки:=зЦ0;
            EndIf;
          EndIf;
          If aDoc.Selected()<>1 Then  
            If aDoc.DBName()="ПеремещениеТМЦ" Then
              глПересчитатьСтроку(aDoc,aTab,"Код@Количество2");
            Else
              глПересчитатьСтроку(aDoc,aTab,"Код@Количество2@Цена2@СуммаНДС");
            EndIf;
          EndIf;
          //Партия
          зП:=НайтиЭлементСправочника(0,"тмцПартииТМЦ",Tr["Характеристика","Ссылка"]);
          If зП.Status()>=0 Then
            If _And(aTab.Партия<>зП,aTab.Партия.Parent=зН) Then
              aTab.Партия:=зП;
            EndIf;
          EndIf;
        EndIf;
      EndDo;
    EndIf;
    
    Tr2:=Tr["АкцизныеМарки"];
    If TypeStr(Tr2)="TREE.BRANCH" Then
      For i:=1 To Tr2.Size() Do
        Tr3:=Tr2[i];
        If TypeStr(Tr3)="TREE.BRANCH" Then
          //НомерСтрокиДокумента, Характеристика, НомерАкцизнойМарки
          СтрМарка:=Tr3["НомерАкцизнойМарки"];
          НомерСтроки:=СпНомераСтрок.Find(Number(Tr3["НомерСтрокиДокумента"]));
          If НомерСтроки=0 Then
            Continue;
          EndIf;
          aTab.CurLine:=НомерСтроки;
          If aTab.Партия.Selected()=0 Then
            aEl:=Ref.тмцПартииТМЦ;
            aEl.UseOrder("Code-");
            If not aEl.Find("~(@Status=0)And(@Parent=aTab.Номенклатура)") Then
              If aTab.Номенклатура.флПартионныйУчет Then
                MessageVisual("Номенклатура "+aTab.Номенклатура+" не имеет ни одной рабочей партии!","!");
                ФлНеУдалятьФайл:=1;
              EndIf;
              Continue;
            EndIf;
            aTab.Партия:=aEl;
          EndIf;
          ТМаркиДокумента.AddLine("Партия,Ящик,Марка",aTab.Партия,"",СтрМарка);
        EndIf;
      EndDo;
    EndIf;
  EndIf;
  If aTab.Size()>iNum Then
    aTab.Size(iNum);
  EndIf;
  If aDoc.DBName()<>"ПеремещениеТМЦ" Then
    Сумма:=aTab.Sum("Сумма");
    If aDoc.СуммаВзаиморасчетов<>Сумма Then
      aDoc.СуммаВзаиморасчетов:=Сумма;
    EndIf;
  EndIf;

  If aDoc.Selected()<>1 Then  
    aDoc.Save();
    СоздатьСсылкуНаЭлемент(aDoc,Ссылка,1,ВнКод);
    If ТМаркиДокумента.Size()>0 Then
      If not глМаркиЗарегистрироватьДокумент(aDoc,ТМаркиДокумента,2) Then
        MessageVisual("Ошибка сохранения марок документа "+aDoc+"!","!");
        ФлНеУдалятьФайл:=1;
      EndIf;
    EndIf;
    MessageVisual("Изменен: "+aDoc);
    If not глОбработать(aDoc,1,1) Then
      ФлНеУдалятьФайл:=1;
      Raise "Невозможно обработать документ "+aDoc+"!";//Транзакция все равно нарушена, продолжать цикл нельзя
    EndIf;
    ФлИзмененных:=ФлИзмененных+5;
  EndIf;
  Exit aDoc;
EndFunction


Function ЗагрузитьДокументОстатковВзаиморасчетов(Tr,ВидДолга,Множитель)
  Ссылка:=Tr["КлючевыеСвойства","Ссылка"];
  aDoc:=НайтиИлиСоздатьДокумент(Tr,"УниверсальныйДокумент");
  If aDoc=0 Then
    Exit 0;
  EndIf;
  If aDoc.КодОперации<>Enum.коУниверсальныйДокумент.УниверсальныйДокумент Then
    aDoc.КодОперации:=Enum.коУниверсальныйДокумент.УниверсальныйДокумент;
  EndIf;
  If aDoc.ЮрЛицо<>ЮрЛицо Then
    aDoc.ЮрЛицо:=ЮрЛицо;
  EndIf;
  aTab:=aDoc.LineParts("Содержание");
  iNum:=0;
  Tr2:=Tr["Расчеты"];
  If TypeStr(Tr2)="TREE.BRANCH" Then
    For i:=1 To Tr2.Size() Do
      Tr3:=Tr2[i];
      If TypeStr(Tr3)="TREE.BRANCH" Then
        Сумма:=Number(Tr3["Сумма"])*Множитель;
        If Сумма=0 Then
          Continue;
        EndIf;
        
        зК:=НайтиЭлементСправочника(0,"кнтКонтрагенты",Tr3["Контрагент","Ссылка"]);
        If зК.Status()<0 Then
          MessageVisual("Невозможно найти контрагента документа: "+Ссылка,"!");
          ФлНеУдалятьФайл:=1;
          Exit 0;
        EndIf;
        зД:=НайтиЭлементСправочника(0,"кнтДоговоры",Tr3["Договор","Ссылка"]);
        If _Or(зД.Status()<0,зД.Parent()<>зК) Then
          If not зД.Find("@Parent,ЮрЛицо",зК,ЮрЛицо) Then
            MessageVisual("Невозможно найти договор "+Tr3["Договор","Ссылка"]+" контрагента: "+зК,"!");
            ФлНеУдалятьФайл:=1;
            Exit 0;
          EndIf;
        EndIf;
        iNum:=iNum+1;
        If aTab.Size()<iNum Then
          aTab.NewLine();
        EndIf;
        aTab.CurLine:=iNum;
        If aTab.ИмяНакопителя<>"Взаиморасчеты" Then
          aTab.ИмяНакопителя:="Взаиморасчеты";
        EndIf;
        If aTab.ЗнакДвижения<>"+" Then
          aTab.ЗнакДвижения:="+";
        EndIf;
        Стр:="Сумма@"+глЗашифроватьЗначениеУД(Сумма);
        If aTab.Активы<>Стр Then
          aTab.Активы:=Стр;
        EndIf;
        Стр:="Договор@"+глЗашифроватьЗначениеУД(зД)+"###ВидДолга@"+глЗашифроватьЗначениеУД(ВидДолга);
        If aTab.Аккумуляторы<>Стр Then
          aTab.Аккумуляторы:=Стр;
        EndIf;
      EndIf;
    EndDo;
  EndIf;
  If aTab.Size()>iNum Then
    aTab.Size(iNum);
  EndIf;
  If aDoc.Selected()<>1 Then  
    aDoc.Save();
    СоздатьСсылкуНаЭлемент(aDoc,Ссылка,1);
    MessageVisual("Изменен: "+aDoc);
    If not глОбработать(aDoc,1,1) Then
      ФлНеУдалятьФайл:=1;
      Raise "Невозможно обработать документ "+aDoc+"!";//Транзакция все равно нарушена, продолжать цикл нельзя
    EndIf;
    ФлИзмененных:=ФлИзмененных+5;
  EndIf;
  aDoc:=0;//Разблокировка
  Exit 1;
EndFunction

Function ЗагрузитьРозничныйПКОРКО(ДокОснование,Tr,Сумма)
  Ссылка:=Tr["КлючевыеСвойства","Ссылка"];
  If Сумма=0 Then
    УдалитьДокумент(Ссылка,"ПКО");
    УдалитьДокумент(Ссылка,"РКО");
    Exit;
  EndIf;
  ВидДок:=?(Сумма>0,"ПКО","РКО");
  УдалитьДокумент(Ссылка,?(Сумма>0,"РКО","ПКО"));
  Сумма:=Abs(Сумма);
  aDoc:=НайтиИлиСоздатьДокумент(Tr,ВидДок,ВидДок);
  If aDoc=0 Then
    Exit;
  EndIf;
  зКО:=?(ВидДок="ПКО",Enum.коПКО.ОплатаПокупателя,Enum.коРКО.ОплатаПоставщику);
  If aDoc.КодОперации<>зКО Then
    aDoc.КодОперации:=зКО;
  EndIf;
  If aDoc.Касса<>Касса Then
    aDoc.Касса:=Касса;
  EndIf;
  If aDoc.СуммаВзаиморасчетов<>Сумма Then
    aDoc.СуммаВзаиморасчетов:=Сумма;
  EndIf;
  If aDoc.Status()<0 Then
    aDoc.УчитыватьВНалоговомУчете:=1;
  EndIf;
  If _And(IsDBObject(ДокОснование),aDoc.ДокОснование<>ДокОснование) Then
    aDoc.ДокОснование:=ДокОснование;
  EndIf;
  
  зК:=Магазин.ДоговорРозничногоПокупателя.Parent();
  If aDoc.Контрагент<>зК Then
    aDoc.Контрагент:=зК;
  EndIf;
  зД:=Магазин.ДоговорРозничногоПокупателя;
  If aDoc.Договор<>зД Then
    aDoc.Договор:=зД;
  EndIf;
  If aDoc.Status()<0 Then
    глУстановитьНовыйНомер(aDoc);
  EndIf;
  If aDoc.ЮрЛицо<>aDoc.Договор.ЮрЛицо Then
    aDoc.ЮрЛицо:=aDoc.Договор.ЮрЛицо;
  EndIf;
  
  If aDoc.Selected()<>1 Then  
    aDoc.Save();
    СоздатьСсылкуНаЭлемент(aDoc,Ссылка,1,ВидДок);
    MessageVisual("Изменен: "+aDoc);
    If not глОбработать(aDoc,1,1) Then
      ФлНеУдалятьФайл:=1;
      Raise "Невозможно обработать документ "+aDoc+"!";//Транзакция все равно нарушена, продолжать цикл нельзя
    EndIf;
    ФлИзмененных:=ФлИзмененных+5;
  EndIf;
  aDoc:=0;//Разблокировка
EndFunction


//Вызывает исключение, если проблема
Function УстановитьЦену(зН,ТипЦен,Цена,Дата)
  Ц:=Ref.цЦены;
  If Ц.Find("@Parent,ТипЦен",зН,ТипЦен) Then
    If Ц.Status()=1 Then
      Ц.Mark(0,,зН);
    Else
      зН.SetTrigger(1);
    EndIf;
  Else
    Ц.New();
    Ц.Parent(зН);
    Ц.ТипЦен:=ТипЦен;
    Ц.Save(,,зН);
    ФлИзмененных:=ФлИзмененных+1;
  EndIf;
  If Ц.GetValue("Цена",Дата)<>Цена Then
    Ц.SetValue("Цена",Цена,Дата);
{    
    If УстановкаЦен=1 Then
      кЦ:=Ref.цПечатьЦенников;
      If кЦ.Find("@Parent,Магазин",зН,Магазин)=0 Then
        //Создаем
        кЦ.New();
        кЦ.Parent(зН);
        кЦ.Магазин:=Магазин;
        кЦ.ДатаПечати:=Дата;
        кЦ.ОбщаяСкидка:=0;
        кЦ.Save();
      ElseIf _Or(кЦ.ОбщаяСкидка<>0,isEmpty(кЦ.ДатаПечати),кЦ.ДатаПечати<Дата) Then
        кЦ.ДатаПечати:=Дата;
        кЦ.ОбщаяСкидка:=0;
        кЦ.Save();
      EndIf;
    EndIf;
}      
    ФлИзмененных:=ФлИзмененных+1;
  EndIf;
EndFunction

Function ПодсчитатьСумму(Tr,ТабЧасть,ByRef Cумма)
  Tr2:=Tr[ТабЧасть];
  If TypeStr(Tr2)="TREE.BRANCH" Then
    For i:=1 To Tr2.Size() Do
      Tr3:=Tr2[i];
      If TypeStr(Tr3)="TREE.BRANCH" Then
        Cумма:=Round(Cумма+Number(Tr3["СуммаОплаты"]),2);
        If Number(Tr3["Cумма"])=0 Then
          Cумма:=Round(Cумма+Number(Tr3["Cумма"]),2);
        EndIf;
      EndIf;
    EndDo;
  EndIf;
EndFunction


Function ВыполнитьЗагрузку()
  ОбновитьВремяЗапуска("ПоследняяЗагрузка");
  Способ:=Max(1,Способ);
  If (Способ<>1)And(Способ<>2) Then
    Raise "В данный момент поддерживается только способ загрузки из локальной папки и FTP!";
  EndIf;
  
  ИмяФайла:="Message_"+КодБД2+"_"+КодБД+".xml";
  ЮрЛицо:=Магазин.ЮрЛицо;
  If Способ=1 Then
    If ПутьПротокола="" Then
      Raise "Не задана папка для загрузки!";
    EndIf;
    ПутьПротокола:=AddBackSlash(ПутьПротокола);
  ElseIf Способ=2 Then
    If ПутьПротокола="" Then
      Raise "Не заданы параметры для загрузки!";
    EndIf;
    //ПутьПротокола:<Пользователь>:<Пароль>@<АдресСервера>@<Путь на сервере>@<Временная локальная папка>@[SOCKSПроксиАдрес:SOCKSПроксиПорт[:Пользователь:Пароль]]
    //FtpGet <login>:<pass>@<ftpsite> <path> <okFlagFile> <localpath> <remotemask> [DeleteFiles=1] [SOCKSServerAddr:SOCKSServerPort[:UserName:Password]]
    Стр:=ПутьПротокола;
    СтрКомСтрока:=TearStr(Стр,"@")+"@"+TearStr(Стр,"@");
    ПутьНаСервере:=TearStr(Стр,"@");
    ВремПуть:=TearStr(Стр,"@");
    If _And(ВремПуть<>"",ВремПуть[1]="""",ВремПуть[Length(ВремПуть)]="""") Then
      ВремПуть:=Mid(ВремПуть,2,Length(ВремПуть)-2);
    EndIf;
    If ВремПуть="" Then
      ВремПуть:=Addbackslash(GetTempDirectory())+Элемент.Code+"\";
      File.CreateDirectory(ВремПуть);
    EndIf;
    ВремПуть:=AddBackslash(ВремПуть);
    ПутьЗагрузки:=AddBackSlash(ВремПуть);
    Флаг:=ВремПуть+"In.flg";
    File.DeleteFile(Флаг);
    СтрКомСтрока:=СтрКомСтрока+" "+ПутьНаСервере+" """+Флаг+""" """+ВремПуть+""" """+ИмяФайла+""" 1";
    If Стр<>"" Then
      СтрКомСтрока:=СтрКомСтрока+" "+TearStr(Стр,"@");
    EndIf;
  
    Имя:="Modules\FreeForms\ВнутренниеОбработки\УниверсальнаяВыгрузкаЗагрузка\FtpGet.exe";
    If not IsExecutingInSeparateThread Then
      SysExec(Имя+" "+СтрКомСтрока,1);
    Else
      SysExecNoConsole(Имя+" "+СтрКомСтрока,1);
    EndIf;
    If not File.DoesFileExist(Флаг) Then
      Message("Невозможно загрузить файлы с FTP!","!");
    EndIf;
  EndIf;

  If not File.DoesFileExist(ПутьПротокола+ИмяФайла) Then
    ОбновитьВремяЗапуска("ПоследняяУдачнаяЗагрузка");
    Exit 1;
  EndIf;
  MessageVisual("Загрузка файла "+ИмяФайла+"...");
  Т:=Text.Create(1);
  Т.Load(ПутьПротокола+ИмяФайла,0);
  ReformatXML(Т,0b1100011);
  //Формат
  НомерИсходящего:=Number(ПолучитьУстановку("Исходящее сообщение"));
  НомерВходящего:=Number(ПолучитьУстановку("Входящее сообщение"));
  ПрефиксИБ:=Trim(DBVar.ПрефиксИБ);

  зЕд:=Ref.тмцЕдиницыИзмерения;
  If not зЕд.Find("Name","шт") Then
    зЕд.New();
    зЕд.Name:="шт";
    зЕд.ПолнНаименование:="Штука";
    зЕд.ВнешнийКод:="796";
    зЕд.Save();
  EndIf;
  
  //Алкогольная,Табак,Обувь,ЛегкаяПромышленность,МолочнаяПродукцияПодконтрольнаяВЕТИС,Шины,Фотоаппараты,Духи,Велосипеды,КреслаКоляски,АльтернативныйТабак,УпакованнаяВода,МолочнаяПродукцияБезВЕТИС
  спГИСМТ1С:=List.Create();
  спГИСМТ1С["Алкогольная"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","15");
  спГИСМТ1С["Табак"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","3");
  спГИСМТ1С["Обувь"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","2");
  спГИСМТ1С["ЛегкаяПромышленность"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","1");
  спГИСМТ1С["МолочнаяПродукцияПодконтрольнаяВЕТИС"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","8");
  спГИСМТ1С["Шины"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","5");
  спГИСМТ1С["Фотоаппараты"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","6");
  спГИСМТ1С["Духи"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","4");
  спГИСМТ1С["Велосипеды"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","9");
  спГИСМТ1С["КреслаКоляски"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","10");
  спГИСМТ1С["АльтернативныйТабак"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","12");
  спГИСМТ1С["УпакованнаяВода"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","13");
  спГИСМТ1С["МолочнаяПродукцияБезВЕТИС"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","8");
  спГИСМТ1С.Sort();
  
  
  ФлИзмененных:=0;//Измененных товаров/элементов внутри транзакции
  ФлНеУдалятьФайл:=0;
  ВремяТранзакции:=Date();
  BeginTransaction();
  Try
    тШтрихКоды:=0;
    НомерИсходящего2:=0;
    НомерВходящего2:=0;
    ФлЗаг:=0;
    ФлФормат:=0;
    iLoop:=0;
    While iLoop<Т.Size() Do
      iLoop:=iLoop+1;
      Form.StatusText("Загрузка: "+iLoop+" из "+Т.Size());
      Стр:=Т.GetLine(iLoop);
      If _And(ФлЗаг,Pos("<Format>",Стр)=1) Then
        If Pos("/EnterpriseData/",Стр)=0 Then
          Raise "Файл имеет неверный или неподдерживаемый формат!";
        EndIf;
        ФлФормат:=ФлФормат or 1;
      ElseIf _And(ФлЗаг,Pos("<ExchangePlan>",Стр)=1) Then
        If Pos("СинхронизацияДанныхЧерезУниверсальныйФормат",Стр)=0 Then
          Raise "Файл имеет верный формат, по план обмена не соответствует обмену через универсальный формат!";
        EndIf;
        ФлФормат:=ФлФормат or 2;
      ElseIf _And(ФлЗаг,Pos("<To>",Стр)=1) Then
        TearStr(Стр,"<To>");
        Стр:=TearStr(Стр,"</To>");
        If Стр<>КодБД Then
          Raise "Документ не предназначен для базы "+КодБД+", (база-приемник из содержимого: "+Стр+")!";
        EndIf;
      ElseIf _And(ФлЗаг,Pos("<From>",Стр)=1) Then
        TearStr(Стр,"<From>");
        Стр:=TearStr(Стр,"</From>");
        If Стр<>КодБД2 Then
          Raise "Документ не выгружен из базы "+КодБД2+", (база-источник из содержимого: "+Стр+")!";
        EndIf;
      ElseIf _And(ФлЗаг,Pos("<MessageNo>",Стр)=1) Then
        TearStr(Стр,"<MessageNo>");
        НомерИсходящего2:=Number(TearStr(Стр,"</MessageNo>"));
        ФлФормат:=ФлФормат or 4;
      ElseIf _And(ФлЗаг,Pos("<ReceivedNo>",Стр)=1) Then
        TearStr(Стр,"<ReceivedNo>");
        НомерВходящего2:=Number(TearStr(Стр,"</ReceivedNo>"));
        ФлФормат:=ФлФормат or 8;
      ElseIf Стр="<Header>" Then
        ФлЗаг:=1;
      ElseIf Pos("<Body",Стр)=1 Then
        Break;
      EndIf;
    EndDo;
    If ФлФормат<>15 Then
      Raise "Файл имеет неверный или неподдерживаемый формат ("+ФлФормат+")!";
    EndIf;
    If НомерИсходящего2<НомерВходящего Then
      Raise "Номер исходящей квитации сервера ("+НомерИсходящего2+") меньше номера локальной принятой квитации ("+НомерВходящего+")!";
    EndIf;
    If НомерВходящего2>НомерИсходящего Then
      Raise "Номер входящей квитации сервера ("+НомерИсходящего2+") больше номера локальной отправленной квитации ("+НомерВходящего+")!";
    EndIf;
    While iLoop<Т.Size() Do
      If _Or(ФлИзмененных>50,GetPeriodMs(ВремяТранзакции)>5000) Then
        ВремяТранзакции:=Date();
        CommitTransaction();
        ФлИзмененных:=0;
        BeginTransaction();
      EndIf;
      
      iLoop:=iLoop+1;
      Form.StatusText("Загрузка: "+(iLoop\100*100)+" из "+Т.Size());
      Стр:=Т.GetLine(iLoop);
      If Стр="<Справочник.Организации>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Справочник.Организации>");
        Tr2:=Tr["КлючевыеСвойства"];
        Эл:=НайтиЭлементСправочника(0,"общЮридическиеЛица",Tr2["Ссылка"],"*",Tr2["ИНН"]);
        If Эл.Status()<0 Then
          Эл.Name:=Tr2["Наименование"];
          Эл.ПолнНаименование:=Tr2["НаименованиеПолное"];
          Эл.ИНН:=Tr2["ИНН"]+?(not IsEmpty(Tr2["КПП"]),"/"+Tr2["КПП"]);
          Эл.ОКПО:=Tr2["ОКПО"];
          Эл.ОГРН:=Tr2["ОГРН"];
          Tr3:=Tr["КонтактнаяИнформация"];
          ФактАдрес:="";
          ЮрАдрес:="";
          If TypeStr(Tr3)="TREE.BRANCH" Then
            For i:=1 To Tr3.Size() Do
              Tr4:=Tr3[i];
              If TypeStr(Tr4)="TREE.BRANCH" Then
                Стр:=Tr4["ЗначенияПолей"];
                //<КонтактнаяИнформация xmlns="http://www.v8.1c.ru/ssl/contactinfo" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" Представление="..., .., .., дом 13, помещение 2/5">
                //  <Состав xsi:type="Адрес" Страна="РОССИЯ"><Состав xsi:type="АдресРФ"><СубъектРФ>...</СубъектРФ><НаселПункт>...</НаселПункт><Улица>...</Улица><ДопАдрЭл>
                //  <Номер Тип="1010" Значение="13"/></ДопАдрЭл><ДопАдрЭл><Номер Тип="2020" Значение="2/5"/></ДопАдрЭл></Состав></Состав></КонтактнаяИнформация>
                TearStr(Стр,"Представление=""");
                Стр:=DecodeXMLString(TearStr(Стр,""""));
                If Tr4["ВидКонтактнойИнформации"]="ЮридическийАдрес" Then
                  ЮрАдрес:=Стр;
                ElseIf Tr4["ВидКонтактнойИнформации"]="ФактическийАдрес" Then
                  ФактАдрес:=Стр;
                EndIf;
              EndIf;
            EndDo;
          EndIf;
          Эл.ФактАдрес:=ФактАдрес;
          Эл.ЮрАдрес:=ЮрАдрес;
          
          Эл2:=Ref.кнтКонтрагенты;
          Эл2.New();
          //Ищем папку
          Эл3:=Ref.кнтКонтрагенты;
          If Эл3.Find("~(@IsFolder=1)And(ТипАктива=4)") Then
            Эл2.Folder(Эл3);
          ElseIf Эл3.Find("ТипАктива,@Status",3,0) Then
            Эл2.Folder(Эл3.Folder());
          EndIf;
          Эл2.ВидКонтрагента:=Enum.ВидыКонтрагентов.СвоеЮрЛицо;
          Эл2.Name:=Эл.Name;
          Эл2.ПолнНаименование:=Эл.ПолнНаименование;
          Эл2.ИНН:=Эл.ИНН;
          Эл2.ОКПО:=Эл.ОКПО;
          Эл2.ОГРН:=Эл.ОГРН;
          Эл2.ТипАктива:=3;
          Эл2.ФактАдрес:=ФактАдрес;
          Эл2.ЮрАдрес:=ЮрАдрес;
          Эл2.Save();
          
          Эл.Контрагент:=Эл2;
          Эл.Save();
          
          Эл2.СвоеЮрЛицо:=Эл;
          Эл2.Save();
          ФлИзмененных:=ФлИзмененных+3;
          СоздатьСсылкуНаЭлемент(Эл,Tr2["Ссылка"]);
        EndIf;
      ElseIf Стр="<Справочник.НоменклатураГруппа>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Справочник.НоменклатураГруппа>")["КлючевыеСвойства"];
        Эл:=НайтиЭлементСправочника(1,"тмцНоменклатура",Tr["Ссылка"]);
        
        Tr2:=Tr["Группа"];
        If TypeStr(Tr2)="TREE.BRANCH" Then
          Эл2:=НайтиЭлементСправочника(1,"тмцНоменклатура",Tr2["Ссылка"]);
          If Эл2.Status()<0 Then
            Эл2.Name:=Tr2["Наименование"];
            Эл2.Save();
            ФлИзмененных:=ФлИзмененных+1;
            СоздатьСсылкуНаЭлемент(Эл2,Tr2["Ссылка"]);
          EndIf;
          If Эл.Folder()<>Эл2 Then
            Эл.Folder(Эл2);
          EndIf;
        EndIf;
        If Эл.Name<>Left(Tr["Наименование"],100) Then
          Эл.Name:=Tr["Наименование"];
        EndIf;
        If Эл.Selected()<>1 Then
          Эл.Save();
          ФлИзмененных:=ФлИзмененных+1;
          СоздатьСсылкуНаЭлемент(Эл,Tr["Ссылка"],1);
        EndIf;
      ElseIf Стр="<Справочник.Номенклатура>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Справочник.Номенклатура>");
        Tr2:=Tr["КлючевыеСвойства"];
        Ссылка:=Tr2["Ссылка"];
        Эл:=НайтиЭлементСправочника(0,"тмцНоменклатура",Ссылка);
        
        Tr3:=Tr2["Группа"];
        If TypeStr(Tr3)="TREE.BRANCH" Then
          Эл2:=НайтиЭлементСправочника(1,"тмцНоменклатура",Tr3["Ссылка"]);
          If Эл2.Status()<0 Then
            Эл2.Name:=Tr3["Наименование"];
            Эл2.Save();
            ФлИзмененных:=ФлИзмененных+1;
            СоздатьСсылкуНаЭлемент(Эл2,Tr3["Ссылка"]);
          EndIf;
          If Эл.Folder()<>Эл2 Then
            Эл.Folder(Эл2);
          EndIf;
        EndIf;
        If Эл.Name<>Left(Tr2["Наименование"],100) Then
          Эл.Name:=Tr2["Наименование"];
        EndIf;
          
        //Работа, Товар, Услуга
        Эл2:=Enum.ВидыНоменклатуры.Товар;
        If (Tr["ТипНоменклатуры"]="Работа")Or(Tr["ТипНоменклатуры"]="Услуга") Then
          Эл2:=Enum.ВидыНоменклатуры.Услуга;
        ElseIf Tr["ТипНоменклатуры"]="МногооборотнаяТара" Then
          Эл2:=Enum.ВидыНоменклатуры.Тара;
        EndIf;
        If Эл.ВидНоменклатуры<>Эл2 Then
          Эл.ВидНоменклатуры:=Эл2;
        EndIf;
        
        //ЕдиницаИзмерения
        Tr2:=Tr["ЕдиницаИзмерения"];
        If TypeStr(Tr2)="TREE.BRANCH" Then
          Эл2:=НайтиЭлементСправочника(0,"тмцЕдиницыИзмерения",Tr2["Ссылка"],"ВнешнийКод",Tr2["Код"]);
          If Эл2.Status()<0 Then
            Tr3:=Tr2["ДанныеКлассификатора"];
            If TypeStr(Tr3)="TREE.BRANCH" Then
              Эл2.Name:=Tr3["Наименование"];
              Эл2.ВнешнийКод:=Tr3["Код"];
              Эл2.Save();
              ФлИзмененных:=ФлИзмененных+1;
              СоздатьСсылкуНаЭлемент(Эл2,Tr2["Ссылка"]);
            EndIf;
          EndIf;
        Else
          Эл2:=зЕд;
        EndIf;
        If Эл.базЕдиница<>Эл2 Then
          Эл.базЕдиница:=Эл2;
          Эл.оснЕдиница:=Эл2;
          Эл.оснКоэффициент:=1;
        EndIf;
          
        Эл2:=СтавкаНДСИзСтроки(Tr["СтавкаНДС"]);
        If Эл.СтавкаНДС<>Эл2 Then
          Эл.СтавкаНДС:=Эл2;
        EndIf;
        
        If Эл.флВесовойТовар<>Tr["Весовой"]="true" Then
          Эл.флВесовойТовар:=Tr["Весовой"]="true";
        EndIf;
        
        флПартионныйУчет:=Tr["Маркируемый"]="true";
        ФлМарки:=флПартионныйУчет;
        If not IsEmpty(Tr["ВидПродукцииИС"]) Then
          Стр:=Tr["ВидПродукцииИС"];
          If Стр<>"Алкогольная" Then
            флПартионныйУчет:=1;
            If (Эл.флПодлежитПрослеживаемости=0)Or(Эл.ГИСМТТоварнаяГруппа<>спГИСМТ1С[Стр]) Then
              ФлМарки:=1;
              Эл.флПодлежитПрослеживаемости:=1;
              Эл.ГИСМТТоварнаяГруппа:=спГИСМТ1С[Стр];
            EndIf;
          EndIf;
        EndIf;
          
        //ДанныеАлкогольнойПродукции
        Tr2:=Tr["ДанныеАлкогольнойПродукции"];
        ФлАлко:=TypeStr(Tr2)="TREE.BRANCH";
        If (ФлАлко)or(флПартионныйУчет) Then
          ФлМарки:=(Tr["Маркируемый"]="true")or(ФлМарки);
          флАлкогольнаяПродукция:=?(ФлАлко,Tr2["АлкогольнаяПродукция"]="true",0);
          If Эл.флАлкогольнаяПродукция<>флАлкогольнаяПродукция Then
            Эл.флАлкогольнаяПродукция:=флАлкогольнаяПродукция;
          EndIf;
          Tr3:=0;
          If флАлкогольнаяПродукция Then
            флПартионныйУчет:=1;
            Tr3:=Tr2["ВидАлкогольнойПродукции"];
            ФлМарки:=(?(TypeStr(Tr3)="TREE.BRANCH",Tr3["Маркируемый"]="true",0))or(ФлМарки);
            Стр:=?(TypeStr(Tr3)="TREE.BRANCH",Tr3["Код"],"");
            If Эл.ЕГАИСКодАП<>Стр Then
              Эл.ЕГАИСКодАП:=Стр;
            EndIf;
            Чл:=Number(Tr2["ОбъемДАЛ"])*10;
            If Эл.ОбъемЛитров<>Чл Then
              Эл.ОбъемЛитров:=Чл;
            EndIf;
            Чл:=Number(Tr2["Крепость"]);
            If Эл.сертКрепость<>Чл Then
              Эл.сертКрепость:=Чл;
            EndIf;
          EndIf;
          зП:=Ref.тмцПартииТМЦ;
          If Эл.Selected()<0 Then
            Эл.флПартионныйУчет:=1;
            Эл.Save();
            ФлИзмененных:=ФлИзмененных+1;
            СоздатьСсылкуНаЭлемент(Эл,Ссылка,1);
          EndIf;
          зП.UseOrder("Code-");
          зП.Find("~(@Parent=Эл)And(@Status<>1)And(флМарочныйУчет=ФлМарки)And(ЕГАИСКодАП=Эл.ЕГАИСКодАП)");
          If IsEmpty(зП) Then
            зП.New();
            зП.Parent(Эл);
            зП.НомерУдостоверения:="Загрузка ED";
            зП.ЕГАИСКодАП:=Эл.ЕГАИСКодАП;
            зП.КСР:=BegOfDay(Date());
            зП.флМарочныйУчет:=ФлМарки;
            зП.флИмпортнаяПродукция:=?(TypeStr(Tr2)="TREE.BRANCH",Tr2["ИмпортнаяАлкогольнаяПродукция"]="true",0);
            зП.Name:=""+зП.КСР+" ("+зП.НомерУдостоверения+")";
            ФлИзмененных:=ФлИзмененных+1;
            зП.Save();
          EndIf;
        EndIf;
        
        If Эл.флПартионныйУчет<>флПартионныйУчет Then
          Эл.флПартионныйУчет:=флПартионныйУчет;
        EndIf;
          
        If Эл.Selected()<>1 Then  
          Эл.Save();
          ФлИзмененных:=ФлИзмененных+1;
          СоздатьСсылкуНаЭлемент(Эл,Ссылка,1);
        EndIf;
      ElseIf (Стр="<Справочник.КонтрагентыГруппа>")or(Стр="<Справочник.ФизическиеЛицаГруппа>") Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,Replace(Стр,"<","</"))["КлючевыеСвойства"];
        Эл:=НайтиЭлементСправочника(1,"кнтКонтрагенты",Tr["Ссылка"]);
        
        Tr2:=Tr["Группа"];
        If TypeStr(Tr2)="TREE.BRANCH" Then
          Эл2:=НайтиЭлементСправочника(1,"кнтКонтрагенты",Tr2["Ссылка"]);
          If Эл2.Status()<0 Then
            Эл2.Name:=Tr2["Наименование"];
            Эл2.Save();
            ФлИзмененных:=ФлИзмененных+1;
            СоздатьСсылкуНаЭлемент(Эл2,Tr2["Ссылка"]);
          EndIf;
          If Эл.Folder()<>Эл2 Then
            Эл.Folder(Эл2);
          EndIf;
        EndIf;
        If Эл.Name<>Left(Tr["Наименование"],100) Then
          Эл.Name:=Tr["Наименование"];
        EndIf;
        If Эл.Selected()<>1 Then
          Эл.Save();
          ФлИзмененных:=ФлИзмененных+1;
          СоздатьСсылкуНаЭлемент(Эл,Tr["Ссылка"],1);
        EndIf;
      ElseIf (Стр="<Справочник.Контрагенты>")Or(Стр="<Справочник.ФизическиеЛица>") Then
        ФлФизЛицо:=Стр="<Справочник.ФизическиеЛица>";
        
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,Replace(Стр,"<","</"));
        Ссылка:=Tr["КлючевыеСвойства"]["Ссылка"];
        Эл:=НайтиЭлементСправочника(0,"кнтКонтрагенты",Ссылка);
        
        Tr2:=Tr["Группа"];
        If TypeStr(Tr2)="TREE.BRANCH" Then
          Эл2:=НайтиЭлементСправочника(1,"кнтКонтрагенты",Tr2["Ссылка"]);
          If Эл2.Status()<0 Then
            Эл2.Name:=Tr2["Наименование"];
            Эл2.Save();
            ФлИзмененных:=ФлИзмененных+1;
            СоздатьСсылкуНаЭлемент(Эл2,Tr2["Ссылка"]);
          EndIf;
          If Эл.Folder()<>Эл2 Then
            Эл.Folder(Эл2);
          EndIf;
        EndIf;
        Tr2:=Tr["КлючевыеСвойства"];
        If ФлФизЛицо Then
          If Эл.Name<>Left(Tr2["ФИО"],100) Then
            Эл.Name:=Tr2["ФИО"];
          EndIf;
          If Эл.ПолнНаименование<>Tr2["ФИО"] Then
            Эл.ПолнНаименование:=Tr2["ФИО"];
          EndIf;
        Else
          If Эл.Name<>Left(Tr2["Наименование"],100) Then
            Эл.Name:=Tr2["Наименование"];
          EndIf;
          If Эл.ПолнНаименование<>Tr2["НаименованиеПолное"] Then
            Эл.ПолнНаименование:=Tr2["НаименованиеПолное"];
          EndIf;
          If Эл.ДокументУдЛичность<>Tr["ДокументУдЛичность"] Then
            Эл.ДокументУдЛичность:=Tr["ДокументУдЛичность"];
          EndIf;
          If Эл.Комментарий<>Tr["ДополнительнаяИнформация"] Then
            Эл.Комментарий:=Tr["ДополнительнаяИнформация"];
          EndIf;
          If Эл.ОКПО<>Tr["ОКПО"] Then
            Эл.ОКПО:=Tr["ОКПО"];
          EndIf;
        EndIf;
        СтрИНН:=Tr2["ИНН"]+?(not IsEmpty(Tr2["КНН"]),"/"+Tr2["КНН"]);
        If Эл.ИНН<>СтрИНН Then
          Эл.ИНН:=СтрИНН;
        EndIf;
        Эл2:=?(Length(Tr2["ИНН"])=12,Enum.ВидыКонтрагентов.ФизЛицо,Enum.ВидыКонтрагентов.ЮрЛицо);
        If Эл.ВидКонтрагента<>Эл2 Then
          Эл.ВидКонтрагента:=Эл2;
        EndIf;
        If Эл.СотрудникКомпании<>ФлФизЛицо Then
          Эл.СотрудникКомпании:=ФлФизЛицо;
        EndIf;
        If Эл.Selected()<0 Then  
          Эл.ТипАктива:=?(ФлФизЛицо,0,1);
        EndIf;
        Tr2:=Tr["ОсновнойБанковскийСчет"];
        If TypeStr(Tr2)="TREE.BRANCH" Then
          Эл2:=НайтиЭлементСправочника(0,"кнтБанковскиеСчета",Tr2["Ссылка"]);
          If Эл2.Status()>=0 Then
            If Эл.ОсновнойСчет<>Эл2 Then
              Эл.ОсновнойСчет:=Эл2;
            EndIf;
          EndIf;
        EndIf;
          
        If Эл.Selected()<>1 Then  
          Эл.Save();
          ФлИзмененных:=ФлИзмененных+1;
          СоздатьСсылкуНаЭлемент(Эл,Ссылка,1);
        EndIf;
      ElseIf Стр="<Справочник.БанковскиеСчета>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Справочник.БанковскиеСчета>");
        Tr2:=Tr["КлючевыеСвойства"];
        Ссылка:=Tr2["Ссылка"];
        Tr3:=Tr2["Владелец"];
        Эл2:=0;
        If TypeStr(Tr3)="TREE.BRANCH" Then
          If TypeStr(Tr3["ФизическиеЛица"])="TREE.BRANCH" Then
            Эл2:=НайтиЭлементСправочника(0,"кнтКонтрагенты",Tr3["ФизическиеЛица"]["Ссылка"]);
          ElseIf TypeStr(Tr3["Контрагенты"])="TREE.BRANCH" Then
            Эл2:=НайтиЭлементСправочника(0,"кнтКонтрагенты",Tr3["Контрагенты"]["Ссылка"]);
          ElseIf TypeStr(Tr3["Организации"])="TREE.BRANCH" Then
            Эл2:=НайтиЭлементСправочника(0,"общЮридическиеЛица",Tr3["Организации"]["Ссылка"]);
          EndIf;
        EndIf;
        If _Or(IsEmpty(Эл2),Эл2.Selected()<0) Then
          Continue;
        EndIf;
        Эл:=НайтиЭлементСправочника(0,"кнтБанковскиеСчета",Ссылка);
        Tr3:=Tr2["Банк"];
        If TypeStr(Tr3)="TREE.BRANCH" Then
          Эл2:=НайтиЭлементСправочника(0,"общБанки",Tr3["Ссылка"]);
          If Эл2.Status()>=0 Then
            If Эл.Банк<>Эл2 Then
              Эл.Банк:=Эл2;
            EndIf;
          EndIf;
        EndIf;
        Tr3:=Tr2["БанкДляРасчетов"];
        If TypeStr(Tr3)="TREE.BRANCH" Then
          Эл2:=НайтиЭлементСправочника(0,"общБанки",Tr3["Ссылка"]);
          If Эл2.Status()>=0 Then
            If Эл.БанкДляРасчетов<>Эл2 Then
              Эл.БанкДляРасчетов:=Эл2;
            EndIf;
          EndIf;
        EndIf;
        If Эл.НомерСчета<>Left(Tr2["НомерСчета"],20) Then
          Эл.НомерСчета:=Tr2["НомерСчета"];
        EndIf;
        If Эл.Name<>Left(Tr["Наименование"],50) Then
          Эл.Name:=Tr["Наименование"];
        EndIf;
        If Эл.ДатаЗакрытияСчета<>ДатаSF(Tr["ДатаЗакрытия"]) Then
          Эл.ДатаЗакрытияСчета:=ДатаSF(Tr["ДатаЗакрытия"]);
        EndIf;
        If Эл.ДатаОткрытияСчета<>ДатаSF(Tr["ДатаОткрытия"]) Then
          Эл.ДатаОткрытияСчета:=ДатаSF(Tr["ДатаОткрытия"]);
        EndIf;
          
        If Эл.Selected()<>1 Then  
          Эл.Save();
          ФлИзмененных:=ФлИзмененных+1;
          СоздатьСсылкуНаЭлемент(Эл,Ссылка,1);
        EndIf;
      ElseIf Стр="<Справочник.ШтрихкодыНоменклатуры>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Справочник.ШтрихкодыНоменклатуры>");
        Стр:=Trim(Tr["Штрихкод"]);
        If Стр<>"" Then
          If тШтрихКоды=0 Then
            //Запрос по штрихкодам, не загружаем элементы номенклатуры (небольшое ускорение)
            ТЗ:="(зШтрихКод:=Ref.тмцШтрихкоды.Name;
            |зКф:=Ref.тмцШтрихкоды.Коэффициент;
            |Condition((зКф=1)Or(зКф=0));
            |зИндекс:=Ref.тмцШтрихкоды.@Parent..Ref.тмцНоменклатура.Code || зШтрихКод;
            |зЭл:=Ref.тмцШтрихкоды;
            |Group зИндекс,зЭл;) Postprocessing (SkipVariables зКф;)";
            З:=Query.Create();
            тШтрихКоды:=З.Execute(ТЗ,0);
            MassLoadObjects(тШтрихКоды);
            тШтрихКоды.Sort("зИндекс");
          EndIf;
        
          Tr3:=Tr["Записи"];
          If TypeStr(Tr3)="TREE.BRANCH" Then
            For i:=1 To Tr3.Size() Do
              Ссылка:=Trim(Tr3[i,"ДанныеНоменклатуры","Номенклатура","Номенклатура","Ссылка"]);
              If Ссылка<>"" Then
                Эл2:=НайтиЭлементСправочника(0,"тмцНоменклатура",Ссылка);
                If Эл2.Status()>=0 Then
                  СтрИндекс:=Эл2.Code+Стр;
                  If тШтрихКоды.FindAndGoto(СтрИндекс,,"зИндекс",1) Then
                    If тШтрихКоды.зЭл.Status()=1 Then
                      //Отменить удаление
                      тШтрихКоды.зЭл.Mark(0);
                    EndIf;
                  Else
                    зШК:=Ref.тмцШтрихкоды;
                    зШК.New();
                    зШК.Parent(Эл2);
                    зШК.Name:=Стр;
                    зШК.Коэффициент:=1;
                    ФлИзмененных:=ФлИзмененных+1;
                    зШК.Save(,,Эл2);
                    тШтрихКоды.AddLineSorted("зИндекс","зИндекс,зЭл",СтрИндекс,зШК);
                  EndIf;
                EndIf;
              EndIf;
            EndDo;
          EndIf;
        EndIf;
      ElseIf Стр="<Справочник.ЕдиницыИзмерения>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Справочник.ЕдиницыИзмерения>")["КлючевыеСвойства"];
        Ссылка:=Tr["Ссылка"];
        Код:=Trim(Tr["ДанныеКлассификатора","Код"]);
        Имя:=Trim(Tr["ДанныеКлассификатора","Наименование"]);
        Эл:=НайтиЭлементСправочника(0,"тмцЕдиницыИзмерения",Ссылка);
        If Эл.Name<>Left(Имя,50) Then
          Эл.Name:=Имя;
        EndIf;
        If Эл.ВнешнийКод<>Left(Код,7) Then
          Эл.ВнешнийКод:=Код;
        EndIf;
        If Эл.ПолнНаименование="" Then
          Эл.ПолнНаименование:=Имя;
        EndIf;
        If Эл.Selected()<>1 Then  
          Эл.Save();
          СоздатьСсылкуНаЭлемент(Эл,Ссылка,1);
          ФлИзмененных:=ФлИзмененных+1;
        EndIf;
      ElseIf Стр="<Справочник.Упаковки>" Then
        //Пропускаем
      ElseIf Стр="<Справочник.ХарактеристикиНоменклатуры>" Then
        //Для сигарет МРЦ
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Справочник.ХарактеристикиНоменклатуры>");
        Tr2:=Tr["КлючевыеСвойства"];
        Цена:=Tr["Наименование"];
        Цена:=?(Pos("руб",Цена)>0,Number(Replace(TearStr(Цена," "),",",".")),0);
        If Цена>0 Then
          Ссылка:=Tr2["Ссылка"];
          Эл2:=НайтиЭлементСправочника(0,"тмцПартииТМЦ",Ссылка);
          Эл3:=НайтиЭлементСправочника(0,"тмцНоменклатура",Tr2["ВладелецХарактеристики","Номенклатура","Ссылка"]);
          If Эл3.Status()>=0 Then
            If Эл2.Status()<0 Then
              Эл2.Parent(Эл3);
              Эл2.НомерУдостоверения:="Загрузка ED";
              Эл2.КСР:=BegOfDay(Date());
              Эл2.флМарочныйУчет:=1;
              Эл2.Name:=""+Эл2.КСР+" ("+Эл2.НомерУдостоверения+")";
              Эл2.ЦенаМаксимальнаяПродажная:=Цена;
              ФлИзмененных:=ФлИзмененных+1;
              Эл2.Save();
            Else
              If Эл2.ЦенаМаксимальнаяПродажная<>Цена Then
                Эл2.ЦенаМаксимальнаяПродажная:=Цена;
              EndIf;
            EndIf;
            If Эл2.Selected()<>1 Then  
              Эл2.Save();
              СоздатьСсылкуНаЭлемент(Эл2,Ссылка,1);
              ФлИзмененных:=ФлИзмененных+1;
            EndIf;
          EndIf;
        EndIf;
      ElseIf Стр="<Справочник.Валюты>" Then //Временная загрузка
        //Пропускаем
      ElseIf Стр="<Справочник.Банки>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Справочник.Банки>");
        Tr2:=Tr["КлючевыеСвойства"];
        Ссылка:=Tr2["Ссылка"];
        Эл:=НайтиЭлементСправочника(0,"общБанки",Ссылка);
        If Эл.БИК<>Left(Tr2["БИК"],9) Then
          Эл.БИК:=Tr2["БИК"];
        EndIf;
        If Эл.КоррСчет<>Left(Tr2["КоррСчет"],20) Then
          Эл.КоррСчет:=Tr2["КоррСчет"];
        EndIf;
        If Эл.Name<>Left(Tr2["Наименование"],100) Then
          Эл.Name:=Tr2["Наименование"];
        EndIf;
        If Эл.Адрес<>Tr["Адрес"] Then
          Эл.Адрес:=Tr["Адрес"];
        EndIf;
        If Эл.Город<>Left(Tr["Местонахождение"],50) Then
          Эл.Город:=Tr["Местонахождение"];
        EndIf;
        If Эл.Город<>Left(Tr["Телефоны"],50) Then
          Эл.Город:=Tr["Телефоны"];
        EndIf;
        If Эл.Selected()<>1 Then  
          Эл.Save();
          СоздатьСсылкуНаЭлемент(Эл,Ссылка,1);
          ФлИзмененных:=ФлИзмененных+1;
        EndIf;
      ElseIf Стр="<Справочник.Склады>" Then //"Магазины"
        If ФлВсеДокументы Then
          Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Справочник.Склады>");
          Tr2:=Tr["КлючевыеСвойства"];
          Ссылка:=Tr2["Ссылка"];
          Эл:=НайтиЭлементСправочника(0,"рознМагазины",Ссылка);
          If Эл.Selected()<0 Then
            If НайтиВнешнийКод(Магазин,,0)="" Then
              СоздатьСсылкуНаЭлемент(Магазин,Ссылка);
              Эл:=Магазин.Copy();
            EndIf;
          EndIf;
          If Эл.Name<>Left(Tr2["Наименование"],100) Then
            Эл.Name:=Tr2["Наименование"];
          EndIf;
          If Эл.ФактАдрес<>Tr["АдресСтрокой"] Then
            Эл.ФактАдрес:=Tr["АдресСтрокой"];
          EndIf;
          If Эл.НазваниеМагазина="" Then
            Эл.НазваниеМагазина:=Эл.Name;
          EndIf;
          If IsEmpty(Эл.ДоговорРозничногоПокупателя) Then
            Эл.ДоговорРозничногоПокупателя:=Магазин.ДоговорРозничногоПокупателя;
          EndIf;
          If IsEmpty(Эл.ЮрЛицо) Then
            Эл.ЮрЛицо:=ЮрЛицо;
          EndIf;
          If Эл.Selected()<>1 Then  
            Эл.Save();
            СоздатьСсылкуНаЭлемент(Эл,Ссылка,1);
            ФлИзмененных:=ФлИзмененных+1;
          EndIf;
          If IsEmpty(Эл.ТипЦенПоступления) Then
            зТЦП:=Ref.цТипыЦен;
            зТЦП.New();
            зТЦП.Name:="Цены закупок "+Эл.Name;
            зТЦП.РазрешитьИзменятьВМагазине:=Эл;
            ФлИзмененных:=ФлИзмененных+1;
            зТЦП.Save();
            Эл.ТипЦенПоступления:=зТЦП;
          EndIf;
          If IsEmpty(Эл.ТипЦенРеализации) Then
            зТЦР:=Ref.цТипыЦен;
            зТЦР.New();
            зТЦР.Name:="Цены продаж "+Эл.Name;
            зТЦР.РазрешитьИзменятьВМагазине:=Эл;
            зТЦР.ТипЦенРасчетныхЦен:=Эл.ТипЦенПоступления;
            зТЦР.Процент:=20;
            ФлИзмененных:=ФлИзмененных+1;
            зТЦР.Save();
            Эл.ТипЦенРеализации:=зТЦР;
          EndIf;
          If IsEmpty(Эл.Склад) Then
            зСк:=Ref.общСклады;
            зСк.New();
            зСк.Name:="Склад "+Эл.Name;
            зСк.ИспользоватьВАктиве:=1;
            зСк.Магазин:=Эл;
            зСк.рзТипЦенПоступления:=Эл.ТипЦенПоступления;
            зСк.рзТипЦенРеализации:=Эл.ТипЦенРеализации;
            зСк.флРозничныйСклад:=1;
            зСк.флУчаствуетВЕГАИС:=1;
            ФлИзмененных:=ФлИзмененных+1;
            зСк.Save();
            Эл.Склад:=зСк;
          EndIf;
          If Эл.Selected()<>1 Then  
            Эл.Save();
            СоздатьСсылкуНаЭлемент(Эл,Ссылка,1);
            ФлИзмененных:=ФлИзмененных+1;
          EndIf;
        EndIf;
      //Документы
      ElseIf Стр="<Документ.ВозвратТоваровОтПокупателя>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ВозвратТоваровОтПокупателя>");
        //ВозвратОтКлиента,ВозвратОтКомиссионера,ВозвратОтРозничногоПокупателя
        Стр:=Tr["ВидОперации"];
        зКО:=Enum.коВозвратОтПокупателя.ВозвратТМЦ;
        If Стр="ВозвратОтРозничногоПокупателя" Then
          зКО:=Enum.коВозвратОтПокупателя.ВозвратРозничный;
        EndIf;
        ЗагрузитьДокументОстатков(Tr,"ВозвратОтПокупателя",зКО);
      ElseIf Стр="<Документ.ВозвратТоваровПоставщику>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ВозвратТоваровПоставщику>");
        //ВозвратКомитенту,ВозвратПоставщику
        Стр:=Tr["ВидОперации"];
        зКО:=Enum.коВозвратПоставщику.ВозвратТМЦ;
        If Стр="ВозвратКомитенту" Then
          зКО:=Enum.коВозвратПоставщику.ВозвратКомиссия;
        EndIf;        
        ЗагрузитьДокументОстатков(Tr,"ВозвратПоставщику",зКО);
      ElseIf Стр="<Документ.ПоступлениеТоваровУслуг>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ПоступлениеТоваровУслуг>");
        Tr2:=Tr["Товары"];
        If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
          //ЗакупкаПоИмпорту,ПокупкаУПоставщика,ПриемНаКомиссию
          Стр:=Tr["ВидОперации"];
          зКО:=Enum.коПоступлениеТМЦ.ПоступлениеТМЦ;
          If Стр="ПриемНаКомиссию" Then
            зКО:=Enum.коПоступлениеТМЦ.ПоступлениеКомиссия;
          EndIf;
          ЗагрузитьДокументОстатков(Tr,"ПоступлениеТМЦ",зКО);
        EndIf;
        Tr2:=Tr["Услуги"];
        If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
          ЗагрузитьДокументОстатков(Tr,"ПоступлениеПрочее",Enum.коПоступлениеПрочее.ПоступлениеПрочее,"ПП");
        EndIf;
      ElseIf Стр="<Документ.РеализацияТоваровУслуг>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.РеализацияТоваровУслуг>");
        Tr2:=Tr["Товары"];
        If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
          ЗагрузитьДокументОстатков(Tr,"Реализация",Enum.коРеализация.Реализация);
        EndIf;
        Tr2:=Tr["Услуги"];
        If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
          ЗагрузитьДокументОстатков(Tr,"РеализацияПрочее",Enum.коРеализацияПрочее.РеализацияПрочее,"РП");
        EndIf;
      ElseIf Стр="<Документ.ОприходованиеТоваров>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ОприходованиеТоваров>");
        ЗагрузитьДокументОстатков(Tr,"РегистрацияТМЦ",Enum.коРегистрацияТМЦ.ОприходованиеТМЦ);
      ElseIf Стр="<Документ.СписаниеТоваров>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.СписаниеТоваров>");
        ЗагрузитьДокументОстатков(Tr,"РегистрацияТМЦ",Enum.коРегистрацияТМЦ.СписаниеТМЦ);
      ElseIf Стр="<Документ.СписаниеЗапасов>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.СписаниеЗапасов>");
        ЗагрузитьДокументОстатков(Tr,"РегистрацияТМЦ",Enum.коРегистрацияТМЦ.СписаниеТМЦ);
      ElseIf Стр="<Документ.ОтчетОРозничныхПродажах>" Then
        //Загружать только новые, как реализацию розница
        //Документ выгружается из 1С:Розница некорректно, иногда нет строк возвратов, нет возможности найти узнать сумму наличной оплаты (поле не выгружается)
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ОтчетОРозничныхПродажах>");
        Tr2:=Tr["КлючевыеСвойства"];
        Ссылка:=Tr2["Ссылка"];
        If Trim(Tr["Склад","Ссылка"])="" Then
          Магазин2:=Магазин;
        Else
          Магазин2:=НайтиЭлементСправочника(0,"рознМагазины",Tr["Склад","Ссылка"]);
        EndIf;
        If Магазин2.Status()<0 Then
          MessageVisual("Невозможно найти магазин "+Tr["Склад","Ссылка"]+" документа: "+Ссылка,"!");
          ФлНеУдалятьФайл:=1;
          Continue;
        EndIf;
        ВнКод:="";
        НайтиДокумент(Ссылка,ВнКод);
        //ВнКод<>"" -- документ был ранее выгружен, как совокупность документов "реализация"
        If Pos("ОРП_",ВнКод)=1 Then
          MessageVisual("Невозможно загрузить сборный документ ОтчетОРозничныхПродажах "+Ссылка+", из текущей базы разрешается только выгрузка документа!","!");
          Continue;
        EndIf;
        Сумма0:=0;
        aDoc:=0;
        //Новый документ
        Tr2:=Tr["ТоварыПродажа"];
        If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
          aDoc:=ЗагрузитьДокументОстатков(Tr,"Реализация",Enum.коРеализация.РеализацияРозничная,"","ТоварыПродажа",Сумма0);
        EndIf;
        Tr2:=Tr["ТоварыВозвратПродажи"];
        If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
          Сумма0:=-Сумма0;
          bDoc:=ЗагрузитьДокументОстатков(Tr,"ВозвратОтПокупателя",Enum.коВозвратОтПокупателя.ВозвратРозничный,"ВПК","ТоварыВозвратПродажи",Сумма0);
          aDoc:=?(IsDBObject(aDoc),aDoc,bDoc);
          Сумма0:=-Сумма0;
        EndIf;
        Tr2:=Tr["Услуги"];
        If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
          bDoc:=ЗагрузитьДокументОстатков(Tr,"РеализацияПрочее",Enum.коРеализацияПрочее.РеализацияПрочее,"РП","Услуги",Сумма0);
          aDoc:=?(IsDBObject(aDoc),aDoc,bDoc);
        EndIf;
        //TODO: требуется поиск розничного покупателя
        //Tr2:=Tr["ТоварыЗакупка"];
        //If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
        //  ЗагрузитьДокументОстатков(Tr,"ПоступлениеТМЦ",Enum.коПоступлениеТМЦ.ПоступлениеТМЦ,"ПС","ТоварыЗакупка");
        //EndIf;
        //Tr2:=Tr["ТоварыВозвратЗакупки"];
        //If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
        //  ЗагрузитьДокументОстатков(Tr,"ПоступлениеТМЦ",Enum.коВозвратПоставщику.ВозвратТМЦ,"ВПС","ТоварыВозвратЗакупки");
        //EndIf;
        СуммаБезНал:=0;
        ПодсчитатьСумму(Tr,"ОплатаБанковскимиКредитами",СуммаБезНал);
        ПодсчитатьСумму(Tr,"ОплатаБонуснымиБаллами",СуммаБезНал);
        ПодсчитатьСумму(Tr,"ОплатаПлатежнымиКартами",СуммаБезНал);
        ПодсчитатьСумму(Tr,"ОплатаПлатежнымиКартамиПодарочныхСертификатов",СуммаБезНал);
        ПодсчитатьСумму(Tr,"ОплатаСертификатами",СуммаБезНал);
        Сумма0:=Round(Сумма0-СуммаБезНал,2);
        If Сумма0<>0 Then
          ЗагрузитьРозничныйПКОРКО(aDoc,Tr,Сумма0);
        EndIf;
      ElseIf Стр="<Документ.ЧекККМ>" Then
        aDoc:=0;
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ЧекККМ>");
        If Tr["Отменен"]="true" Then
          Continue;
        EndIf;
        Tr2:=Tr["ТоварыПродажа"];
        If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
          aDoc:=ЗагрузитьДокументОстатков(Tr,"Реализация",Enum.коРеализация.РеализацияРозничная,"","ТоварыПродажа");
        EndIf;
        Tr2:=Tr["ТоварыВозвратПродажи"];
        If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
          bDoc:=ЗагрузитьДокументОстатков(Tr,"ВозвратОтПокупателя",Enum.коВозвратОтПокупателя.ВозвратРозничный,"ВПК","ТоварыВозвратПродажи");
          aDoc:=?(IsDBObject(aDoc),aDoc,bDoc);
        EndIf;
        Tr2:=Tr["Услуги"];
        If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
          bDoc:=ЗагрузитьДокументОстатков(Tr,"РеализацияПрочее",Enum.коРеализацияПрочее.РеализацияПрочее,"РП","Услуги");
          aDoc:=?(IsDBObject(aDoc),aDoc,bDoc);
        EndIf;
        //TODO: требуется поиск розничного покупателя
        //Tr2:=Tr["ТоварыЗакупка"];
        //If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
        //  ЗагрузитьДокументОстатков(Tr,"ПоступлениеТМЦ",Enum.коПоступлениеТМЦ.ПоступлениеТМЦ,"ПС","ТоварыЗакупка");
        //EndIf;
        //Tr2:=Tr["ТоварыВозвратЗакупки"];
        //If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
        //  ЗагрузитьДокументОстатков(Tr,"ПоступлениеТМЦ",Enum.коВозвратПоставщику.ВозвратТМЦ,"ВПС","ТоварыВозвратЗакупки");
        //EndIf;
        Tr2:=Tr["ОплатыККМ"];
        If _And(TypeStr(Tr2)="TREE.BRANCH",Tr2.Size()>0) Then
          //Считаем сумму
          //Типы оплат: ВстречноеПредставление, Наличные, Постоплата, Предоплата, Электронно
          Сумма:=0;
          For i:=1 To Tr2.Size() Do
            Tr3:=Tr2[i];
            If TypeStr(Tr3)="TREE.BRANCH" Then
              If Tr3["ТипОплаты"]<>"Электронно" Then
                Сумма:=Сумма+Number(Tr3["Сумма"]);
              EndIf;
            EndIf;
          EndDo;
          ЗагрузитьРозничныйПКОРКО(aDoc,Tr,Сумма);
        EndIf;
      ElseIf Стр="<Документ.СчетФактураВыданный>" Then
        //Не требуется
      ElseIf Стр="<Документ.СчетФактураПолученный>" Then //Только входящий номер
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.СчетФактураПолученный>");
        Tr2:=Tr["КлючевыеСвойства"];
        Ссылка:=Tr2["Ссылка"];
        aDoc:=НайтиДокумент(Ссылка,"СФ");
        If IsEmpty(aDoc) Then
          Ссылка2:=Trim(Tr2["ДокументыОснования","ПоступлениеТоваровУслугСсылка","Ссылка"]);
          If Ссылка2<>"" Then
            aDoc:=НайтиДокумент(Ссылка2,"СФ");
          EndIf;
        EndIf;
        If _And(IsDbObject(aDoc),(aDoc.DBName()="ПоступлениеТМЦ")or(aDoc.DBName()="ПоступлениеПрочее")) Then
          If not ЗаблокироватьДокумент(aDoc) Then
            Continue;
          EndIf;
          Стр:=Trim(Tr2["НомерВходящегоДокумента"]);
          If (Стр<>"")And(aDoc.НомерДокВходящийСФ<>Left(Стр,32)) Then
            aDoc.НомерДокВходящийСФ:=Стр;
          EndIf;
          Стр:=ДатаSF(Tr2["ДатаВходящегоДокумента"]);
          If (Not IsEmpty(Стр))And(aDoc.ДатаДокВходящийСФ<>Стр) Then
            aDoc.ДатаДокВходящийСФ:=Стр;
          EndIf;
          aDoc.Save();
          ФлИзмененных:=ФлИзмененных+1;
        EndIf;
      ElseIf Стр="<Документ.ПеремещениеТоваров>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ПеремещениеТоваров>");
        ЗагрузитьДокументОстатков(Tr,"ПеремещениеТМЦ",Enum.коПеремещениеТМЦ.ПеремещениеТМЦ);
      ElseIf Стр="<Документ.ПКОПолучениеНаличныхВБанке>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ПКОПолучениеНаличныхВБанке>");
        ЗагрузитьПростойДокумент(Tr,"ПКО",Enum.коПКО.Инкассация,"",4);
      ElseIf Стр="<Документ.ПКОПоступлениеИзДругойКассы>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ПКОПоступлениеИзДругойКассы>");
        ЗагрузитьПростойДокумент(Tr,"ПКО",Enum.коПКО.Прочее,"",2);
      ElseIf Стр="<Документ.ПКОПоступлениеИзКассыККМ>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ПКОПоступлениеИзКассыККМ>");
        ЗагрузитьПростойДокумент(Tr,"ПКО",Enum.коПКО.Прочее,"",2);
      ElseIf Стр="<Документ.ПКОПрочееПоступление>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ПКОПрочееПоступление>");
        ЗагрузитьПростойДокумент(Tr,"ПКО",Enum.коПКО.Прочее,"",2);
      ElseIf Стр="<Документ.ПКОПрочиеДоходы>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ПКОПрочиеДоходы>");
        ЗагрузитьПростойДокумент(Tr,"ПКО",Enum.коПКО.Прочее,"",2);
      ElseIf Стр="<Документ.ПКОРасчетыСКонтрагентами>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ПКОРасчетыСКонтрагентами>");
        ЗагрузитьПростойДокумент(Tr,"ПКО",Enum.коПКО.ОплатаПокупателя,"",1);
      ElseIf Стр="<Документ.ПКОРозничнаяВыручка>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ПКОРозничнаяВыручка>");
        ЗагрузитьПростойДокумент(Tr,"ПКО",Enum.коПКО.ОплатаПокупателя,"",1);
      ElseIf Стр="<Документ.РКОВыдачаВДругуюКассу>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.РКОВыдачаВДругуюКассу>");
        ЗагрузитьПростойДокумент(Tr,"РКО",Enum.коРКО.Прочее,"",2);
      ElseIf Стр="<Документ.РКОВыдачаВКассуККМ>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.РКОВыдачаВКассуККМ>");
        ЗагрузитьПростойДокумент(Tr,"РКО",Enum.коРКО.Прочее,"",2);
      ElseIf Стр="<Документ.РКОНаБанковскийСчет>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.РКОНаБанковскийСчет>");
        ЗагрузитьПростойДокумент(Tr,"РКО",Enum.коРКО.Инкассация,"",4);
      ElseIf Стр="<Документ.РКОПрочийРасход>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.РКОПрочийРасход>");
        ЗагрузитьПростойДокумент(Tr,"РКО",Enum.коРКО.Прочее,"",2);
      ElseIf Стр="<Документ.РКОРасчетыСКонтрагентами>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.РКОРасчетыСКонтрагентами>");
        ЗагрузитьПростойДокумент(Tr,"РКО",Enum.коРКО.ОплатаПоставщику,"",1);
      ElseIf Стр="<Документ.СборкаТоваров>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.СборкаТоваров>");
        aDoc:=НайтиИлиСоздатьДокумент(Tr,"КомплектацияТовара");
        If aDoc=0 Then
          Continue;
        EndIf;
        Ссылка:=Tr["КлючевыеСвойства","Ссылка"];
        If aDoc.КодОперации<>Enum.коКомплектацияТовара.КомплектацияТовара Then
          aDoc.КодОперации:=Enum.коКомплектацияТовара.КомплектацияТовара;
        EndIf;
        If aDoc.Комментарий<>Trim(Tr["Комментарий"]) Then
          aDoc.Комментарий:=Trim(Tr["Комментарий"]);
        EndIf;
        ФлСборка:=Tr["ВидОперации"]="Сборка";
        зСк:=Магазин.Склад;
        зМг:=НайтиЭлементСправочника(0,"рознМагазины",Tr["Склад","Ссылка"]);
        If зМг.Status()>=0 Then
          If aDoc.Склад<>зМг.Склад Then
            aDoc.Склад:=зМг.Склад;
          EndIf;
        ElseIf Trim(Tr["Склад","Ссылка"])="" Then
          If IsEmpty(aDoc.Склад) Then
            aDoc.Склад:=Магазин.Склад;
          EndIf;
        Else
          MessageVisual("Невозможно найти склад документа: "+Ссылка,"!");
          ФлНеУдалятьФайл:=1;
          Continue;
        EndIf;
        If _And(not IsEmpty(aDoc.Склад),not IsEmpty(aDoc.Склад.Магазин),aDoc.Магазин<>aDoc.Склад.Магазин) Then
          aDoc.Магазин:=aDoc.Склад.Магазин;
        EndIf;
        If aDoc.ЮрЛицо<>ЮрЛицо Then
          aDoc.ЮрЛицо:=ЮрЛицо;
        EndIf;        
        aTab:=?(ФлСборка,aDoc.LineParts("ВходящаяНоменклатура"),aDoc.LineParts("ИсходящаяНоменклатура"));
        bTab:=?(ФлСборка,aDoc.LineParts("ИсходящаяНоменклатура"),aDoc.LineParts("ВходящаяНоменклатура"));
        If bTab.Size()<>1 Then
          bTab.Size(1);
        EndIf;
        bTab.CurLine:=1;
        зН:=0;
        зП:=0;        
        If not НайтиНоменклатуруИПартию(Tr,Ссылка,зН,зП) Then
          Continue;
        EndIf;
        If bTab.Номенклатура<>зН Then
          bTab.Номенклатура:=зН;
        EndIf;
        If bTab.СтавкаНДС<>зН.СтавкаНДС Then
          bTab.СтавкаНДС:=зН.СтавкаНДС;
        EndIf;
        If _And(not IsEmpty(зП),bTab.Партия<>зП) Then
          bTab.Партия:=зП;
        EndIf;
        зКоличество:=Number(Tr["Количество"]);
        If bTab.Количество<>зКоличество Then
          bTab.Количество:=зКоличество;
        EndIf;
        зСумма:=Number(Tr["Сумма"]);
        If bTab.Сумма<>зСумма Then
          bTab.Сумма:=зСумма;
        EndIf;
        If aDoc.Selected()<>1 Then  
          глПересчитатьСтроку(aDoc,bTab,"Количество2@Цена2@СуммаНДС");
        EndIf;
        iNum:=0;
        Tr2:=Tr["Товары"];
        If TypeStr(Tr2)="TREE.BRANCH" Then
          For i:=1 To Tr2.Size() Do
            Tr3:=Tr2[i];
            If TypeStr(Tr3)="TREE.BRANCH" Then
              зКоличество:=Number(Tr3["Количество"]);
              If зКоличество=0 Then
                Continue;
              EndIf;
              зСумма:=Number(Tr3["Себестоимость"]);
              If not НайтиНоменклатуруИПартию(Tr3,Ссылка,зН,зП) Then
                Continue;
              EndIf;
              зСтавкаНДС:=зН.СтавкаНДС;
              iNum:=iNum+1;
              If aTab.Size()<iNum Then
                aTab.NewLine();
              EndIf;
              aTab.CurLine:=iNum;
              If aTab.Номенклатура<>зН Then
                aTab.Номенклатура:=зН;
              EndIf;
              If _And(not IsEmpty(зП),aTab.Партия<>зП) Then
                aTab.Партия:=зП;
              EndIf;
              If aTab.СтавкаНДС<>зСтавкаНДС Then
                aTab.СтавкаНДС:=зСтавкаНДС;
              EndIf;
              If aTab.Количество<>зКоличество Then
                aTab.Количество:=зКоличество;
              EndIf;
              If aTab.Сумма<>зСумма Then
                aTab.Сумма:=зСумма;
              EndIf;
              If aDoc.Selected()<>1 Then  
                глПересчитатьСтроку(aDoc,aTab,"Количество2@Цена2@СуммаНДС");
              EndIf;
            EndIf;
          EndDo;
        EndIf; 
        If aTab.Size()>iNum Then
          aTab.Size(iNum);
        EndIf;
        Сумма:=aDoc.LineParts("ИсходящаяНоменклатура").Sum("Сумма");
        If aDoc.СуммаВзаиморасчетов<>Сумма Then
          aDoc.СуммаВзаиморасчетов:=Сумма;
        EndIf;
        If aDoc.Selected()<>1 Then  
          aDoc.Save();
          СоздатьСсылкуНаЭлемент(aDoc,Ссылка,1);
          MessageVisual("Изменен: "+aDoc);
          If not глОбработать(aDoc,1,1) Then
            ФлНеУдалятьФайл:=1;
            Raise "Невозможно обработать документ "+aDoc+"!";//Транзакция все равно нарушена, продолжать цикл нельзя
          EndIf;
          ФлИзмененных:=ФлИзмененных+5;
        EndIf;
        aDoc:=0;//Разблокировка
      ElseIf Стр="<Документ.ОстаткиНаличныхДенежныхСредств>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ОстаткиНаличныхДенежныхСредств>");
        Ссылка:=Tr["КлючевыеСвойства","Ссылка"];
        aDoc:=НайтиИлиСоздатьДокумент(Tr,"УниверсальныйДокумент");
        If aDoc=0 Then
          Continue;
        EndIf;
        If aDoc.КодОперации<>Enum.коУниверсальныйДокумент.УниверсальныйДокумент Then
          aDoc.КодОперации:=Enum.коУниверсальныйДокумент.УниверсальныйДокумент;
        EndIf;
        If aDoc.ЮрЛицо<>ЮрЛицо Then
          aDoc.ЮрЛицо:=ЮрЛицо;
        EndIf;
        aTab:=aDoc.LineParts("Содержание");
        iNum:=0;
        Tr2:=Tr["ДенежныеСредства"];
        If TypeStr(Tr2)="TREE.BRANCH" Then
          For i:=1 To Tr2.Size() Do
            Tr3:=Tr2[i];
            If TypeStr(Tr3)="TREE.BRANCH" Then
              Сумма:=Number(Tr3["Сумма"]);
              If Сумма=0 Then
                Continue;
              EndIf;
              iNum:=iNum+1;
              If aTab.Size()<iNum Then
                aTab.NewLine();
              EndIf;
              aTab.CurLine:=iNum;
              If aTab.ИмяНакопителя<>"Касса" Then
                aTab.ИмяНакопителя:="Касса";
              EndIf;
              If aTab.ЗнакДвижения<>"+" Then
                aTab.ЗнакДвижения:="+";
              EndIf;
              Стр:="Сумма@"+глЗашифроватьЗначениеУД(Сумма);
              If aTab.Активы<>Стр Then
                aTab.Активы:=Стр;
              EndIf;
              Стр:="ЮрЛицо@"+глЗашифроватьЗначениеУД(ЮрЛицо)+"###Касса@"+глЗашифроватьЗначениеУД(Касса);
              If aTab.Аккумуляторы<>Стр Then
                aTab.Аккумуляторы:=Стр;
              EndIf;
            EndIf;
          EndDo;
        EndIf;
        If aTab.Size()>iNum Then
          aTab.Size(iNum);
        EndIf;
        If aDoc.Selected()<>1 Then  
          aDoc.Save();
          СоздатьСсылкуНаЭлемент(aDoc,Ссылка,1);
          MessageVisual("Изменен: "+aDoc);
          If not глОбработать(aDoc,1,1) Then
            ФлНеУдалятьФайл:=1;
            Raise "Невозможно обработать документ "+aDoc+"!";//Транзакция все равно нарушена, продолжать цикл нельзя
          EndIf;
          ФлИзмененных:=ФлИзмененных+5;
        EndIf;
        aDoc:=0;//Разблокировка
      ElseIf Стр="<Документ.ОстаткиСобственныхТМЦ>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ОстаткиСобственныхТМЦ>");
        Ссылка:=Tr["КлючевыеСвойства","Ссылка"];
        aDoc:=НайтиИлиСоздатьДокумент(Tr,"УниверсальныйДокумент");
        If aDoc=0 Then
          Continue;
        EndIf;
        If aDoc.КодОперации<>Enum.коУниверсальныйДокумент.УниверсальныйДокумент Then
          aDoc.КодОперации:=Enum.коУниверсальныйДокумент.УниверсальныйДокумент;
        EndIf;
        If aDoc.ЮрЛицо<>ЮрЛицо Then
          aDoc.ЮрЛицо:=ЮрЛицо;
        EndIf;
        aTab:=aDoc.LineParts("Содержание");
        зСк:=Магазин.Склад;
        зМг:=НайтиЭлементСправочника(0,"рознМагазины",Tr["Склад","Ссылка"]);
        If зМг.Status()>=0 Then
          зСк:=зМг.Склад;
        ElseIf Trim(Tr["Склад","Ссылка"])<>"" Then
          MessageVisual("Невозможно найти склад документа: "+Ссылка,"!");
          ФлНеУдалятьФайл:=1;
          Continue;
        EndIf;
        iNum:=0;
        Tr2:=Tr["ТМЦ"];
        If TypeStr(Tr2)="TREE.BRANCH" Then
          For i:=1 To Tr2.Size() Do
            Tr3:=Tr2[i];
            If TypeStr(Tr3)="TREE.BRANCH" Then
              Количество:=Number(Tr3["Количество"]);
              If Количество=0 Then
                Continue;
              EndIf;
              зН:=0;
              зП:=0;
              If not НайтиНоменклатуруИПартию(Tr,Ссылка,зН,зП) Then
                Continue 2;
              EndIf;
              iNum:=iNum+1;
              If aTab.Size()<iNum Then
                aTab.NewLine();
              EndIf;
              aTab.CurLine:=iNum;
              If aTab.ИмяНакопителя<>"ОстаткиТМЦ" Then
                aTab.ИмяНакопителя:="ОстаткиТМЦ";
              EndIf;
              If aTab.ЗнакДвижения<>"+" Then
                aTab.ЗнакДвижения:="+";
              EndIf;
              Стр:="Количество@"+глЗашифроватьЗначениеУД(Количество);
              If aTab.Активы<>Стр Then
                aTab.Активы:=Стр;
              EndIf;
              Стр:="ЮрЛицо@"+глЗашифроватьЗначениеУД(ЮрЛицо)+"###Склад@"+глЗашифроватьЗначениеУД(зСк)+"###Номенклатура@"+глЗашифроватьЗначениеУД(зН)+
                ?(not IsEmpty(зП),"###Партия@"+глЗашифроватьЗначениеУД(зП));
              If aTab.Аккумуляторы<>Стр Then
                aTab.Аккумуляторы:=Стр;
              EndIf;
            EndIf;
          EndDo;
        EndIf;
        If aTab.Size()>iNum Then
          aTab.Size(iNum);
        EndIf;
        If aDoc.Selected()<>1 Then  
          aDoc.Save();
          СоздатьСсылкуНаЭлемент(aDoc,Ссылка,1);
          MessageVisual("Изменен: "+aDoc);
          If not глОбработать(aDoc,1,1) Then
            ФлНеУдалятьФайл:=1;
            Raise "Невозможно обработать документ "+aDoc+"!";//Транзакция все равно нарушена, продолжать цикл нельзя
          EndIf;
          ФлИзмененных:=ФлИзмененных+5;
        EndIf;
        aDoc:=0;//Разблокировка
      ElseIf Стр="<Документ.ОстаткиРасчетовСПокупателямиАвансы>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ОстаткиРасчетовСПокупателямиАвансы>");
        ЗагрузитьДокументОстатковВзаиморасчетов(Tr,Enum.ПокупательПоставщик.Покупатель,-1);
      ElseIf Стр="<Документ.ОстаткиРасчетовСПокупателямиДолги>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ОстаткиРасчетовСПокупателямиДолги>");
        ЗагрузитьДокументОстатковВзаиморасчетов(Tr,Enum.ПокупательПоставщик.Покупатель,1);
      ElseIf Стр="<Документ.ОстаткиРасчетовСПоставщикамиАвансы>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ОстаткиРасчетовСПоставщикамиАвансы>");
        ЗагрузитьДокументОстатковВзаиморасчетов(Tr,Enum.ПокупательПоставщик.Поставщик,-1);
      ElseIf Стр="<Документ.ОстаткиРасчетовСПоставщикамиДолги>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.ОстаткиРасчетовСПоставщикамиДолги>");
        ЗагрузитьДокументОстатковВзаиморасчетов(Tr,Enum.ПокупательПоставщик.Поставщик,1);
      ElseIf Стр="<Документ.ПересчетТоваров>" Then
        //Просто инвентаризация, загружать не нужно
      ElseIf (Стр="<Документ.УстановкаЦенНоменклатуры>")Or(Стр="<Документ.ПереоценкаТоваровВРознице>") Then
        ФлПереоц:=Стр="<Документ.ПереоценкаТоваровВРознице>";
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,Replace(Стр,"<","</"));
        Дата:=ДатаSF(Tr["КлючевыеСвойства","Дата"]);
        Ссылка:=Trim(Tr["КлючевыеСвойства","Ссылка"]);
        Tr2:=Tr["Товары"];
        If TypeStr(Tr2)="TREE.BRANCH" Then
          For i:=1 To Tr2.Size() Do
            Tr3:=Tr2[i];
            If TypeStr(Tr3)="TREE.BRANCH" Then
              Цена:=?(ФлПереоц,Number(Tr3["ЦенаВРознице"]),Number(Tr3["Цена"]));
              зН:=0;
              зП:=0;
              If not НайтиНоменклатуруИПартию(Tr3,Ссылка,зН,зП) Then
                Continue 2;
              EndIf;
              If _And(зН.флПодлежитПрослеживаемости,Not IsEmpty(зП)) Then
                If зП.ЦенаМаксимальнаяПродажная<>Цена Then
                  зП.ЦенаМаксимальнаяПродажная:=Цена;
                  зП.Save();
                  ФлИзмененных:=ФлИзмененных+1;
                EndIf;
              Else
                УстановитьЦену(зН,Магазин.ТипЦенРеализации,Цена,Дата);
              EndIf;
            EndIf;
          EndDo;
        EndIf;
      ElseIf Стр="<Документ.КорректировкаДолга>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</Документ.КорректировкаДолга>");
        aDoc:=НайтиИлиСоздатьДокумент(Tr,"КорректировкаДолга");
        If aDoc=0 Then
          Exit;
        EndIf;
        Ссылка:=Tr["КлючевыеСвойства","Ссылка"];
        If (aDoc.КодОперации<>Enum.коКорректировкаДолга.Покупатель)And(aDoc.КодОперации<>Enum.коКорректировкаДолга.Поставщик) Then
          aDoc.КодОперации:=Enum.коКорректировкаДолга.Поставщик;
        EndIf;
        If aDoc.Комментарий<>Trim(Tr["Комментарий"]) Then
          aDoc.Комментарий:=Trim(Tr["Комментарий"]);
        EndIf;
        Сумма:=Max(Number(Tr["СуммаДебиторскойЗадолженности"]),Number(Tr["СуммаКредиторскойЗадолженности"]));
        If aDoc.СуммаВзаиморасчетов<>Сумма Then
          aDoc.СуммаВзаиморасчетов:=Сумма;
        EndIf;
        If aDoc.Status()<0 Then
          aDoc.УчитыватьВНалоговомУчете:=1;
        EndIf;
        
        Ссылка2:=Trim(Tr["КонтрагентДебитор","Ссылка"]);
        If Ссылка2="" Then
          Ссылка2:=Trim(Tr["КонтрагентКредитор","Ссылка"]);
        EndIf;
        зК:=НайтиЭлементСправочника(0,"кнтКонтрагенты",Ссылка2);
        If зК.Status()>=0 Then
          If aDoc.Контрагент<>зК Then
            aDoc.Контрагент:=зК;
          EndIf;
        Else
          MessageVisual("Невозможно найти контрагента документа: "+Ссылка,"!");
          ФлНеУдалятьФайл:=1;
        EndIf;
        If aDoc.Договор.Selected()=0 Then
          зД:=Ref.кнтДоговоры;
          If зД.Find("@Parent,ЮрЛицо",aDoc.Контрагент,ЮрЛицо) Then
            aDoc.Договор:=зД;
          Else
            aDoc.Договор:=0;
          EndIf;
        EndIf;
        If IsEmpty(aDoc.Договор) Then
          MessageVisual("Невозможно найти договор документа: "+Ссылка,"!");
          ФлНеУдалятьФайл:=1;
        Else
          If aDoc.Status()<0 Then
            глУстановитьНовыйНомер(aDoc);
          EndIf;
          If aDoc.ЮрЛицо<>aDoc.Договор.ЮрЛицо Then
            aDoc.ЮрЛицо:=aDoc.Договор.ЮрЛицо;
          EndIf;
        EndIf;
        If aDoc.Selected()<>1 Then  
          aDoc.Save();
          СоздатьСсылкуНаЭлемент(aDoc,Ссылка,1);
          MessageVisual("Изменен: "+aDoc);
          If not глОбработать(aDoc,1,1) Then
            ФлНеУдалятьФайл:=1;
            Raise "Невозможно обработать документ "+aDoc+"!";//Транзакция все равно нарушена, продолжать цикл нельзя
          EndIf;
          ФлИзмененных:=ФлИзмененных+5;
        EndIf;
        aDoc:=0;//Разблокировка
      ElseIf Стр="<Документ.АвансовыйОтчет>" Then
        //TODO
      ElseIf Стр="<Документ.ПБДСКонвертацияВалюты>" Then
        //TODO: ПБДСКонвертацияВалюты, ПБДСПрочееПоступление, ПБДСПрочиеДоходы, ПБДСРасчетыСКонтрагентами, ПБДСПоПлатежнымКартам, ПБДСПереводНаДругойСчет, ПБДСРасчетыССотрудниками, ПБДСВозвратЗарплатыПоЗарплатномуПроекту, ПБДСВзносНаличными
      ElseIf Стр="<Документ.СБДСКонвертацияВалюты>" Then
        //TODO: СБДСКонвертацияВалюты, СБДСПереводНаДругойСчет, СБДСПеречислениеЗаработнойПлаты, СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета, СБДСПлатежиВБюджет, СБДСПрочееСписание, СБДСПрочиеРасходы, СБДСРасчетыСКонтрагентами, СБДСРасчетыССотрудниками, СБДССнятиеНаличных
      ElseIf Стр="<Документ.ОстаткиБезналичныхДенежныхСредств>" Then
        //TODO
      ElseIf Стр="<Документ.ОстаткиНематериальныхАктивов>" Then
        //TODO
      ElseIf Стр="<Документ.ОстаткиОсновныхСредств>" Then
        //TODO
      ElseIf Стр="<Документ.ОстаткиРасчетовПоКредитамЗаймам>" Then
        //TODO
      ElseIf Стр="<Документ.ОстаткиЗадолженностиПодотчетныхЛиц>" Then
        //TODO
      ElseIf Стр="<Документ.ОстаткиПерерасходаПодотчетныхЛиц>" Then
        //TODO
      ElseIf Стр="<УдалениеОбъекта>" Then
        Tr:=ЗагрузитьРеквизиты(Т,iLoop,"</УдалениеОбъекта>");
        Tr2:=Tr["СсылкаНаОбъект","СсылкаНаОбъект"];
        If TypeStr(Tr2)="TREE.BRANCH" Then
          If Tr2.Size()=1 Then
            Ссылка:=Trim(Tr2[1]);
            aEl:=Ref.рознСопоставлениеОбъектовОбмена;
            aEl.Select("@Parent,ВнешнийКод",Элемент,Ссылка);
            While aEl.Next() Do
              If IsEmpty(aEl.Объект) Then
                MessageVisual("Невозможно удалить составной документ: "+Ссылка+"! Объект пропущен!","!");
                Break;
              EndIf;
              If not глУдалить(aEl.Объект,1) Then
                MessageVisual("Невозможно удалить объект: "+aEl.Объект+"!","!");
                ФлНеУдалятьФайл:=1;
              Else
                MessageVisual("Удален: "+aEl.Объект);
              EndIf;
            EndDo
          EndIf;
        EndIf;
      EndIf;
    EndDo;
  Finally
    If IsTransactionActive() Then
      CommitTransaction();
    Endif;
  EndTry;
  
  If not ФлНеУдалятьФайл Then
    If not File.DeleteFile(ПутьПротокола+ИмяФайла) Then
      MessageVisual("Невозможно удалить загруженный файл данных "+ИмяФайла+"!","!");
      Exit 0;
    EndIf;
  
    ДобавитьУстановку("Исходящее сообщение",Str(НомерВходящего2+1),1);
    ДобавитьУстановку("Входящее сообщение",Str(НомерИсходящего2),1);
    ОбновитьВремяЗапуска("ПоследняяУдачнаяЗагрузка");
  EndIf;
  Exit 1;
EndFunction

Function СохранитьУстановки(ФлЗакрыть=0)
  Ини.AddLeaf("КодБД",Form.оКодБД.Value);
  Ини.AddLeaf("КодБД2",Form.оКодБД2.Value);
  Ини.AddLeaf("Способ",Form.оСпособ.Value.SelectedLine);
  Ини.AddLeaf("ФлВсеДокументы",Form.оВсеДокументы.Value);
  Ини.AddLeaf("ФлДокументОРП",Form.оДокументОРП.Value);
  Ини.AddLeaf("ПрефиксОРП",Form.оПрефиксОРП.Value);
  Ини.AddLeaf("ФлСквознаяНумерация",Form.оСквознаяНумерация.Value);
  Ини.AddLeaf("ФлБезГИСМТТовара",Form.оБезГИСМТТовара.Value);
  Ини.AddLeaf("Путь",Form.оПуть.Value);
  Ини.AddLeaf("РасписаниеВыгрузки",Form.оРасписаниеВыгрузки.Value);
  Ини.AddLeaf("РасписаниеЗагрузки",Form.оРасписаниеЗагрузки.Value);
  Ини.AddLeaf("Период",Form.оДней.Value);
  Ини.AddLeaf("ДатаНачала",Form.оДатаНачала.Value);
  Ини.AddLeaf("Касса",Form.оКасса.Value.Code);
  Элемент.Настройки:=Ини.StoreToString("");

  //Добавление номеров квитанций выгрузки/загрузки
  ДобавитьУстановку("Исходящее сообщение","1");
  ДобавитьУстановку("Входящее сообщение","0");
  
  глОбновитьРасписаниеПротоколаОбмена(Элемент,"EnterpriseData","Modules\FreeForms\ПротоколыОбмена\EnterpriseData\",Form.оРасписаниеВыгрузки.Value,Form.оРасписаниеЗагрузки.Value);
  
  If ФлЗакрыть Then
    Form.IsChanged(0);
    Form.Close();
  EndIf;
EndFunction

Function ЗаполнитьПеременные(Ини)
  КодБД:=Ини.GetData("КодБД");
  КодБД2:=Ини.GetData("КодБД2");
  Способ:=Max(1,Number(Ини.GetData("Способ")));
  Период:=Number(Ини.GetData("Период","7"));
  ПутьПротокола:=Ини.GetData("Путь");
  ФлВсеДокументы:=Number(Ини.GetData("ФлВсеДокументы"));
  ФлДокументОРП:=Number(Ини.GetData("ФлДокументОРП"));
  ПрефиксОРП:=Ини.GetData("ПрефиксОРП","");
  ФлСквознаяНумерация:=Number(Ини.GetData("ФлСквознаяНумерация"));  
  ФлБезГИСМТТовара:=Number(Ини.GetData("ФлБезГИСМТТовара"));
  РасписаниеВыгрузки:=Ини.GetData("РасписаниеВыгрузки");
  РасписаниеЗагрузки:=Ини.GetData("РасписаниеЗагрузки");
  ДатаНачала:=Date(Ини.GetData("ДатаНачала"));
  Касса:=Ref.общКассы;
  КассаКод:=Ини.GetData("Касса","");
  If КассаКод<>"" Then
    Касса.Find("Code",КассаКод);
  EndIf;
EndFunction


Function ВыполнитьОбменДляВсехМагазинов(ФлТип,СпМагазины=0)
  ПутьДрайвера:="Modules\FreeForms\ПротоколыОбмена\EnterpriseData\";
  Try
    СтрФильтр:="~(@Status=0)And(ПутьДрайвераОбмена=ПутьДрайвера)And(@Parent.@Status=0)"+?(not IsEmpty(СпМагазины),"And(@Parent IN СпМагазины)");
    aNum:=Ref.рознПротоколыОбменаМагазинов.ElementsNumber(СтрФильтр);
    bNum:=0;
    аПротокол:=Ref.рознПротоколыОбменаМагазинов;
    аПротокол.Select(СтрФильтр);
    While аПротокол.Next() Do
      bNum:=bNum+1;
      Элемент:=аПротокол;
      Магазин:=Элемент.Parent();
      MessageVisual("Обработка "+bNum+" из "+aNum+", "+аПротокол+" для "+Магазин,"I");
      ИмяОбмена:="Обмен_"+Элемент.Code;аПольз:="";аМаш:="";аДата:="";
      If not DBLockStringMutex(ИмяОбмена,аПольз,аМаш,аДата) Then
        Message("Обмен по протоколу "+Элемент+" для магазина "+Магазин+" уже был запущен пользователем "+аПольз+" ("+аМаш+") в "+аДата,"!");
        Continue;
      EndIf;
      Try
        ЮрЛицо:=Магазин.ЮрЛицо;
        Try
          Ини:=Ini.Create();
          Ини.AddFromString(Элемент.Настройки);
        Except
          Message(PopError(),"!");
          Continue;
        EndTry;
        ЗаполнитьПеременные(Ини);
      
        If ФлТип=1 Then
          Фл:=ВыполнитьОтправку();
        ElseIf ФлТип=2 Then
          Фл:=ВыполнитьЗагрузку();
        ElseIf ФлТип=3 Then
          //1. Загрузка и обработка очереди
          //2. Полная выгрузка
          Фл:=ВыполнитьЗагрузку();
          If Фл Then
            Фл:=ВыполнитьОтправку();
          EndIf;
        EndIf;
        If not Фл Then
          Message("Ошибка обмена для магазина: "+аПротокол.Parent());
        EndIf;
      Finally
        DBUnlockStringMutex(ИмяОбмена);
        Стр:=PopError();
        SuppressException();
        If not IsEmpty(Стр) Then
          Message(Стр,"!");
        EndIf;
      EndTry;
    EndDo;
  Finally
    Стр:=PopError();
    SuppressException();
  EndTry;
EndFunction


Function OnOpen()
  Result:=0;
  If TypeStr(Param)<>"LIST" Then
    MessageVisual("Эта обработка запускается автоматически или вызывается из формы магазина!","!");
    Exit;
  EndIf;
  
  СпТипыДокументов:=List.Create();
  СпТипыДокументов.Add("Аванс","А");
  СпТипыДокументов.Add("БухгалтерскаяОперация","Б");
  СпТипыДокументов.Add("Сторнирование","В");
  СпТипыДокументов.Add("АктПоСкладу","Г");
  СпТипыДокументов.Add("ВозвратОтПокупателя","Д");
  СпТипыДокументов.Add("ВозвратПоставщику","Е");
  СпТипыДокументов.Add("ПеремещениеТМЦ","Ж");
  СпТипыДокументов.Add("ПоступлениеТМЦ","З");
  СпТипыДокументов.Add("Реализация","И");
  СпТипыДокументов.Add("РегистрацияОС","К");
  СпТипыДокументов.Add("РегистрацияТМЦ","Л");
  СпТипыДокументов.Add("ВыпискаБанкаПриход","М");
  СпТипыДокументов.Add("ВыпискаБанкаРасход","Н");
  СпТипыДокументов.Add("КорректировкаДолга","О");
  СпТипыДокументов.Add("ПКО","П");
  СпТипыДокументов.Add("ПеремещениеДенег","Р");
  СпТипыДокументов.Add("ПеремещениеДенегБанк","С");
  СпТипыДокументов.Add("ПодотчетнаяОперация","Т");
  СпТипыДокументов.Add("ПоступлениеПрочее","У");
  СпТипыДокументов.Add("РКО","Ф");
  СпТипыДокументов.Add("РеализацияПрочее","Х");
  СпТипыДокументов.Add("КомплектацияТовара","Ц");
  СпТипыДокументов.Add("ОтчетОРозничныхПродажах","Ч");
  
  СпТипыДокументов2:=List.Create();
  СпТипыДокументов2.Add("ОстаткиНаличныхДенежныхСредств","А");
  СпТипыДокументов2.Add("ОстаткиБезналичныхДенежныхСредств","Б");
  СпТипыДокументов2.Add("ОстаткиЗадолженностиПодотчетныхЛиц","В");
  СпТипыДокументов2.Add("ОстаткиРасчетовСПокупателямиДолги","Г");
  СпТипыДокументов2.Add("ОстаткиРасчетовСПоставщикамиДолги","Д");
  СпТипыДокументов2.Add("ОстаткиСобственныхТМЦ","Е");

  Элемент:=Param["Элемент"];
  СтрКоманда:=Param["Команда"];
  If СтрКоманда="Выгрузка всех магазинов" Then
    ВыполнитьОбменДляВсехМагазинов(1,Param["СпМагазины"]);
    Exit;
  ElseIf СтрКоманда="Загрузка всех магазинов" Then
    ВыполнитьОбменДляВсехМагазинов(2,Param["СпМагазины"]);
    Exit;
  ElseIf СтрКоманда="Загрузка и выгрузка всех магазинов" Then
    ВыполнитьОбменДляВсехМагазинов(3,Param["СпМагазины"]);
    Exit;
  EndIf;
  
  If Элемент.IsLocked()<>1 Then
    Элемент:=Элемент.Copy();
    If not глЗаблокировать(Элемент,1) Then //Будет разблокирован при закрытии обработки
      Exit;
    EndIf;
    Элемент.Reload();
  EndIf;
    
  Магазин:=Элемент.Parent();
  Try
    Ини:=Ini.Create();
    Ини.AddFromString(Элемент.Настройки);
  Except
    Ини.AddLeaf("Способ",1);
    Ини.AddLeaf("Период",7);
  EndTry;
  ЗаполнитьПеременные(Ини);
  
  If (СтрКоманда="Визуальный запуск")or(IsEmpty(СтрКоманда)) Then
    Result:=1;
    Exit;
  EndIf;
  
  ФлФорсирование:=0;
  КонДата:=BegOfDay(Date())-1;
  НачДата:=КонДата-Max(Период-1,0);
  If _And(not IsEmpty(Param["КонДата"]),not IsEmpty(Param["НачДата"])) Then
    НачДата:=Param["НачДата"];
    КонДата:=Max(Param["НачДата"],Param["КонДата"]);
    ФлФорсирование:=1;
    MessageVisual("Форсирован период выгрузки с "+НачДата+" по "+КонДата+"!","I");
  EndIf;
  
  ИмяОбмена:="Обмен_"+Элемент.Code;аПольз:="";аМаш:="";аДата:="";
  If not DBLockStringMutex(ИмяОбмена,аПольз,аМаш,аДата) Then
    MessageVisual("Обмен по протоколу "+Элемент+" для магазина "+Магазин+" уже был запущен пользователем "+аПольз+" ("+аМаш+") в "+аДата,"!");
  EndIf;
  Try
    //Команды: Визуальный запуск,Выгрузка,Загрузка,Загрузка и выгрузка
    If СтрКоманда="Выгрузка" Then    
      If not ВыполнитьОтправку() Then
        Raise "Ошибка при выполнении выгрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Загрузка" Then
      If not ВыполнитьЗагрузку() Then
        Raise "Ошибка при выполнении загрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Загрузка и выгрузка" Then
      If not ВыполнитьЗагрузку() Then
        Raise "Ошибка при выполнении загрузки";
      EndIf;
      If not ВыполнитьОтправку() Then
        Raise "Ошибка при выполнении выгрузки";
      EndIf;
      Param["Удачно"]:=1;
    Else
      MessageVisual("Неизвестная команда: "+СтрКоманда+"!","!");
    EndIf;
  Finally
    DBUnlockStringMutex(ИмяОбмена);
  EndTry;
EndFunction
