//Модуль загружается до загрузки любой формы и остается в памяти до закрытия всех связанных с ним (либо с его потомками) форм.
//Переменные, объявленные с постфиксом export, будут доступны в любой форме или в модулях и формах потомках.
//Модуль может содержать общие функции, используемые формами, или специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var Ини Export;
Var Способ Export, ПутьПротокола Export, РасписаниеВыгрузки Export, РасписаниеЗагрузки Export, КодБД Export, КодБД2 Export, ФлВсеДокументы Export, Период Export;
Var НачДата Export, КонДата Export, ДатаНачала Export, спН Export, Касса Export;
Var Магазин Export, ЮрЛицо Export;
Var Элемент Export;
Var пЮрЛицоСсылка Export;
Var спСправочники Export, спГИСМТ1С Export;

Function ПолучитьУстановку(Имя)
  aEl:=Ref.рознУстановкиОбменаМагазинов;
  If aEl.Find("~(@Parent=Элемент)And(@Status=0)And(Name=Имя)") Then
    Exit aEl.Установка; 
  EndIf;
  Exit "";
EndFunction

Function MessageVisual(Стр,Тип="")
  If not IsExecutingInSeparateThread Then
    Message(Стр,Тип);
  EndIf;
EndFunction

Function ДобавитьУстановку(Имя,Код,ФлОбновить=0)
  aEl:=Ref.рознУстановкиОбменаМагазинов;
  If Not aEl.Find("~(@Parent=Элемент)And(@Status=0)And(Name=Имя)") Then
    aEl.New();
    aEl.Parent(Элемент);
    aEl.Name:=Имя;
    aEl.Установка:=Код;
    aEl.Save();
  ElseIf ФлОбновить Then
    aEl.Установка:=Код;
    aEl.Save();
  EndIf;
EndFunction

Function ОбновитьВремяЗапуска(Ид)
  Элемент.SetValue(Ид,Date());
  Элемент.Save();
EndFunction

Function Дата1С(аДата)
  //2022-05-04T22:00:00
  Exit FormatDate(аДата,"YYYY-mm-dd""T""hh:tt:ss");
EndFunction

Function НайтиВнешнийКод(Эл)
  aEl:=Ref.рознСопоставлениеОбъектовОбмена;
  If aEl.Find("Объект,@Status",Эл,0) Then
    Exit aEl.ВнешнийКод;
  EndIf;
  Exit aEl.Code;
EndFunction

Function СтавкаНДС(Ставка)
  If Ставка=Enum.СтавкиНДС.БезНДС Then
    Exit "БезНДС";
  ElseIf Ставка=Enum.СтавкиНДС.НДС0 Then
    Exit "НДС0";
  ElseIf Ставка=Enum.СтавкиНДС.НДС10 Then
    Exit "НДС10";
  ElseIf Ставка=Enum.СтавкиНДС.НДС18 Then
    Exit "НДС18";
  ElseIf Ставка=Enum.СтавкиНДС.НДС20 Then
    Exit "НДС20";
  EndIf;
EndFunction


Function ВыгрузитьСправочник(ByRef СтрСправочники,Эл,ФлФизЛицо=0)
  //Выгружаемые справочники (выгружаются только присутствующие в документах, если не указано иное):
  //+  Справочник "Организации" -- юр. лица
  //+  Справочник "Склады" -- магазины
  //+  Справочник "Контрагенты" -- контрагенты
  //+  Справочник "Договоры" -- договоры
  //+  Справочник "Банковские счета" -- банк. счета
  //+  Справочник "Номенклатура" -- номенклатура
  //  Справочник "Штрихкоды номенклатуры" -- штрихкоды
  //  Справочник "Упаковки" -- создается из справочника номенклатура
  //  Справочник "Характеристики номенклатуры" -- выгружается для МРЦ
  //+  Справочник "Физические лица" -- создается из контрагенты для требуемых элементов
  //  Справочник "Валюты" -- только один элемент
  //+  Справочник "Банки" -- банки
  //+  Справочник "Единицы измерения" -- ед. измерения
  //  Справочник "Страны мира" -- страны мира
  //?? Нестандартные объекты (обмен с бухгалтерией):
  //?? Документ.ИнвентаризацияТоваров, Документ.ЧекККМ, Справочник.ВидыНоменклатуры, Справочник.ДисконтныеКарты, Справочник.КассыККМ, Справочник.МаркировкаУпаковки
  
  If спСправочники.Find(Эл.DBCode+ФлФизЛицо,,1)>0 Then
    Exit;
  EndIf;
  спСправочники.Add(Эл.DBCode+ФлФизЛицо,,,1);
  
  Вид:=Эл.DBName();
  If Вид="кнтКонтрагенты" Then
    пКПП:=Эл.ИНН;
    пИНН:=TearStr(пКПП,"/");
    If ФлФизЛицо Then
      AppendStringToBufferedString(СтрСправочники,"<Справочник.ФизическиеЛица><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка>"+
        "<ФИО>"+EncodeXMLString(Эл.ПолнНаименование)+"</ФИО><ИНН>"+пИНН+"</ИНН></КлючевыеСвойства></Справочник.ФизическиеЛица>");
    Else
      AppendStringToBufferedString(СтрСправочники,"<Справочник.Контрагенты><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка>"+
        "<НаименованиеПолное>"+EncodeXMLString(Эл.ПолнНаименование)+"</НаименованиеПолное><ИНН>"+пИНН+"</ИНН>"+?(пКПП<>"","<КПП>"+пКПП+"</КПП>")+"<ЮридическоеФизическоеЛицо>"+
        ?(Эл.ВидКонтрагента<>Enum.ВидыКонтрагентов.ФизЛицо,"ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></КлючевыеСвойства>"+
        "<Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование><ОКПО>"+Эл.ОКПО+"</ОКПО></Справочник.Контрагенты>");
    EndIf;
  ElseIf Вид="общСклады" Then
    If Эл.Магазин.Selected()=0 Then
      Raise "Для склада "+Эл+" не выбран магазин!";
    EndIf;
    ВыгрузитьСправочник(СтрСправочники,Эл.Магазин);
  ElseIf Вид="рознМагазины" Then
    AppendStringToBufferedString(СтрСправочники,"<Справочник.Склады><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка>"+
      "<Наименование>"+EncodeXMLString(Эл.НазваниеМагазина)+"</Наименование><ТипСклада>Розничный</ТипСклада></КлючевыеСвойства>"+
      "<АдресСтрокой>"+EncodeXMLString(Эл.ФактАдрес)+"</АдресСтрокой></Справочник.Склады>");
  ElseIf Вид="кнтДоговоры" Then
    ВыгрузитьСправочник(СтрСправочники,Эл.Parent());
    AppendStringToBufferedString(СтрСправочники,"<Справочник.Договоры><КлючевыеСвойства><ВидДоговора>СПоставщиком</ВидДоговора><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка>"+
      "<Контрагент><Ссылка>"+НайтиВнешнийКод(Эл.Parent())+"</Ссылка></Контрагент>"+пЮрЛицоСсылка+"</КлючевыеСвойства>"+
      "<Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование><Дата>"+Дата1С(Эл.ДатаЗаключенияДоговора)+"</Дата></Справочник.Договоры>");
  ElseIf Вид="кнтБанковскиеСчета" Then
    ВыгрузитьСправочник(СтрСправочники,Эл.Банк);
    If Эл.Parent().СвоеЮрЛицо=ЮрЛицо Then
      AppendStringToBufferedString(СтрСправочники,"<Справочник.БанковскиеСчета><КлючевыеСвойства><Банк><Ссылка>"+НайтиВнешнийКод(Эл.Банк)+"</Ссылка></Банк><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка>"+
        "<Владелец><Ссылка>"+НайтиВнешнийКод(Эл.Parent())+"</Ссылка></Владелец>"+пЮрЛицоСсылка+"</КлючевыеСвойства>"+
        "<НомерСчета>"+EncodeXMLString(Эл.НомерСчета)+"</НомерСчета><Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование><ВалютаДенежныхСредств><Код>643</Код></ВалютаДенежныхСредств></Справочник.БанковскиеСчета>");
    Else
      пКПП:=Эл.Parent().ИНН;
      пИНН:=TearStr(пКПП,"/");
      ВыгрузитьСправочник(СтрСправочники,Эл.Parent());
      AppendStringToBufferedString(СтрСправочники,"<Справочник.БанковскиеСчета><КлючевыеСвойства><Банк><Ссылка>"+НайтиВнешнийКод(Эл.Банк)+"</Ссылка></Банк><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка>"+
        "<Владелец><Ссылка>"+НайтиВнешнийКод(Эл.Parent())+"</Ссылка></Владелец><Контрагент><КлючевыеСвойства><ИНН>"+пИНН+"</ИНН>"+?(пКПП<>"","<КПП>"+пКПП+"</КПП>")+"<Ссылка>"+НайтиВнешнийКод(Эл.Parent())+"</Ссылка></КлючевыеСвойства></Контрагент></КлючевыеСвойства>"+
        "<НомерСчета>"+EncodeXMLString(Эл.НомерСчета)+"</НомерСчета><Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование><ВалютаДенежныхСредств><Код>643</Код></ВалютаДенежныхСредств></Справочник.БанковскиеСчета>");
    EndIf;
  ElseIf Вид="тмцНоменклатура" Then
    If not IsEmpty(Эл.Folder()) Then
      ВыгрузитьСправочник(СтрСправочники,Эл.Folder());
    EndIf;
    If Эл.IsFolder() Then
      AppendStringToBufferedString(СтрСправочники,"<Справочник.НоменклатураГруппа><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка><Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование>"+
        "<КодВПрограмме>"+Эл.Code+"</КодВПрограмме>");
      If not IsEmpty(Эл.Folder()) Then
        AppendStringToBufferedString(СтрСправочники,"<Группа><Ссылка>"+НайтиВнешнийКод(Эл.Folder())+"</Ссылка></Группа>");
      EndIf;
      AppendStringToBufferedString(СтрСправочники,"</КлючевыеСвойства></Справочник.НоменклатураГруппа>");
    Else
      ВыгрузитьСправочник(СтрСправочники,Эл.базЕдиница);
      AppendStringToBufferedString(СтрСправочники,"<Справочник.Номенклатура><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка><НаименованиеПолное>"+EncodeXMLString(Эл.Name)+"</НаименованиеПолное>"+
        "<КодВПрограмме>"+Эл.Code+"</КодВПрограмме><Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование>");
      If not IsEmpty(Эл.Folder()) Then
        AppendStringToBufferedString(СтрСправочники,"<Группа><Ссылка>"+НайтиВнешнийКод(Эл.Folder())+"</Ссылка></Группа>");
      EndIf;
      пТип:="Товар";
      If Эл.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара Then
        пТип:="МногооборотнаяТара";
      ElseIf Эл.ВидНоменклатуры=Enum.ВидыНоменклатуры.Услуга Then
        пТип:="Услуга";
      EndIf;
      пАлко:="";
      ФлМарочная:=0;
      If Эл.флАлкогольнаяПродукция Then
        aEl:=Ref.тмцПартииТМЦ;
        aEl.UseOrder("Code-");
        aList:=aEl.Load(2,"~(@Status=0)And(@Parent=Эл)");
        If aList.Size()>1 Then
          ФлМарочная:=Max(ФлМарочная,aList[1].флМарочныйУчет,aList[2].флМарочныйУчет);
        ElseIf aList.Size()>0 Then
          ФлМарочная:=Max(ФлМарочная,aList[1].флМарочныйУчет);
        EndIf;
        пКодАП:=Эл.ЕГАИСКодАП;
        пИмп:="<ИмпортнаяАлкогольнаяПродукция>false</ИмпортнаяАлкогольнаяПродукция>";
        If aList.Size()>0 Then
          aEl:=aList[1];
          пКодАП:=aEl.ЕГАИСКодАП;
          If aEl.флИмпортнаяПродукция Then
            пИмп:="<ИмпортнаяАлкогольнаяПродукция>false</ИмпортнаяАлкогольнаяПродукция>";
          EndIf;
        EndIf;
        пАлко:="<ДанныеАлкогольнойПродукции><АлкогольнаяПродукция>true</АлкогольнаяПродукция><ВидАлкогольнойПродукции><Код>"+пКодАП+"</Код>"+
          ?(ФлМарочная,"<ВидЛицензии>АлкогольнаяПродукция</ВидЛицензии><Маркируемый>true</Маркируемый>","<ВидЛицензии>Пиво</ВидЛицензии><Маркируемый>false</Маркируемый>")+
          "</ВидАлкогольнойПродукции>"+пИмп+"<ОбъемДАЛ>"+Round(Эл.ОбъемЛитров/10,4)+"</ОбъемДАЛ><Крепость>"+Эл.сертКрепость+"</Крепость></ДанныеАлкогольнойПродукции>"+
          ?(ФлМарочная,"<ПризнакПредметаРасчета>ПодакцизныйТовар</ПризнакПредметаРасчета>","");
      EndIf;
      пИС:="";
      If Эл.флПодлежитПрослеживаемости Then
        aNum:=спГИСМТ1С.Find(Эл.ГИСМТТоварнаяГруппа);
        If aNum>0 Then
          пИС:="<ВидПродукцииИС>"+спГИСМТ1С.GetName(aNum)+"</ВидПродукцииИС>";
        EndIf;
      EndIf;
      ФлМарочная:=Max(ФлМарочная,Эл.флПодлежитПрослеживаемости);
      AppendStringToBufferedString(СтрСправочники,"</КлючевыеСвойства><ТипНоменклатуры>"+пТип+"</ТипНоменклатуры><ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(Эл.базЕдиница)+"</Ссылка><ДанныеКлассификатора>"+
      "<Код>"+Эл.базЕдиница.Code+"</Код><Наименование>"+EncodeXMLString(Эл.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения><СтавкаНДС>"+СтавкаНДС(Эл.СтавкаНДС)+
      "</СтавкаНДС>"+пАлко+"<Весовой>"+?(Эл.флВесовойТовар,"true","false")+"</Весовой><Маркируемый>"+?(ФлМарочная,"true","false")+"</Маркируемый>"+
      ?(ФлМарочная,"<ПодакцизныйТовар>true</ПодакцизныйТовар>","<ПодакцизныйТовар>false</ПодакцизныйТовар>")+пИС+"</Справочник.Номенклатура>");
    EndIf;
  ElseIf Вид="тмцЕдиницыИзмерения" Then
    AppendStringToBufferedString(СтрСправочники,"<Справочник.ЕдиницыИзмерения><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка>"+
      "<ДанныеКлассификатора><Код>"+Эл.Code+"</Код><Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование></ДанныеКлассификатора>"+
      "</КлючевыеСвойства></Справочник.ЕдиницыИзмерения>");
  ElseIf Вид="общБанки" Then
    AppendStringToBufferedString(СтрСправочники,"<Справочник.Банки><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(Эл)+"</Ссылка><БИК>"+EncodeXMLString(Эл.БИК)+"</БИК>"+
      "<КоррСчет>"+EncodeXMLString(Эл.КоррСчет)+"</КоррСчет><Наименование>"+EncodeXMLString(Эл.Name)+"</Наименование>"+
      "</КлючевыеСвойства><Адрес>"+EncodeXMLString(Эл.Адрес)+"</Адрес><Город>"+EncodeXMLString(Эл.Местонахождение)+"</Город></Справочник.Банки>");
  ElseIf Вид="общЮридическиеЛица" Then
    пКПП:=ЮрЛицо.ИНН;
    пИНН:=TearStr(пКПП,"/");
    AppendStringToBufferedString(СтрСправочники,"<Справочник.Организации><КлючевыеСвойства><Ссылка>"+НайтиВнешнийКод(ЮрЛицо)+"</Ссылка><НаименованиеСокращенное>"+EncodeXMLString(ЮрЛицо.Name)+"</НаименованиеСокращенное>"+
    "<НаименованиеПолное>"+EncodeXMLString(ЮрЛицо.ПолнНаименование)+"</НаименованиеПолное><ИНН>"+пИНН+"</ИНН>"+?(пКПП<>"","<КПП>"+пКПП+"</КПП>")+
    "<ЮридическоеФизическоеЛицо>"+?(пКПП<>"","ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></КлючевыеСвойства><Наименование>"+EncodeXMLString(ЮрЛицо.Name)+"</Наименование></Справочник.Организации>");
  Else
    Raise "Неподдерживаемый вид справочника для выгрузки: "+Эл.DBName();
  EndIf;
EndFunction

Function ВыгрШапкаДокумента(aDoc,Ссылка)
  Exit "<КлючевыеСвойства><Ссылка>"+Ссылка+"</Ссылка><Дата>"+Дата1С(aDoc.DocDate)+"</Дата><Номер>"+aDoc.DocNum+"</Номер>"+
    пЮрЛицоСсылка+"</КлючевыеСвойства>";
EndFunction

Function ВыгрКонтрагентДокумента(Контрагент,ByRef СтрСправочники,СтрТег="Контрагент")
  ВыгрузитьСправочник(СтрСправочники,Контрагент);
  пКПП:=Контрагент.ИНН;
  пИНН:=TearStr(пКПП,"/");
  Exit "<"+СтрТег+"><Ссылка>"+НайтиВнешнийКод(Контрагент)+"</Ссылка><Наименование>"+EncodeXMLString(Контрагент.Name)+"</Наименование><НаименованиеПолное>"+EncodeXMLString(Контрагент.ПолнНаименование)+
    "</НаименованиеПолное><ИНН>"+пИНН+"</ИНН>"+?(пКПП<>"","<КПП>"+пКПП+"</КПП>")+"<ЮридическоеФизическоеЛицо>"+
    ?(Контрагент.ВидКонтрагента<>Enum.ВидыКонтрагентов.ФизЛицо,"ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></"+СтрТег+">";
EndFunction

Function ВыгрСкладДокумента(aDoc,ByRef СтрСправочники)
  If aDoc.Склад.Магазин.Selected()=0 Then
    Raise "Для склада "+aDoc.Склад+" не выбран магазин!";
  EndIf;
  ВыгрузитьСправочник(СтрСправочники,aDoc.Склад.Магазин);
  Exit "<Склад><Ссылка>"+НайтиВнешнийКод(aDoc.Склад.Магазин)+"</Ссылка><Наименование>"+EncodeXMLString(aDoc.Склад.Магазин.НазваниеМагазина)+"</Наименование><ТипСклада>Розничный</ТипСклада></Склад>";
EndFunction

//ФлТип: бит 1: без сумм НДС и прослеживаемости
Function ВыгрузитьТабличнуюЧасть(aDoc,ФлТип,ByRef СмСумма,ByRef СтрСправочники,ByRef СмСуммаНДС=0)
  СтрСтроки:="";
  aNum:=0;
  aTab:=aDoc.LineParts("Номенклатура");
  aTab.Select();
  While aTab.Next() Do
    зН:=aTab.Номенклатура;
    If _And(спН.Size()>0,not спН.Contains(зН)) Then
      Continue;
    EndIf;
    СмСумма:=Round(СмСумма+aTab.Сумма,2);
    СмСуммаНДС:=Round(СмСуммаНДС+aTab.СуммаНДС,2);
    aNum:=aNum+1;
    ВыгрузитьСправочник(СтрСправочники,зН.базЕдиница);
    ВыгрузитьСправочник(СтрСправочники,зН);
    //ВозвратнаяТара,ГотоваяПродукция,ИнвентарьИХозяйственныеПринадлежности,КомиссионныеТовары,СобственныеТовары,Топливо
    ТипНоменклатуры:="СобственныеТовары";
    If зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара Then
      ТипНоменклатуры:="ВозвратнаяТара";
    ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь Then
      ТипНоменклатуры:="ИнвентарьИХозяйственныеПринадлежности";
    ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.АрендованноеИмущество Then
      ТипНоменклатуры:="КомиссионныеТовары";
    EndIf;
    AppendStringToBufferedString(СтрСтроки,"<Строка><НомерСтрокиДокумента>"+aNum+"</НомерСтрокиДокумента><ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(зН.базЕдиница)+"</Ссылка><ДанныеКлассификатора>"+
      "<Код>"+зН.базЕдиница.Code+"</Код><Наименование>"+EncodeXMLString(зН.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения><Количество>"+aTab.Количество+"</Количество>"+
      "<Номенклатура><Ссылка>"+НайтиВнешнийКод(зН)+"</Ссылка><НаименованиеПолное>"+EncodeXMLString(зН.Name)+"</НаименованиеПолное><КодВПрограмме>"+зН.Code+"</КодВПрограмме></Номенклатура>"+
      "<Сумма>"+aTab.Сумма+"</Сумма><Цена>"+aTab.Цена+"</Цена><ТипЗапасов>"+ТипНоменклатуры+"</ТипЗапасов>");
    If ФлТип and 1=0 Then
      AppendStringToBufferedString(СтрСтроки,"<СтавкаНДС>"+СтавкаНДС(зН.СтавкаНДС)+"</СтавкаНДС><СуммаНДС>"+aTab.СуммаНДС+"</СуммаНДС><ПрослеживаемыйТовар>"+?(зН.флПодлежитПрослеживаемости,"true","false")+"</ПрослеживаемыйТовар>");
    EndIf;
    AppendStringToBufferedString(СтрСтроки,"</Строка>");
  EndDo;
  Exit СтрСтроки;
EndFunction

Function ВыгрузитьТабличнуюЧастьСодержание(aDoc,ByRef СмСумма,ByRef СтрСправочники,ByRef СмСуммаНДС=0)
  СтрСтроки:="";
  aNum:=0;
  aTab:=aDoc.LineParts("Содержание");
  aTab.Select();
  While aTab.Next() Do
    СмСумма:=Round(СмСумма+aTab.Сумма,2);
    СмСуммаНДС:=Round(СмСуммаНДС+aTab.СуммаНДС,2);
    aNum:=aNum+1;
    AppendStringToBufferedString(СтрСтроки,"<Строка><НомерСтрокиДокумента>"+aNum+"</НомерСтрокиДокумента><Содержание>"+EncodeXMLString(aTab.Содержание)+"</Содержание><Количество>"+aTab.Количество+"</Количество>"+
      "<Сумма>"+aTab.Сумма+"</Сумма><Цена>"+aTab.Цена+"</Цена>");
    AppendStringToBufferedString(СтрСтроки,"<СтавкаНДС>"+СтавкаНДС(aTab.СтавкаНДС)+"</СтавкаНДС><СуммаНДС>"+aTab.СуммаНДС+"</СуммаНДС>");
    AppendStringToBufferedString(СтрСтроки,"</Строка>");
  EndDo;
  Exit СтрСтроки;
EndFunction



Function ВыгрузитьДокументыНачальныхОстатков(ByRef СтрДокументы,ByRef СтрСправочники)
  //Документы ввода остатков (ранее даты начала работы):
  //+  Остатки задолженности подотчетных лиц -- накопитель ПодотчетныеОперации 
  //+  Остатки безналичных денежных средств -- накопитель Банк
  //+  Остатки наличных денежных средств -- накопитель Касса
  //  Остатки расчетов по кредитам и займам -- накопитель Банк
  //+  Остатки задолженности покупателей -- накопитель Взаиморасчеты
  //-  Остатки авансов покупателей -- накопитель Взаиморасчеты
  //+  Остатки задолженности перед поставщиками -- накопитель Взаиморасчеты
  //-  Остатки авансов поставщикам -- накопитель Взаиморасчеты
  //  Остатки собственных ТМЦ -- накопитель ОстаткиТМЦ
  //  [TODO] Остатки тары переданной -- накопитель Взаиморасчеты (не описаны документы работы с тарой)
  //  [TODO] Остатки тары принятой -- накопитель Взаиморасчеты (не описаны документы работы с тарой)
  //  [TODO] Остатки товаров, принятых на комиссию -- накопитель КомиссионныеТМЦ
  //  [TODO] Остатки товаров, переданных на комиссию -- накопитель КомиссионныеТМЦ
  //

  //Остатки наличных денежных средств
  If IsEmpty(Касса) Then
    спКасса:=List.Create();
  Else
    спКасса:=List.Create(Касса);
  EndIf;
  ТЗ:="Period From ДатаНачала To ДатаНачала;
  |зЮЛ:=Storage.Касса.ЮрЛицо;"+
  ?(ФлВсеДокументы,"Condition(зЮЛ=ЮрЛицо);","зКс:=Storage.Касса.Касса;Condition(зКс IN спКасса);")+
  "зСм:=BegTotals(Сумма);
  |Group зЮЛ;";
  З:=Query.Create();
  З.Execute(ТЗ);
  
  Ссылка:="КАССА_"+ДатаНачала;
  AppendStringToBufferedString(СтрДокументы,"<Документ.ОстаткиНаличныхДенежныхСредств><КлючевыеСвойства><Ссылка>"+Ссылка+"</Ссылка><Дата>"+Дата1С(ДатаНачала-1)+"</Дата><Номер>1</Номер>"+
    пЮрЛицоСсылка+"</КлючевыеСвойства><ДенежныеСредства>");
  While З.Next(1) Do
    AppendStringToBufferedString(СтрДокументы,"<Строка><Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(З.зСм,2)+"</Сумма></Строка>");
  EndDo;
  AppendStringToBufferedString(СтрДокументы,"</ДенежныеСредства></Документ.ОстаткиНаличныхДенежныхСредств>");
  
  //Остатки безналичных денежных средств
  If ФлВсеДокументы Then
    ТЗ:="Period From ДатаНачала To ДатаНачала;
    |зЮЛ:=Storage.Банк.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);
    |зСч:=Storage.Банк.БанковскийСчет;
    |зСм:=BegTotals(Сумма);
    |Group зСч;";
    З:=Query.Create();
    З.Execute(ТЗ);
    
    Ссылка:="БАНК_"+ДатаНачала;
    AppendStringToBufferedString(СтрДокументы,"<Документ.ОстаткиБезналичныхДенежныхСредств><КлючевыеСвойства><Ссылка>"+Ссылка+"</Ссылка><Дата>"+Дата1С(ДатаНачала-1)+"</Дата><Номер>1</Номер>"+
      пЮрЛицоСсылка+"</КлючевыеСвойства><ДенежныеСредства>");
    While З.Next(1) Do
      Form.StatusText("Остатки, банк: "+З.зСч);
      ВыгрузитьСправочник(СтрСправочники,З.зСч);
      AppendStringToBufferedString(СтрДокументы,"<Строка><БанковскийСчет><Ссылка>"+НайтиВнешнийКод(З.зСч)+"</Ссылка><Владелец>"+пЮрЛицоСсылка+"</Владелец><НомерСчета>"+EncodeXMLString(З.зСч.НомерСчета)+"</НомерСчета></БанковскийСчет>");
      AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
      AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(З.зСм,2)+"</Сумма></Строка>");
    EndDo;
    AppendStringToBufferedString(СтрДокументы,"</ДенежныеСредства></Документ.ОстаткиБезналичныхДенежныхСредств>");
  EndIf;
  
  //Остатки задолженности подотчетных лиц
  If ФлВсеДокументы Then
    аТип:=Enum.ТипыПодотчетныхОпераций.ПодотчетнаяОперация;
    ТЗ:="Period From ДатаНачала To ДатаНачала;
    |зЮЛ:=Storage.ПодотчетныеОперации.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);
    |зТип:=Storage.ПодотчетныеОперации.ТипОперации;Condition(зТип=аТип);
    |зК:=Storage.ПодотчетныеОперации.ПодотчетноеЛицо;
    |зСм:=BegTotals(Сумма);
    |Group зК;";
    З:=Query.Create();
    З.Execute(ТЗ);
  
    Ссылка:="ПОДОТ_"+ДатаНачала;
    AppendStringToBufferedString(СтрДокументы,"<Документ.ОстаткиЗадолженностиПодотчетныхЛиц><КлючевыеСвойства><Ссылка>"+Ссылка+"</Ссылка><Дата>"+Дата1С(ДатаНачала-1)+"</Дата><Номер>1</Номер>"+
      пЮрЛицоСсылка+"</КлючевыеСвойства><Расчеты>");
    While З.Next(1) Do
      Form.StatusText("Остатки, подотчет: "+З.зК);
      ВыгрузитьСправочник(СтрСправочники,З.зК,1);
      AppendStringToBufferedString(СтрДокументы,"<Строка><ФизическоеЛицо><Ссылка>"+НайтиВнешнийКод(З.зК)+"</Ссылка><ФИО>"+EncodeXMLString(З.зК.ПолнНаименование)+"</ФИО></ФизическоеЛицо>");
      AppendStringToBufferedString(СтрДокументы,"<ВалютаВзаиморасчетов><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаВзаиморасчетов>");
      AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(З.зСм,2)+"</Сумма></Строка>");
    EndDo;
    AppendStringToBufferedString(СтрДокументы,"</Расчеты></Документ.ОстаткиЗадолженностиПодотчетныхЛиц>");
  EndIf;
  
  //Взаиморасчеты
  If ФлВсеДокументы Then
    ТЗ:="Period From ДатаНачала To ДатаНачала;
    |зЮЛ:=Storage.Взаиморасчеты.Договор.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);
    |зВД:=Storage.Взаиморасчеты.ВидДолга;
    |зТара:=Storage.Взаиморасчеты.Тара;Condition(IsEmpty(зТара));
    |зК:=Storage.Взаиморасчеты.Договор.@Parent;
    |зСм:=BegTotals(Сумма);
    |Group зВД,зК;";
    З:=Query.Create();
    З.Execute(ТЗ);
  
    While З.Next(1) Do
      If З.зВД=Enum.ПокупательПоставщик.Покупатель Then
        Ссылка:="ВЗАИМПК_"+ДатаНачала;
        AppendStringToBufferedString(СтрДокументы,"<Документ.ОстаткиРасчетовСПокупателямиДолги><КлючевыеСвойства><Ссылка>"+Ссылка+"</Ссылка><Дата>"+Дата1С(ДатаНачала-1)+"</Дата><Номер>1</Номер>"+
          пЮрЛицоСсылка+"</КлючевыеСвойства><Расчеты>");
        While З.Next(2) Do
          Form.StatusText("Остатки, взаиморасчеты: "+З.зК);
          ВыгрузитьСправочник(СтрСправочники,З.зК);
          AppendStringToBufferedString(СтрДокументы,"<Строка><Контрагент><Ссылка>"+НайтиВнешнийКод(З.зК)+"</Ссылка><ЮридическоеФизическоеЛицо>"+
            ?(З.зК.ВидКонтрагента<>Enum.ВидыКонтрагентов.ФизЛицо,"ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></Контрагент>");
          AppendStringToBufferedString(СтрДокументы,"<ВалютаВзаиморасчетов><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаВзаиморасчетов>");
          AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(З.зСм,2)+"</Сумма></Строка>");
        EndDo;
        AppendStringToBufferedString(СтрДокументы,"</Расчеты></Документ.ОстаткиРасчетовСПокупателямиДолги>");
      ElseIf З.зВД=Enum.ПокупательПоставщик.Поставщик Then
        Ссылка:="ВЗАИМПС_"+ДатаНачала;
        AppendStringToBufferedString(СтрДокументы,"<Документ.ОстаткиРасчетовСПоставщикамиДолги><КлючевыеСвойства><Ссылка>"+Ссылка+"</Ссылка><Дата>"+Дата1С(ДатаНачала-1)+"</Дата><Номер>1</Номер>"+
          пЮрЛицоСсылка+"</КлючевыеСвойства><Расчеты>");
        While З.Next(2) Do
          Form.StatusText("Остатки, взаиморасчеты: "+З.зК);
          ВыгрузитьСправочник(СтрСправочники,З.зК);
          AppendStringToBufferedString(СтрДокументы,"<Строка><Контрагент><Ссылка>"+НайтиВнешнийКод(З.зК)+"</Ссылка><ЮридическоеФизическоеЛицо>"+
            ?(З.зК.ВидКонтрагента<>Enum.ВидыКонтрагентов.ФизЛицо,"ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></Контрагент>");
          AppendStringToBufferedString(СтрДокументы,"<ВалютаВзаиморасчетов><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></ВалютаВзаиморасчетов>");
          AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(З.зСм,2)+"</Сумма></Строка>");
        EndDo;
        AppendStringToBufferedString(СтрДокументы,"</Расчеты></Документ.ОстаткиРасчетовСПоставщикамиДолги>");
      EndIf;
   EndDo;
  EndIf;
  
  //Остатки ТМЦ
  ТЗ:="Period From НачДата To КонДата;
  |зМг:=Storage.ОстаткиТМЦ.Склад.Магазин;"+
  ?(ФлВсеДокументы,"зЮЛ:=Storage.ОстаткиТМЦ.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);","Condition(зМг=Магазин);")+
  "зН:=Storage.ОстаткиТМЦ.Номенклатура;
  |зСм:=BegTotals(Количество);
  |Condition(зН IN спН);
  |Group зМг,зН;";
  З:=Query.Create();
  З.Execute(ТЗ);

  While З.Next(1) Do
    зМг:=З.зМг;
    If IsEmpty(зМг) Then
      MessageVisual("Выгрузка остатков для складов без указания магазина не будет производиться!","!");
      Continue;
    EndIf;
    ВыгрузитьСправочник(СтрСправочники,зМг);
    Ссылка:="ОСТ_"+зМг.Code+"_"+ДатаНачала;
    AppendStringToBufferedString(СтрДокументы,"<Документ.ОстаткиСобственныхТМЦ><КлючевыеСвойства><Ссылка>"+Ссылка+"</Ссылка><Дата>"+Дата1С(ДатаНачала-1)+"</Дата><Номер>1</Номер>"+
      пЮрЛицоСсылка+"</КлючевыеСвойства><Склад><Ссылка>"+НайтиВнешнийКод(зМг)+"</Ссылка><Наименование>"+EncodeXMLString(зМг.НазваниеМагазина)+"</Наименование><ТипСклада>Розничный</ТипСклада></Склад><ТМЦ>");
    While З.Next(2) Do
      Form.StatusText("Остатки, остатки ТМЦ: "+З.ResultTable.CurLine+" из "+З.ResultTable.Size());
      зН:=З.зН;
      ВыгрузитьСправочник(СтрСправочники,зН.базЕдиница);
      ВыгрузитьСправочник(СтрСправочники,зН,1);
      //ВозвратнаяТара,ГотоваяПродукция,ИнвентарьИХозяйственныеПринадлежности,КомиссионныеТовары,СобственныеТовары,Топливо
      ТипНоменклатуры:="СобственныеТовары";
      If зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара Then
        ТипНоменклатуры:="ВозвратнаяТара";
      ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь Then
        ТипНоменклатуры:="ИнвентарьИХозяйственныеПринадлежности";
      ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.АрендованноеИмущество Then
        ТипНоменклатуры:="КомиссионныеТовары";
      EndIf;
      зСм0:=глПолучитьОсновнуюЦену(зН,зМг.Склад,ДатаНачала-1,1)*З.зСм;
      зСмБНДС:=Round(зСм0,2);
      зСмНДС:=0;
      If ЮрЛицо.УчитыватьНДС Then
        зСмБНДС:=Round(зСм0*глКоэффНДС(зН.СтавкаНДС),2);
        зСмНДС:=Round(зСм0-зСмНДС,2);
      EndIf;
      AppendStringToBufferedString(СтрДокументы,"<Строка><ВидЗапасов>"+ТипНоменклатуры+"</ВидЗапасов><ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(зН.базЕдиница)+"</Ссылка><ДанныеКлассификатора>"+
        "<Код>"+зН.базЕдиница.Code+"</Код><Наименование>"+EncodeXMLString(зН.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения>"+
        "<Номенклатура><Ссылка>"+НайтиВнешнийКод(зН)+"</Ссылка><НаименованиеПолное>"+EncodeXMLString(зН.Name)+"</НаименованиеПолное><КодВПрограмме>"+зН.Code+"</КодВПрограмме></Номенклатура>"+
        "<НомерГТД>"+EncodeXMLString(зН.сертНомерГТД)+"</НомерГТД><СтавкаНДС>"+СтавкаНДС(зН.СтавкаНДС)+"</СтавкаНДС><СтранаПроисхождения><Код>"+
        зН.сертСтранаПроисхождения.Code+"</Код><Наименование>"+EncodeXMLString(зН.сертСтранаПроисхождения)+"</Наименование></СтранаПроисхождения><СуммаБезНДС>"+зСмБНДС+"</СуммаБезНДС><СуммаНДС>"+зСмНДС+"</СуммаНДС>");
      AppendStringToBufferedString(СтрДокументы,"<Количество>"+Round(З.зСм,6)+"</Количество></Строка>");
    EndDo;
    AppendStringToBufferedString(СтрДокументы,"</ТМЦ></Документ.ОстаткиСобственныхТМЦ>");
  EndDo;
  
  Exit 1;
EndFunction

Function ВыгрузитьДокументВзаиморасчетов(aDoc,ByRef СтрДокументы,ByRef СтрСправочники,ФлПлюс)
  //Выгружаемые документы:
  //  [В] Документ "Корректировка долга" -- Корректировка долга, любой невыгружаемый документ, влияющий на взаиморасчеты

  Вид:=aDoc.DBName();
  Ссылка:=Вид+"_"+aDoc.DocNum+"_"+GetYear(aDoc.DocDate);
  If Вид="РеализацияПрочее" Then
    СмСумма:=0;
    СмСуммаНДС:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧастьСодержание(aDoc,СмСумма,СтрСправочники,СмСуммаНДС);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ.РеализацияТоваровУслуг>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидОперации>РеализацияКлиенту</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>"+ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС><Услуги>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"</Услуги></Документ.РеализацияТоваровУслуг>");
    
    If aDoc.ЮрЛицо.УчитыватьНДС Then
      AppendStringToBufferedString(СтрДокументы,"<Документ.СчетФактураВыданный>"+ВыгрШапкаДокумента(aDoc,"СФ_"+Ссылка));
      AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидСчетаФактуры>НаРеализацию</ВидСчетаФактуры>");
      AppendStringToBufferedString(СтрДокументы,"<Выставлен>true</Выставлен>"+ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники));
      AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаНДС>"+Round(СмСуммаНДС,2)+"</СуммаНДС><СуммаВключаетНДС>true</СуммаВключаетНДС></Документ.СчетФактураВыданный>");
    EndIf;
  ElseIf Вид="ПоступлениеПрочее" Then
    СмСумма:=0;
    СмСуммаНДС:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧастьСодержание(aDoc,СмСумма,СтрСправочники,СмСуммаНДС);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    СтрВходящий:="";
    If _And(aDoc.НомерДокВходящий<>"",not IsEmpty(aDoc.ДатаДокВходящий)) Then
      СтрВходящий:="<НомерВходящегоДокумента>"+EncodeXMLString(aDoc.НомерДокВходящий)+"</НомерВходящегоДокумента><ДатаВходящегоДокумента>"+Дата1С(aDoc.ДатаДокВходящий)+"</ДатаВходящегоДокумента>";
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ.ПоступлениеТоваровУслуг>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,СтрВходящий+"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидОперации>ПокупкаУПоставщика</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>"+ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,ВыгрСкладДокумента(aDoc,СтрСправочники)+"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС><Услуги>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"</Услуги></Документ.ПоступлениеТоваровУслуг>");
    
    If aDoc.ЮрЛицо.УчитыватьНДС Then
      If _And(aDoc.НомерДокВходящийСФ<>"",not IsEmpty(aDoc.ДатаДокВходящийСФ)) Then
        СтрВходящий:="<НомерВходящегоДокумента>"+EncodeXMLString(aDoc.НомерДокВходящийСФ)+"</НомерВходящегоДокумента><ДатаВходящегоДокумента>"+Дата1С(aDoc.ДатаДокВходящийСФ)+"</ДатаВходящегоДокумента>";
      EndIf;
      If СтрВходящий<>"" Then
        AppendStringToBufferedString(СтрДокументы,"<Документ.СчетФактураПолученный>"+ВыгрШапкаДокумента(aDoc,"СФ_"+Ссылка));
        AppendStringToBufferedString(СтрДокументы,СтрВходящий+"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидСчетаФактуры>НаПоступление</ВидСчетаФактуры>");
        AppendStringToBufferedString(СтрДокументы,"<ДатаПолучения>"+Дата1С(aDoc.DocDate)+"</ДатаПолучения>"+ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники));
        AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаНДС>"+Round(СмСуммаНДС,2)+"</СуммаНДС><СуммаВключаетНДС>true</СуммаВключаетНДС></Документ.СчетФактураПолученный>");
      EndIf;
    EndIf;
  Else
    Сумма:=0;
    aTab:=aDoc.LoadStorage("Взаиморасчеты");
    aTab.Select();
    While aTab.Next() Do
      Сумма:=Round(Сумма+aTab.Сумма*?(aTab._Expense=0,1,-1),2);
    EndDo;
    зК:=aTab.Договор.Parent();
    
    AppendStringToBufferedString(СтрДокументы,"<Документ.КорректировкаДолга>"+ВыгрШапкаДокумента(aDoc,Ссылка)+ВыгрКонтрагентДокумента(зК,СтрСправочники,?(Сумма>0,"КонтрагентДебитор","КонтрагентКредитор")));
    AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий></Комментарий><ВидОперации>ПроведениеВзаимозачета</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<"+?(Сумма>0,"СуммаДебиторскойЗадолженности","СуммаКредиторскойЗадолженности")+">"+Round(aTab.Сумма,2)+
      "</"+?(Сумма>0,"СуммаДебиторскойЗадолженности","СуммаКредиторскойЗадолженности")+"></Документ.КорректировкаДолга>");
  EndIf;
  
  Exit 1;
EndFunction

Function ВыгрузитьДокументПодотчета(aDoc,ByRef СтрДокументы,ByRef СтрСправочники,ФлПлюс)
  //Выгружаемые документы:
  //  [Д] Документ "Авансовый отчет" -- Подотчетная операция
  //коПодотчетнаяОперация.Прочее -- списание подотчета
  //коПодотчетнаяОперация.Оплата -- списание подотчета + корректировка долга перед контрагентами
  //Документ.АвансовыйОтчет
  
  Вид:=aDoc.DBName();
  Ссылка:=Вид+"_"+aDoc.DocNum+"_"+GetYear(aDoc.DocDate);
  If Вид="ПодотчетнаяОперация" Then
    ВыгрузитьСправочник(СтрСправочники,aDoc.ПодотчетноеЛицо,1);
    СтпДоп:="<Сотрудник><Ссылка>"+НайтиВнешнийКод(aDoc.ПодотчетноеЛицо)+"</Ссылка><ФИО>"+EncodeXMLString(aDoc.ПодотчетноеЛицо.ПолнНаименование)+"</ФИО></Сотрудник><ВидРасчетов>Подотчет</ВидРасчетов>";
    AppendStringToBufferedString(СтрДокументы,"<Документ.АвансовыйОтчет>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС></Документ.АвансовыйОтчет>");
    If aDoc.КодОперации=Enum.коПодотчетнаяОперация.Оплата Then
      //Увеличение задолженности контрагентов
      aTab:=aDoc.LineParts("Содержание");
      aTab.Select();
      While aTab.Next() Do
        //TODO: При удалении строк документа, в ЦБ могут остаться неверные документы
        //TODO: Документы не привязаны к АвансовыйОтчет
        Ссылка:=Вид+"_"+aTab.CurLine+"_"+aDoc.DocNum+"_"+GetYear(aDoc.DocDate);
        AppendStringToBufferedString(СтрДокументы,"<Документ.КорректировкаДолга>"+ВыгрШапкаДокумента(aDoc,Ссылка)+ВыгрКонтрагентДокумента(aTab.Контрагент,СтрСправочники,"КонтрагентДебитор"));
        AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
        AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aTab.Содержание)+"</Комментарий><ВидОперации>ПроведениеВзаимозачета</ВидОперации>");
        AppendStringToBufferedString(СтрДокументы,"<СуммаДебиторскойЗадолженности>"+Round(aTab.Сумма,2)+"</СуммаДебиторскойЗадолженности></Документ.КорректировкаДолга>");
      EndDo;
    EndIf;
  Else //Другие документы
    aTab:=aDoc.LoadStorage("ПодотчетныеОперации");
    aTab.Select();
    While aTab.Next() Do
      См:=aTab.Сумма*?(aTab._Expense=0,1,-1);
      If См>0 Then
        MessageVisual("Неизвестный документ увеличения задолженности по подотчету "+aDoc+"! Выгрузка остановлена!","!");
        Exit 0;
      EndIf;
      If См=0 Then
        Continue;
      EndIf;
      См:=Abs(См);
      //TODO: При удалении строк документа, в ЦБ могут остаться неверные документы
      Ссылка:=Вид+"_"+aTab.CurLine+"_"+aDoc.DocNum+"_"+GetYear(aDoc.DocDate);
      ВыгрузитьСправочник(СтрСправочники,aTab.ПодотчетноеЛицо,1);
      СтпДоп:="<Сотрудник><Ссылка>"+НайтиВнешнийКод(aTab.ПодотчетноеЛицо)+"</Ссылка><ФИО>"+EncodeXMLString(aTab.ПодотчетноеЛицо.ПолнНаименование)+"</ФИО></Сотрудник><ВидРасчетов>Подотчет</ВидРасчетов>";
      AppendStringToBufferedString(СтрДокументы,"<Документ.АвансовыйОтчет>"+ВыгрШапкаДокумента(aDoc,Ссылка));
      AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
      AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
      AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(См,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС></Документ.АвансовыйОтчет>");
    EndDo;
  EndIf;
  
  Exit 1;
EndFunction  

Function ВыгрузитьДокументБанка(aDoc,ByRef СтрДокументы,ByRef СтрСправочники,ФлПлюс)
  //Выгружаемые документы:
  //  [В,Д] Поступление безналичных денежных средств -- Выписка банка приход
  //    ПБДСРасчетыСКонтрагентами,ПБДСРасчетыССотрудниками,ПБДСКонвертацияВалюты,ПБДСПрочиеДоходы,ПБДСПрочееПоступление
  //  [В,Д] Списание безналичных денежных средств -- Выписка банка расход
  //    СБДСРасчетыСКонтрагентами,СБДСРасчетыССотрудниками,СБДСКонвертацияВалюты,СБДСПереводНаДругойСчет,СБДСПеречислениеЗаработнойПлаты,СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета,СБДСПрочееСписание
  
  Вид:=aDoc.DBName();
  Ссылка:=Вид+"_"+aDoc.DocNum+"_"+GetYear(aDoc.DocDate);
  If Вид="ВыпискаБанкаПриход" Then
    //Виды расчетов: КредитыИЗаймы,Прочее,СПокупателем,СПоставщиком
    СтрДоп:="";
    If aDoc.КодОперации=Enum.коВыпискаБанкаПриход.ОплатаПокупателя Then
      ДокВид:="ПБДСРасчетыСКонтрагентами";
      СтрДоп:=ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники)+"<ВидРасчетов>СПокупателем</ВидРасчетов>";
    ElseIf (aDoc.КодОперации=Enum.коВыпискаБанкаПриход.ВозвратОтПоставщика)or(aDoc.КодОперации=Enum.коВыпискаБанкаПриход.ОплатаУслуг) Then
      ДокВид:="ПБДСРасчетыСКонтрагентами";
      СтрДоп:=ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники)+"<ВидРасчетов>"+?(aDoc.КодОперации=Enum.коВыпискаБанкаПриход.ОплатаУслуг,"СПокупателем","СПоставщиком")+"</ВидРасчетов>";
    Else //Enum.коВыпискаБанкаПриход.Прочее,Enum.коВыпискаБанкаПриход.Инкассация
      ДокВид:="ПБДСПрочееПоступление";
    EndIf;
    ВыгрузитьСправочник(СтрСправочники,aDoc.БанковскийСчет);
    AppendStringToBufferedString(СтрДокументы,"<Документ."+ДокВид+">"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,"<БанковскийСчетОрганизации><Ссылка>"+НайтиВнешнийКод(aDoc.БанковскийСчет)+"</Ссылка><Владелец>"+пЮрЛицоСсылка+"</Владелец><НомерСчета>"+EncodeXMLString(aDoc.БанковскийСчет.НомерСчета)+"</НомерСчета></БанковскийСчетОрганизации>");
    AppendStringToBufferedString(СтрДокументы,СтрДоп+"<Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><ДатаВыписки>"+Дата1С(aDoc.DocDate)+"</ДатаВыписки></Документ."+ДокВид+">");
  ElseIf Вид="ВыпискаБанкаРасход" Then
    СтрДоп:="";
    If aDoc.КодОперации=Enum.коВыпискаБанкаРасход.ВозвратПокупателю Then
      ДокВид:="СБДСРасчетыСКонтрагентами";
      СтрДоп:=ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники)+"<ВидРасчетов>СПокупателем</ВидРасчетов>";
    ElseIf (aDoc.КодОперации=Enum.коВыпискаБанкаРасход.ОплатаПоставщику)or(aDoc.КодОперации=Enum.коВыпискаБанкаРасход.ОплатаУслуг) Then
      ДокВид:="СБДСРасчетыСКонтрагентами";
      СтрДоп:=ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники)+"<ВидРасчетов>СПоставщиком</ВидРасчетов>";
    Else //Enum.коВыпискаБанкаРасход.Прочее,Enum.коВыпискаБанкаРасход.Инкассация
      ДокВид:="СБДСПрочееСписание";
    EndIf;
    ВыгрузитьСправочник(СтрСправочники,aDoc.БанковскийСчет);
    AppendStringToBufferedString(СтрДокументы,"<Документ."+ДокВид+">"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,"<БанковскийСчетОрганизации><Ссылка>"+НайтиВнешнийКод(aDoc.БанковскийСчет)+"</Ссылка><Владелец>"+пЮрЛицоСсылка+"</Владелец><НомерСчета>"+EncodeXMLString(aDoc.БанковскийСчет.НомерСчета)+"</НомерСчета></БанковскийСчетОрганизации>");
    AppendStringToBufferedString(СтрДокументы,СтрДоп+"<Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><ДатаВыписки>"+Дата1С(aDoc.DocDate)+"</ДатаВыписки></Документ."+ДокВид+">");
  Else //Другие банковские документы
    If ФлПлюс Then
      ДокВид:="ПБДСПрочееПоступление";
    Else
      ДокВид:="СБДСПрочееСписание";
    EndIf;
    ВыгрузитьСправочник(СтрСправочники,aDoc.БанковскийСчет);
    AppendStringToBufferedString(СтрДокументы,"<Документ."+ДокВид+">"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,"<БанковскийСчетОрганизации><Ссылка>"+НайтиВнешнийКод(aDoc.БанковскийСчет)+"</Ссылка><Владелец>"+пЮрЛицоСсылка+"</Владелец><НомерСчета>"+EncodeXMLString(aDoc.БанковскийСчет.НомерСчета)+"</НомерСчета></БанковскийСчетОрганизации>");
    AppendStringToBufferedString(СтрДокументы,СтрДоп+"<Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма><ДатаВыписки>"+Дата1С(aDoc.DocDate)+"</ДатаВыписки></Документ."+ДокВид+">");
  EndIf;
  
  Exit 1;  
EndFunction

Function ВыгрузитьДокументКассы(aDoc,ByRef СтрДокументы,ByRef СтрСправочники,ФлПлюс)
  //Выгружаемые документы:
  //  [В,Д] Поступление наличных денежных средств -- ПКО
  //    ПКОРасчетыСКонтрагентами,ПКОРасчетыССотрудниками,ПКОКонвертацияВалюты,ПКОПолучениеНаличныхВБанке,ПКОРозничнаяВыручка,ПКОВнутренняяПередача,ПКОПрочееПоступление,ПКОПрочиеДоходы
  //  [В,Д] Выплата наличных денежных средств -- РКО
  //    РКОРасчетыСКонтрагентами,РКОРасчетыССотрудниками,РКОКонвертацияВалюты,РКОНаБанковскийСчет,РКОВнутренняяПередача,РКОПрочаяВыдача,РКОПрочийРасход

  Вид:=aDoc.DBName();
  Ссылка:=Вид+"_"+aDoc.DocNum+"_"+GetYear(aDoc.DocDate);
  If Вид="ПКО" Then
    //Виды расчетов: КредитыИЗаймы,Прочее,СПокупателем,СПоставщиком
    СтрДоп:="";
    If aDoc.КодОперации=Enum.коПКО.ОплатаПокупателя Then
      ДокВид:=?(aDoc.Контрагент.фоРозничныйПокупатель,"ПКОРозничнаяВыручка","ПКОРасчетыСКонтрагентами");
      СтрДоп:=?(aDoc.Контрагент.фоРозничныйПокупатель,"<ВыручкаНТТ>true</ВыручкаНТТ>","")+ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники)+"<ВидРасчетов>СПокупателем</ВидРасчетов>";
    ElseIf (aDoc.КодОперации=Enum.коПКО.ВозвратОтПоставщика)or(aDoc.КодОперации=Enum.коПКО.ОплатаУслуг) Then
      ДокВид:="ПКОРасчетыСКонтрагентами";
      СтрДоп:=ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники)+"<ВидРасчетов>"+?(aDoc.КодОперации=Enum.коПКО.ОплатаУслуг,"СПокупателем","СПоставщиком")+"</ВидРасчетов>";
    ElseIf aDoc.КодОперации=Enum.коПКО.ВозвратОтПодотчетника Then
      ДокВид:="ПКОРасчетыССотрудниками";
      ВыгрузитьСправочник(СтрСправочники,aDoc.ПодотчетноеЛицо,1);
      СтпДоп:="<Сотрудник><Ссылка>"+НайтиВнешнийКод(aDoc.ПодотчетноеЛицо)+"</Ссылка><ФИО>"+EncodeXMLString(aDoc.ПодотчетноеЛицо.ПолнНаименование)+"</ФИО></Сотрудник><ВидРасчетов>Подотчет</ВидРасчетов>";
    ElseIf aDoc.КодОперации=Enum.коПКО.Инкассация Then
      ДокВид:="ПКОПолучениеНаличныхВБанке";
      ВыгрузитьСправочник(СтрСправочники,aDoc.БанковскийСчет);
      СтпДоп:="<БанковскийСчет><Ссылка>"+НайтиВнешнийКод(aDoc.БанковскийСчет)+"</Ссылка><Владелец>"+пЮрЛицоСсылка+"</Владелец><НомерСчета>"+EncodeXMLString(aDoc.БанковскийСчет.НомерСчета)+"</НомерСчета></БанковскийСчет>";
    Else //Enum.коПКО.Прочее,Enum.коПКО.ПолучениеКредита
      ДокВид:="ПКОПрочееПоступление";
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ."+ДокВид+">"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,СтрДоп+"<Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма></Документ."+ДокВид+">");
  ElseIf Вид="РКО" Then
    СтрДоп:="";
    If aDoc.КодОперации=Enum.коРКО.ВозвратПокупателю Then
      ДокВид:="РКОРасчетыСКонтрагентами";
      СтрДоп:=ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники)+"<ВидРасчетов>СПокупателем</ВидРасчетов>";
    ElseIf (aDoc.КодОперации=Enum.коРКО.ОплатаПоставщику)or(aDoc.КодОперации=Enum.коРКО.ОплатаУслуг) Then
      ДокВид:="РКОРасчетыСКонтрагентами";
      СтрДоп:=ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники)+"<ВидРасчетов>СПоставщиком</ВидРасчетов>";
    ElseIf aDoc.КодОперации=Enum.коРКО.ВыдачаПодотчет Then
      ДокВид:="РКОРасчетыССотрудниками";
      ВыгрузитьСправочник(СтрСправочники,aDoc.ПодотчетноеЛицо,1);
      СтпДоп:="<Сотрудник><Ссылка>"+НайтиВнешнийКод(aDoc.ПодотчетноеЛицо)+"</Ссылка><ФИО>"+EncodeXMLString(aDoc.ПодотчетноеЛицо.ПолнНаименование)+"</ФИО></Сотрудник><ВидРасчетов>Подотчет</ВидРасчетов>";
    ElseIf aDoc.КодОперации=Enum.коРКО.Инкассация Then
      ДокВид:="РКОНаБанковскийСчет";
      ВыгрузитьСправочник(СтрСправочники,aDoc.БанковскийСчет);
      СтпДоп:="<БанковскийСчет><Ссылка>"+НайтиВнешнийКод(aDoc.БанковскийСчет)+"</Ссылка><Владелец>"+пЮрЛицоСсылка+"</Владелец><НомерСчета>"+EncodeXMLString(aDoc.БанковскийСчет.НомерСчета)+"</НомерСчета></БанковскийСчет>";
    Else //Enum.коРКО.Прочее,Enum.коРКО.ВозвратКредита
      ДокВид:="РКОПрочаяВыдача";
    EndIf;
    
    AppendStringToBufferedString(СтрДокументы,"<Документ."+ДокВид+">"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,СтрДоп+"<Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма></Документ."+ДокВид+">");
  Else //Другие кассовые документы
    If ФлПлюс Then
      ДокВид:="ПКОПрочееПоступление";
    Else
      ДокВид:="РКОПрочаяВыдача";
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ."+ДокВид+">"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,СтрДоп+"<Сумма>"+Round(aDoc.СуммаВзаиморасчетов,2)+"</Сумма></Документ."+ДокВид+">");
  EndIf;
  
  Exit 1;
EndFunction


Function ВыгрузитьДокументОстатков(aDoc,ByRef СтрДокументы,ByRef СтрСправочники,ФлПлюс)
  //Выгружаемые документы:
  //+  [О] Документ "Реализация товаров и услуг" -- Реализация (в т.ч. розничная)
  //+  [О] Документ "Поступление товаров и услуг" -- Поступление
  //+  [О] Документ "Возврат товаров от покупателя" -- Возврат от покупателя (в т.ч. розничный)
  //+  [О] Документ "Возврат товаров поставщику" -- Возврат поставщику
  //+  [О,В] Документ "Счет-фактура выданный" - для юр. лиц с НДС, любой документ
  //+  [О,В] Документ "Счет-фактура полученный" - для юр. лиц с НДС, любой документ
  //  [TODO] Документ "Реализация подарочных сертификатов"
  //  [TODO] Документ "Возврат подарочных сертификатов"
  //  [TODO] Документ "Аннулирование подарочных сертификатов"
  //+  [О] Документ "Оприходование товаров" -- Регистрация ТМЦ, любой невыгружаемый документ, влияющий на остатки на складах
  //+  [О] Документ "Списание товаров" -- Регистрация ТМЦ, любой невыгружаемый документ, влияющий на остатки на складах
  //+  [О] Документ "Перемещение товаров" -- Регистрация ТМЦ
  //+  [О] Документ "Сборка товаров" -- Комплектация товара
  //  Документ "Передача материалов в эксплуатацию" -- Регистрация ОС
  //  Документ "Возврат материалов из эксплуатации" -- Регистрация ОС
  //+  [В,Д] Поступление безналичных денежных средств -- Выписка банка приход
  //+  [В,Д] Списание безналичных денежных средств -- Выписка банка расход
  //+  [В,Д] Поступление наличных денежных средств -- ПКО
  //+  [В,Д] Выплата наличных денежных средств -- РКО
  //+  [В] Документ "Корректировка долга" -- Корректировка долга, любой невыгружаемый документ, влияющий на взаиморасчеты
  //+  [Д] Документ "Авансовый отчет" -- Подотчетная операция
  //  [???] Документ "Установка цен номенклатуры" -- TODO -- выгружать изменение цен за период?

  Вид:=aDoc.DBName();
  Ссылка:=Вид+"_"+aDoc.DocNum+"_"+GetYear(aDoc.DocDate);
  If Вид="Реализация" Then
    //ВидОперации: ОтгрузкаБезПереходаПравСобственности_Реализовано, ПередачаНаКомиссию, РеализацияКлиенту
    СмСумма:=0;
    СмСуммаНДС:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧасть(aDoc,0,СмСумма,СтрСправочники,СмСуммаНДС);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ.РеализацияТоваровУслуг>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидОперации>РеализацияКлиенту</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>"+ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,ВыгрСкладДокумента(aDoc,СтрСправочники)+"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС><Товары>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"</Товары></Документ.РеализацияТоваровУслуг>");
    
    If aDoc.ЮрЛицо.УчитыватьНДС Then
      AppendStringToBufferedString(СтрДокументы,"<Документ.СчетФактураВыданный>"+ВыгрШапкаДокумента(aDoc,"СФ_"+Ссылка));
      AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидСчетаФактуры>НаРеализацию</ВидСчетаФактуры>");
      AppendStringToBufferedString(СтрДокументы,"<Выставлен>true</Выставлен>"+ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники));
      AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаНДС>"+Round(СмСуммаНДС,2)+"</СуммаНДС><СуммаВключаетНДС>true</СуммаВключаетНДС></Документ.СчетФактураВыданный>");
    EndIf;
  ElseIf Вид="ВозвратОтПокупателя" Then
    //ВидОперации: ВозвратОтКлиента, ВозвратОтКомиссионера, ВозвратОтРозничногоПокупателя
    СмСумма:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧасть(aDoc,0,СмСумма,СтрСправочники);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    Ссылка2:="";
    If _And(not IsEmpty(aDoc.ДокОснование),aDoc.ДокОснование.DBName()="Реализация",BegOfDay(aDoc.ДокОснование.DocDate)>=ДатаНачала,aDoc.ДокОснование.Status()>1) Then
      Ссылка2:="<ДокументРеализации><Ссылка>"+aDoc.ДокОснование.DBName()+"_"+aDoc.ДокОснование.DocNum+"_"+GetYear(aDoc.ДокОснование.DocDate)+"</Ссылка></ДокументРеализации>";
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ.ВозвратТоваровОтПокупателя>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,Ссылка2+"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидОперации>ВозвратОтКлиента</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>"+ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,ВыгрСкладДокумента(aDoc,СтрСправочники)+"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС><Товары>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"</Товары></Документ.ВозвратТоваровОтПокупателя>");
  ElseIf Вид="ВозвратПоставщику" Then
    //ВидОперации: ВозвратКомитенту, ВозвратПоставщику
    СмСумма:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧасть(aDoc,0,СмСумма,СтрСправочники);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    Ссылка2:="";
    If _And(not IsEmpty(aDoc.ДокОснование),aDoc.ДокОснование.DBName()="ПоступлениеТМЦ",BegOfDay(aDoc.ДокОснование.DocDate)>=ДатаНачала,aDoc.ДокОснование.Status()>1) Then
      Ссылка2:="<ДокументПоступления><Ссылка>"+aDoc.ДокОснование.DBName()+"_"+aDoc.ДокОснование.DocNum+"_"+GetYear(aDoc.ДокОснование.DocDate)+"</Ссылка></ДокументПоступления>";
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ.ВозвратТоваровПоставщику>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,Ссылка2+"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидОперации>ВозвратПоставщику</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>"+ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,ВыгрСкладДокумента(aDoc,СтрСправочники)+"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС><Товары>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"</Товары></Документ.ВозвратТоваровПоставщику>");
  ElseIf Вид="ПоступлениеТМЦ" Then
    //ВидОперации: ЗакупкаПоИмпорту, ПокупкаУПоставщика, ПриемНаКомиссию
    СмСумма:=0;
    СмСуммаНДС:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧасть(aDoc,0,СмСумма,СтрСправочники,СмСуммаНДС);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    СтрВходящий:="";
    If _And(aDoc.НомерДокВходящий<>"",not IsEmpty(aDoc.ДатаДокВходящий)) Then
      СтрВходящий:="<НомерВходящегоДокумента>"+EncodeXMLString(aDoc.НомерДокВходящий)+"</НомерВходящегоДокумента><ДатаВходящегоДокумента>"+Дата1С(aDoc.ДатаДокВходящий)+"</ДатаВходящегоДокумента>";
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ.ПоступлениеТоваровУслуг>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,СтрВходящий+"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидОперации>ПокупкаУПоставщика</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>"+ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники));
    AppendStringToBufferedString(СтрДокументы,ВыгрСкладДокумента(aDoc,СтрСправочники)+"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС><Товары>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"</Товары></Документ.ПоступлениеТоваровУслуг>");
    
    If aDoc.ЮрЛицо.УчитыватьНДС Then
      If _And(aDoc.НомерДокВходящийСФ<>"",not IsEmpty(aDoc.ДатаДокВходящийСФ)) Then
        СтрВходящий:="<НомерВходящегоДокумента>"+EncodeXMLString(aDoc.НомерДокВходящийСФ)+"</НомерВходящегоДокумента><ДатаВходящегоДокумента>"+Дата1С(aDoc.ДатаДокВходящийСФ)+"</ДатаВходящегоДокумента>";
      EndIf;
      If СтрВходящий<>"" Then
        AppendStringToBufferedString(СтрДокументы,"<Документ.СчетФактураПолученный>"+ВыгрШапкаДокумента(aDoc,"СФ_"+Ссылка));
        AppendStringToBufferedString(СтрДокументы,СтрВходящий+"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта><ВидСчетаФактуры>НаПоступление</ВидСчетаФактуры>");
        AppendStringToBufferedString(СтрДокументы,"<ДатаПолучения>"+Дата1С(aDoc.DocDate)+"</ДатаПолучения>"+ВыгрКонтрагентДокумента(aDoc.Контрагент,СтрСправочники));
        AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаНДС>"+Round(СмСуммаНДС,2)+"</СуммаНДС><СуммаВключаетНДС>true</СуммаВключаетНДС></Документ.СчетФактураПолученный>");
      EndIf;
    EndIf;
  ElseIf Вид="КомплектацияТовара" Then
    //ВидОперации: Разборка, Сборка
    aTab:=aDoc.LineParts("ВходящаяНоменклатура");
    aTab2:=aDoc.LineParts("ИсходящаяНоменклатура");
    If ((aTab.Size()>1)And(aTab2.Size()>1))or(aTab.Size()=0)or(aTab2.Size()=0) Then
      Raise "Документ "+aDoc+" слишком сложный для выгрузки в данный момент! Обратитесь к разработчику!";
    EndIf;
    ТипОперации:=?(aTab2.Size()=1,"Сборка","Разборка");
    зН:=?(aTab2.Size()=1,aTab2["Номенклатура",1],aTab["Номенклатура",1]);
    зКл:=?(aTab2.Size()=1,aTab2["Количество",1],aTab["Количество",1]);
    aTab:=?(aTab.Size()=1,aTab2,aTab);
    
    ВыгрузитьСправочник(СтрСправочники,зН.базЕдиница);
    ВыгрузитьСправочник(СтрСправочники,зН);
    AppendStringToBufferedString(СтрДокументы,"<Документ.СборкаТоваров>"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(зН.базЕдиница)+"</Ссылка><ДанныеКлассификатора>"+
        "<Код>"+зН.базЕдиница.Code+"</Код><Наименование>"+EncodeXMLString(зН.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения><Количество>"+зКл+"</Количество>"+
        "<Номенклатура><Ссылка>"+НайтиВнешнийКод(зН)+"</Ссылка><НаименованиеПолное>"+EncodeXMLString(зН.Name)+"</НаименованиеПолное><КодВПрограмме>"+зН.Code+"</КодВПрограмме></Номенклатура>");
    AppendStringToBufferedString(СтрДокументы,"<ВидОперации>"+ТипОперации+"</ВидОперации>");
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,ВыгрСкладДокумента(aDoc,СтрСправочники)+"<Товары>");
    
    aTab.Select();
    While aTab.Next() Do
      зН:=aTab.Номенклатура;
      aNum:=aNum+1;
      //ВозвратнаяТара,ГотоваяПродукция,ИнвентарьИХозяйственныеПринадлежности,КомиссионныеТовары,СобственныеТовары,Топливо
      ТипНоменклатуры:="СобственныеТовары";
      If зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара Then
        ТипНоменклатуры:="ВозвратнаяТара";
      ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь Then
        ТипНоменклатуры:="ИнвентарьИХозяйственныеПринадлежности";
      ElseIf зН.ВидНоменклатуры=Enum.ВидыНоменклатуры.АрендованноеИмущество Then
        ТипНоменклатуры:="КомиссионныеТовары";
      EndIf;
      ВыгрузитьСправочник(СтрСправочники,зН.базЕдиница);
      ВыгрузитьСправочник(СтрСправочники,зН);
      AppendStringToBufferedString(СтрСтроки,"<Строка><НомерСтрокиДокумента>"+aNum+"</НомерСтрокиДокумента><ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(зН.базЕдиница)+"</Ссылка><ДанныеКлассификатора>"+
        "<Код>"+зН.базЕдиница.Code+"</Код><Наименование>"+EncodeXMLString(зН.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения><Количество>"+aTab.Количество+"</Количество>"+
        "<Номенклатура><Ссылка>"+НайтиВнешнийКод(зН)+"</Ссылка><НаименованиеПолное>"+EncodeXMLString(зН.Name)+"</НаименованиеПолное><КодВПрограмме>"+зН.Code+"</КодВПрограмме></Номенклатура>"+
        "<ТипЗапасов>"+ТипНоменклатуры+"</ТипЗапасов></Строка>");
    EndDo;
    AppendStringToBufferedString(СтрДокументы,"</Товары></Документ.СборкаТоваров>");
  Else //Списание, оприходование (остальные операции)
    //ВидОперации: ОтгрузкаБезПереходаПравСобственности_Реализовано, ПередачаНаКомиссию, РеализацияКлиенту
    If Вид="ПеремещениеТМЦ" Then
      СтрТип:=?(aDoc.Склад.Магазин=Магазин,"СписаниеТоваров","ОприходованиеТоваров");
    ElseIf Вид="РегистрацияТМЦ" Then
      СтрТип:=?(aDoc.КодОперации=Enum.коРегистрацияТМЦ.ОприходованиеТМЦ,"ОприходованиеТоваров","СписаниеТоваров");
    Else
      СтрТип:=?(ФлПлюс,"ОприходованиеТоваров","СписаниеТоваров");
    EndIf;
    СмСумма:=0;
    СтрСтроки:=ВыгрузитьТабличнуюЧасть(aDoc,1,СмСумма,СтрСправочники);
    If СтрСтроки="" Then
      Exit 1;
    EndIf;
    AppendStringToBufferedString(СтрДокументы,"<Документ."+СтрТип+">"+ВыгрШапкаДокумента(aDoc,Ссылка));
    AppendStringToBufferedString(СтрДокументы,"<Комментарий>"+EncodeXMLString(aDoc.Комментарий)+"</Комментарий>");
    AppendStringToBufferedString(СтрДокументы,ВыгрСкладДокумента(aDoc,СтрСправочники)+"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС><Товары>");
    AppendStringToBufferedString(СтрДокументы,СтрСтроки);
    AppendStringToBufferedString(СтрДокументы,"</Товары></Документ."+СтрТип+">");
  EndIf;
  
  Exit 1;
EndFunction


Function ВыгрузитьДокументРозничныхПродаж(аДеньОт,аДеньДо,СпМагазины,ТабРозн,ByRef СтрДокументы,ByRef СтрСправочники);
  While аДеньОт<аДеньДо Do
    ТабРозн.Group("Магазин,Номенклатура","Количество,Сумма,СуммаБезнал");
    ТабРозн.Sort("Магазин");
    For i:=1 To СпМагазины.Size() Do
      Магазин2:=СпМагазины[i];
      Ссылка:="РозничныеПродажи_"+Магазин2.Code+"_"+BegOfDay(аДеньОт);
      If not ТабРозн.FindAndGoto(Магазин2,,"Магазин",1) Then
        AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><ОтчетОРозничныхПродажахСсылка>"+Ссылка+"</ОтчетОРозничныхПродажахСсылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
      Else
        ВыгрузитьСправочник(СтрСправочники,Магазин2);
        СмСумма:=0;
        СмСуммаБезнал:=0;
        aNum:=0;
        aNum2:=0;
        СтрСтроки:="";
        СтрСтроки2:="";
        While ТабРозн.Магазин=Магазин2 Do
          ВыгрузитьСправочник(СтрСправочники,ТабРозн.Номенклатура.базЕдиница);
          ВыгрузитьСправочник(СтрСправочники,ТабРозн.Номенклатура);
          Стр:="<Строка><НомерСтрокиДокумента>"+?(ТабРозн.Количество>0,aNum+1,aNum2+1)+"</НомерСтрокиДокумента><ЕдиницаИзмерения><Ссылка>"+НайтиВнешнийКод(ТабРозн.Номенклатура.базЕдиница)+"</Ссылка><ДанныеКлассификатора>"+
              "<Код>"+ТабРозн.Номенклатура.базЕдиница.Code+"</Код><Наименование>"+EncodeXMLString(ТабРозн.Номенклатура.базЕдиница)+"</Наименование></ДанныеКлассификатора></ЕдиницаИзмерения><Количество>"+Abs(ТабРозн.Количество)+"</Количество>"+
              "<Номенклатура><Ссылка>"+НайтиВнешнийКод(ТабРозн.Номенклатура)+"</Ссылка><НаименованиеПолное>"+EncodeXMLString(ТабРозн.Номенклатура.Name)+"</НаименованиеПолное><КодВПрограмме>"+ТабРозн.Номенклатура.Code+"</КодВПрограмме></Номенклатура>"+
              "<Сумма>"+Abs(ТабРозн.Сумма)+"</Сумма><Цена>"+Round(ТабРозн.Сумма/ТабРозн.Количество,2)+"</Цена><ТипЗапасов>СобственныеТовары</ТипЗапасов>"+
              "<ПрослеживаемыйТовар>"+?(ТабРозн.Номенклатура.флПодлежитПрослеживаемости,"true","false")+"</ПрослеживаемыйТовар></Строка>";
          If ТабРозн.Количество>0 Then
            aNum:=aNum+1;
            AppendStringToBufferedString(СтрСтроки,Стр);
          Else
            aNum2:=aNum2+1;
            AppendStringToBufferedString(СтрСтроки2,Стр);
          EndIf;
          СмСумма:=Round(СмСумма+ТабРозн.Сумма,2);
          СмСуммаБезнал:=СмСуммаБезнал+Round(СмСумма+ТабРозн.СуммаБезнал,2);
          If not ТабРозн.Next() Then
            Break;
          EndIf;
        EndDo;
        AppendStringToBufferedString(СтрДокументы,"<Документ.ОтчетОРозничныхПродажах><КлючевыеСвойства><Ссылка>"+Ссылка+"</Ссылка><Дата>"+Дата1С(аДеньОт)+"</Дата><Номер>"+Магазин2.Code+"_"+BegOfDay(аДеньОт)+"</Номер>"+
          пЮрЛицоСсылка+"</КлючевыеСвойства>");
        AppendStringToBufferedString(СтрДокументы,"<Валюта><ДанныеКлассификатора><Код>643</Код><Наименование>RUB</Наименование></ДанныеКлассификатора></Валюта>");
        AppendStringToBufferedString(СтрДокументы,"<Склад><Ссылка>"+НайтиВнешнийКод(Магазин2)+"</Ссылка><Наименование>"+EncodeXMLString(Магазин2.НазваниеМагазина)+"</Наименование><ТипСклада>Розничный</ТипСклада></Склад>");
        AppendStringToBufferedString(СтрДокументы,"<Сумма>"+Round(СмСумма,2)+"</Сумма><СуммаВключаетНДС>true</СуммаВключаетНДС>");
        If СтрСтроки<>"" Then
          AppendStringToBufferedString(СтрДокументы,"<ТоварыПродажа>"+СтрСтроки+"</ТоварыПродажа>");
        EndIf;
        If СтрСтроки2<>"" Then
          AppendStringToBufferedString(СтрДокументы,"<ТоварыВозвратПродажи>"+СтрСтроки2+"</ТоварыВозвратПродажи>");
        EndIf;
        If СмСуммаБезнал<>0 Then
          AppendStringToBufferedString(СтрДокументы,"<ОплатаПлатежнымиКартами><Строка><СуммаОплаты>"+СмСуммаБезнал+"</СуммаОплаты><ВидКарты>Платежная карта</ВидКарты>"+
            "<НомерКарты>1</НомерКарты></Строка></ОплатаПлатежнымиКартами>");
        EndIf;
        AppendStringToBufferedString(СтрДокументы,"</Документ.ОтчетОРозничныхПродажах>");
      EndIf;
    EndDo;
    ТабРозн.ClearLines();
    аДеньОт:=аДеньОт+1;
  EndDo;
EndFunction


Function ВыполнитьОтправку()
  //Проблемы: При изменении вида документа (ПКО, РКО и т.д.), старый документ остается в ЦБ, появляется новый

  //Все удаленные и необработанные документы выгружаются с помощью <УдалениеОбъекта>
  //<УдалениеОбъекта>
  //  <СсылкаНаОбъект>
  //    <СсылкаНаОбъект>
  //      <ОтчетОРозничныхПродажахСсылка>c0667859-e8a5-4d17-9374-b42fa1d3cbbc</ОтчетОРозничныхПродажахСсылка>
  //    </СсылкаНаОбъект>
  //  </СсылкаНаОбъект>
  //</УдалениеОбъекта>
  
  
  Способ:=Max(1,Способ);
  If Способ<>1 Then
    Raise "В данный момент поддерживается только способ выгрузки в локальную папку!";
  EndIf;
  ОбновитьВремяЗапуска("ПоследняяВыгрузка");
  СтрДокументы:="";
  СтрСправочники:="<Справочник.Валюты><КлючевыеСвойства><Ссылка>1</Ссылка><Код>643</Код></КлючевыеСвойства><Наименование>RUB</Наименование></Справочник.Валюты>";
  
  НомерИсходящего:=Number(ПолучитьУстановку("Исходящее сообщение"));
  НомерВходящего:=Number(ПолучитьУстановку("Входящее сообщение"));
  ЮрЛицо:=Магазин.ЮрЛицо;
  
  спСправочники:=List.Create();
  ВыгрузитьСправочник(СтрСправочники,ЮрЛицо);
  пКПП:=ЮрЛицо.ИНН;
  пИНН:=TearStr(пКПП,"/");
  пЮрЛицоСсылка:="<Организация><Ссылка>"+НайтиВнешнийКод(ЮрЛицо)+"</Ссылка><Наименование>"+EncodeXMLString(ЮрЛицо.Name)+"</Наименование><НаименованиеСокращенное>"+EncodeXMLString(ЮрЛицо.Name)+"</НаименованиеСокращенное>"+
    "<НаименованиеПолное>"+EncodeXMLString(ЮрЛицо.ПолнНаименование)+"</НаименованиеПолное><ИНН>"+пИНН+"</ИНН>"+?(пКПП<>"","<КПП>"+пКПП+"</КПП>")+
    "<ЮридическоеФизическоеЛицо>"+?(пКПП<>"","ЮридическоеЛицо","ФизическоеЛицо")+"</ЮридическоеФизическоеЛицо></Организация>";
  
  спН:=List.Create();
  aTab:=Магазин.LineParts("Номенклатура");
  aTab.CopyTo(спН,,,"Номенклатура");
    
  //Алкогольная,Табак,Обувь,ЛегкаяПромышленность,МолочнаяПродукцияПодконтрольнаяВЕТИС,Шины,Фотоаппараты,Духи,Велосипеды,КреслаКоляски,АльтернативныйТабак,УпакованнаяВода,МолочнаяПродукцияБезВЕТИС
  спГИСМТ1С:=List.Create();
  спГИСМТ1С["Алкогольная"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","15");
  спГИСМТ1С["Табак"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","3");
  спГИСМТ1С["Обувь"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","2");
  спГИСМТ1С["ЛегкаяПромышленность"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","1");
  //спГИСМТ1С["МолочнаяПродукцияПодконтрольнаяВЕТИС"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","8");
  спГИСМТ1С["Шины"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","5");
  спГИСМТ1С["Фотоаппараты"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","6");
  спГИСМТ1С["Духи"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","4");
  спГИСМТ1С["Велосипеды"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","9");
  спГИСМТ1С["КреслаКоляски"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","10");
  спГИСМТ1С["АльтернативныйТабак"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","12");
  спГИСМТ1С["УпакованнаяВода"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","13");
  спГИСМТ1С["МолочнаяПродукцияБезВЕТИС"]:=DB("Ref.рознТоварныеГруппыГИСМТ","ВнешнийКод","8");
  спГИСМТ1С.Sort();
  
  If (НачДата<ДатаНачала)And(КонДата>=ДатаНачала) Then
    If not ВыгрузитьДокументыНачальныхОстатков(СтрДокументы,СтрСправочники) Then
      Exit 0;
    EndIf;
  EndIf;
  
  НачДата:=Max(НачДата,ДатаНачала);
  If КонДата>=НачДата Then
    спВыгруженныеДокументы:=List.Create();
    
    Form.StatusText("Запрос по кассе...");
    If IsEmpty(Касса) Then
      спКасса:=List.Create();
    Else
      спКасса:=List.Create(Касса);
    EndIf;
    ТЗ:="Period From НачДата To КонДата;
    |Документ:=Storage.Касса.@LINK;"+
    ?(ФлВсеДокументы,"зЮЛ:=Storage.Касса.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);","зКс:=Storage.Касса.Касса;Condition(зКс IN спКасса);")+
    "зКлП:=Income(Сумма);
    |зКлР:=Expense(Сумма);
    |Group Документ;";
    З2:=Query.Create();
    aTabK:=З2.Execute(ТЗ,0);
    aTabK.AddColumn("ДокОснование");
    MassLoadObjects(aTabK,"Документ",,,1,"ДокОснование");
    aTabK.Select();
    While aTabK.Next() Do
      If _And(not IsEmpty(aTabK.Документ),глЕстьРеквизитДокумента("ДокОснование",aTabK.Документ.DBName())) Then
        aTabK.ДокОснование:=aTabK.Документ.ДокОснование;
      EndIf;
    EndDo;
    MassLoadObjects(aTabK,"ДокОснование",,,1);
    aTabK.Sort("ДокОснование");
    
    Form.StatusText("Запрос по остаткам ТМЦ (розница)...");
    коРеализация:=Enum.коРеализация.РеализацияРозничная;
    коВозврат:=Enum.коВозвратОтПокупателя.ВозвратРозничный;
    ТЗ:="Period From НачДата To КонДата;"+
    ?(ФлВсеДокументы,"зЮЛ:=Storage.ОстаткиТМЦ.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);","зМг:=Storage.ОстаткиТМЦ.Склад.Магазин;Condition(зМг=Магазин);")+
    "Документ:=Storage.ОстаткиТМЦ.@LINK;
    |Condition((Storage.ОстаткиТМЦ.@LINK..Doc.Реализация.КодОперации=коРеализация)Or(Storage.ОстаткиТМЦ.@LINK..Doc.ВозвратОтПокупателя.КодОперации=коВозврат));
    |зДень:=Storage.ОстаткиТМЦ.@DAY;
    |зН:=Storage.ОстаткиТМЦ.Номенклатура;
    |зКлП:=Income(Количество);
    |зКлР:=Expense(Количество);
    |Condition(зН IN спН);
    |Group зДень,Документ;";
    З:=Query.Create();
    aTab:=З.Execute(ТЗ,0);
    aTab.Sort("зДень+");
    
    If ФлВсеДокументы Then
      СпМагазины:=Ref.рознМагазины.Load(0,"ЮрЛицо",ЮрЛицо);
    Else
      СпМагазины:=List.Create(Магазин);
    EndIf;
    
    //Собираем розничные продажи и возвраты в документы ОтчетОРозничныхПродажах
    аДень:=НачДата;
    ТабРозн:=Tab.Create("Магазин,Номенклатура,Количество,Сумма,СуммаБезнал");
    aTab.Select();
    While aTab.Next() Do
      ВыгрузитьДокументРозничныхПродаж(аДень,aTab.зДень,СпМагазины,ТабРозн,СтрДокументы,СтрСправочники);
      аДень:=aTab.зДень;
      Form.StatusText("Розничные продажи: "+аДень);
      
      aDoc:=aTab.Документ.Copy();
      If спВыгруженныеДокументы.Find(aDoc,,1)=0 Then
        ФлБезнал:=0;
        If not aTabK.FindAndGoto(aDoc,,"ДокОснование",1) Then
          ФлБезнал:=1;
        EndIf;
        aTab2:=aDoc.LineParts("Номенклатура");
        aTab2.Select();
        While aTab2.Next() Do
          зН:=aTab2.Номенклатура;
          If _And(спН.Size()>0,not спН.Contains(зН)) Then
            Continue;
          EndIf;
          Фл:=?(aDoc.DBName()="Реализация",1,-1);
          ТабРозн.AddLine("Магазин,Номенклатура,Количество,Сумма,СуммаБезнал",aDoc.Склад.Магазин,зН,aTab2.Количество,Фл*aTab2.Количество,Фл*aTab2.Сумма,?(ФлБезнал,Фл*aTab2.Сумма,0));
        EndDo;
        спВыгруженныеДокументы.Add(aTab.Документ,,,1);
      EndIf;
    EndDo;
    ВыгрузитьДокументРозничныхПродаж(аДень,КонДата+1,СпМагазины,ТабРозн,СтрДокументы,СтрСправочники);
    
    //Все остальное по складу
    Form.StatusText("Запрос по остаткам ТМЦ (остальное)...");
    ТЗ:="Period From НачДата To КонДата;"+
    ?(ФлВсеДокументы,"зЮЛ:=Storage.ОстаткиТМЦ.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);","зМг:=Storage.ОстаткиТМЦ.Склад.Магазин;Condition(зМг=Магазин);")+
    "Документ:=Storage.ОстаткиТМЦ.@LINK;
    |зН:=Storage.ОстаткиТМЦ.Номенклатура;
    |зКлП:=Income(Количество);
    |зКлР:=Expense(Количество);
    |Condition(зН IN спН);
    |Group Документ;";
    З:=Query.Create();
    aTab:=З.Execute(ТЗ,0);
    
    aTab.Select();
    While aTab.Next() Do
      aDoc:=aTab.Документ.Copy();
      If _And(спВыгруженныеДокументы.Find(aDoc,,1)=0,aTab.зКлП-aTab.зКлР<>0) Then
        Form.StatusText("Движения по складу: "+aDoc.DocDate);
        If not ВыгрузитьДокументОстатков(aDoc,СтрДокументы,СтрСправочники,(aTab.зКлП-aTab.зКлР)>0) Then
          Exit 0;
        EndIf;
        спВыгруженныеДокументы.Add(aTab.Документ,,,1);
      EndIf;
    EndDo;
    
    //Кассовые документы
    aTabK.Select();
    While aTabK.Next() Do
      aDoc:=aTabK.Документ.Copy();
      If _And(спВыгруженныеДокументы.Find(aDoc,,1)=0,aTabK.зКлП-aTabK.зКлР<>0) Then
        Form.StatusText("Движения по кассе: "+aDoc.DocDate);
        If not ВыгрузитьДокументКассы(aDoc,СтрДокументы,СтрСправочники,(aTabK.зКлП-aTabK.зКлР)>0) Then
          Exit 0;
        EndIf;
        спВыгруженныеДокументы.Add(aTabK.Документ,,,1);
      EndIf;
    EndDo;
    
    //Банковские документы
    If ФлВсеДокументы Then
      ТЗ:="Period From НачДата To КонДата;
      |Документ:=Storage.Банк.@LINK;
      |зЮЛ:=Storage.Банк.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);
      |зКлП:=Income(Сумма);
      |зКлР:=Expense(Сумма);
      |Group Документ;";
      З:=Query.Create();
      aTab:=З.Execute(ТЗ,0);
      aTab.Select();
      While aTab.Next() Do
        aDoc:=aTab.Документ.Copy();
        If _And(спВыгруженныеДокументы.Find(aDoc,,1)=0,aTab.зКлП-aTab.зКлР<>0) Then
          Form.StatusText("Движения по банку: "+aDoc.DocDate);
          If not ВыгрузитьДокументБанка(aDoc,СтрДокументы,СтрСправочники,(aTab.зКлП-aTab.зКлР)>0) Then
            Exit 0;
          EndIf;
          спВыгруженныеДокументы.Add(aTab.Документ,,,1);
        EndIf;
      EndDo;
    EndIf;
    
    //Документы по подотчету: ПодотчетнаяОперация (ПКО, РКО и пр. уже были выгружены)
    If ФлВсеДокументы Then
      аТип:=Enum.ТипыПодотчетныхОпераций.ПодотчетнаяОперация;
      ТЗ:="Period From НачДата To КонДата;
      |Документ:=Storage.ПодотчетныеОперации.@LINK;
      |зЮЛ:=Storage.ПодотчетныеОперации.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);
      |зТип:=Storage.ПодотчетныеОперации.ТипОперации;Condition(зТип=аТип);
      |зКлП:=Income(Сумма);
      |зКлР:=Expense(Сумма);
      |Group Документ;";
      З:=Query.Create();
      aTab:=З.Execute(ТЗ,0);
      aTab.Select();
      While aTab.Next() Do
        aDoc:=aTab.Документ.Copy();
        If _And(спВыгруженныеДокументы.Find(aDoc,,1)=0,aTab.зКлП-aTab.зКлР<>0) Then
          Form.StatusText("Движения по подотчету: "+aDoc.DocDate);
          If not ВыгрузитьДокументПодотчета(aDoc,СтрДокументы,СтрСправочники,(aTab.зКлП-aTab.зКлР)>0) Then
            Exit 0;
          EndIf;
          спВыгруженныеДокументы.Add(aTab.Документ,,,1);
        EndIf;
      EndDo;
    EndIf;
    
    //Документы по взаиморасчетам (кроме выгруженных) -- фактически корректировки долга: ПоступлениеПрочее (+сч/ф), РеализацияПрочее (+сч/ф), КорректировкаДолга
    If ФлВсеДокументы Then
      Form.StatusText("Запрос по взаиморасчету...");
      ТЗ:="Period From НачДата To КонДата;
      |Документ:=Storage.Взаиморасчеты.@LINK;
      |зТара:=Storage.Взаиморасчеты.Тара;Condition(IsEmpty(зТара));
      |зЮЛ:=Storage.Взаиморасчеты.Договор.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);
      |зКлП:=Income(Сумма);
      |зКлР:=Expense(Сумма);
      |Group Документ;";
      З:=Query.Create();
      aTab:=З.Execute(ТЗ,0);
      aTab.Select();
      While aTab.Next() Do
        aDoc:=aTab.Документ.Copy();
        If _And(спВыгруженныеДокументы.Find(aDoc,,1)=0,aTab.зКлП-aTab.зКлР<>0) Then
          Form.StatusText("Движения по взаиморасчетам: "+aDoc.DocDate);
          If not ВыгрузитьДокументВзаиморасчетов(aDoc,СтрДокументы,СтрСправочники,(aTab.зКлП-aTab.зКлР)>0) Then
            Exit 0;
          EndIf;
          спВыгруженныеДокументы.Add(aTab.Документ,,,1);
        EndIf;
      EndDo;
    EndIf;
    
    //Добавим документы, не попавшие в запрос (в т.ч. удаленные и необработанные документы)
    //Запрос по общему журналу
    //Реализация,ВозвратОтПокупателя,ВозвратПоставщику,ПоступлениеТМЦ,РегистрацияТМЦ,КомплектацияТовара,РегистрацияОС,ПКО,РКО,ВыпискаБанкаПриход,ВыпискаБанкаРасход,ПоступлениеПрочее, РеализацияПрочее, КорректировкаДолга
    ТЗ:="зСтатус:=Jor.ОбщийЖурнал.@Status;Condition(зСтатус<2);зДата:=BegOfDay(Jor.ОбщийЖурнал.DocDate);Condition((зДата>=НачДата)And(зДата<=КонДата));"+
    ?(ФлВсеДокументы,"зЮЛ:=Jor.ОбщийЖурнал.ЮрЛицо;Condition(зЮЛ=ЮрЛицо);","зМг:=Jor.ОбщийЖурнал.Магазин;Condition(зМг=Магазин);")+
    "Документ:=Jor.ОбщийЖурнал.@LINK;
    |Group Документ;";
    З:=Query.Create();
    aTab:=З.Execute(ТЗ,0);
    
    aList:=List.Create();
    aList["РеализацияПрочее"]:="РеализацияТоваровУслуг";
    aList["ПоступлениеПрочее"]:="ПоступлениеТоваровУслуг";
    aList["КорректировкаДолга"]:="КорректировкаДолга";
    aList["ПодотчетнаяОперация"]:="#";
    aList["ВыпискаБанкаПриход"]:="#";
    aList["ВыпискаБанкаРасход"]:="#";
    aList["ПеремещениеДенегБанк"]:="#";
    aList["ПКО"]:="#";
    aList["РКО"]:="#";
    aList["ПеремещениеДенег"]:="#";
    aList["Реализация"]:="РеализацияТоваровУслуг";
    aList["ВозвратОтПокупателя"]:="ВозвратТоваровОтПокупателя";
    aList["ВозвратПоставщику"]:="ВозвратТоваровПоставщику";
    aList["ПоступлениеТМЦ"]:="ПоступлениеТоваровУслуг";
    aList["КомплектацияТовара"]:="СборкаТоваров";
    aList["ПеремещениеТМЦ"]:="#";
    aList["РегистрацияТМЦ"]:="#";
    //aList["РегистрацияОС"]:="#"; //TODO
    aTab.Select();
    While aTab.Next() Do
      aDoc:=aTab.Документ.Copy();
      If спВыгруженныеДокументы.Find(aDoc,,1)=0 Then
        Form.StatusText("Удаленные документы: "+aDoc.DocDate);
        спВыгруженныеДокументы.Add(aDoc.Copy(),,,1);
        Вид:=aDoc.DBName();
        УдВид:=aList[Вид];
        If IsEmpty(УдВид) Then
          Continue;
        EndIf;
        If УдВид="#" Then
          If Вид="ПодотчетнаяОперация" Then
            If aDoc.КодОперации=Enum.коПодотчетнаяОперация.Оплата Then
              УдВид:="КорректировкаДолга";
              aTab:=aDoc.LineParts("Содержание");
              aTab.Select();
              While aTab.Next() Do
                Ссылка:=Вид+"_"+aTab.CurLine+"_"+aDoc.DocNum+"_"+GetYear(aDoc.DocDate);
                AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><"+УдВид+"Ссылка>"+Ссылка+"</"+УдВид+"Ссылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
              EndDo;
            EndIf;
            УдВид:="АвансовыйОтчет";
          ElseIf Вид="ВыпискаБанкаПриход" Then
            If aDoc.КодОперации=Enum.коВыпискаБанкаПриход.ОплатаПокупателя Then
              УдВид:="ПБДСРасчетыСКонтрагентами";
            ElseIf (aDoc.КодОперации=Enum.коВыпискаБанкаПриход.ВозвратОтПоставщика)or(aDoc.КодОперации=Enum.коВыпискаБанкаПриход.ОплатаУслуг) Then
              УдВид:="ПБДСРасчетыСКонтрагентами";
            Else
              УдВид:="ПБДСПрочееПоступление";
            EndIf;
          ElseIf Вид="ВыпискаБанкаРасход" Then
            If aDoc.КодОперации=Enum.коВыпискаБанкаРасход.ВозвратПокупателю Then
              УдВид:="СБДСРасчетыСКонтрагентами";
            ElseIf (aDoc.КодОперации=Enum.коВыпискаБанкаРасход.ОплатаПоставщику)or(aDoc.КодОперации=Enum.коВыпискаБанкаРасход.ОплатаУслуг) Then
              УдВид:="СБДСРасчетыСКонтрагентами";
            Else
              УдВид:="СБДСПрочееСписание";
            EndIf;
          ElseIf Вид="ПеремещениеДенегБанк" Then
            УдВид:="ПБДСПрочееПоступление";
            Ссылка:=Вид+"_"+aDoc.DocNum+"_"+GetYear(aDoc.DocDate);
            AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><"+УдВид+"Ссылка>"+Ссылка+"</"+УдВид+"Ссылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
            УдВид:="СБДСПрочееСписание";
          ElseIf Вид="ПКО" Then
            If aDoc.КодОперации=Enum.коПКО.ОплатаПокупателя Then
              УдВид:=?(aDoc.Контрагент.фоРозничныйПокупатель,"ПКОРозничнаяВыручка","ПКОРасчетыСКонтрагентами");
            ElseIf (aDoc.КодОперации=Enum.коПКО.ВозвратОтПоставщика)or(aDoc.КодОперации=Enum.коПКО.ОплатаУслуг) Then
              УдВид:="ПКОРасчетыСКонтрагентами";
            ElseIf aDoc.КодОперации=Enum.коПКО.ВозвратОтПодотчетника Then
              УдВид:="ПКОРасчетыССотрудниками";
            ElseIf aDoc.КодОперации=Enum.коПКО.Инкассация Then
              УдВид:="ПКОПолучениеНаличныхВБанке";
            Else
              УдВид:="ПКОПрочееПоступление";
            EndIf;
          ElseIf Вид="РКО" Then
            If aDoc.КодОперации=Enum.коРКО.ВозвратПокупателю Then
              УдВид:="РКОРасчетыСКонтрагентами";
            ElseIf (aDoc.КодОперации=Enum.коРКО.ОплатаПоставщику)or(aDoc.КодОперации=Enum.коРКО.ОплатаУслуг) Then
              УдВид:="РКОРасчетыСКонтрагентами";
            ElseIf aDoc.КодОперации=Enum.коРКО.ВыдачаПодотчет Then
              УдВид:="РКОРасчетыССотрудниками";
            ElseIf aDoc.КодОперации=Enum.коРКО.Инкассация Then
              УдВид:="РКОНаБанковскийСчет";
            Else
              УдВид:="РКОПрочаяВыдача";
            EndIf;
          ElseIf Вид="ПеремещениеДенег" Then
            УдВид:="ПКОПрочееПоступление";
            Ссылка:=Вид+"_"+aDoc.DocNum+"_"+GetYear(aDoc.DocDate);
            AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><"+УдВид+"Ссылка>"+Ссылка+"</"+УдВид+"Ссылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
            УдВид:="РКОПрочаяВыдача";
          ElseIf Вид="ПеремещениеТМЦ" Then
            УдВид:="СписаниеТоваров";
            Ссылка:=Вид+"_"+aDoc.DocNum+"_"+GetYear(aDoc.DocDate);
            AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><"+УдВид+"Ссылка>"+Ссылка+"</"+УдВид+"Ссылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
            УдВид:="ОприходованиеТоваров";
          ElseIf Вид="РегистрацияТМЦ" Then
            УдВид:="СписаниеТоваров";
            Ссылка:=Вид+"_"+aDoc.DocNum+"_"+GetYear(aDoc.DocDate);
            AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><"+УдВид+"Ссылка>"+Ссылка+"</"+УдВид+"Ссылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
            УдВид:="ОприходованиеТоваров";
          EndIf;
        EndIf;
        Ссылка:=Вид+"_"+aDoc.DocNum+"_"+GetYear(aDoc.DocDate);
        AppendStringToBufferedString(СтрДокументы,"<УдалениеОбъекта><СсылкаНаОбъект><СсылкаНаОбъект><"+УдВид+"Ссылка>"+Ссылка+"</"+УдВид+"Ссылка></СсылкаНаОбъект></СсылкаНаОбъект></УдалениеОбъекта>");
      EndIf;
    EndDo;
  EndIf;

  //Сохранение
  If Способ=1 Then
    Form.StatusText("Сохранения результата...");
    If ПутьПротокола="" Then
      Raise "Не задана папка для выгрузки!";
    EndIf;
    ПутьПротокола:=AddBackSlash(ПутьПротокола);
    ИмяФайла:="Message_"+КодБД+"_"+КодБД2+".xml";
    Т:=Text.Create(1);
    Т.AddString("<?xml version=""1.0"" encoding=""UTF-8""?>");
    Т.AddString("<Message xmlns:msg=""http://www.1c.ru/SSL/Exchange/Message"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">");
    Т.AddString("<msg:Header><msg:Format>http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.10</msg:Format><msg:CreationDate>"+Дата1С(Date())+"</msg:CreationDate><msg:Confirmation>"+
      "<msg:ExchangePlan>СинхронизацияДанныхЧерезУниверсальныйФормат</msg:ExchangePlan><msg:To>"+КодБД2+"</msg:To><msg:From>"+КодБД+"</msg:From>"+
      "<msg:MessageNo>"+НомерИсходящего+"</msg:MessageNo><msg:ReceivedNo>"+НомерВходящего+"</msg:ReceivedNo></msg:Confirmation></msg:Header><Body xmlns=""http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.10"">");
    Т.AddString(СтрСправочники);
    Т.AddString(СтрДокументы);
    Т.AddString("</Body></Message>");
    If not Т.Save(ПутьПротокола+ИмяФайла,65001,1) Then
      Raise "Невозможно сохранить файл "+ИмяФайла+" в папку "+ПутьПротокола+"!";
    EndIf;
  EndIf;
  
  ОбновитьВремяЗапуска("ПоследняяУдачнаяВыгрузка");
  Exit 1;
EndFunction

Function ВыполнитьЗагрузку()
EndFunction

Function СохранитьУстановки(ФлЗакрыть=0)
  Ини.AddLeaf("КодБД",Form.оКодБД.Value);
  Ини.AddLeaf("КодБД2",Form.оКодБД2.Value);
  Ини.AddLeaf("Способ",Form.оСпособ.Value.SelectedLine);
  Ини.AddLeaf("ФлВсеДокументы",Form.оВсеДокументы.Value);
  Ини.AddLeaf("Путь",Form.оПуть.Value);
  Ини.AddLeaf("РасписаниеВыгрузки",Form.оРасписаниеВыгрузки.Value);
  Ини.AddLeaf("РасписаниеЗагрузки",Form.оРасписаниеЗагрузки.Value);
  Ини.AddLeaf("Период",Form.оДней.Value);
  Ини.AddLeaf("ДатаНачала",Form.оДатаНачала.Value);
  Ини.AddLeaf("Касса",Form.оКасса.Value.Code);
  Элемент.Настройки:=Ини.StoreToString("");

  //Добавление номеров квитанций выгрузки/загрузки
  ДобавитьУстановку("Исходящее сообщение","1");
  ДобавитьУстановку("Входящее сообщение","0");
  
  глОбновитьРасписаниеПротоколаОбмена(Элемент,"Modules\FreeForms\ПротоколыОбмена\EnterpriseData\",Form.оРасписаниеВыгрузки.Value,Form.оРасписаниеЗагрузки.Value);
  
  If ФлЗакрыть Then
    Form.IsChanged(0);
    Form.Close();
  EndIf;
EndFunction

Function OnOpen()
  Result:=0;
  If TypeStr(Param)<>"LIST" Then
    MessageVisual("Эта обработка запускается автоматически или вызывается из формы магазина!","!");
    Exit;
  EndIf;
  Элемент:=Param["Элемент"];
  СтрКоманда:=Param["Команда"];
  
  If Элемент.IsLocked()<>1 Then
    Элемент:=Элемент.Copy();
    If not глЗаблокировать(Элемент,1) Then //Будет разблокирован при закрытии обработки
      Exit;
    EndIf;
    Элемент.Reload();
  EndIf;
    
  Магазин:=Элемент.Parent();
  Try
    Ини:=Ini.Create();
    Ини.AddFromString(Элемент.Настройки);
  Except
    Ини.AddLeaf("Способ",1);
    Ини.AddLeaf("Период",7);
  EndTry;
  КодБД:=Ини.GetData("КодБД");
  КодБД2:=Ини.GetData("КодБД2");
  Способ:=Max(1,Number(Ини.GetData("Способ")));
  ПутьПротокола:=Ини.GetData("Путь");
  ФлВсеДокументы:=Number(Ини.GetData("ФлВсеДокументы"));
  РасписаниеВыгрузки:=Ини.GetData("РасписаниеВыгрузки");
  РасписаниеЗагрузки:=Ини.GetData("РасписаниеЗагрузки");
  ДатаНачала:=Date(Ини.GetData("ДатаНачала"));
  Касса:=Ref.общКассы;
  КассаКод:=Ини.GetData("Касса","");
  If КассаКод<>"" Then
    Касса.Find("Code",КассаКод);
  EndIf;
  
  If (СтрКоманда="Визуальный запуск")or(IsEmpty(СтрКоманда)) Then
    Result:=1;
    Exit;
  EndIf;
  
  ФлФорсирование:=0;
  КонДата:=BegOfDay(Date())-1;
  НачДата:=КонДата-Max(Период-1,0);
  If _And(not IsEmpty(Param["КонДата"]),not IsEmpty(Param["НачДата"])) Then
    НачДата:=Param["НачДата"];
    КонДата:=Max(Param["НачДата"],Param["КонДата"]);
    ФлФорсирование:=1;
    MessageVisual("Форсирован период выгрузки с "+НачДата+" по "+КонДата+"!","I");
  EndIf;
  
  ИмяОбмена:="Обмен_"+Элемент.Code;аПольз:="";аМаш:="";аДата:="";
  If not DBLockStringMutex(ИмяОбмена,аПольз,аМаш,аДата) Then
    MessageVisual("Обмен по протоколу "+Элемент+" для магазина "+Магазин+" уже был запущен пользователем "+аПольз+" ("+аМаш+") в "+аДата,"!");
  EndIf;
  Try
    //Команды: Визуальный запуск,Выгрузка,Загрузка,Загрузка и выгрузка
    If СтрКоманда="Выгрузка" Then    
      If not ВыполнитьОтправку() Then
        Raise "Ошибка при выполнении выгрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Загрузка" Then
      If not ВыполнитьЗагрузку() Then
        Raise "Ошибка при выполнении загрузки";
      EndIf;
      Param["Удачно"]:=1;
    ElseIf СтрКоманда="Загрузка и выгрузка" Then
      If not ВыполнитьЗагрузку() Then
        Raise "Ошибка при выполнении загрузки";
      EndIf;
      If not ВыполнитьОтправку() Then
        Raise "Ошибка при выполнении выгрузки";
      EndIf;
      Param["Удачно"]:=1;
    Else
      MessageVisual("Неизвестная команда: "+СтрКоманда+"!","!");
    EndIf;
  Finally
    DBUnlockStringMutex(ИмяОбмена);
  EndTry;
EndFunction
