//Глобальные (root) модули загружаются при старте системы. Загрузка начинается с модуля "module" и продолжается в алфавитном порядке.
//Переменные и функции, объявленные с постфиксом export, будут доступны в любых других модулях в любых потоках системы.
//Модуль может содержать специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.
Var СпСписокСерверовAPIККТ Export, ВремяСписокСерверовAPIККТ Export;
Var СпКлючиДоступаAPIККТ Export;
Var глНомераФНAPIККТ Export;

Function _СкопироватьФайлВоВременнуюПапку(ЛокальныйФайл,ByRef Результат="")
  Результат:=Addbackslash(GetTempDirectory())+GetFileName(ЛокальныйФайл);
  If Not File.DoesFileExist(ЛокальныйФайл) Then
    Message("Необходимый файл "+ЛокальныйФайл+" не существует!","!");
    Exit 0;
  EndIf;
  If File.DoesFileExist(Результат) Then
    If File.GetFileSize(ЛокальныйФайл)=File.GetFileSize(Результат) Then
      Exit 1;
    EndIf;
  EndIf;
  If not File.CopyFile(ЛокальныйФайл,Результат,1) Then
    Message("Невозможно скопировать файл "+ЛокальныйФайл+" в "+Результат+"!","!");
    Exit 0;
  EndIf;
  Exit 1;
EndFunction
      

Function глЗагрузитьБиблиотекуSSL(ЮрЛицо,спДрайвер) Export
  //libssl-3.dll
  //libcrypto-3.dll
  If ЮрЛицо.ПутьБиблиотекиSSL<>"" Then
    If (Pos("\\",ЮрЛицо.ПутьБиблиотекиSSL)=0)And(Pos(":",ЮрЛицо.ПутьБиблиотекиSSL)=0) Then
      //Копирование библиотек OpenSSL во временные папки, если файлы на находятся сервере
      Стр:="";
      If not _СкопироватьФайлВоВременнуюПапку(ЮрЛицо.ПутьБиблиотекиSSL,Стр) Then
        Exit List.Create();
      EndIf;
      If not _СкопироватьФайлВоВременнуюПапку(Replace(Lowercase(ЮрЛицо.ПутьБиблиотекиSSL),"libssl","libcrypto")) Then
        Exit List.Create();
      EndIf;
    Else
      Стр:=ЮрЛицо.ПутьБиблиотекиSSL;
    EndIf;
    спДрайвер["Библиотека"]:=Стр;
  EndIf;
EndFunction

Function глЗагрузитьДрайверПровайдераЭДО(ЮрЛицо,ДрайверПодписи) Export
  спДрайвер:=List.Create();
  Try
    If IsEmpty(ЮрЛицо.ПутьДрайвераЭДО) Then
      Exit спДрайвер;
    ElseIf IsEmpty(ЮрЛицо.ПутьБиблиотекиSSL) Then
      Message("Драйвер провайдера ЭДО: Не выбран путь к библиотекам SSL!","!");
      Exit спДрайвер;
    EndIf;
    
    спДрайвер["ДопУстановки"]:=ЮрЛицо.НастройкиДрайвераЭДО;
    спДрайвер["ПутьДрайвера"]:=ЮрЛицо.ПутьДрайвераЭДО;
    спДрайвер["ЮрЛицо"]:=ЮрЛицо;
    спДрайвер["ДрайверШифрования"]:=ДрайверПодписи;
      
    //Загрузка текста драйвера
    Путь:=AddBackSlash(ЮрЛицо.ПутьДрайвераЭДО)+"Драйвер";
    If File.DoesFileExist(Путь+".sfc") Then
      aBuf:=Buffer.Create();
      aBuf.LoadFromFile(Путь+".sfc");
      аМодуль:=LoadFunctionFromBuffer(aBuf,Путь+".sfc");
      спДрайвер["МодульДрайвера"]:=аМодуль;
    ElseIf File.DoesFileExist(Путь+".sf") Then
      Стр:=FileToString(Путь+".sf",0);
      аМодуль:=Compile(Стр,1,,Путь+".sf");
      спДрайвер["МодульДрайвера"]:=аМодуль;
    Else
      Raise "Не найден модуль драйвера!";
    EndIf;
  
    //Инициализация
    Стр:=Trim(ExecuteFunction("DriverInit",спДрайвер["МодульДрайвера"],спДрайвер));
    If Стр<>"" Then
      Raise Стр;
    EndIf;
    глЗагрузитьБиблиотекуSSL(ЮрЛицо,спДрайвер);
    
    //Подключение
    Стр:=Trim(ExecuteFunction("DriverConnect",спДрайвер["МодульДрайвера"],спДрайвер));
    If Стр<>"" Then
      Raise Стр;
    EndIf;
  Except
    Message("Ошибка при инициализации драйвера ЭДО юр. лица %LINK%: "+PopError(),"!",ЮрЛицо);
    спДрайвер:=List.Create();
  EndTry;
  
  Exit спДрайвер;
EndFunction

Function глЗагрузитьДрайверПодписи(ЮрЛицо,ФлФорсироватьБезСертификата=0) Export;
  спДрайвер:=List.Create();
  Try
    If IsEmpty(ЮрЛицо.ПутьДрайвераПодписи) Then
      //Message("Драйвер подписи ГИС МТ: Не выбран тип драйвера для подписи!","!");
      Exit спДрайвер;
    ElseIf (IsEmpty(ЮрЛицо.ПутьБиблиотекиSSL))And(not ФлФорсироватьБезСертификата) Then
      Message("Драйвер подписи ГИС МТ: Не выбран путь к библиотекам SSL!","!");
      Exit спДрайвер;
    ElseIf (IsEmpty(ЮрЛицо.СертификатПодписи))And(not ФлФорсироватьБезСертификата) Then
      Message("Драйвер подписи ГИС МТ: Не выбран сертификат драйвера подписи!","!");
      Exit спДрайвер;
    EndIf;
    
    спДрайвер["ДопУстановки"]:=ЮрЛицо.НастройкиДрайвераПодписи;
    спДрайвер["ПутьДрайвера"]:=ЮрЛицо.ПутьДрайвераПодписи;
    спДрайвер["ЮрЛицо"]:=ЮрЛицо;
      
    //Загрузка текста драйвера
    Путь:=AddBackSlash(ЮрЛицо.ПутьДрайвераПодписи)+"Драйвер";
    If File.DoesFileExist(Путь+".sfc") Then
      aBuf:=Buffer.Create();
      aBuf.LoadFromFile(Путь+".sfc");
      аМодуль:=LoadFunctionFromBuffer(aBuf,Путь+".sfc");
      спДрайвер["МодульДрайвера"]:=аМодуль;
    ElseIf File.DoesFileExist(Путь+".sf") Then
      Стр:=FileToString(Путь+".sf",0);
      аМодуль:=Compile(Стр,1,,Путь+".sf");
      спДрайвер["МодульДрайвера"]:=аМодуль;
    Else
      Raise "Не найден модуль драйвера!";
    EndIf;
  
    //Инициализация
    Стр:=Trim(ExecuteFunction("DriverInit",спДрайвер["МодульДрайвера"],спДрайвер));
    If Стр<>"" Then
      Raise Стр;
    EndIf;

    //Подключение
    Стр:=Trim(ExecuteFunction("DriverConnect",спДрайвер["МодульДрайвера"],спДрайвер));
    If Стр<>"" Then
      Raise Стр;
    EndIf;
          
    //Загрузка сертификата
    If ЮрЛицо.СертификатПодписи<>"" Then
      спДрайвер["Идентификатор"]:=ЮрЛицо.СертификатПодписи;
      Стр:=Trim(ExecuteFunction("SetCertificate",спДрайвер["МодульДрайвера"],спДрайвер));
      If Стр<>"" Then
        If ФлФорсироватьБезСертификата Then
          Message(Стр,"!");
        Else
          Raise Стр;
        EndIf;
      EndIf;
    EndIf;

    //libssl-3.dll
    //libcrypto-3.dll
    If ЮрЛицо.ПутьБиблиотекиSSL<>"" Then
      If (Pos("\\",ЮрЛицо.ПутьБиблиотекиSSL)=0)And(Pos(":",ЮрЛицо.ПутьБиблиотекиSSL)=0) Then
        //Копирование библиотек OpenSSL во временные папки, если файлы на находятся сервере
        Стр:="";
        If not _СкопироватьФайлВоВременнуюПапку(ЮрЛицо.ПутьБиблиотекиSSL,Стр) Then
          Exit List.Create();
        EndIf;
        If not _СкопироватьФайлВоВременнуюПапку(Replace(Lowercase(ЮрЛицо.ПутьБиблиотекиSSL),"libssl","libcrypto")) Then
          Exit List.Create();
        EndIf;
      Else
        Стр:=ЮрЛицо.ПутьБиблиотекиSSL;
      EndIf;
      спДрайвер["Библиотека"]:=Стр;
    EndIf;
  Except
    Message("Ошибка при инициализации драйвера подписи юр. лица %LINK%: "+PopError(),"!",ЮрЛицо);
    спДрайвер:=List.Create();
  EndTry;
  
  Exit спДрайвер;
EndFunction;

Function глУдалитьДрайверПодписи(СпДрайвер) Export;
  Try
    If not IsEmpty(СпДрайвер["МодульДрайвера"]) Then
      ExecuteFunction("DriverDisconnect",СпДрайвер["МодульДрайвера"],СпДрайвер);
      ExecuteFunction("DriverDeinit",СпДрайвер["МодульДрайвера"],СпДрайвер);
    EndIf;
  Except
  EndTry;
  СпДрайвер.Clear();
EndFunction

//ФлОсобый: 0 -- обычный с Authorization bearer
//          1 -- особый, без тегов
//          2 -- обычный с X-API-KEY
Function ВыполнитьОбменССерверомГИСМТ(Ссылка,ByRef Стр,спДрайверПодписи,ФлТипСервера,ФлОсобый=0,КлючДоступаAPIККТ="",ByRef КодОтвета="")
  If pos("//",Ссылка)>0 Then
    TearStr(Ссылка,"//");
  EndIf;
  КодОтвета:=0;
  Сервер:=IPConnection.HTTPPunycodeEncode(TearStr(Ссылка,"/"));
  If Pos(":",Сервер)=0 Then
    Сервер:=Сервер+":443";
  EndIf;
  Try
    aTCP:=0;
    аПопыток:=?(not IsEmpty(КлючДоступаAPIККТ),2,5);//API ККТ должны работать быстрее, так как запрос идет в момент продажи
    For i:=1 To аПопыток Do
      Прокси:=Trim(спДрайверПодписи["Прокси"]);
      If Прокси<>"" Then
        //<ProxyType>@<ProxyIP>@<User>@<Password>
        aTCP:=IPConnection.Create();
        ПроксиТип:=TearStr(Прокси,"@");
        ПроксиАдр:=TearStr(Прокси,"@");
        ПроксиПольз:=TearStr(Прокси,"@");
        ДопСтр:="";
        If ((ПроксиТип="NGRC")or(ПроксиТип="NGRCCHANNEL"))And(not IsEmpty(ПроксиПольз)) Then
          ПроксиПольз:=DecodeString(ПроксиПольз,"base64");
          ДопСтр:=Прокси;
          Прокси:=TearStr(ДопСтр,"@");//Пароль ngRC сервера
          ДопСтр:=Replace(ДопСтр,"|",Chr(1));//Пароль сервера каналов|Имя канала
        EndIf;
        aTCP.UseProxy(ПроксиАдр,ПроксиТип,ПроксиПольз,Прокси,ДопСтр);
        aTCP.Connect(Сервер);
      Else
        aTCP:=IPConnection.Create();
        aTCP.TimeOut(2500,3);
        aTCP.Connect(Сервер);
      EndIf;
      if not aTCP.IsConnected Then
        If i=аПопыток Then
          КодОтвета:=999;
          Стр:="Невозможно соединиться с сервером "+Сервер+"!";
          Exit 0;
        EndIf;
        Continue;
      EndIf;
      
      Try
        aTCP.InitEncryption("OpenSSL",спДрайверПодписи["Библиотека"]);
        Break;
      Except
        If i=аПопыток Then
          Стр:="Ошибка инициализации SSL: "+PopError();
          Exit 0;
        EndIf;
        Continue;
      EndTry;
    EndDo;


    If Стр<>"" Then
      aTCP.HTTPSetOperation("POST /"+Ссылка+" HTTP/1.1");
    Else
      aTCP.HTTPSetOperation("GET /"+Ссылка+" HTTP/1.1");
    EndIf;
    aTCP.HTTPSetHeaderField("Host",Сервер);
    aTCP.HTTPSetHeaderField("Accept","application/json");
    aTCP.HTTPSetHeaderField("Connection","Close");
    If ФлОсобый=0 Then
      aTCP.HTTPSetHeaderField("Authorization","Bearer "+спДрайверПодписи["Токен"+ФлТипСервера]);
    ElseIf ФлОсобый=2 Then
      aTCP.HTTPSetHeaderField("X-API-KEY",КлючДоступаAPIККТ);
    EndIf;
    
    If Стр<>"" Then
      Стр:=UnicodeToUTF8(Стр);
      aTCP.HTTPSetHeaderField("Content-Type","application/json; charset=UTF-8");
      aTCP.HTTPSetHeaderField("Content-Length",Length(Стр));
      aTCP.HTTPSetBody(Стр);
    EndIf;    
    If aTCP.HTTPSendAndReceive Then
      aTCP.HTTPDecodeChunked();
      Стр:=aTCP.HTTPHeaderAndBodyAsString;
    Else
      Стр:="Ошибка при отправке пакета!";
      Exit 0;
    EndIf;
    Стр:=UTF8ToUnicode(Стр);
    //If pos(";charset=utf-8",Стр)>0 Then
    //  Стр:=UTF8ToUnicode(Стр);
    //ElseIf pos(";charset=UTF-8",Стр)>0 Then
    //  Стр:=UTF8ToUnicode(Стр);
    //EndIf;
    Стр1:=aTCP.HTTPGetOperation();
    TearStr(Стр1," ");
    Стр1:=TearStr(Стр1," ");
    If (Стр1<>"200")And(Стр1<>"201") Then
      КодОтвета:=Number(Стр1);
      Стр:="Ошибка сервера!"+_NEWLINE+Стр;
      Exit 0;
    EndIf;
  Except
    Стр:="Ошибка: "+PopError();
    Exit 0;
  EndTry;  
  Exit 1;
EndFunction

Function ПодписатьТекстГИСМТ(спДрайверПодписи,ByRef Текст)
  спДрайверПодписи["Сообщение"]:=EncodeString(UnicodeToUTF8(Текст),"base64");
  спДрайверПодписи["ОткрепленнаяПодпись"]:=0;
  спДрайверПодписи["ПодписатьХешСообщения"]:=0;
  Текст:=Trim(ExecuteFunction("SignMessage",спДрайверПодписи["МодульДрайвера"],спДрайверПодписи));
  If Текст<>"" Then
    Exit 0;
  EndIf;
  Текст:=спДрайверПодписи["Сообщение"];
  Exit 1;
EndFunction

Function ОбновитьТокенГИСМТ(спДрайверПодписи,ФлТипСервера)
  Сервер:="markirovka.crpt.ru:443";
  СтрСсылка1:="/api/v3/true-api/auth/key";
  СтрСсылка2:="/api/v3/true-api/auth/simpleSignIn";

  //If ФлТипСервера=0 Then //Сигареты
  //  Сервер:="markirovka.crpt.ru:443";
  //  СтрСсылка1:="/api/v3/facade/auth/key";
  //  СтрСсылка2:="/api/v3/facade/auth";
  //ElseIf ФлТипСервера=1 Then //Молоко
  //  Сервер:="ismp.crpt.ru:443";
  //  СтрСсылка1:="/api/v3/auth/cert/key";
  //  СтрСсылка2:="/api/v3/auth/cert/";
  //Else
  //  Exit "Неизвестный тип сервера";
  //EndIf;
  
  Стр:="";
  If not ВыполнитьОбменССерверомГИСМТ(Сервер+СтрСсылка1,Стр,спДрайверПодписи,ФлТипСервера,1) Then
    Exit Стр;
  EndIf;
  //{"uuid":"baed86cb-9d85-4d6a-9f12-a06f8bd8f7d2","data":"PQQBDQLLBTSORVFIJSTXLCXOTJLUHF"}
  Стр2:=Стр;
  TearStr(Стр2,"""uuid"":");
  TearStr(Стр2,"""");
  Парам:=TearStr(Стр2,"""");
  TearStr(Стр,"""data"":");
  TearStr(Стр,"""");
  Текст:=TearStr(Стр,"""");
  If (Length(Текст)=0)Or(Length(Парам)=0) Then
    Exit "(1) Неизвестный ответ при получении пароля обмена!";
  EndIf;
  If not ПодписатьТекстГИСМТ(спДрайверПодписи,Текст) Then
    Exit Текст;
  EndIf;
  аДата:=Date();
  If not IsEmpty(спДрайверПодписи["ЮрЛицо"]) Then
    пИНН:=спДрайверПодписи["ЮрЛицо"].ИНН;
    пИНН:=TearStr(пИНН,"/");
    Стр:="{""uuid"":"""+Парам+""",""data"":"""+UnicodeToUTF8(EncodeString(Текст,"JSON"))+""",""inn"":"""+EncodeString(пИНН,"JSON")+"""}";
  Else
    Стр:="{""uuid"":"""+Парам+""",""data"":"""+UnicodeToUTF8(EncodeString(Текст,"JSON"))+"""}";
  EndIf;
  If not ВыполнитьОбменССерверомГИСМТ(Сервер+СтрСсылка2,Стр,спДрайверПодписи,ФлТипСервера,1) Then
    Exit Стр;
  EndIf;
  //{"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwcm9kdWN0X2dyb3VwX2luZm8iOlt7Im5h..."}
  Стр2:=Стр;
  TearStr(Стр,"""token"":");
  TearStr(Стр,"""");
  Стр:=TearStr(Стр,"""");
  If Стр="" Then
    TearStr(Стр2,_NEWLINE+_NEWLINE);
    Exit "(2) Неизвестный положительный ответ сервера при получении пароля обмена: "+_NEWLINE+Стр2;
  EndIf;
  спДрайверПодписи["Токен"+ФлТипСервера]:=Стр;
  спДрайверПодписи["ДатаТокена"+ФлТипСервера]:=аДата;
  
  Exit "";
EndFunction

//Возвращает ошибку или пустую строку
Function ВыполнитьЗапросГИСМТ(спДрайверПодписи,Ссылка,ByRef СтрЗапрос,аТоварнаяГруппа) Export
  ФлТипСервера:=0;//Сигареты и прочее
  If not IsEmpty(аТоварнаяГруппа) Then
    If Lowercase(аТоварнаяГруппа.ВнешнееНаименование)="milk" Then
      ФлТипСервера:=1;//Молоко
    EndIf;
  EndIf;
  
  //Обновление токена
  If _Or(IsEmpty(спДрайверПодписи["Токен"+ФлТипСервера]),IsEmpty(спДрайверПодписи["ДатаТокена"+ФлТипСервера]),GetPeriodMs(спДрайверПодписи["ДатаТокена"+ФлТипСервера])>18000000) Then //5 часов
    Result:=ОбновитьТокенГИСМТ(спДрайверПодписи,ФлТипСервера);
    If Not IsEmpty(Result) Then
      Exit Result;
    EndIf;
  EndIf;
  
  If ФлТипСервера=0 Then //Сигареты
    Сервер:="markirovka.crpt.ru:443";
  ElseIf ФлТипСервера=1 Then //Молоко
    Сервер:="ismp.crpt.ru:443";
  EndIf;
  
  If not ВыполнитьОбменССерверомГИСМТ(Сервер+Ссылка,СтрЗапрос,спДрайверПодписи,ФлТипСервера) Then
    Exit СтрЗапрос;
  EndIf;
EndFunction

//Для этих запросов не требуется наличия подписи, спДрайверПодписи здесь для полчения информации о прокси
Function глВыполнитьЗапросГИСМТAPIККТ(ЮрЛицо,спДрайверПодписи,Ссылка,ByRef СтрЗапрос,аТоварнаяГруппа=0) Export

  Function ПроверитьНаличиеИнтернета()
    Try
      aTCP:=IPConnection.Create();
      aTCP.TimeOut(1500,3);
      aTCP.Connect("77.88.8.8:53");//Yandex DNS
      if Not aTCP.IsConnected Then
        aTCP.Connect("77.88.8.8:443");
        if Not aTCP.IsConnected Then
          Exit 0;
        EndIf;
      EndIf;
      aTCP.Disconnect();
    Except
    EndTry;
    Exit 1;
  EndFunction

  //Обновление списка серверов
  ИНН:=ЮрЛицо.ИНН;
  ИНН:=TearStr(ИНН,"/");
  If (ИНН="")Or(IsEmpty(ЮрЛицо.КлючДоступаКГИСAPIККТ)) Then
    Exit "Неверные настройки юр. лица, нет ИНН или не указан ключ доступа к ГИС API ККТ!";
  EndIf;
  КлючДоступа:=ЮрЛицо.КлючДоступаКГИСAPIККТ;
  СпСписокСерверов:=СпСписокСерверовAPIККТ[ИНН];
  
  If _Or(TypeStr(СпСписокСерверов)<>"LIST",СпСписокСерверов.Size()=0,ВремяСписокСерверовAPIККТ=0,GetPeriod(ВремяСписокСерверовAPIККТ,Date(),4)>43200) Then
    Каталог:="Temp\ГИСМТ\СписокСерверов\";
    Имя:=Каталог+ИНН+".txt";
    
    ФлСохранить:=1;
    СписокСерверов:="";
    If File.DoesFileExist(Имя) Then
      ФлСохранить:=0;
      ВремяСоздания:=0;
      File.GetFileTimes(Имя,,,ВремяСоздания);
      If GetPeriod(ВремяСоздания,Date(),4)>43200 Then //12 часов
        ФлСохранить:=1;
        СписокСерверов:=FileToString(Имя,0);
      EndIf;
    EndIf;
    If (СписокСерверов="")or(ФлСохранить) Then
      ФлСохранить:=1;
      Стр:="";
      КодОтвета:=0;
      If not ВыполнитьОбменССерверомГИСМТ("https://cdn.crpt.ru/api/v4/true-api/cdn/info",Стр,спДрайверПодписи,0,2,КлючДоступа,КодОтвета) Then
        If КодОтвета=999 Then
          КодОтвета:=0;
          If ПроверитьНаличиеИнтернета() Then
            КодОтвета:=203;
            Стр:="";
          EndIf;
        EndIf;
        If (КодОтвета=203)or((КодОтвета>499)And(КодОтвета<600)) Then //Основной сервер не отвечает.
          Стр:="";
        ElseIf СписокСерверов="" Then
          Exit Стр;
        EndIf;
      EndIf;
      //{"code":0,"description":"ok","hosts":[{"host":"https://cdn01.crpt.ru"},{"host":"https://cdn04.crpt.ru"},{"host":"https://cdn08.crpt.ru"}]}
      СписокСерверов:="";
      While Стр<>"" Do
        TearStr(Стр,"""host""");
        TearStr(Стр,":");
        TearStr(Стр,"""");
        Стр2:=TearStr(Стр,"""");
        If Стр2<>"" Then
          СписокСерверов:=?(СписокСерверов="","",СписокСерверов+_NEWLINE)+Стр2;
        EndIf;
      EndDo;
      If СписокСерверов="" Then
        СписокСерверов:="https://cdn01.crpt.ru"+_NEWLINE+"https://cdn04.crpt.ru"+_NEWLINE+"https://cdn08.crpt.ru";
      EndIf;
    EndIf;
    If (ФлСохранить)and(СписокСерверов<>"") Then
      File.CreateDirectory(Каталог);
      StringToFile(СписокСерверов,Имя,1200,1);
    EndIf;
    СпСписокСерверов:=List.Create();
    СпСписокСерверов.FromString(СписокСерверов,_NEWLINE);
    СпСписокСерверовAPIККТ[ИНН]:=СпСписокСерверов;
  EndIf;
  
  ФлПовторение:=1;
  While 1 Do
    Сервер:=СпСписокСерверов[Random(СпСписокСерверов.Size())+1]+Ссылка;
    КодОтвета:=0;
    //401 -- неверный токен, вывести ошибку
    //429 -- повторить запрос один раз с другим сервером, после этого вывести ошибку
    //4xx -- неисправимая ошибка, вывести ошибку
    //5xx -- повторить запрос один раз с другим сервером, после этого отдать как успешный (07.05.2024 серверы ГИС МТ не работают и отдают 500, а не 203, как обещано)
    //203 -- отдать результат запроса, как успешный (сервер временно отключен)
    //Ответ занимает >1.5 секунды -- отдать результат запроса, как успешный, TODO
    Стр:=СтрЗапрос;
    If ВыполнитьОбменССерверомГИСМТ(Сервер,Стр,спДрайверПодписи,0,2,КлючДоступа,КодОтвета) Then
      СтрЗапрос:=Стр;
      Exit "";
    EndIf;
    
    ФлПовторение:=ФлПовторение+1;
    If ФлПовторение>2 Then
      If КодОтвета=999 Then
        КодОтвета:=0;
        If ПроверитьНаличиеИнтернета() Then
          КодОтвета:=203;
          ФлПовторение:=2;
          Стр:=Стр+_NEWLINE+"Интернет присутствовал, невозможно соединиться с серверами cdn??.crpt.ru";
        EndIf;
      EndIf;
      If ((КодОтвета>499)And(КодОтвета<600))or(КодОтвета=203) Then
        If Стр<>"" Then
          ТОшибкиЧека:=Text.Create(1);
          ТОшибкиЧека.AddString(Стр);
          ТОшибкиЧека.Save("Temp\Розница\ОшибкиЧеков\ГИСМТ_Skip_"+FormatDate(Date(),"YYYYmmdd_hhttssppp")+".txt",65001,1);
        EndIf;
        СтрЗапрос:="";//Ошибка сервера после 2 попыток, отдаем успешный пустой ответ
        Exit "";
      EndIf;
      Exit Стр;
    EndIf;
    If (КодОтвета=429)or((КодОтвета>499)And(КодОтвета<600)) Then
      Continue;
    EndIf;
    If КодОтвета=203 Then
      СтрЗапрос:="";
      Exit "";
    EndIf;
    Exit Стр;
  EndDo;
EndFunction

//Функция вызывается при старте системы после инициализации GUI.
Function OnSystemStart()
  СпСписокСерверовAPIККТ:=List.Create();
  СпКлючиДоступаAPIККТ:=List.Create();
  глНомераФНAPIККТ:=List.Create();
  ВремяСписокСерверовAPIККТ:=0;
EndFunction
