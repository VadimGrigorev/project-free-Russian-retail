//Глобальные (root) модули загружаются при старте системы. Загрузка начинается с модуля "module" и продолжается в алфавитном порядке.
//Переменные и функции, объявленные с постфиксом export, будут доступны в любых других модулях в любых потоках системы.
//Модуль может содержать специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

Var глГорячиеКлавишиУмолчания Export;
Var глПотокРабочегоМестаПродавца Export;
Var глДрайверы Export;
//Список содержит загруженные драйверы в виде подчиненных списков с наименованиями категорий (типа "Сканер")
//Каждый подчиненный список содержит подчиненный список драйвера (спНастройки), список имеет сл. элементы:
//"МодульДрайвера" -- скомпилированый модуль драйвера (для обращения к функциям драйвера)
//"ПутьДрайвера" -- путь к драйверу
//"Оборудование" -- элемент оборудования
//"ТипОборудования" -- тип оборудования (то, что задано в переменной "Оборудование" файла Оборудование.ini), пример: "Контрольно-кассовые терминалы".
//Особые флаги, устанавливаемые драйверами при инициализации:
//"СканерКлавиатура" -- драйвер отвечает за сканер, работающий, как клавиатура (возможно сканер входит в более сложный терминал)
//"ВестиPLUКоды" -- необходимо ведение справочника ref.тмцPLUКоды. Справочник обычно ведется системой автоматически (см. ПечатьЦенников)
//"ВыгрузкаЦен" -- необходима автоматическая выгрузка цен, если в них произошли изменения. Таблица выгрузки имеет столбцы: Номенклатура,Штрихкод,Цена
//"ВыгрузкаШтрихкодов" -- необходима автоматическая выгрузка штрихкодов, если в них произошли изменения (тоже, что и "ВыгрузкаЦен", но без самих цен). Таблица выгрузки имеет столбцы: Номенклатура,Штрихкод

//Весовой товар имеет шаблон, заданный в реквизитах магазина: 
//22PPPPPKKFFF? - PPPPP - PLU -- код товара, KK.FFF -- масса товара (в ед. товара), ? -- контрольная цифра
//Особый штучный товар имеет строго заданный шаблон штрихкода, но лучше сгенерировать новый штрихкод:
//23CCCCCCCCCC? - CCCCCCCCCC - Код товара (невозможно кодировать товары с кодами больше 9999999999), ? -- контрольная цифра

Var глСканерыКлавиатуры Export; //Только драйверы сканеров клавиатуры (подмножество глДрайверы)
Var глСканерыОстальные Export; //Все другие сканеры, кроме клавиатурных
Var глСканерыКлавиатурыТаймерИнтервал Export;
Var глМагазинДрайверов Export;
Var глВиртуальныеКодыСпециальныхКлавиш Export;

//Подчиненный процесс
Var глККМОбъектДрайвера Export, глККМОбъектДрайвера2 Export, глККМОбъектДрайвера3 Export;
Function глВыполнитьФункциюДрайвера(ИмяФункции,спНастройки) Export Forward;

//Для передачи информации драйверы вызывают SendMessage с индексами сообщений:
//10001 -- сканер (не клавиатурный) получил сообщение и передает его в программу

Function глЗагрузитьДрайверы(Реинициализация=0,УдалитьДрайвер=0,СпОшибки=0) Export;
  спДрайверы:=List.Create();
  глМагазинДрайверов:=глПользователь.РабочееМесто.Parent();
  ФлСканер:=0;
  If глПользователь.РабочееМесто.Selected()<>0 Then
    аРМ:=глПользователь.РабочееМесто.Copy();
    aTab:=аРМ.LineParts("Оборудование");
    aTab.Select();
    While aTab.Next() Do
      If aTab.Оборудование.DBName()<>"рознОборудованиеМагазинов" Then
        Continue;
      EndIf;
      If (спДрайверы.Find(aTab.Оборудование)=0)And(УдалитьДрайвер<>aTab.Оборудование) Then
        Try
          Путь:=aTab.Оборудование.Путь;
          Ини:=Ini.Create();
          Ини.AddFromFile(AddBackSlash(Путь)+"Оборудование.ini");
          If Number(Ини.GetData("СканерКлавиатура","0"))=1 Then
            ФлСканер:=1;
          EndIf;
          спДрайверы.Add(aTab.Оборудование);
        Except
        EndTry;
      EndIf;
    EndDo;
  EndIf;
  If not ФлСканер Then
    aEl:=Ref.рознОборудованиеМагазинов;
    aEl.New();
    aEl.Name:="Виртуальный сканер";
    aEl.Путь:="Modules\FreeForms\Драйверы\Сканер_Клавиатура\";
    aEl.Настройки:="Суффикс=""#13#"""+_NEWLINE+"ВремяСканирования=""125""";
    спДрайверы.Add(aEl);
  EndIf;
  
  LockObject(глДрайверы);
  LockObject(глСканерыКлавиатуры);
  LockObject(глСканерыОстальные);
  Try
    If Реинициализация Then
      глСканерыКлавиатуры.Clear();
      глСканерыОстальные.Clear();
      For i:=1 To глДрайверы.Size() Do
        спНастройки:=глДрайверы[i];
        aEl:=спНастройки["Оборудование"];
        Try
          глВыполнитьФункциюДрайвера("DriverDisconnect",спНастройки);
          глВыполнитьФункциюДрайвера("DriverDeinit",спНастройки);
        Except
        EndTry;
      EndDo;
    Else
      i:=0;
      While i<глДрайверы.Size() Do
        i:=i+1;
        спНастройки:=глДрайверы[i];
        aEl:=спНастройки["Оборудование"];
        i2:=спДрайверы.Find(aEl);
        If i2>0 Then
          //Изменились ли настройки?
          If (aEl.Настройки=aEl.Copy().Настройки)And(aEl<>УдалитьДрайвер) Then
            спДрайверы.Remove(i2);
            Continue;
          EndIf;
        EndIf;
        i2:=глСканерыКлавиатуры.Find(спНастройки);
        If i2>0 Then
          глСканерыКлавиатуры.Remove(i2);
        EndIf;
        i2:=глСканерыОстальные.Find(спНастройки);
        If i2>0 Then
          глСканерыОстальные.Remove(i2);
        EndIf;
        Try
          глВыполнитьФункциюДрайвера("DriverDisconnect",спНастройки);
          глВыполнитьФункциюДрайвера("DriverDeinit",спНастройки);
        Except
        EndTry;
        глДрайверы.Remove(i);
        i:=i-1;
      EndDo;
    EndIf;
    
    For i:=1 To спДрайверы.Size() Do
      aEl:=спДрайверы[i];
      Try
        спНастройки:=List.Create();
        спНастройки["ДопУстановки"]:=aEl.Настройки;
        спНастройки["ПутьДрайвера"]:=aEl.Путь;
        спНастройки["Оборудование"]:=aEl;
        
        Ини:=Ini.Create();
        Ини.AddFromFile(AddBackSlash(aEl.Путь)+"Оборудование.ini");
        спНастройки["СканерКлавиатура"]:=0;
        If Number(Ини.GetData("СканерКлавиатура","0"))=1 Then
          спНастройки["СканерКлавиатура"]:=1;
        EndIf;
        спНастройки["ТипОборудования"]:=Ини.GetData("Оборудование","");
        
        //Загрузка текста драйвера
        Путь:=AddBackSlash(aEl.Путь)+"Драйвер";
        If File.DoesFileExist(Путь+".sfc") Then
          aBuf:=Buffer.Create();
          aBuf.LoadFromFile(Путь+".sfc");
          аМодуль:=LoadFunctionFromBuffer(aBuf);
          спНастройки["МодульДрайвера"]:=аМодуль;
        ElseIf File.DoesFileExist(Путь+".sf") Then
          Стр:=FileToString(Путь+".sf",0);
          аМодуль:=Compile(Стр,1);
          спНастройки["МодульДрайвера"]:=аМодуль;
        Else
          Raise "Отсутствует модуль драйвера!";
        EndIf;
        
        //Инициализация
        Стр:=глВыполнитьФункциюДрайвера("DriverInit",спНастройки);
        If Стр<>"" Then
          Raise Стр;
        EndIf;
        
        //Подключить все драйверы не клавиатурных сканеров
        If _And(спНастройки["ТипОборудования"]=Enum.GetCaption("рознТипыОборудования.СканерыШтрикодов"),спНастройки["СканерКлавиатура"]=0) Then
          Стр:=глВыполнитьФункциюДрайвера("DriverConnect",спНастройки);
          If Стр<>"" Then
            глВыполнитьФункциюДрайвера("DriverDeinit",спНастройки);
            Raise Стр;
          EndIf;
          глСканерыОстальные.Add(спНастройки);
        EndIf;
        
        глДрайверы.Add(спНастройки);
        If спНастройки["СканерКлавиатура"]=1 Then
          глСканерыКлавиатуры.Add(спНастройки);
        EndIf;
      Except
        Стр:="Ошибка при инициализации оборудования "+aEl+": "+PopError();
        If СпОшибки<>0 Then
          СпОшибки.Add(Стр);
        EndIf;
        Message(Стр,"!");
      EndTry;
    EndDo;
    
    //Обновление
    глСканерыКлавиатурыТаймерИнтервал:=200;
    For i:=1 To глСканерыКлавиатуры.Size() Do
      спНастройки:=глСканерыКлавиатуры[i];
      глСканерыКлавиатурыТаймерИнтервал:=min(глСканерыКлавиатурыТаймерИнтервал,max(Number(спНастройки["СканерВремя"]),10));
    EndDo;
    глСканерыКлавиатурыТаймерИнтервал:=Round(глСканерыКлавиатурыТаймерИнтервал);
    
    If глСканерыОстальные.Size()>0 Then
      ФлИнтервал2:=150;
      For i:=1 To глСканерыОстальные.Size() Do
        спНастройки:=глСканерыКлавиатуры[i];
        ФлИнтервал2:=min(глСканерыКлавиатурыТаймерИнтервал,max(Number(спНастройки["СканерВремя"]),10));
      EndDo;
      ФлИнтервал2:=min(150,ФлИнтервал2);
      глСканерыКлавиатурыТаймерИнтервал:=Min(ФлИнтервал2,глСканерыКлавиатурыТаймерИнтервал);
    EndIf;
  Finally
    UnlockObject(глСканерыОстальные);
    UnlockObject(глСканерыКлавиатуры);
    UnlockObject(глДрайверы);
  EndTry;
EndFunction;


//Используется для подчиненных магазинов
//Не загружает драйверы сканеров
//Отдает пустую строку, если ошибок нет, иначе описание ошибки
Function глЗагрузитьДрайверыДругогоМагазина(РабочееМесто,ByRef спДрайверы) Export;
  Result:="";
  спДрайверы:=List.Create();
  аРМ:=РабочееМесто.Copy();
  aTab:=аРМ.LineParts("Оборудование");
  aTab.Select();
  While aTab.Next() Do
    If aTab.Оборудование.DBName()<>"рознОборудованиеМагазинов" Then
      Continue;
    EndIf;
    Try
      aEl:=aTab.Оборудование;
      Путь:=aEl.Путь;
      Ини:=Ini.Create();
      Ини.AddFromFile(AddBackSlash(Путь)+"Оборудование.ini");
      If Number(Ини.GetData("СканерКлавиатура","0"))=1 Then
        Continue;
      EndIf;
      If Ини.GetData("Оборудование","")=Enum.GetCaption("рознТипыОборудования.СканерыШтрикодов") Then
        Continue;
      EndIf;
      
      спНастройки:=List.Create();
      спНастройки["ДопУстановки"]:=aEl.Настройки;
      спНастройки["ПутьДрайвера"]:=aEl.Путь;
      спНастройки["Оборудование"]:=aEl;
      спНастройки["ТипОборудования"]:=Ини.GetData("Оборудование","");
      
      //Загрузка текста драйвера
      Путь:=AddBackSlash(Путь)+"Драйвер";
      If File.DoesFileExist(Путь+".sfc") Then
        aBuf:=Buffer.Create();
        aBuf.LoadFromFile(Путь+".sfc");
        аМодуль:=LoadFunctionFromBuffer(aBuf);
        спНастройки["МодульДрайвера"]:=аМодуль;
      ElseIf File.DoesFileExist(Путь+".sf") Then
        Стр:=FileToString(Путь+".sf",0);
        аМодуль:=Compile(Стр,1);
        спНастройки["МодульДрайвера"]:=аМодуль;
      Else
        Raise "Отсутствует модуль драйвера!";
      EndIf;
        
      //Инициализация
      Стр:=глВыполнитьФункциюДрайвера("DriverInit",спНастройки);
      If Стр<>"" Then
        Raise Стр;
      EndIf;
        
      спДрайверы.Add(спНастройки);
    Except
      Exit "Ошибка при инициализации оборудования "+aEl+": "+PopError();
    EndTry;
  EndDo;
EndFunction;

Function глВыгрузитьДрайверыДругогоМагазина(спДрайверы) Export;
  For i:=1 To спДрайверы.Size() Do
    спНастройки:=спДрайверы[i];
    aEl:=спНастройки["Оборудование"];
    Try
      глВыполнитьФункциюДрайвера("DriverDisconnect",спНастройки);
      глВыполнитьФункциюДрайвера("DriverDeinit",спНастройки);
    Except
    EndTry;
  EndDo;
EndFunction

Function глНайтиТМЦПоШтрихКоду(Штрихкод,ByRef Эл,флТихо=1) Export
  Эл:=0;
  а:=Ref.тмцШтрихкоды;
  If а.Find("Name",Штрихкод) Then
    Эл:=а.Parent();
    Exit ?(а.Коэффициент=0,1,а.Коэффициент);
  EndIf;
  If not флТихо Then
    If Trim(Штрихкод)<>"" Then
      Box("Номенклатура или партия со штрихкодом "+Trim(Штрихкод)+" в базе не найдены!",Q_WARNING);
    EndIf;
  EndIf;
  Exit 0;
EndFunction

Function глНайтиПартиюПоКодуМарки(КодМарки,ByRef Эл,ФлТолькоВНаличии=0) Export
  Эл:=0;
  а:=Ref.тмцМаркировкаПозиций;
  If _And(not ФлТолькоВНаличии,а.FindEx(1,,"КодМарки",КодМарки)) Then
    Эл:=а.Parent();
    Exit 1;
  ElseIf _And(ФлТолькоВНаличии,а.FindEx(1,,"~(КодМарки=КодМарки)And(флСостояние=1)And(@Status=0)")) Then
    Эл:=а.Parent();
    Exit 1;
  EndIf;
  Exit 0;
EndFunction

Function глСброситьСостояниеСтанеров(ByRef НакопленноеСообщение="") Export
  НакопленноеСообщение:="";
  If глСканерыКлавиатуры.Size()>0 Then
    LockObject(глСканерыКлавиатуры);
    Try
      For i:=1 To глСканерыКлавиатуры.Size() Do
        спНастройки:=глСканерыКлавиатуры[i];
        ExecuteFunction("ResetKeystrokeBuffer",спНастройки["МодульДрайвера"],спНастройки);
        спНастройки["ПозицияНачалаСообщения"]:=0;
      EndDo;
    Finally
      UnlockObject(глСканерыКлавиатуры);
    EndTry;    
  EndIf;
EndFunction

//Результат: Сообщение сканирования
//ВиртуальныйКод=0 -- вызов из OnTimer
//ФлНажатие=-1 -- OnTimer, 0 -- отпускание, 1 -- нажатие
//РезультатOnKeyPress: 1 -- поглотить нажатие, 0 -- разрешить передать нажатие форме
Function глПередатьНажатиеКлавишиСканерам(ВиртуальныйКод,Символ,ByRef НакопленноеСообщение,ФлНажатие=-1,ByRef РезультатOnKeyPress=1) Export;

  Function _ПерекодироватьСообщение(спНастройки,СтрСообщение)
    Таб:=спНастройки["ТаблицаПерекодирования"];
    If _Or(IsEmpty(Таб),Таб.Size()=0) Then
      Exit СтрСообщение;
    EndIf;
    Таб.Select();
    While Таб.Next() Do
      СтрСообщение:=Replace(СтрСообщение,Таб.Комбинация,Таб.Результат);
    EndDo;
    Exit СтрСообщение;
  EndFunction

  Result:="";
  
  //Не клавиатурные сканеры
  If ФлНажатие=-1 Then
    If глСканерыОстальные.Size()>0 Then
      LockObject(глСканерыОстальные);
      Try
        For i:=1 To глСканерыОстальные.Size() Do
          спНастройки:=глСканерыОстальные[i];
          Стр:=ExecuteFunction("GetNextMessage",спНастройки["МодульДрайвера"],спНастройки);
          If not IsEmpty(Стр) Then
            Result:=_ПерекодироватьСообщение(спНастройки,Стр);
            Exit;
          EndIf;
        EndDo;
      Finally
        UnlockObject(глСканерыОстальные);
      EndTry;
    EndIf;
  EndIf;
  
  If глСканерыКлавиатуры.Size()=0 Then
    РезультатOnKeyPress:=0;
    Exit;
  EndIf;
  
  Время:=Date();
  LockObject(глСканерыКлавиатуры);
  Try
    СимулироватьДлину:=0;         //Удалить эту длину из НакопленноеСообщение
    ИндексНайденногоСообщения:=0; //Сканер принял сообщение, начиная с ИндексНайденногоСообщения до конца НакопленноеСообщение
    
    Repeat
      //К сожалению, некоторые сканеры отправляют Shift и даже Caps внутри последовательности сканирования...
      If глВиртуальныеКодыСпециальныхКлавиш.Find(ВиртуальныйКод,,1)>0 Then
        //Alt,Ctrl,Caps,Win,Shift,Ins и др. -- клавиши, не принимаемые от сканеров, иначе они мешают общей работе
        РезультатOnKeyPress:=0;
        Exit;
      EndIf;
      
      If ФлНажатие=1 Then
        //Последовательное нажатие без отпускания означает, что это клавиатура, а не сканер
        If _And(Length(НакопленноеСообщение)>0,Asc(НакопленноеСообщение[Length(НакопленноеСообщение)])<>0) Then
          НакопленноеСообщение:=НакопленноеСообщение+Chr(ВиртуальныйКод);
          СимулироватьДлину:=Length(НакопленноеСообщение);
          Break;
        EndIf;
      EndIf;
      
      If ВиртуальныйКод>0 Then
        //Отпускания клавиш фиксируются в НакопленноеСообщение кодом 0.
        If ФлНажатие=0 Then
          If _And(Length(НакопленноеСообщение)>0,НакопленноеСообщение[Length(НакопленноеСообщение)]<>0) Then
            НакопленноеСообщение:=НакопленноеСообщение+Chr(0);
          EndIf;
          Exit;
        Else
          НакопленноеСообщение:=НакопленноеСообщение+Chr(ВиртуальныйКод);
        EndIf;
      EndIf;
    
      For i:=1 To глСканерыКлавиатуры.Size() Do
        спНастройки:=глСканерыКлавиатуры[i];
        ПредВремя:=спНастройки["ВремяПредыдущегоНажатия"];
        Чл:=спНастройки["СканерВремя"];
        If _And(ПредВремя<>0,GetPeriod(ПредВремя,Время,5)>Чл) Then
If ФлНажатие>-1 Then
  writeln(""+Date+" "+CurTime+":"+ФлНажатие+":"+ВиртуальныйКод+":"+GetPeriod(ПредВремя,Время,5)+":"+спНастройки["НакопленноеСообщение"]);
EndIf;
          спНастройки["ВиртуальныйКод"]:=0;
          спНастройки["Символ"]:="";
          Фл:=ExecuteFunction("AcceptKeystroke",спНастройки["МодульДрайвера"],спНастройки);
          If Фл=0 Then
            //Нажатие не принято
            спНастройки["ПозицияНачалаСообщения"]:=0;
          ElseIf Фл=2 Then
            //Нажатие принято, получение сообщения закончено, сообщение находится в спНастройки["Сообщение"]
            Result:=_ПерекодироватьСообщение(спНастройки,спНастройки["Сообщение"]);
            ИндексНайденногоСообщения:=Max(Number(спНастройки["ПозицияНачалаСообщения"]),1);
            Break;
          EndIf;
        ElseIf ВиртуальныйКод=0 Then
          Continue;//OnTimer без таймаута
        Else
          спНастройки["ВремяПредыдущегоНажатия"]:=Время;
          спНастройки["ВиртуальныйКод"]:=ВиртуальныйКод;
          спНастройки["Символ"]:=Символ;
          
          Фл:=ExecuteFunction("AcceptKeystroke",спНастройки["МодульДрайвера"],спНастройки);
          If Фл=0 Then
            //Нажатие не принято
            спНастройки["ПозицияНачалаСообщения"]:=0;
          ElseIf Фл=1 Then
            //Нажатие принято, сообщение не полное
            If Number(спНастройки["ПозицияНачалаСообщения"])=0 Then
              спНастройки["ПозицияНачалаСообщения"]:=Max(1,Length(НакопленноеСообщение));
            EndIf;
          ElseIf Фл=2 Then
            //Нажатие принято, получение сообщения закончено, сообщение находится в спНастройки["Сообщение"]
            Result:=_ПерекодироватьСообщение(спНастройки,спНастройки["Сообщение"]);
            ИндексНайденногоСообщения:=Max(Number(спНастройки["ПозицияНачалаСообщения"]),1);
            Break;
          EndIf;
        EndIf;
      EndDo;
      If ИндексНайденногоСообщения>0 Then
        //Текущее сообщение было принято начиная с ИндексНайденногоСообщения до конца НакопленноеСообщение
        //  Все, что следует раньше, передать на форму
        //  Все, что позже, удалить
        //  Все остальные сканеры сбросить
        Стр:=Left(НакопленноеСообщение,ИндексНайденногоСообщения-1);
        НакопленноеСообщение:="";
        For i:=1 To Length(Стр) Do
          If Asc(Стр[i])>0 Then
            SysEmulateKeystroke(Asc(Стр[i]),1);
            Sleep(5);
            SysEmulateKeystroke(Asc(Стр[i]),0);
If Result<>"" Then
  writeln(""+Date+" "+CurTime+":ИндексНайденногоСообщения: "+ИндексНайденногоСообщения+", сообщение: "+Result);
EndIf;
          EndIf;
        EndDo;
        For i:=1 To глСканерыКлавиатуры.Size() Do
          спНастройки:=глСканерыКлавиатуры[i];
          ExecuteFunction("ResetKeystrokeBuffer",спНастройки["МодульДрайвера"],спНастройки);
          спНастройки["ПозицияНачалаСообщения"]:=0;
        EndDo;
        Exit;
      EndIf;
      //Отдать строку, не принятую ни одним сканером
      СимулироватьДлину:=Length(НакопленноеСообщение);
      For i:=1 To глСканерыКлавиатуры.Size() Do
        спНастройки:=глСканерыКлавиатуры[i];
        If Number(спНастройки["ПозицияНачалаСообщения"])>0 Then
          СимулироватьДлину:=Min(СимулироватьДлину,Number(спНастройки["ПозицияНачалаСообщения"])-1);
        EndIf;
      EndDo;
    Until 1;
  
    If СимулироватьДлину>0 Then
      Стр:=Left(НакопленноеСообщение,СимулироватьДлину);
      НакопленноеСообщение:=Mid(НакопленноеСообщение,СимулироватьДлину+1);
      For i:=1 To Length(Стр) Do
        If Asc(Стр[i])>0 Then
          SysEmulateKeystroke(Asc(Стр[i]),1);
          Sleep(5);
          SysEmulateKeystroke(Asc(Стр[i]),0);
If НакопленноеСообщение<>"" Then
  writeln(""+Date+" "+CurTime+":СимулироватьДлину: "+СимулироватьДлину+", сообщение: "+НакопленноеСообщение);
EndIf;
        EndIf;
      EndDo;
      //Реиндексация
      For i:=1 To глСканерыКлавиатуры.Size() Do
        спНастройки:=глСканерыКлавиатуры[i];
        If Number(спНастройки["ПозицияНачалаСообщения"])>0 Then
          спНастройки["ПозицияНачалаСообщения"]:=Max(0,спНастройки["ПозицияНачалаСообщения"]-СимулироватьДлину+1);
        EndIf;  
      EndDo;
    EndIf;
  Finally
    UnlockObject(глСканерыКлавиатуры);
  EndTry;
EndFunction;


Function глПолучитьРозничнуюЦену(зН,ТипЦен,Магазин,Тихо=0,ЦеныНаДату=0) Export
  Ц:=Ref.цЦены;
  If not Ц.Find("@Parent,ТипЦен",зН,ТипЦен) Then
    If Тихо=0 Then
      Message("Для ТМЦ "+зН+" ("+зН.Code+") не установлена цена!","!");
    EndIf;
    Exit -1;
  EndIf;
  
  кЦ:=Ref.цПечатьЦенников;
  If not кЦ.Find("@Parent,Магазин",зН,Магазин) Then
    If Тихо=0 Then
      Message("Для ТМЦ "+зН+" ("+зН.Code+") не был предварительно распечатан ценник!","!");
    EndIf;
    Exit -1;
  EndIf;
  цДата:=кЦ.ДатаПечати;
  If not IsEmpty(ЦеныНаДату) Then
    цДата:=Min(цДата,ЦеныНаДату);
  EndIf;
  If isEmpty(цДата) Then
    цДата:='01.01.1981';
  EndIf;
  зЦ:=Max(зН.ЦенаМинимальнаяПродажная,Ц.GetValue("Цена",цДата),0);
  зЦ:=?(зН.ЦенаМаксимальнаяПродажная>0,Min(зН.ЦенаМаксимальнаяПродажная,зЦ),зЦ);
  
  Exit зЦ;
EndFunction


Function глПолучитьДрайверыПоУсловию(Переменная,Значение) Export;
  aList:=List.Create();
  LockObject(глДрайверы);
  Try
    For i:=1 To глДрайверы.Size() Do
      спНастройки:=глДрайверы[i];
      If спНастройки[Переменная]=Значение Then
        aList.Add(спНастройки);
      EndIf;
    EndDo;
  Finally
    UnlockObject(глДрайверы);
  EndTry;
  Exit aList;
EndFunction


Function глОбновитьРасписаниеПротоколаОбмена(Протокол,ПутьМодуля,РасписаниеВыгрузки,РасписаниеЗагрузки) Export
  СтрМодуль:="aEl:=DB(""Ref.рознПротоколыОбменаМагазинов"",""Code"","""+Протокол.Code+""");
    |If IsEmpty(aEl.Настройки) Then
    |  Raise ""В магазине ""+aEl.Parent()+"" для протокола обмена ""+aEl+"" не заданы установки"";
    |EndIf;
    |Сп:=List.Create();
    |Сп[""Элемент""]:=aEl;
    |Сп[""Команда""]:=""###"";
    |LoadModule(0,"""+ПутьМодуля+""",Сп,0,""Module"",""Form"");";
  
  //Ищем расписание для текущего магазина  
  While 1 Do
    аВыгрузка:=0;
    флВыгрузка:=0;
    аЗагрузка:=0;
    флЗагрузка:=0;
    aEl:=Ref.общРасписаниеЗапускаОбработок;
    aEl.Select();//"~(Str(Расписание.Модуль)="+ПутьМодуля+")"
    While aEl.Next() Do
      aTab:=aEl.LineParts("Расписание");
      If aTab.Find(ПутьМодуля,,"Модуль")=0 Then
        Continue;
      EndIf;
      aTab.Select();
      Фл:=0;
      While aTab.Next() Do
        If _And(aTab.Модуль=ПутьМодуля,Pos("DB(""Ref.рознПротоколыОбменаМагазинов"",""Code"","""+Протокол.Code+""")",aTab.СценарийДляИсполнения)>0) Then
          If Pos("Сп[""Команда""]:=""Выгрузка""",aTab.СценарийДляИсполнения)>0 Then
            аВыгрузка:=aTab.CurLine;
            флВыгрузка:=not aTab.флОтключено;
          ElseIf Pos("Сп[""Команда""]:=""Загрузка""",aTab.СценарийДляИсполнения)>0 Then
            аЗагрузка:=aTab.CurLine;
            ФлЗагрузка:=not aTab.флОтключено;
          EndIf;
        EndIf;
        If (аВыгрузка>0)And(аЗагрузка>0) Then
          Break 2;
        EndIf;
      EndDo;
      If (аВыгрузка>0)Or(аЗагрузка>0) Then
        Break;
      EndIf;
    EndDo;
    If (аВыгрузка=0)And(аЗагрузка=0) Then
      aEl:=0;
    EndIf;
    
    If ((РасписаниеВыгрузки<>"")=флВыгрузка)And((РасписаниеЗагрузки<>"")=флЗагрузка) Then
      Break;//Изменений нет
    EndIf;
    
    If IsEmpty(aEl) Then
      aEl:=Ref.общРасписаниеЗапускаОбработок;
      If not aEl.Find("Name","Обмен по протоколу Фронтол") Then
        aEl.New();
        aEl.Name:="Обмен по протоколу Фронтол";
        aEl.Save();
      EndIf;
    EndIf;
    
    аПольз:="";аМаш:="";аВремя:="";
    If aEl.Lock(аПольз,аМаш,аВремя)=0 Then
      Box("Невозможно заблокировать элемент справочника расписаний обмена, его блокировку произвел пользователь "+аПольз+" на "+аМаш+" в "+аВремя+"!",Q_STOP);
      Exit;  
    EndIf;
    Try
      Фл:=0;
      aEl.Reload();
      If (РасписаниеВыгрузки<>"")Or(РасписаниеЗагрузки<>"") Then
        If aEl.Status()=1 Then
          aEl.Mark(0);
        EndIf;
        If aEl.флОтключено Then
          Фл:=1;
          aEl.флОтключено:=0;
        EndIf;
      EndIf;
      aTab:=aEl.LineParts("Расписание");
      If _And(аВыгрузка>0,_Or(aTab.Size()<аВыгрузка,aTab["Модуль",аВыгрузка]<>ПутьМодуля,Pos("DB(""Ref.рознПротоколыОбменаМагазинов"",""Code"","""+Протокол.Code+""")",aTab["СценарийДляИсполнения",аВыгрузка])=0)) Then
        //Небольшой шанс, что кто-то изменил расписание, пока мы его не заблокировали
        Continue;
      EndIf;
      If _And(аЗагрузка>0,_Or(aTab.Size()<аЗагрузка,aTab["Модуль",аЗагрузка]<>ПутьМодуля,Pos("DB(""Ref.рознПротоколыОбменаМагазинов"",""Code"","""+Протокол.Code+""")",aTab["СценарийДляИсполнения",аЗагрузка])=0)) Then
        //Небольшой шанс, что кто-то изменил расписание, пока мы его не заблокировали
        Continue;
      EndIf;
      
      
      If (РасписаниеВыгрузки<>"")<>флВыгрузка Then
        If РасписаниеВыгрузки<>"" Then
          If аВыгрузка=0 Then
            aTab.AddLine("Описание,Модуль,РасписаниеЗапуска,СценарийДляИсполнения","Выгрузка по магазину "+Протокол.Parent(),ПутьМодуля,РасписаниеВыгрузки,Replace(СтрМодуль,"###","Выгрузка"));
            аВыгрузка:=aTab.CurLine;
          ElseIf aTab["флОтключено",аВыгрузка]=1 Then
            aTab["флОтключено",аВыгрузка]:=0;
          EndIf;
        Else
          aTab["флОтключено",аВыгрузка]:=1;
        EndIf;
        Фл:=1;
      EndIf;
      If РасписаниеВыгрузки<>"" Then
        aTab.CurLine:=аВыгрузка;
        If aTab.РасписаниеЗапуска<>РасписаниеВыгрузки Then
          aTab.РасписаниеЗапуска:=РасписаниеВыгрузки;
          Фл:=1;
        EndIf;
        If aTab.СценарийДляИсполнения="" Then
          aTab.СценарийДляИсполнения:=Replace(СтрМодуль,"###","Выгрузка");
          Фл:=1;
        EndIf;
      EndIf;
      
      If (РасписаниеЗагрузки<>"")<>флЗагрузка Then
        If РасписаниеЗагрузки<>"" Then
          If аЗагрузка=0 Then
            aTab.AddLine("Описание,Модуль,РасписаниеЗапуска,СценарийДляИсполнения","Загрузка по магазину "+Протокол.Parent(),ПутьМодуля,РасписаниеЗагрузки,Replace(СтрМодуль,"###","Загрузка"));
            аЗагрузка:=aTab.CurLine;
          ElseIf aTab["флОтключено",аЗагрузка]=1 Then
            aTab["флОтключено",аЗагрузка]:=0;
          EndIf;
        Else
          aTab["флОтключено",аЗагрузка]:=1;
        EndIf;
        Фл:=1;
      EndIf;
      If РасписаниеЗагрузки<>"" Then
        aTab.CurLine:=аЗагрузка;
        If aTab.РасписаниеЗапуска<>РасписаниеЗагрузки Then
          aTab.РасписаниеЗапуска:=РасписаниеЗагрузки;
          Фл:=1;
        EndIf;
        If aTab.СценарийДляИсполнения="" Then
          aTab.СценарийДляИсполнения:=Replace(СтрМодуль,"###","Загрузка");
          Фл:=1;
        EndIf;
      EndIf;
      
      If Фл Then
        aEl.Save();
      EndIf;
    Finally
      aEl.Unlock();
    EndTry;
    Break;
  EndDo;
EndFunction
  
Function глВыполнитьФункциюДрайвера(ИмяФункции,спНастройки) Export

  Function _КопироватьИзменения(спНастройки,спНастройки2)
    //Копируем возможные ответы из спНастройки2 в спНастройки
    //TODO: Это медленно, можно сделать быстрее
    For i:=1 To спНастройки2.Size() Do
      Стр:=спНастройки2.GetName(i);
      Зн:=спНастройки[Стр];
      Зн2:=спНастройки2[i];
      If Зн2<>Зн Then
        If _Or(TypeStr(Зн)="NOTHING",TypeStr(Зн)="NUMBER",TypeStr(Зн)="STRING",TypeStr(Зн)="DATE") Then
          спНастройки[Стр]:=Зн2;
        EndIf;
      EndIf;
    EndDo;
  EndFunction;

  Try
    ФлОтдельныйПроцесс:=Number(спНастройки["ВыполнятьВОтдельномПроцессе"]);//-1 (нет) или 1 (да)
    If _And(ФлОтдельныйПроцесс=0,спНастройки["Оборудование"].флВыполнятьОбменВОтдельномПриложении) Then
      If DoesFunctionExist("SeparateProcessServer",спНастройки["МодульДрайвера"]) Then
        ФлОтдельныйПроцесс:=1;
      EndIf;
    EndIf;  
    If ФлОтдельныйПроцесс=0 Then
      ФлОтдельныйПроцесс:=-1;
    EndIf;
    спНастройки["ВыполнятьВОтдельномПроцессе"]:=ФлОтдельныйПроцесс;
    If ФлОтдельныйПроцесс=1 Then
      ТайтАут:=спНастройки["Оборудование"].ТаймаутВыполненияВОтдельномПриложении;
      //Требуется инициализация или переинициализация процесса
      аПроцесс:=спНастройки["ПодчиненныйПроцесс"];
      If Uppercase(ИмяФункции)="DRIVERDEINIT" Then
        If _And(not IsEmpty(аПроцесс),аПроцесс.IsProcessActive) Then
          аПроцесс.TerminateProcess(1);
        EndIf;
        аПроцесс:=0;
        спНастройки["ПодчиненныйПроцесс"]:=0;
        Exit;
      EndIf;
      If _Or(IsEmpty(аПроцесс),not аПроцесс.IsProcessActive) Then
        If Uppercase(ИмяФункции)="DRIVERDISCONNECT" Then
          аПроцесс:=0;
          спНастройки["ПодчиненныйПроцесс"]:=0;
          Exit;
        EndIf;
        ФлПодключить:=Not IsEmpty(аПроцесс);
        Try
          аПроцесс:=Mutex.InitializeSeparateProcess("ПроцессДрайвера",спНастройки["МодульДрайвера"]);
          If ФлПодключить Then
            аПроцесс.InterProcessTimeout(ТайтАут);
            спНастройки["ВызываемаяФункция"]:="DriverInit";
            спНастройки2:=спНастройки;
            Стр:=Trim(аПроцесс.InterProcessExecuteFunction("SeparateProcessServer",спНастройки2));
            If Стр<>"" Then
              If Стр[1]<>Chr(1) Then
                Exit Стр;
              EndIf;
            EndIf;
            _КопироватьИзменения(спНастройки,спНастройки2);
            спНастройки["ВызываемаяФункция"]:="DriverConnect";
            спНастройки2:=спНастройки;
            Стр:=Trim(аПроцесс.InterProcessExecuteFunction("SeparateProcessServer",спНастройки2));
            If Стр<>"" Then
              If Стр[1]<>Chr(1) Then
                Exit Стр;
              EndIf;
            EndIf;
            _КопироватьИзменения(спНастройки,спНастройки2);
          EndIf;
        Except
          Exit "Невозможно инициализировать отдельный процесс: "+PopError();
        EndTry;
        спНастройки["ПодчиненныйПроцесс"]:=аПроцесс;
      EndIf;
      //DriverInit, DriverDeinit, DriverConnect, DriverDisconnect, ShiftInfo, OpenShift, CloseShift, DepositMoney, WithdrawMoney, PrintReportX, PrintReportZ, PrintReceipt, PrintText, CashDrawerInfo, OpenCashDrawer
      аПроцесс.InterProcessTimeout(ТайтАут);
      спНастройки["ВызываемаяФункция"]:=ИмяФункции;
      спНастройки2:=спНастройки;
      Стр:=Trim(аПроцесс.InterProcessExecuteFunction("SeparateProcessServer",спНастройки2));
      If Стр<>"" Then
        If Стр[1]=Chr(1) Then
          Box(Mid(Стр,2),Q_WARNING);
        Else
          Exit Стр;
        EndIf;
      EndIf;
      _КопироватьИзменения(спНастройки,спНастройки2);
      Exit "";
    Else
      Exit Trim(ExecuteFunction(ИмяФункции,спНастройки["МодульДрайвера"],спНастройки));
    EndIf;
  Except
    Exit PopError();
  EndTry;
EndFunction


Function OnSystemStart()
  //Загрузка драйверов текущего пользователя
  If _And(ProgramMode()=1,глТипОтдельногоПроцесса="") Then
    глЗагрузитьДрайверы();
  EndIf;  
EndFunction

глДрайверы:=List.Create();
глСканерыКлавиатуры:=List.Create();
глСканерыОстальные:=List.Create();
глСканерыКлавиатурыТаймерИнтервал:=125;
глМагазинДрайверов:=0;
глВиртуальныеКодыСпециальныхКлавиш:=List.Create(16 {Shift},18 {Alt},17 {Ctrl},20 {Caps},45 {Ins},91 {Win},46 {Del},36 {Home},35 {End},33 {PgUp},34 {PgDn},144 {Num},145 {Scroll},
  19 {Pause},27 {ESC},8 {Back},93 {Select},37 {Left},39 {Right},38 {Up},40 {Down});
глВиртуальныеКодыСпециальныхКлавиш.Sort();

глГорячиеКлавишиУмолчания:=Tab.Create("Комбинация,Действие,Описание");
глГорячиеКлавишиУмолчания.AddLine("Комбинация,Действие,Описание","Alt+F6","СпПеременные[""Ответ""]:=200;","Вызвать диалог отмены чека");
глГорячиеКлавишиУмолчания.AddLine("Комбинация,Действие,Описание","Alt+F5","СпПеременные[""Ответ""]:=202;","Отложить чек без дополнительных вопросов");
глГорячиеКлавишиУмолчания.AddLine("Комбинация,Действие,Описание","Ctrl+F3","СпПеременные[""Ответ""]:=705;","Вызвать диалог ""изъять деньги"" (только для основной ККМ)");
глГорячиеКлавишиУмолчания.AddLine("Комбинация,Действие,Описание","Ctrl+F5","СпПеременные[""Ответ""]:=300;","Форма для выбора чека для продолжения (из меню операции)");
глГорячиеКлавишиУмолчания.AddLine("Комбинация,Действие,Описание","Alt+F7","СпПеременные[""Ответ""]:=401;","Вызов диалога сканирования штрихкода");
глГорячиеКлавишиУмолчания.AddLine("Комбинация,Действие,Описание","F6","СпПеременные[""Ответ""]:=101;","Вызвать диалог закрытия чека, заполнить поле наличной оплаты суммой чека");
глГорячиеКлавишиУмолчания.AddLine("Комбинация,Действие,Описание","F7","СпПеременные[""Ответ""]:=102;","Вызвать диалог закрытия чека, заполнить поле безналичной оплаты суммой чека");
глГорячиеКлавишиУмолчания.AddLine("Комбинация,Действие,Описание","F8","СпПеременные[""Ответ""]:=100;","Вызвать диалог закрытия чека");
глГорячиеКлавишиУмолчания.AddLine("Комбинация,Действие,Описание","F2","СпПеременные[""Ответ""]:=400;","Вызов диалога подбора товаров");
глГорячиеКлавишиУмолчания.AddLine("Комбинация,Действие,Описание","F12","СпПеременные[""Ответ""]:=1;","Выйти из формы рабочего места кассира (будет задан вопрос)");

глПотокРабочегоМестаПродавца:=0;
глККМОбъектДрайвера:=0;
глККМОбъектДрайвера2:=0;
глККМОбъектДрайвера3:=0;