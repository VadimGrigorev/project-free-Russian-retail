//Глобальные (root) модули загружаются при старте системы. Загрузка начинается с модуля "module" и продолжается в алфавитном порядке.
//Переменные и функции, объявленные с постфиксом export, будут доступны в любых других модулях в любых потоках системы.
//Модуль может содержать специальные предопределенные функции, вызываемые системой при наступлении разнообразных событий.
//Предопределенные функции имеют свой набор переменных. Дальнейшее описание ищите в документации.

Var глСпИдентификаторыСубконто Export;            //Идентификаторы для сопоставления кнтБанковскиеСчета -> БанковскийСчет
Var глСпСубконтоСотрудники Export;                //Идентификаторы для сопоставления субконто Сотрудник -> реквизит документа

Function OnSystemExit()
  //
EndFunction

//Функция вызывается при старте системы после инициализации GUI.
Function OnSystemStart()
  //Заполнение таблицы идентификаторов
  б=List.Create();
  б.SetByName("Ref.кнтБанковскиеСчета","БанковскийСчет");
  б.SetByName("Ref.тмцТоварныеГруппы","ТоварнаяГруппа");
  б.SetByName("Ref.кнтДоговоры","Договор");
  б.SetByName("Ref.кнтКонтрагенты","Контрагент");
  б.SetByName("Ref.тмцНоменклатура","Номенклатура");
  б.SetByName("Ref.общСклады","Склад");
  б.SetByName("Ref.общКассы","Касса");
  б.SetByName("Enum.СтавкиНДС","СтавкаНДС");
  глСпИдентификаторыСубконто:=б;
  
  б:=Tab.Create("Вид,КО,Ид");
  б.AddLine("Вид,КО,Ид","ПКО",Enum.коПКО.ОплатаПокупателя,"Контрагент");
  б.AddLine("Вид,КО,Ид","ПКО",Enum.коПКО.ВозвратОтПоставщика,"Контрагент");
  б.AddLine("Вид,КО,Ид","ПКО",Enum.коПКО.ВозвратОтПодотчетника,"ПодотчетноеЛицо");
  б.AddLine("Вид,КО,Ид","ПКО",Enum.коПКО.Инкассация,"ПодотчетноеЛицо");
  б.AddLine("Вид,КО,Ид","РКО",Enum.коРКО.ВозвратПокупателю,"Контрагент");
  б.AddLine("Вид,КО,Ид","РКО",Enum.коРКО.ОплатаПоставщику,"Контрагент");
  б.AddLine("Вид,КО,Ид","РКО",Enum.коРКО.ВыдачаПодотчет,"ПодотчетноеЛицо");
  б.AddLine("Вид,КО,Ид","РКО",Enum.коРКО.Инкассация,"ПодотчетноеЛицо");
  б.AddLine("Вид,КО,Ид","РегистрацияОС","","ПодотчетноеЛицо");
  б.AddLine("Вид,КО,Ид","ПодотчетнаяОперация","","ПодотчетноеЛицо");
  глСпСубконтоСотрудники:=б;
EndFunction

Function глРедактироватьСубконтоТипаПроводки(aEl,Проверка=1) Export
  If Проверка=1 Then
    If aEl.ТипПроводки.Selected()=0 Then
      Exit 1;
    EndIf;
    If aEl.ТипПроводки.Status()=1 Then
      If not глПользователь.бухГлавныйБухгалтер Then
        Box("Вам запрещено обрабатывать документы с удаленной проводкой!",Q_STOP);
        Exit 0;
      ElseIf AskQuestion("Проводка в текущем документе была удалена. Это может привести к неверным движениям по бух. учету."+
          " Вы действительно хотите обработать этот документ?",Q_QUESTION+Q_YESNO)<>R_YES Then
        Exit 0;
      EndIf;
    EndIf;
    Фл:=0;
    aTab:=aEl.ТипПроводки.LineParts("ПроводкиЗаголовка");
    aTab.Select();
    While aTab.Next() Do
      If aTab.флВопросы<>0 Then
        Фл:=1;
        Break;
      EndIf;
    EndDo;
    If Фл=0 Then
      aTab:=aEl.ТипПроводки.LineParts("ПроводкиСтрок");
      aTab.Select();
      While aTab.Next() Do
        If aTab.флВопросы<>0 Then
          Фл:=1;
          Break;
        EndIf;
      EndDo;
    EndIf;  
    If Фл=0 Then
      Exit 1;
    EndIf;
  EndIf;
  а:=List.Create();
  а.SetByName("Док",aEl);
  а.SetByName("Форсировать",1);
  LoadModule(0,"Modules\FreeForms\ВнутренниеОбработки\СпециальныеОбработки\ВводСубконто",а,0,"Module","Form");
  Чл:=Number(а.GetByName("Ответ"));
  Exit Чл;
EndFunction

Function глЗагрузитьПланСчетов(Сп) Export
  Try
    ТПС:=Сп.GetByName("ПланСчетов");
    ТВС:=Сп.GetByName("ВидыСубконто");
  Except
    Exit 0;
  EndTry;
  If (TypeStr(ТПС)<>"TAB")Or(TypeStr(ТВС)<>"TAB") Then
    Exit 0;
  EndIf;
  
  //Заполняем виды субконто
  ТВС.AddColumn("Эл");
  ТВС.Select();
  While ТВС.Next() Do
    Form.StatusText("Виды субконто: "+ТВС.CurLine+" из "+ТВС.Size());
    а:=Ref.бухВидыСубконто;
    If not а.Find("Name",ТВС.Имя) Then
      а.New();
      а.Name:=ТВС.Имя;
      а.ТипЗначенияЛокальный:=ТВС.ТипЗначения;
      If not глЗаписать(а) Then
        Exit 0;
      EndIf;
    EndIf;
    
    If а.Status()<>ТВС.Удаленный Then
      а.Mark(1-а.Status());
    EndIf;
    ТВС.Эл:=а;
  EndDo;
  
  
  //Заполняем план счетов
  ТПС.Select();
  While ТПС.Next() Do
    Form.StatusText("План счетов: "+ТПС.CurLine+" из "+ТПС.Size());
    а:=Ref.бухПланСчетов;
    аРод:=Ref.бухПланСчетов;
    
    If not а.Find("Code",ТПС.Код) Then
      а.New(ТПС.Группа);
      а.Code:=ТПС.Код;
      If not глЗаписать(а) Then
        Exit 0;
      EndIf;
    EndIf;

    а.Name:=ТПС.Имя;
    а.Валютный:=ТПС.Валютный;
    а.Забалансовый:=ТПС.Забалансовый;
    а.Количественный:=ТПС.Количественный;
    а.Сортировка:=""+ТПС.Забалансовый+ТПС.Код;
    а.Пассивный:=ТПС.Пассивный;
    
    Стр:=ТПС.Суб1;
    If Стр<>"" Then
      If not ТВС.FindAndGoto(Стр,,"Код") Then
        Exit 0;
      EndIf;
      а.ВидСубконто1:=ТВС.Эл;
    Else
      а.ВидСубконто1:=0;
    EndIf;
    
    Стр:=ТПС.Суб2;
    If Стр<>"" Then
      If not ТВС.FindAndGoto(Стр,,"Код") Then
        Exit 0;
      EndIf;
      а.ВидСубконто2:=ТВС.Эл;
    Else
      а.ВидСубконто2:=0;
    EndIf;
    
    Стр:=ТПС.Суб3;
    If Стр<>"" Then
      If not ТВС.FindAndGoto(Стр,,"Код") Then
        Exit 0;
      EndIf;
      а.ВидСубконто3:=ТВС.Эл;
    Else
      а.ВидСубконто3:=0;
    EndIf;
    
    Стр:=ТПС.Папка;
    If Стр<>"" Then
      If not аРод.Find("Code",Стр) Then
        Exit 0;
      EndIf;
      If not аРод.IsFolder() Then
        Message("Счет "+аРод.Code+" должен быть группой! В этой конфигурации он является элементом!","!");
      Else
        а.Folder(аРод);
      EndIf;
    Else
      а.Folder(0);
    EndIf;
    
    
    If not глЗаписать(а) Then
      Exit 0;
    EndIf;
    
    If а.Status()<>ТПС.Удаленный Then
      а.Mark(1-а.Status());
    EndIf;
  EndDo;
  
  Exit 1;
EndFunction

Function глСинхронизацияИзмененийСтрочногоСубконто(aEl,aTab,НовЗнач,ТекСтрока=0,ByVal ИмяВидаСубконто="") Export

  Function СинхронизацияИзмененийТекСубконто(aEl,aTab,НовЗнач,ByVal ИмяВидаСубконто="")
    If aTab.Счет.Selected()=0 Then
      Exit;
    EndIf;
    ИмяВидаСубконто:=UpperCase(ИмяВидаСубконто);
    стрТип:=UpperCase("Ref."+НовЗнач.DBName());
    If ((ИмяВидаСубконто="")Or(UpperCase(aTab.Счет.ВидСубконто1.Name)=ИмяВидаСубконто))And(Replace(UpperCase(Trim(aTab.Счет.ВидСубконто1.ТипЗначенияЛокальный)),"СПРАВОЧНИК.","REF.")=стрТип) Then
      aTab.Субконто1:=НовЗнач;
    EndIf;
    If ((ИмяВидаСубконто="")Or(UpperCase(aTab.Счет.ВидСубконто2.Name)=ИмяВидаСубконто))And(Replace(UpperCase(Trim(aTab.Счет.ВидСубконто2.ТипЗначенияЛокальный)),"СПРАВОЧНИК.","REF.")=стрТип) Then
      aTab.Субконто2:=НовЗнач;
    EndIf;
    If ((ИмяВидаСубконто="")Or(UpperCase(aTab.Счет.ВидСубконто3.Name)=ИмяВидаСубконто))And(Replace(UpperCase(Trim(aTab.Счет.ВидСубконто3.ТипЗначенияЛокальный)),"СПРАВОЧНИК.","REF.")=стрТип) Then
      aTab.Субконто3:=НовЗнач;
    EndIf;
  EndFunction

  If ТекСтрока=1 Then
    СинхронизацияИзмененийТекСубконто(aEl,aTab,НовЗнач,ИмяВидаСубконто);
  Else
    aTab.Select();
    While aTab.Next() Do
      СинхронизацияИзмененийТекСубконто(aEl,aTab,НовЗнач,ИмяВидаСубконто);
    EndDo;
  EndIf;
EndFunction

Function глНайтиСубконтоПоИмени(ВидСубконто,Имя) Export
  If Trim(ВидСубконто.ТипЗначенияЛокальный)<>"" Then
    Exit GetNothing("Ref.бухЗначенияСубконто");
  EndIf;
  а:=Ref.бухЗначенияСубконто;
  If а.Find("@Parent,Name",ВидСубконто,Имя) Then
    Exit а;
  EndIf;
  а.New();
  а.Parent(ВидСубконто);
  а.Name:=Имя;
  If not глЗаписать(а) Then
    Exit GetNothing("Ref.бухЗначенияСубконто");
  EndIf;
  Exit а;
EndFunction

Function глНайтиСчет(Счет,СтрЗаполнить="") Export
  зЭл:=Ref.бухПланСчетов;
  If not зЭл.Find("Code",Счет) Then
    If СтрЗаполнить<>"" Then
      //Родитель@Вал@Заб@Кол@Пас@ББЛ@Суб1@Суб2@Суб3@Наименование
      Родитель:=TearStr(СтрЗаполнить,"@");
      ФлВал:=Number(TearStr(СтрЗаполнить,"@"));
      ФлЗаб:=Number(TearStr(СтрЗаполнить,"@"));
      ФлКол:=Number(TearStr(СтрЗаполнить,"@"));
      ФлПас:=Number(TearStr(СтрЗаполнить,"@"));
      ФлББЛ:=Number(TearStr(СтрЗаполнить,"@"));
      Суб1:=Trim(TearStr(СтрЗаполнить,"@"));
      Суб2:=Trim(TearStr(СтрЗаполнить,"@"));
      Суб3:=Trim(TearStr(СтрЗаполнить,"@"));
      Имя:=TearStr(СтрЗаполнить,"@");
      зЭл.New();
      зЭл.Code:=Счет;
      If Родитель<>"" Then
        зЭл.Folder(глНайтиСчет(Родитель));
      EndIf;
      зЭл.Name:=Имя;
      зЭл.Валютный:=ФлВал;
      зЭл.Забалансовый:=ФлЗаб;
      зЭл.Количественный:=ФлКол;
      зЭл.Пассивный:=ФлПас;
      зЭл.флИспользуетсяВББЛ:=ФлББЛ;
      зЭл.Сортировка:=""+зЭл.Забалансовый+зЭл.Code;
      зЭл.ВидСубконто1:=?(Суб1<>"",DB("бухВидыСубконто","Code",Суб1),0);
      зЭл.ВидСубконто2:=?(Суб2<>"",DB("бухВидыСубконто","Code",Суб2),0);
      зЭл.ВидСубконто3:=?(Суб3<>"",DB("бухВидыСубконто","Code",Суб3),0);
      зЭл.Save();
    Else
      Raise "В конфигурации отсутствует необходимый счет "+Счет+"! Необходимо корректно заполнить план счетов, чтобы продолжить работу!";
    EndIf;
  EndIf;
  Exit зЭл;
EndFunction

Function ВосстановитьКодТипПроводки(Код,ВидСпр) Export
  Дл:=Struct.Ref(ВидСпр).Props("Code").DataType;
  TearStr(Дл,"STRING.");
  Дл:=Number(Дл);
  If Length(Код)=Дл Then
    Exit Код;
  EndIf;
  Пат:="0000000000000000";
  Смв:=Left(Код,1);
  If Смв<="9" Then
    Exit Right(Пат+Код,Дл);
  EndIf;
  Exit Смв+Right(Пат+Mid(Код,2),Дл-1);
EndFunction

Function УпроститьКодТипПроводки(Код) Export
  If Length(Код)<3 Then
    Exit Код;
  EndIf;
  Смв:=Left(Код,1);
  If Смв="0" Then
    Exit Str(Number(Код));
  EndIf;
  If Смв<="9" Then
    Exit Код;
  EndIf;
  If Mid(Код,2,1)<>"0" Then
    Exit Код;
  EndIf;
  Exit Смв+Str(Number(Mid(Код,2)));
EndFunction


Function глПолучитьЗначениеСубконтоТипПроводки(ВидСуб,СубКод) Export
  //СубКод: [[ТипОбъекта]ТипСправочникаКромеЗначСубконто/]194
  //ТипОбъекта: 0 (def) -- ref, 1 -- enum, 2 -- doc
  Спр:="бухЗначенияСубконто";
  If Pos("/",СубКод)>0 Then
    Спр:=TearStr(СубКод,"/");
  EndIf;
  If Left(Спр,1)="1" Then
    Raise "Перечисления в субконто пока не поддерживаются!";
  ElseIf Left(Спр,1)="2" Then
    Raise "Документы в субконто пока не поддерживаются!";
  Else
    If not isEmpty(СубКод) Then
      Стр:=ВосстановитьКодТипПроводки(СубКод,Спр);
      aEl:=DB("Ref."+Спр);
      If aEl.Find("Code",Стр) Then
        Exit aEl;
      EndIf;
    EndIf;  
  EndIf;  
  Exit GetNothing();
EndFunction

Function глПолучитьЗначениеСубконто(Суб) Export
  Тип:=TearStr(Суб);
  If Тип="" Then
    Exit GetNothing();
  EndIf;
  Тип:=Uppercase(Тип);
  If (Тип="СПРАВОЧНИК")Or(Тип="REF") Then
    Вид:=TearStr(Суб);
    Код:=TearStr(Суб);
    а:=DB("Ref."+Вид);
    If а.Find("Code",Код) Then
      Exit а;
    EndIf;
  ElseIf (Тип="ПЕРЕЧИСЛЕНИЕ")or(Тип="ENUM") Then
    Вид:=TearStr(Суб);
    Ном:=TearStr(Суб);
    Try
      Exit Enum.GetByIndex(Вид,Ном);
    Except EndTry;
  ElseIf (Тип="ДОКУМЕНТ")or(Тип="DOC") Then
    Вид:=TearStr(Суб);
    дДата:=TearStr(Суб);
    дНомер:=TearStr(Суб);
    а:=DB("Doc."+Вид);
    If а.Find("DocNum,>=DocDate,<DocDate",дНомер,BegOfYear(дДата),EndOfYear(дДата)+1) Then
      Exit а;
    EndIf;
  EndIf;
  Exit GetNothing();
EndFunction

//флСуммаВз (только для заголовка) = 0 -- не важно
//                                 = 1 -- использовать СуммаВзаиморасчетов
//                                 = 2 -- использовать Сумма
Function глСоздатьПроводку(aEl,aTab,СубСотр,флСуммаВз,БухгалтерскиеСчета,СпСуб,флНДС,ТабСтрок,ДокИсходный)

  Function _ИзменитьВид(Стр)
    Exit Replace(Replace(Replace(Стр,"Справочник.","Ref."),"Документ.","Doc."),"Перечисление.","Enum.");
  EndFunction

  Function УстановитьЗначениеСубЛок(ВидСуб,СтрСуб,ByRef Рез) //ByRef СтрСуб
    If _And(СтрСуб<>"",Left(СтрСуб,1)="#") Then
      Инд:="#"+Number(ВидСуб.Code)+"@";
      If Pos(Инд,СтрСуб)=0 Then
        Exit;
      EndIf;
      Стр2:=TearStr(СтрСуб,Инд);
      Стр:=TearStr(СтрСуб,"#");
      СтрСуб:=Стр2+"#"+СтрСуб;
      Рез:=глПолучитьЗначениеСубконтоТипПроводки(ВидСуб,Стр);
    Else
      Инд:="ВС"+ВидСуб.Code+"@";
      If Pos(Инд,СтрСуб)=0 Then
        Exit;
      EndIf;
      Стр2:=TearStr(СтрСуб,Инд);
      Стр:=TearStr(СтрСуб,"#");
      СтрСуб:=Стр2+СтрСуб;
      Рез:=глПолучитьЗначениеСубконто(Стр);
    EndIf;  
  EndFunction  
  
  аКоличДвижений:=0;
  Вид:=aEl.DBName();
  стрСотр:="СОТРУДНИК";
  спСпецСубконто:=List.Create();
  If not глЕстьРеквизитДокумента("Субконто",Вид) Then
    СтрСуб:=aEl.СубконтоТипаПроводки;
  Else
    СтрСуб:=aEl.Субконто;
  EndIf;
  If ДокИсходный=0 Then
    ДокИсходный:=aEl;
  EndIf;
  СтавкаНДС:=?(ДокИсходный.DocDate>='01.01.2019',Enum.СтавкиНДС.НДС20,Enum.СтавкиНДС.НДС18);
  аНоменклатура:=0;
  If _And(ТабСтрок<>0,ТабСтрок.GetColumnIndex("Номенклатура")>0) Then
    аНоменклатура:=ТабСтрок.Номенклатура;
  EndIf;
  
  ФлЧл:=0;
  aTab.Select();
  While aTab.Next() Do
    If _And(ТабСтрок<>0,aTab.ТипУчета.Selected()<>0) Then
      If ТабСтрок.GetColumnIndex("Номенклатура")>0 Then
        If аНоменклатура.ВидНоменклатуры<>aTab.ТипУчета Then
          Continue;
        EndIf;
      EndIf;
    EndIf;
    If _And(aTab.ЮрЛицо.Selected()<>0,aTab.ЮрЛицо<>aEl.ЮрЛицо) Then
      Continue;
    EndIf;
  
    If aTab.ЮрЛицо.Selected()=0 Then
      ЮрЛицо:=aEl.ЮрЛицо;
    Else
      ЮрЛицо:=aTab.ЮрЛицо;
    EndIf;
    
    Чл:=aTab.флВопросы;
    ФлЧл:=1;
    
    СчДеб:=aTab.СчДебет;
    If СчДеб.Selected()=0 Then
      дСуб1:=0;
      дСуб2:=0;
      дСуб3:=0;
    Else
      дСуб1:=aTab.СубконтоДебет1;
      дСуб2:=aTab.СубконтоДебет2;
      дСуб3:=aTab.СубконтоДебет3;

      If (IsEmpty(дСуб1))And(СчДеб.ВидСубконто1.Selected()<>0) Then
        Стр:=СпСуб.GetByName(_ИзменитьВид(СчДеб.ВидСубконто1.ТипЗначенияЛокальный));
        If (Pos(стрСотр,UpperCase(СчДеб.ВидСубконто1))>0)And(СубСотр<>0) Then
          дСуб1:=СубСотр;
        ElseIf Стр<>"" Then
          If _And(Стр="Склад",глЕстьРеквизитДокумента("СкладПолучатель",ДокИсходный.DBName())) Then
            дСуб1:=ДокИсходный.СкладПолучатель;
          ElseIf глЕстьРеквизитДокумента(Стр,ДокИсходный.DBName()) Then
            дСуб1:=ДокИсходный.GetValue(Стр);
          ElseIf _And(ТабСтрок<>0,ТабСтрок.GetColumnIndex(Стр)>0) Then  
            If Стр="Номенклатура" Then
              дСуб1:=аНоменклатура;
            Else
              дСуб1:=ТабСтрок.Get(ТабСтрок.CurLine,Стр);
            EndIf;  
          EndIf;  
        EndIf;
      EndIf;
      If (IsEmpty(дСуб2))And(СчДеб.ВидСубконто2.Selected()<>0) Then
        Стр:=СпСуб.GetByName(_ИзменитьВид(СчДеб.ВидСубконто2.ТипЗначенияЛокальный));
        If (Pos(стрСотр,UpperCase(СчДеб.ВидСубконто2))>0)And(СубСотр<>0) Then
          дСуб2:=СубСотр;
        ElseIf Стр<>"" Then
          If _And(Стр="Склад",глЕстьРеквизитДокумента("СкладПолучатель",ДокИсходный.DBName())) Then
            дСуб2:=ДокИсходный.СкладПолучатель;
          ElseIf глЕстьРеквизитДокумента(Стр,ДокИсходный.DBName()) Then
            дСуб2:=ДокИсходный.GetValue(Стр);
          ElseIf _And(ТабСтрок<>0,ТабСтрок.GetColumnIndex(Стр)>0) Then  
            If Стр="Номенклатура" Then
              дСуб2:=аНоменклатура;
            Else
              дСуб2:=ТабСтрок.Get(ТабСтрок.CurLine,Стр);
            EndIf;  
          EndIf;  
        EndIf;
      EndIf;
      If (IsEmpty(дСуб3))And(СчДеб.ВидСубконто3.Selected()<>0) Then
        Стр:=СпСуб.GetByName(_ИзменитьВид(СчДеб.ВидСубконто3.ТипЗначенияЛокальный));
        If (Pos(стрСотр,UpperCase(СчДеб.ВидСубконто3))>0)And(СубСотр<>0) Then
          дСуб3:=СубСотр;
        ElseIf Стр<>"" Then
          If _And(Стр="Склад",глЕстьРеквизитДокумента("СкладПолучатель",ДокИсходный.DBName())) Then
            дСуб3:=ДокИсходный.СкладПолучатель;
          ElseIf глЕстьРеквизитДокумента(Стр,ДокИсходный.DBName()) Then
            дСуб3:=ДокИсходный.GetValue(Стр);
          ElseIf _And(ТабСтрок<>0,ТабСтрок.GetColumnIndex(Стр)>0) Then  
            If Стр="Номенклатура" Then
              дСуб3:=аНоменклатура;
            Else
              дСуб3:=ТабСтрок.Get(ТабСтрок.CurLine,Стр);
            EndIf;  
          EndIf;  
        EndIf;
      EndIf;
    EndIf;
    
    СчКред:=aTab.СчКредит;
    If СчКред.Selected()=0 Then
      кСуб1:=0;
      кСуб2:=0;
      кСуб3:=0;
    Else
      кСуб1:=aTab.СубконтоКредит1;
      кСуб2:=aTab.СубконтоКредит2;
      кСуб3:=aTab.СубконтоКредит3;
      
      If (IsEmpty(кСуб1))And(СчКред.ВидСубконто1.Selected()<>0) Then
        Стр:=СпСуб.GetByName(_ИзменитьВид(СчКред.ВидСубконто1.ТипЗначенияЛокальный));
        If (Pos(стрСотр,UpperCase(СчКред.ВидСубконто1))>0)And(СубСотр<>0) Then
          кСуб1:=СубСотр;
        ElseIf Стр<>"" Then
          If глЕстьРеквизитДокумента(Стр,ДокИсходный.DBName()) Then
            кСуб1:=ДокИсходный.GetValue(Стр);
          ElseIf _And(ТабСтрок<>0,ТабСтрок.GetColumnIndex(Стр)>0) Then
            If Стр="Номенклатура" Then
              кСуб1:=аНоменклатура;
            Else
              кСуб1:=ТабСтрок.Get(ТабСтрок.CurLine,Стр);
            EndIf;  
          EndIf;  
        EndIf;
      EndIf;
      If (IsEmpty(кСуб2))And(СчКред.ВидСубконто2.Selected()<>0) Then
        Стр:=СпСуб.GetByName(_ИзменитьВид(СчКред.ВидСубконто2.ТипЗначенияЛокальный));
        If (Pos(стрСотр,UpperCase(СчКред.ВидСубконто2))>0)And(СубСотр<>0) Then
          кСуб2:=СубСотр;
        ElseIf Стр<>"" Then
          If глЕстьРеквизитДокумента(Стр,ДокИсходный.DBName()) Then
            кСуб2:=ДокИсходный.GetValue(Стр);
          ElseIf _And(ТабСтрок<>0,ТабСтрок.GetColumnIndex(Стр)>0) Then  
            If Стр="Номенклатура" Then
              кСуб2:=аНоменклатура;
            Else
              кСуб2:=ТабСтрок.Get(ТабСтрок.CurLine,Стр);
            EndIf;  
          EndIf;  
        EndIf;
      EndIf;
      If (IsEmpty(кСуб3))And(СчКред.ВидСубконто3.Selected()<>0) Then
        Стр:=СпСуб.GetByName(_ИзменитьВид(СчКред.ВидСубконто3.ТипЗначенияЛокальный));
        If (Pos(стрСотр,UpperCase(СчКред.ВидСубконто3))>0)And(СубСотр<>0) Then
          кСуб3:=СубСотр;
        ElseIf Стр<>"" Then
          If глЕстьРеквизитДокумента(Стр,ДокИсходный.DBName()) Then
            кСуб3:=ДокИсходный.GetValue(Стр);
          ElseIf _And(ТабСтрок<>0,ТабСтрок.GetColumnIndex(Стр)>0) Then  
            If Стр="Номенклатура" Then
              кСуб3:=аНоменклатура;
            Else
              кСуб3:=ТабСтрок.Get(ТабСтрок.CurLine,Стр);
            EndIf;  
          EndIf;  
        EndIf;
      EndIf;
    EndIf;
    
    //Установка субконто, выбранных в документе оператором
    If (СчДеб.Selected()<>0)And(Чл%8<>0) Then
      If Чл%2<>0 Then
        УстановитьЗначениеСубЛок(СчДеб.ВидСубконто1,СтрСуб,дСуб1);
      EndIf;
      If Trunc(Чл/2)%2<>0 Then
        УстановитьЗначениеСубЛок(СчДеб.ВидСубконто2,СтрСуб,дСуб2);
      EndIf;
      If Trunc(Чл/4)%2<>0 Then
        УстановитьЗначениеСубЛок(СчДеб.ВидСубконто3,СтрСуб,дСуб3);
      EndIf;
    EndIf;
    
    If (СчКред.Selected()<>0)And(Trunc(Чл/8)<>0) Then
      If Trunc(Чл/8)%2<>0 Then
        УстановитьЗначениеСубЛок(СчКред.ВидСубконто1,СтрСуб,кСуб1);
      EndIf;
      If Trunc(Чл/16)%2<>0 Then
        УстановитьЗначениеСубЛок(СчКред.ВидСубконто2,СтрСуб,кСуб2);
      EndIf;
      If Trunc(Чл/32)%2<>0 Then
        УстановитьЗначениеСубЛок(СчКред.ВидСубконто3,СтрСуб,кСуб3);
      EndIf;
    EndIf;

    
    См:=0;
    If ТабСтрок=0 Then
      If глЕстьРеквизитДокумента("СуммаВзаиморасчетов",Вид) Then
        См:=aEl.СуммаВзаиморасчетов;
      EndIf;
      If флСуммаВз=2 Then
        If глЕстьРеквизитДокумента("Сумма",Вид) Then
          См:=aEl.Сумма;
        EndIf;
      EndIf;
    ElseIf ТабСтрок.GetColumnIndex("Сумма")>0 Then
      См:=ТабСтрок.Сумма;
    EndIf;  
    
    If aTab.Сумма=1 Then
      If _And(ТабСтрок<>0,ТабСтрок.GetColumnIndex("СтавкаНДС")>0) Then
        См:=?(флНДС=0,0,Round(См*глКоэффНДС(ТабСтрок.СтавкаНДС),2));
      Else
        См:=Round(См*глКоэффНДС(СтавкаНДС),2);
      EndIf;
    ElseIf aTab.Сумма=2 Then
      If _And(ТабСтрок<>0,ТабСтрок.GetColumnIndex("СтавкаНДС")>0) Then
        См:=Round(См*(1-?(флНДС=0,0,глКоэффНДС(ТабСтрок.СтавкаНДС))),2);
      Else
        См:=Round(См*(1-глКоэффНДС(СтавкаНДС)),2);
      EndIf;
    ElseIf aTab.Сумма=3 Then
      If _And(ТабСтрок<>0,ТабСтрок.GetColumnIndex("Номенклатура")>0) Then
        См:=аНоменклатура.GetValue("Цена",aEl.DocDate)*ТабСтрок.Количество;
      EndIf;
    ElseIf aTab.Сумма=4 Then
      If _And(ТабСтрок<>0,ТабСтрок.GetColumnIndex("Номенклатура")>0) Then
        If ТабСтрок.GetColumnIndex("СтавкаНДС")>0 Then
          См:=?(флНДС=0,0,Round(аНоменклатура.GetValue("Цена",aEl.DocDate)*ТабСтрок.Количество*глКоэффНДС(ТабСтрок.СтавкаНДС),2));
        Else  
          См:=Round(аНоменклатура.GetValue("Цена.",aEl.DocDate)*ТабСтрок.Количество*глКоэффНДС(СтавкаНДС),2);
        EndIf;  
      EndIf;
    ElseIf aTab.Сумма=5 Then
      If _And(ТабСтрок<>0,ТабСтрок.GetColumnIndex("Номенклатура")>0) Then
        If ТабСтрок.GetColumnIndex("СтавкаНДС")>0 Then
          См:=Round(аНоменклатура.GetValue("Цена",aEl.DocDate)*ТабСтрок.Количество*(1-?(флНДС=0,0,глКоэффНДС(ТабСтрок.СтавкаНДС))),2);
        Else
          См:=Round(аНоменклатура.GetValue("Цена",aEl.DocDate)*ТабСтрок.Количество*(1-глКоэффНДС(СтавкаНДС)),2);
        EndIf;  
      EndIf;
    ElseIf aTab.Сумма=6 Then
      См:=0;
    ElseIf aTab.Сумма=7 Then
      If _And(ТабСтрок<>0,ТабСтрок.GetColumnIndex("СтавкаНДС")>0) Then
        См:=См+?(флНДС=0,0,Round(См*глКоэффНДС(ТабСтрок.СтавкаНДС),2));
      Else
        См:=См+Round(См*глКоэффНДС(СтавкаНДС),2);
      EndIf;
    EndIf;
        
    Кл:=0;
    If СчДеб.Количественный+СчКред.Количественный>0 Then
      If _And(ТабСтрок<>0,ТабСтрок.GetColumnIndex("Количество")>0) Then
        Кл:=ТабСтрок.Количество;
      EndIf;  
    EndIf;
    
    См:=?(aTab.флМинус=0,См,-См);
    Кл:=?(aTab.флМинус=0,Кл,-Кл);
    If (См=0)And(Кл=0) Then
      Continue;
    EndIf;
    If (isEmpty(СчДеб))And(isEmpty(СчКред)) Then
      Continue;
    EndIf;
    If (isEmpty(СчДеб))And(СчКред.Забалансовый=0) Then
      Raise "Дебитовый счет для счета "+СчКред+" не выбран!";
    EndIf;
    If (isEmpty(СчКред))And(СчДеб.Забалансовый=0) Then
      Raise "Кредитовый счет для счета "+СчДеб+" не выбран!";
    EndIf;
    
    аКоличДвижений:=аКоличДвижений+1;
    If not isEmpty(СчДеб) Then
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          ЮрЛицо,СчДеб,СчКред,дСуб1,дСуб2,дСуб3,?(СчДеб.Количественный,Кл,0),См,0);
    EndIf;      
    
    If not isEmpty(СчКред) Then
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          ЮрЛицо,СчКред,СчДеб,кСуб1,кСуб2,кСуб3,?(СчКред.Количественный,Кл,0),См,1);
    EndIf;      
  EndDo;
  
  Exit аКоличДвижений;
EndFunction

//ДокИсходный -- используется только для сторнирования (документ для получения реквизитов)
Function глПроводкаПользовательская(aEl,БухгалтерскиеСчета,флСтроч=0,ДокИсходный=0) Export
  
  флСуммаВз:=0;
  If aEl.DBName()="КорректировкаДолга" Then
    флСуммаВз:=2;
    If Pos("тара",LowerCase(aEl.КодОперации))=0 Then
      флСуммаВз:=1;
    EndIf;
  EndIf;
  
  СубСотр:="";
  If глЕстьРеквизитДокумента("КодОперации",aEl.DBName()) Then
    глСпСубконтоСотрудники.CurLine:=0;
    If глСпСубконтоСотрудники.LocateAndGoto("Вид,КО",aEl.DBName(),aEl.КодОперации)>0 Then
      СубСотр:=глСпСубконтоСотрудники.Ид;
    EndIf;
  EndIf;
  If isEmpty(СубСотр) Then
    глСпСубконтоСотрудники.CurLine:=0;
    If глСпСубконтоСотрудники.LocateAndGoto("Вид,КО",aEl.DBName(),"")>0 Then
      СубСотр:=глСпСубконтоСотрудники.Ид;
    EndIf;
  EndIf;
  //СубСотр:=глСпСубконтоСотрудники.GetbyName(aEl.DBName());
  If not IsEmpty(СубСотр) Then
    СубСотр:=aEl.GetValue(СубСотр);
  Else
    СубСотр:=0;
  EndIf;
  
  ТипПроводки:=aEl.ТипПроводки;
  If _And(ТипПроводки.Selected()=0,not isEmpty(ДокИсходный)) Then
    ТипПроводки:=ДокИсходный.ТипПроводки;
  EndIf;
  
  СпСуб:=глСпИдентификаторыСубконто;
  флНДС:=?(aEl.ЮрЛицо.УчитыватьНДС>0,1,0);
  aTab:=ТипПроводки.LineParts("ПроводкиЗаголовка");
  bTab:=ТипПроводки.LineParts("ПроводкиСтрок");
  ТабСтрок:=0;
  If not isEmpty(Struct.Doc(aEl.DBName()).LineParts("Номенклатура")) Then
    ТабСтрок:=aEl.LineParts("Номенклатура");    
  ElseIf not isEmpty(Struct.Doc(aEl.DBName()).LineParts("Содержание")) Then
    ТабСтрок:=aEl.LineParts("Содержание");
  ElseIf not isEmpty(Struct.Doc(aEl.DBName()).LineParts("Заправки")) Then
    ТабСтрок:=aEl.LineParts("Заправки");
  EndIf;
  
  If aTab.Size()+bTab.Size()=0 Then
    Exit "Выбранная проводка не содержит никаких движений по счетам! Во избежание ошибок обработка документов с такими проводками запрещена!";
  EndIf;
  аКоличДвижений:=0;
  if aTab.Size()>0 Then
    аКоличДвижений:=глСоздатьПроводку(aEl,aTab,СубСотр,флСуммаВз,БухгалтерскиеСчета,СпСуб,флНДС,0,ДокИсходный);
  EndIf;
  if bTab.Size()>0 Then
    If ТабСтрок<>0 Then
      ТабСтрок.Select();
      While ТабСтрок.Next() Do
        аКоличДвижений:=глСоздатьПроводку(aEl,bTab,СубСотр,флСуммаВз,БухгалтерскиеСчета,СпСуб,флНДС,ТабСтрок,ДокИсходный)+аКоличДвижений;
      EndDo;  
    Else
      Message("Выбранная проводка имеет строчную часть, однако, данный документ не подразумевает ее наличия! Проверьте, возможно, проводка ошибочная!","!");
    EndIf;
  EndIf;
  If аКоличДвижений=0 Then
    Message("Предупреждение! Заданная проводка документа, несмотря на наличие движений в шаблоне, не создает никаких движений по счетам! Возможно, проводка ошибочная и будет создавать проблемы в учете!","!");
  EndIf;
  
  Exit "";
EndFunction

Function глПерепродатьТару(aEl,БухгалтерскиеСчета,СчДебет,СчКредит,Ном,Скл,См,Кл) Export
  БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
      aEl.ЮрЛицо,СчДебет,СчКредит,Ном,Скл,,Кл,См,0);

  БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
      aEl.ЮрЛицо,СчКредит,СчДебет,Ном,Скл,,Кл,См,1);
EndFunction

Function глСубконтоКасса(Сч,Касса) Export
  If Сч.ВидСубконто1.Selected()=0 Then
    Exit 0;
  EndIf;
  Exit Касса;
EndFunction

Function глПроводкаПоПодотчетуПростая(aEl,БухгалтерскиеСчета,Приход) Export //ПКО, РКО: подотчет
  If aEl.ТипПроводки.Selected()<>0 Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета);
  EndIf;
  If aEl.СуммаВзаиморасчетов=0 Then
    Exit "";
  EndIf;

  Сч50=глНайтиСчет("50.1");
  Сч71=глНайтиСчет("71.1");
  
  БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
      aEl.ЮрЛицо,?(Приход=1,Сч71,Сч50),?(Приход=1,Сч50,Сч71),?(Приход=1,aEl.ПодотчетноеЛицо,глСубконтоКасса(Сч50,aEl.Касса)),0,0,0,aEl.СуммаВзаиморасчетов,0);
  
  БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
      aEl.ЮрЛицо,?(Приход=1,Сч50,Сч71),?(Приход=1,Сч71,Сч50),?(Приход=0,aEl.ПодотчетноеЛицо,глСубконтоКасса(Сч50,aEl.Касса)),0,0,0,aEl.СуммаВзаиморасчетов,1);
  
  Exit "";
EndFunction


Function глПроводкаПрочее(aEl,БухгалтерскиеСчета,Счет1="50.1",См,Счет2="57.1") Export //ПКО/РКО/Выписки: Инкассация, прочее
  If aEl.ТипПроводки.Selected()<>0 Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета);
  EndIf;
  If См=0 Then
    Exit "";
  EndIf;

  //Документы дублируются кассовыми при работе без инкассации, напрямую с банком
  ФлПрочее:=Min(Pos("ПРОЧЕЕ",UpperCase(Trim(aEl.КодОперации))),1);
  If ФлПрочее>0 Then
    If (aEl.Счет.Code="50.1")And(Счет1="51") Then
      Exit "";
    EndIf;
    If (aEl.Счет.Code="51")And(Счет1="51")And(aEl.DBName()="ВыпискаБанкаПриход") Then
      Exit;
    EndIf;
  EndIf;
  
  аСуб1:=GetNothing();
  аСуб2:=GetNothing();
  аСуб3:=GetNothing();
  Сч1:=глНайтиСчет(Счет1);
  If ФлПрочее=0 Then
    Сч2:=глНайтиСчет(Счет2);
  ElseIf aEl.Счет.Selected()=0 Then
    Сч2:=глНайтиСчет("00");
  Else
    Сч2:=aEl.Счет;
    аСуб1:=aEl.Субконто1;
    аСуб2:=aEl.Субконто2;
    аСуб3:=aEl.Субконто3;
  EndIf;
  
  If (См>0)And(Счет1="51") Then
    аСуб1:=aEl.БанковскийСчет;
    аСуб2:=GetNothing();
    аСуб3:=GetNothing();
  ElseIf (См>0)And((Счет1="50.1")Or(Счет1="50.2")) Then
    аСуб1:=глСубконтоКасса(Сч1,aEl.Касса);
    аСуб2:=GetNothing();
    аСуб3:=GetNothing();
  ElseIf (aEl.Счет.Selected()<>0)And(ФлПрочее=1)And(См<0) Then
    аСуб1:=aEl.Субконто1;
    аСуб2:=aEl.Субконто2;
    аСуб3:=aEl.Субконто3;
  EndIf;
  
  
  БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
      aEl.ЮрЛицо,?(См>0,Сч1,Сч2),?(См>0,Сч2,Сч1),аСуб1,аСуб2,аСуб3,0,Max(См,-См),0);
  
  If (См<0)And(Счет1="51") Then
    аСуб1:=aEl.БанковскийСчет;
    аСуб2:=GetNothing();
    аСуб3:=GetNothing();
  ElseIf (См<0)And((Счет1="50.1")Or(Счет1="50.2")) Then  
    аСуб1:=глСубконтоКасса(Сч1,aEl.Касса);
    аСуб2:=GetNothing();
    аСуб3:=GetNothing();
  ElseIf (aEl.Счет.Selected()<>0)And(ФлПрочее=1)And(См>0) Then  
    аСуб1:=aEl.Субконто1;
    аСуб2:=aEl.Субконто2;
    аСуб3:=aEl.Субконто3;
  Else
    аСуб1:=GetNothing();
    аСуб2:=GetNothing();
    аСуб3:=GetNothing();
  EndIf;
      
  БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
      aEl.ЮрЛицо,?(См>0,Сч2,Сч1),?(См>0,Сч1,Сч2),аСуб1,аСуб2,аСуб3,0,Max(См,-См),1);

  Exit "";    
EndFunction

Function глПроводкаПоВзаиморасчетамПрочее(aEl,БухгалтерскиеСчета,Взаиморасчеты,СчК,Приход,БезСчета=1,СчД=0,Суб1Д=0,Суб2Д=0) Export //ПКО/РКО/Выписки/КорректировкаДолга Покупатель+Поставщик
  If aEl.ТипПроводки.Selected()<>0 Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета);
  EndIf;

  If ((Взаиморасчеты.Сумма=0)And(Взаиморасчеты.Количество=0))Or(Взаиморасчеты.ТипДокумента=4) Then
    Exit;
  EndIf;
  If СчД=0 Then
    If not IsEmpty(Взаиморасчеты.Тара) Then
      СчПост:=?(Взаиморасчеты.ВидДолга=Enum.ПокупательПоставщик.Поставщик,"60.5","62.5");
    Else
      СчПост:=?(Взаиморасчеты.ВидДолга=Enum.ПокупательПоставщик.Поставщик,"60.1","62.1");
    EndIf;
  Else
    СчПост:=СчД;
  EndIf;
  
  Сч1:=глНайтиСчет(СчК);
  If (aEl.Счет.Selected()<>0)And(not БезСчета) Then
    Сч1:=aEl.Счет;
  EndIf;
  Сч2:=глНайтиСчет(СчПост);
  СчТек1:=?(Приход=0,Сч1,Сч2);
  СчТек2:=?(Приход=0,Сч2,Сч1);
  
  аСубконто1:=0;
  аСубконто2:=0;
  аСубконто3:=0;
  If Приход=1 Then
    If СчД=0 Then
      аСубконто1:=aEl.Контрагент;
    Else
      аСубконто1:=Суб1Д;
      аСубконто2:=Суб2Д;
    EndIf;
  ElseIf СчК="51" Then
    аСубконто1:=aEl.БанковскийСчет;
  ElseIf СчК="50.1" Then
    аСубконто1:=глСубконтоКасса(Сч1,aEl.Касса);
  ElseIf Приход=0 Then
    If (aEl.Счет.Selected()<>0)And(БезСчета=0) Then
      аСубконто1:=aEl.Субконто1;
      аСубконто2:=aEl.Субконто2;
      аСубконто3:=aEl.Субконто3;
    EndIf;
  EndIf;

  Кл:=?(СчТек1.Количественный,Взаиморасчеты.Количество,0);
  БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
      aEl.ЮрЛицо,СчТек1,СчТек2,аСубконто1,аСубконто2,аСубконто3,Кл,Взаиморасчеты.Сумма,0);
  
  аСубконто1:=0;
  аСубконто2:=0;
  аСубконто3:=0;
  If Приход=0 Then
    If СчД=0 Then
      аСубконто1:=aEl.Контрагент;
    Else
      аСубконто1:=Суб1Д;
      аСубконто2:=Суб2Д;
    EndIf;
  ElseIf СчК="51" Then
    аСубконто1:=aEl.БанковскийСчет;
  ElseIf СчК="50.1" Then
    аСубконто1:=глСубконтоКасса(Сч1,aEl.Касса);
  ElseIf Приход=1 Then
    If (aEl.Счет.Selected()<>0)And(БезСчета=0) Then
      аСубконто1:=aEl.Субконто1;
      аСубконто2:=aEl.Субконто2;
      аСубконто3:=aEl.Субконто3;
    EndIf;
  EndIf;

  Кл:=?(СчТек2.Количественный,Взаиморасчеты.Количество,0);
  БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
      aEl.ЮрЛицо,СчТек2,СчТек1,аСубконто1,аСубконто2,аСубконто3,Кл,Взаиморасчеты.Сумма,1);
      
  Exit "";
EndFunction


Function глПроводкаРегистрацияТМЦ(aEl,БухгалтерскиеСчета) Export
  If aEl.ТипПроводки.Selected()<>0 Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета);
  EndIf;

  Сч413:=глНайтиСчет("41.3");
  Сч101:=глНайтиСчет("10.1");
  Сч411:=глНайтиСчет("41."+?(aEl.Склад.флРозничныйСклад=1,"2","1"));
  Сч682:=глНайтиСчет("68.2");
  СчОСЮЛ:=aEl.ЮрЛицо.GetValue("СчетХраненияОС",aEl.DocDate);
  ФлСпис:=?(aEl.КодОперации=Enum.коРегистрацияТМЦ.ОприходованиеТМЦ,0,1);
  ТекСчет:=?(aEl.Счет.Selected()=0,глНайтиСчет("00"),aEl.Счет);
  ФлБезНДС:=?((aEl.УчитыватьВНалоговомУчете=0)Or(aEl.ЮрЛицо.УчитыватьНДС=0),1,0);  
  
  aTab:=aEl.LineParts("Номенклатура");
  aTab.Select();
  While aTab.Next() Do
  
    //Бух. счета
    См:=Round(aTab.Сумма*(1-глКоэффНДС(aTab.СтавкаНДС)),2);
    If ФлБезНДС Then
      См:=aTab.Сумма;
    EndIf;
    Фл:=?(aTab.Номенклатура.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара,1,0);
    Фл3:=?(aTab.Номенклатура.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь,1,0);
    СчОС:=aTab.Номенклатура.СчетХраненияОС;
    If СчОС.Selected()=0 Then
      СчОС:=СчОСЮЛ;
      If СчОС.Selected()=0 Then
        СчОС:=Сч101;
      EndIf;
    EndIf;
    СчИст:=?(Фл=1,Сч413,?(Фл3=0,Сч411,СчОС));
    
    
    Кл:=?(ТекСчет.Количественный,aTab.Количество,0);
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        aEl.ЮрЛицо,ТекСчет,СчИст,aEl.Субконто1,aEl.Субконто2,aEl.Субконто3,Кл,См,?(ФлСпис=0,1,0));
    
    Кл:=?(СчИст.Количественный,aTab.Количество,0);
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        aEl.ЮрЛицо,СчИст,ТекСчет,aTab.Номенклатура,aEl.Склад,,Кл,См,?(ФлСпис=0,0,1));
    
    If (aTab.СтавкаНДС<>Enum.СтавкиНДС.БезНДС)And(not ФлБезНДС) Then//And(ФлСпис=1)
      Фл:=?(ТекСчет.Code="91.2",1,0);
      
      Кл:=?(ТекСчет.Количественный,aTab.Количество,0);
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,ТекСчет,Сч682,?(Фл,глНайтиСубконтоПоИмени(ТекСчет.ВидСубконто1,"НДС"),aEl.Субконто1),?(Фл,0,aEl.Субконто2),?(Фл,0,aEl.Субконто3),Кл,aTab.Сумма-См,0);
      
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,Сч682,ТекСчет,глНайтиСубконтоПоИмени(Сч682.ВидСубконто1,"Налог: начислен/уплачен"),,,0,aTab.Сумма-См,1);
    EndIf;
  EndDo;
  
  Exit "";
EndFunction

Function глПроводкаПоСкладуПоставщики(aEl,БухгалтерскиеСчета,ДокИсходный,Минус) Export
  Вид:=aEl.DBName();
  
  If глЕстьРеквизитДокумента("ТипПроводки",Вид) Then
    If aEl.ТипПроводки.Selected()<>0 Then
      Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета,,ДокИсходный);
    ElseIf _And(глЕстьРеквизитДокумента("ТипПроводки",ДокИсходный.DBName()),ДокИсходный.ТипПроводки.Selected()<>0) Then
      Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета,,ДокИсходный);
    EndIf;
  EndIf;
  
  Сч413:=глНайтиСчет("41.3");
  Сч101:=глНайтиСчет("10.1");
  Сч605:=глНайтиСчет("60.5");
  Сч411:=глНайтиСчет("41."+?(ДокИсходный.Склад.флРозничныйСклад=1,"2","1"));
  Сч601:=глНайтиСчет("60.1");
  СчОСЮЛ:=ДокИсходный.ЮрЛицо.GetValue("СчетХраненияОС",aEl.DocDate);
  
  пТара:=Enum.ВидыНоменклатуры.Тара;
  пУслуга:=Enum.ВидыНоменклатуры.Услуга;
  пБезНДС:=Enum.СтавкиНДС.БезНДС;
  
  aTab:=aEl.LineParts("Номенклатура");
  aTab.Select();
  While aTab.Next() Do
    
    Н:=aTab.Номенклатура;
    If Н.ВидНоменклатуры=пУслуга Then
      Continue;
    EndIf;
    ФлТара:=?((Н.ВидНоменклатуры=пТара)And((aTab.СтавкаНДС=пБезНДС)Or(ДокИсходный.ЮрЛицо.УчитыватьНДС=0)),1,0);
    ФлОС:=?(Н.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь,1,0);
    СчОС:=Н.СчетХраненияОС;
    If СчОС.Selected()=0 Then
      СчОС:=СчОСЮЛ;
      If СчОС.Selected()=0 Then
        СчОС:=Сч101;
      EndIf;
    EndIf;
    СчИст:=?(ФлТара,Сч413,?(not ФлОС,Сч411,СчОС));
    
    См:=0;
    If (ДокИсходный.УчитыватьВНалоговомУчете=0)Or(ДокИсходный.ЮрЛицо.УчитыватьНДС=0) Then
      См:=aTab.Сумма;
    Else
      СмНДС:=Round(aTab.Сумма*глКоэффНДС(aTab.СтавкаНДС),2);
      См:=aTab.Сумма-СмНДС;
    EndIf;
    
    If (Н.ВидНоменклатуры=пТара)And(not ФлТара) Then
      глПерепродатьТару(ДокИсходный,БухгалтерскиеСчета,Сч413,Сч411,Н,aEl.Склад,См,aTab.Количество);      
    EndIf;
    
    СчПр:=?(ФлТара,Сч605,Сч601);
    
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,СчИст,СчПр,Н,ДокИсходный.Склад,,Минус*aTab.Количество,Минус*См,0);
    
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,СчПр,СчИст,ДокИсходный.Контрагент,,,0,Минус*См,1);
  EndDo;
  
EndFunction

Function глПроводкаПоСкладуПокупатели(aEl,БухгалтерскиеСчета,ДокИсходный,Минус) Export
  Вид:=aEl.DBName();

  If глЕстьРеквизитДокумента("ТипПроводки",Вид) Then
    If aEl.ТипПроводки.Selected()<>0 Then
      Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета,,ДокИсходный);
    ElseIf _And(глЕстьРеквизитДокумента("ТипПроводки",ДокИсходный.DBName()),ДокИсходный.ТипПроводки.Selected()<>0) Then
      Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета,,ДокИсходный);
    EndIf;
  EndIf;
  
  Сч913:=глНайтиСчет("91.3");
  Сч9021:=глНайтиСчет("90.2."+?(ДокИсходный.Склад.флОблагаетсяЕНВД,"2","1"));
  Сч413:=глНайтиСчет("41.3");
  Сч101:=глНайтиСчет("10.1");
  Сч411:=глНайтиСчет("41."+?(ДокИсходный.Склад.флРозничныйСклад,"2","1"));
  СчОСЮЛ:=ДокИсходный.ЮрЛицо.GetValue("СчетХраненияОС",aEl.DocDate);
  
  пТара:=Enum.ВидыНоменклатуры.Тара;
  пУслуга:=Enum.ВидыНоменклатуры.Услуга;
  пБезНДС:=Enum.СтавкиНДС.БезНДС;
  
  aTab:=aEl.LineParts("Номенклатура");
  aTab.Select();
  While aTab.Next() Do
    
    Н:=aTab.Номенклатура;
    If Н.ВидНоменклатуры=пУслуга Then
      Continue;
    EndIf;
    ФлТара:=?((Н.ВидНоменклатуры=пТара)And((aTab.СтавкаНДС=пБезНДС)Or(ДокИсходный.ЮрЛицо.УчитыватьНДС=0)),1,0);
    ФлОС:=?(Н.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь,1,0);
    
    См:=0;
    If ФлТара Then
      См:=aTab.Сумма;
    Else
      См:=aTab.Количество*глПолучитьОсновнуюЦену(Н,aEl.Склад,aEl.DocDate);
    EndIf;
    
    If (ДокИсходный.УчитыватьВНалоговомУчете>0)And(ДокИсходный.ЮрЛицо.УчитыватьНДС>0) Then
      СмНДС:=Round(См*глКоэффНДС(aTab.СтавкаНДС),2);
      См:=См-СмНДС;
    EndIf;
    
    If (Н.ВидНоменклатуры=пТара)And(not ФлТара) Then
      глПерепродатьТару(ДокИсходный,БухгалтерскиеСчета,Сч411,Сч413,Н,aEl.Склад,См,aTab.Количество);
    EndIf;
    СчОС:=Н.СчетХраненияОС;
    If СчОС.Selected()=0 Then
      СчОС:=СчОСЮЛ;
      If СчОС.Selected()=0 Then
        СчОС:=Сч101;
      EndIf;
    EndIf;
    СчИст:=?(ФлТара,Сч413,?(not ФлОС,Сч411,СчОС));
    СчПр:=?(ФлТара,Сч913,Сч9021);
    
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,СчПр,СчИст,,,,0,Минус*См,0);
        
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,СчИст,СчПр,Н,ДокИсходный.Склад,,Минус*aTab.Количество,Минус*См,1);
  EndDo;
  
EndFunction

Function глПроводкаПоВзаиморасчетамПоставщики(aEl,БухгалтерскиеСчета,ДокИсходный,Минус,Тара,СтавкаНДС,См,КолВо,МнТип,ByRef СчДеб,ByRef СчКред,СмНДС) Export
  If Тара<>0 Then
    Exit;
  EndIf;
  If (ДокИсходный.УчитыватьВНалоговомУчете=1)And(ДокИсходный.ЮрЛицо.УчитыватьНДС>0) Then
    If СчДеб=0 Then
      СчДеб:=глНайтиСчет("19.3");
      СчКред:=глНайтиСчет("60.1");
    EndIf;
    
    If Тара=0 Then
      См:=СмНДС;//Round(См*глКоэффНДС(СтавкаНДС),2);
    EndIf;
    
    //Д.19.3 К.60.1
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,СчДеб,СчКред,ДокИсходный.Контрагент,,,0,Минус*См,0);
    
    //Д.60.1 К.19.3
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,СчКред,СчДеб,ДокИсходный.Контрагент,,,0,Минус*См,1);
  EndIf;    
EndFunction


//Тара -- Проводка только по таре
Function глПроводкаПоВзаиморасчетамПокупатели(aEl,БухгалтерскиеСчета,ДокИсходный,Минус,Тара,СтавкаНДС,См,СмБанк,КолВо,СчДеб,СчКред,ByRef Сч3=0,ByRef Сч4=0) Export

  Function СубконтоСтавкаНДС(НДС,ВидСуб)
    If ВидСуб.Selected()=0 Then
      Exit 0;
    EndIf;
    Exit глНайтиСубконтоПоИмени(ВидСуб,Trim(НДС));
  EndFunction

  флНДС:=?((ДокИсходный.УчитыватьВНалоговомУчете)And(ДокИсходный.ЮрЛицо.УчитыватьНДС>0),1,0);
  
  
  If Тара<>0 Then
    If СчДеб=0 Then
      СчДеб:=глНайтиСчет("62.5");
      СчКред:=глНайтиСчет("91.3");
    EndIf;
    
    //Д.62.5 К.91.3
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,СчДеб,СчКред,ДокИсходный.Контрагент,,,0,Минус*См,0);
    
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,СчКред,СчДеб,,,,0,Минус*См,1);
  Else
    Фл9011:=1;
    If СчДеб=0 Then
      СчДеб:=глНайтиСчет("62.1");
      If глЕстьРеквизитДокумента("Склад",ДокИсходный.DBName()) Then
        СчКред:=глНайтиСчет("90.1."+?(ДокИсходный.Склад.флОблагаетсяЕНВД,"2","1"));
        Фл9011:=?(ДокИсходный.Склад.флОблагаетсяЕНВД=1,0,Фл9011);
      Else
        СчКред:=глНайтиСчет("90.1.1");
      EndIf;
    EndIf;
  
    СмБанк:=Min(СмБанк,См);
    If СмБанк>0 Then //Розничная выручка в банк
      СчДеб2:=глНайтиСчет("57.3","57@0@0@0@0@0@@@@Продажи по платежным картам");
      //Д.57.3 К.62.1
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          ДокИсходный.ЮрЛицо,СчДеб2,СчДеб,,,,0,Минус*СмБанк,0);
          
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          ДокИсходный.ЮрЛицо,СчДеб,СчДеб2,ДокИсходный.Контрагент,,,0,Минус*СмБанк,1);
    EndIf;
    
    //Д.62.1 К.90.1.1
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,СчДеб,СчКред,ДокИсходный.Контрагент,,,0,Минус*См,0);
    
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,СчКред,СчДеб,?(Фл9011,СубконтоСтавкаНДС(СтавкаНДС,СчКред.ВидСубконто1),0),,,0,Минус*См,1);
    
    If not флНДС Then
      Exit;
    EndIf;
    
    If Сч3=0 Then
      Сч3:=глНайтиСчет("90.3");
      Сч4:=глНайтиСчет("76.Н.1");
    EndIf;
    
    См:=Round(См*глКоэффНДС(СтавкаНДС),2);
    //Д.90.3 К.76.Н.1
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,Сч3,Сч4,СубконтоСтавкаНДС(СтавкаНДС,Сч3.ВидСубконто1),,,0,Минус*См,0);
    
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,Сч4,Сч3,ДокИсходный.Контрагент,,,0,Минус*См,1);
  EndIf;
EndFunction


Function глПроводкаПоПеремещениюТМЦ(aEl,БухгалтерскиеСчета) Export
  If aEl.ТипПроводки.Selected()<>0 Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета);
  EndIf;
  
  If (aEl.Склад.флЧужойСклад)or(aEl.СкладПолучатель.флЧужойСклад) Then
    Exit;
  EndIf;
  
  Сч413:=глНайтиСчет("41.3");
  Сч101:=глНайтиСчет("10.1");
  Сч411:=глНайтиСчет("41."+?(aEl.Склад.флРозничныйСклад,"2","1"));
  Сч4112:=глНайтиСчет("41."+?(aEl.СкладПолучатель.флРозничныйСклад,"2","1"));
  ВидАренда:=Enum.ВидыНоменклатуры.АрендованноеИмущество;
  
  СчОСЮЛ:=aEl.ЮрЛицо.GetValue("СчетХраненияОС",aEl.DocDate);
  
  aTab:=aEl.LineParts("Номенклатура");
  aTab.Select();
  While aTab.Next() Do
    If aTab.Количество=0 Then
      Continue;
    EndIf;
    Н:=aTab.Номенклатура;
    If Н.ВидНоменклатуры=ВидАренда Then
      Continue;//Аренда на балансе не числится
    EndIf;
    
    Фл:=?(Н.ВидНоменклатуры=Enum.ВидыНоменклатуры.Тара,1,0);
    Фл3:=?(Н.ВидНоменклатуры=Enum.ВидыНоменклатуры.Инвентарь,1,0);
    СчОС:=Н.СчетХраненияОС;
    If СчОС.Selected()=0 Then
      СчОС:=СчОСЮЛ;
      If СчОС.Selected()=0 Then
        СчОС:=Сч101;
      EndIf;
    EndIf;
    СчИст:=?(Фл,Сч413,?(not Фл3,Сч411,СчОС));
    СчПол:=?(Фл,Сч413,?(not Фл3,Сч4112,СчОС));
    
    См:=aTab.Количество*глПолучитьОсновнуюЦену(Н,aEl.Склад,aEl.DocDate);
    If aEl.ЮрЛицо.УчитыватьНДС>0 Then
      СмНДС:=Round(См*глКоэффНДС(Н.СтавкаНДС),2);
      См:=См-СмНДС;
    EndIf;
    
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        aEl.ЮрЛицо,СчПол,СчИст,Н,aEl.СкладПолучатель,,aTab.Количество,См,0);
    
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        aEl.ЮрЛицо,СчИст,СчПол,Н,aEl.Склад,,aTab.Количество,См,1);
  EndDo;
EndFunction


Function глПроводкаРеализацииПрочей(aEl,БухгалтерскиеСчета,ДокИсходный) Export
  If aEl.ТипПроводки.Selected()<>0 Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета,,ДокИсходный);
  ElseIf ДокИсходный.ТипПроводки.Selected()<>0 Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета,,ДокИсходный);
  EndIf;
  
  
  Сч62:=глНайтиСчет("62.2");
  Сч91:=глНайтиСчет("91.1");
  Сч912:=глНайтиСчет("91.2");
  Сч76:=глНайтиСчет("76.Н.1");
  
  If not isEmpty(Struct.Doc(aEl.DBName()).LineParts("Содержание")) Then
    aTab:=aEl.LineParts("Содержание");
  Else
    aTab:=aEl.LineParts("Номенклатура");//Сторнирование
  EndIf;  
  aTab.Select();
  While aTab.Next() Do
    If aTab.Сумма=0 Then
      Continue;
    EndIf;
    
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,Сч62,Сч91,ДокИсходный.Контрагент,ДокИсходный.Договор,0,0,aTab.Сумма,0);
    
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,Сч91,Сч62,0,0,0,0,aTab.Сумма,1);
    
    If (ДокИсходный.УчитыватьВНалоговомУчете=1)And(ДокИсходный.ЮрЛицо.УчитыватьНДС>0) Then
      См:=Round(aTab.Сумма*глКоэффНДС(aTab.СтавкаНДС),2);
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          ДокИсходный.ЮрЛицо,Сч912,Сч76,0,0,0,0,См,0);
    
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          ДокИсходный.ЮрЛицо,Сч76,Сч912,ДокИсходный.Контрагент,0,0,0,См,1);
    EndIf;    
  EndDo;
  
  Exit "";
EndFunction

Function глПроводкаПодотчетнойОперации(aEl,БухгалтерскиеСчета,ФлПрочее) Export
  If aEl.ТипПроводки.Selected()<>0 Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета);
  EndIf;  
  
  фл60:=Number(DBVar.ПрочиеПоставщикиУчитываютсяНа60Счету);
  СчД:=0;
  If not ФлПрочее Then
    СчД:=глНайтиСчет(?(фл60=0,"76.5","60.1"));
  EndIf;
  Сч71:=глНайтиСчет("71.1");
  
  aTab:=aEl.LineParts("Содержание");
  aTab.Select();
  While aTab.Next() Do
    If aTab.Сумма=0 Then
      Continue;
    EndIf;
        
    If ФлПрочее Then
      If aTab.Счет.Selected()=0 Then
        Exit "Необходимо выбрать счет во всех строках документа!";
      EndIf;
      СчД:=aTab.Счет;
      аСуб1:=aTab.Субконто1;
      аСуб2:=aTab.Субконто2;
      аСуб3:=aTab.Субконто3;
    Else
      аСуб1:=aTab.Контрагент;
      аСуб2:=?(СчД.ВидСубконто2.Selected()<>0,aTab.Договор,0);
      аСуб3:=0;
    EndIf;
    
    Количество:=?(СчД.Количественный=1,aTab.Количество,0);
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        aEl.ЮрЛицо,СчД,Сч71,аСуб1,аСуб2,аСуб3,Количество,aTab.Сумма,0);
    
    Количество:=?(СчД.Количественный=1,aTab.Количество,0);
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        aEl.ЮрЛицо,Сч71,СчД,aEl.ПодотчетноеЛицо,0,0,0,aTab.Сумма,1);
  EndDo;  
  
  Exit "";
EndFunction

Function глПроводкаПоступленияПрочего(aEl,БухгалтерскиеСчета,ДокИсходный) Export
  If aEl.ТипПроводки.Selected()<>0 Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета,,ДокИсходный);
  ElseIf ДокИсходный.ТипПроводки.Selected()<>0 Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета,,ДокИсходный);
  EndIf;
  

  фл60:=Number(DBVar.ПрочиеПоставщикиУчитываютсяНа60Счету);
  Сч60:=глНайтиСчет(?(фл60=0,"76.5","60.1"));
  Сч193:=глНайтиСчет("19.3");

  If not isEmpty(Struct.Doc(aEl.DBName()).LineParts("Содержание")) Then
    aTab:=aEl.LineParts("Содержание");
  Else
    aTab:=aEl.LineParts("Номенклатура");//Сторнирование
  EndIf;  
  aTab.Select();
  While aTab.Next() Do
    If aTab.Сумма=0 Then
      Continue;
    EndIf;
    Суб2:=?(Сч60.ВидСубконто2.Selected()<>0,ДокИсходный.Договор,0);
    
    См:=Round(aTab.Сумма*глКоэффНДС(aTab.СтавкаНДС),2);
    If ДокИсходный.ЮрЛицо.УчитыватьНДС<>1 Then
      См:=0;
    EndIf;
    If См<>0 Then
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          ДокИсходный.ЮрЛицо,Сч193,Сч60,ДокИсходный.Контрагент,0,0,0,См,0);
    
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          ДокИсходный.ЮрЛицо,Сч60,Сч193,ДокИсходный.Контрагент,Суб2,0,0,См,1);
    EndIf;
    
    If aTab.Счет.Selected()=0 Then
      Exit "Необходимо выбрать счет для каждой из строк документа!";
    EndIf;
    
    Количество:=?(aTab.Счет.Количественный=1,aTab.Количество,0);
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,aTab.Счет,Сч60,aTab.Субконто1,aTab.Субконто2,aTab.Субконто3,Количество,aTab.Сумма-См,0);

    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        ДокИсходный.ЮрЛицо,Сч60,aTab.Счет,ДокИсходный.Контрагент,Суб2,0,0,aTab.Сумма-См,1);
  EndDo;
  
  Exit "";
EndFunction

//ДокИсходный -- используется, если функция вызывается из сторнирования
Function глПроводкаСписанияОС(aEl,БухгалтерскиеСчета,ДокИсходный=0) Export;
  If aEl.ТипПроводки.Selected()<>0 Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета,,ДокИсходный);
  ElseIf _And(not IsEmpty(ДокИсходный),ДокИсходный.ТипПроводки.Selected()<>0) Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета,,ДокИсходный);
  EndIf;
  
  
  If ДокИсходный=0 Then
    ДокИсходный:=aEl;
  EndIf;
  
  aTab:=aEl.LineParts("Номенклатура");
  Т:=0;
  If ДокИсходный.ДокОснование.Selected()<>0 Then
    If (ДокИсходный.ДокОснование.DBName()="РегистрацияОС")And(ДокИсходный.ДокОснование.Status()>1) Then
      If ДокИсходный.ДокОснование.КодОперации=Enum.коРегистрацияОС.ПоступлениеОС Then
        Т:=Tab.Create();
        ДокИсходный.ДокОснование.LineParts("Номенклатура").CopyTo(Т);
      EndIf;
    EndIf;
  EndIf;
  СчОСЮЛ:=aEl.ЮрЛицо.GetValue("СчетХраненияОС",aEl.DocDate);
  Сч101:=глНайтиСчет("10.1");
  вСубконто1:=0;
  
  aTab.Select();
  While aTab.Next() Do
    If (aTab.Сумма=0)And(aTab.Количество=0) Then
      Continue;
    EndIf;
    
    If aTab.Счет.Selected()=0 Then
      Exit "В документе необходимо выбрать бухгалтерский счет для каждой из строк!";
    EndIf;
    
    Сч1:=aTab.Счет;
    аСубконто1:=aTab.Субконто1;
    аСубконто2:=aTab.Субконто2;
    аСубконто3:=aTab.Субконто3;
    
    Сч2:=aTab.Номенклатура.СчетХраненияОС;
    If Сч2.Selected()=0 Then
      Сч2:=СчОСЮЛ;
      If Сч2.Selected()=0 Then
        Сч2:=Сч101;
      EndIf;
    EndIf;
    бСубконто1:=aTab.Номенклатура;
    бСубконто2:=ДокИсходный.Склад;
    бСубконто3:=GetNothing();
    
    If Т<>0 Then
      If Т.FindAndGoto(aTab.Номенклатура,,"Номенклатура")>0 Then
        Сч2:=Т.Счет;
        бСубконто1:=Т.Субконто1;
        бСубконто2:=Т.Субконто2;
        бСубконто3:=Т.Субконто3;
      EndIf;
    EndIf;
    
    См:=Round(aTab.Сумма*глКоэффНДС(aTab.СтавкаНДС),2);
    Кл:=?(Сч1.Количественный=1,aTab.Количество,0);
    
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        aEl.ЮрЛицо,Сч1,Сч2,аСубконто1,аСубконто2,аСубконто3,Кл,aTab.Сумма-См,0);
    
    Кл:=?(Сч2.Количественный=1,aTab.Количество,0);
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        aEl.ЮрЛицо,Сч2,Сч1,бСубконто1,бСубконто2,бСубконто3,Кл,aTab.Сумма-См,1);
    
    //Восстановление НДС
    If ДокИсходный.УчитыватьВНалоговомУчете Then
      Сч3:=глНайтиСчет("68.2");
      
      Кл:=?(Сч1.Количественный=1,aTab.Количество,0);
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,Сч1,Сч3,аСубконто1,аСубконто2,аСубконто3,Кл,См,0);
      
      If вСубконто1=0 Then
        вСубконто1:=глНайтиСубконтоПоИмени(Сч3.ВидСубконто1,"Налог: начислен/уплачен");
      EndIf;  
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,Сч3,Сч1,вСубконто1,0,0,0,См,1);
    EndIf;
  EndDo;
EndFunction


//ДокИсходный -- используется, если функция вызывается из сторнирования
Function глПроводкиРеализацииОС(aEl,БухгалтерскиеСчета,ДокИсходный=0) Export
  If aEl.ТипПроводки.Selected()<>0 Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета,,ДокИсходный);
  ElseIf _And(not IsEmpty(ДокИсходный),ДокИсходный.ТипПроводки.Selected()<>0) Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета,,ДокИсходный);
  EndIf;
  

  If ДокИсходный=0 Then
    ДокИсходный:=aEl;
  EndIf;
  
  aTab:=aEl.LineParts("Номенклатура");
  Сч02:=глНайтиСчет("02.1");
  Сч012:=глНайтиСчет("01.2");
  Сч62:=глНайтиСчет("62.1");
  Сч911:=глНайтиСчет("91.1");
  оСуб:=глНайтиСубконтоПоИмени(Сч911.ВидСубконто1,"Реализация ОС");

  Сч76:=глНайтиСчет("76.Н.1");
  Сч912:=глНайтиСчет("91.2");
  оСуб2:=глНайтиСубконтоПоИмени(Сч912.ВидСубконто1,"НДС с прочей реализации");
  оСуб3:=глНайтиСубконтоПоИмени(Сч912.ВидСубконто1,"Реализация ОС");
      
  Т:=0;
  If ДокИсходный.ДокОснование.Selected()<>0 Then
    If (ДокИсходный.ДокОснование.DBName()="РегистрацияОС")And(ДокИсходный.ДокОснование.Status()>1) Then
      If ДокИсходный.ДокОснование.КодОперации=Enum.коРегистрацияОС.ПоступлениеОС Then
        Т:=Tab.Create();
        ДокИсходный.ДокОснование.LineParts("Номенклатура").CopyTo(Т);
        Т.Select();
        While Т.Next() Do
          Т.Субконто1:=?(isEmpty(Т.Субконто1),0,Т.Субконто1);
          Т.Субконто2:=?(isEmpty(Т.Субконто2),0,Т.Субконто2);
          Т.Субконто3:=?(isEmpty(Т.Субконто3),0,Т.Субконто3);
        EndDo;
      EndIf;
    EndIf;
  EndIf;
  
  
  пУслуга:=Enum.ВидыНоменклатуры.Услуга;
  aTab.Select();
  While aTab.Next() Do
    If (aTab.Сумма=0)And(aTab.Количество=0) Then
      Continue;
    EndIf;
    
    См0:=aTab.Сумма;
    См:=Round(aTab.Сумма*глКоэффНДС(aTab.СтавкаНДС),2);
    If aEl.ЮрЛицо.УчитыватьНДС=0 Then
      См:=0;
    EndIf;
    СмНДС:=См;
    //Себестоимость продажи, не продажная цена
    If Т<>0 Then
      Т.CurLine:=0;
      If Т.LocateAndGoto("Номенклатура,Счет,Субконто1,Субконто2,Субконто3",aTab.Номенклатура,aTab.Счет,
          ?(isEmpty(aTab.Субконто1),0,aTab.Субконто1),?(isEmpty(aTab.Субконто2),0,aTab.Субконто2),?(isEmpty(aTab.Субконто3),0,aTab.Субконто3))>0 Then
        См0:=Т.Сумма;
        См:=Round(См0*глКоэффНДС(Т.СтавкаНДС),2);
        If aEl.ЮрЛицо.УчитыватьНДС=0 Then
          См:=0;
        EndIf;
      EndIf;
    EndIf;
    
    Договор:=?(Сч62.ВидСубконто2.Selected()<>0,ДокИсходный.Договор,0);
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        aEl.ЮрЛицо,Сч62,Сч911,ДокИсходный.Контрагент,Договор,0,0,aTab.Сумма,0);
    
    БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
        aEl.ЮрЛицо,Сч911,Сч62,оСуб,0,0,0,aTab.Сумма,1);
    
    If СмНДС>0 Then
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,Сч912,Сч76,оСуб2,0,0,0,СмНДС,0);
                
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,Сч76,Сч912,ДокИсходный.Контрагент,0,0,0,СмНДС,1);
    EndIf;
    
    If aTab.Счет.Selected()=0 Then
      Exit "В документе необходимо выбрать счет для каждой из строк!";
    EndIf;

    If aTab.Счет.Code="01.1" Then
      //Ищем остаток, TODO: Gross?
      См01:=Storage.БухгалтерскиеСчета.Gross1("Сумма",,0,"ЮрЛицо,Счет,Субконто1,Субконто2",aEl.ЮрЛицо,aTab.Счет,aTab.Номенклатура,aEl.Склад);
      См02:=-Storage.БухгалтерскиеСчета.Gross1("Сумма",,0,"ЮрЛицо,Счет,Субконто1,Субконто2",aEl.ЮрЛицо,Сч02,aTab.Номенклатура,aEl.Склад);
      //01.2 - 01.1
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,Сч012,aTab.Счет,aTab.Номенклатура,0,0,0,См01,0);
      
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,aTab.Счет,Сч012,aTab.Номенклатура,ДокИсходный.Склад,0,0,См01,1);
      
      //02 - 01.2
      If См02<>0 Then
        БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
            aEl.ЮрЛицо,Сч02,Сч012,aTab.Номенклатура,ДокИсходный.Склад,0,0,См02,0);
      
        БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
            aEl.ЮрЛицо,Сч012,Сч02,aTab.Номенклатура,0,0,0,См02,1);
      EndIf;
      
      //91.2 - 01.2
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,Сч912,Сч012,оСуб3,0,0,0,См01-См02,0);
      
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,Сч012,Сч912,aTab.Номенклатура,0,0,0,См01-См02,1);
    Else
      См:=См0-См;
      //Условно-средняя сумма
      If (Pos("10.",aTab.Счет.Code)=1)Or(Pos("41.",aTab.Счет.Code)=1) Then
        См2:=aTab.Количество*глПолучитьОсновнуюЦену(aTab.Номенклатура,ДокИсходный.Склад,aEl.DocDate);
        If aEl.ЮрЛицо.УчитыватьНДС>0 Then
          СмНДС:=Round(См2*глКоэффНДС(aTab.СтавкаНДС),2);
          См2:=См2-СмНДС;
        EndIf;
        If См2>0 Then
          См:=См2;
        EndIf;
      EndIf;
      
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,Сч912,aTab.Счет,оСуб3,0,0,0,См,0);
      
      Кл:=?(aTab.Счет.Количественный=1,aTab.Количество,0);
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,aTab.Счет,Сч912,aTab.Субконто1,aTab.Субконто2,aTab.Субконто3,Кл,См,1);
    EndIf;
  EndDo;
EndFunction  


//ДокИсходный -- используется, если функция вызывается из сторнирования
Function глПроводкиПоступленияОС(aEl,БухгалтерскиеСчета,фл60,КорСчет,ДокИсходный=0) Export
  If aEl.ТипПроводки.Selected()<>0 Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета,,ДокИсходный);
  ElseIf _And(not IsEmpty(ДокИсходный),ДокИсходный.ТипПроводки.Selected()<>0) Then
    Exit глПроводкаПользовательская(aEl,БухгалтерскиеСчета,,ДокИсходный);
  EndIf;

  If ДокИсходный=0 Then
    ДокИсходный:=aEl;
  EndIf;

  aTab:=aEl.LineParts("Номенклатура");
  Сч19:=глНайтиСчет("19.3");
  Сч60:=глНайтиСчет(?(not фл60,"76.5","60.1"));
  Суб2:=?(Сч60.ВидСубконто2.Selected()<>0,ДокИсходный.Договор,0);

  aTab.Select();
  While aTab.Next() Do
    If (aTab.Сумма=0)And(aTab.Количество=0) Then
      Continue;
    EndIf;
    
    If aTab.Счет.Selected()=0 Then
      Exit "В документе необходимо выбрать счет для каждой из строк!";
    EndIf;
    Сч1:=aTab.Счет;
    аСубконто1:=aTab.Субконто1;
    аСубконто2:=aTab.Субконто2;
    аСубконто3:=aTab.Субконто3;
    Сч2:=глНайтиСчет(КорСчет);
    Кл:=?(Сч1.Количественный=1,aTab.Количество,0);
    
    If КорСчет="71.1" Then
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,Сч1,Сч2,аСубконто1,аСубконто2,аСубконто3,Кл,aTab.Сумма,0);
    
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,Сч2,Сч1,ДокИсходный.ПодотчетноеЛицо,0,0,0,aTab.Сумма,1);
          
    ElseIf (КорСчет="76.5")Or(КорСчет="60.1") Then
      См:=Round(aTab.Сумма*глКоэффНДС(aTab.СтавкаНДС),2);
      If aEl.ЮрЛицо.УчитыватьНДС<>1 Then
        См:=0;
      EndIf;
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,Сч1,Сч2,аСубконто1,аСубконто2,аСубконто3,Кл,aTab.Сумма-См,0);
      
      БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
          aEl.ЮрЛицо,Сч2,Сч1,ДокИсходный.Контрагент,Суб2,0,0,aTab.Сумма-См,1);
      
      //Проводки по НДС
      If См>0 Then
        БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
            aEl.ЮрЛицо,Сч19,Сч60,ДокИсходный.Контрагент,0,0,0,См,0);
      
        БухгалтерскиеСчета.AddLine("ЮрЛицо,Счет,КоррСчет,Субконто1,Субконто2,Субконто3,Количество,Сумма,_Expense",
            aEl.ЮрЛицо,Сч60,Сч19,ДокИсходный.Контрагент,Суб2,0,0,См,1);
      
      EndIf;
    EndIf;
  EndDo;
EndFunction  


Function глПрочаяОперацияПоНакопителям(aEl,ПодотчетныеОперации,Сумма,Знак,Суффикс="") Export
  Вид:=aEl.DBName();
  If глЕстьРеквизитДокумента("Счет",Вид) Then
    Счет:=aEl.Счет;
    Субконто1:=aEl.Субконто1;
    Субконто2:=aEl.Субконто2;
  ElseIf not isEmpty(Struct.Doc(Вид).LineParts("Содержание")) Then
    aTab:=aEl.LineParts("Содержание");
    Счет:=aTab.Get(aTab.CurLine,"Счет"+Суффикс);
    Субконто1:=aTab.Get(aTab.CurLine,"Субконто"+Суффикс+"1");
    Субконто2:=aTab.Get(aTab.CurLine,"Субконто"+Суффикс+"2");
  Else
    Exit;
  EndIf;
  
  Код:=Счет.Code;
  If Код="71.1" Then
    ПодотчетныеОперации.AddLine("ЮрЛицо,ПодотчетноеЛицо,ТипОперации,Сумма,Номенклатура,Количество,_Expense",aEl.ЮрЛицо,Субконто1,
        Enum.ТипыПодотчетныхОпераций.ПодотчетнаяОперация,Сумма,0,0,?(Знак=1,0,1));
  EndIf;
EndFunction


Function глОтложенныйНДСОбновитьЗаголовок(aEl) Export;
  If Form.Control("ОтложитьНДСНаПериод")=0 Then
    Exit;
  EndIf;
  аДата:=aEl.ОтложитьНДСНаПериод;
  If not глПользователь.бухБухгалтер Then
    Form.ОтложитьНДСНаПериод.Caption:="(недоступно)";
  ElseIf (IsEmpty(аДата))Or(BegOfMonth(аДата)=BegOfMonth(aEl.DocDate)) Then
    Form.ОтложитьНДСНаПериод.Caption:="(не отложен)";
  Else
    пДата:=FormatDate(аДата,"MM YYYY")+" г.";
    Form.ОтложитьНДСНаПериод.Caption:="На "+пДата;
  EndIf;
  флРазрешен:=1;
  If aEl.DBName()="РегистрацияОС" Then
    флРазрешен:=?(aEl.КодОперации=Enum.коРегистрацияОС.ПоступлениеОС,1,0);
  EndIf;
  
  ФлБух:=глПользователь.бухБухгалтер;
  Фл:=?(aEl.ЮрЛицо.УчитыватьНДС>0,1,0)*ФлБух*флРазрешен;
  Form.ОтложитьНДСНаПериод.isDisabled:=1-Фл;
  Form.тОтложитьНДС.isDisabled:=1-Фл;
EndFunction


Function глМакросБухСчетОбновитьВидимость(пПрефикс) Export

  Счет:=Form.Control(пПрефикс+"Счет").Value;
  If Счет.Selected()=0 Then
    Form.Control(пПрефикс+"оСчетОписание").Caption:="";
  Else
    Form.Control(пПрефикс+"оСчетОписание").Caption:=Счет.Name;
  EndIf;
  
  If Счет.ВидСубконто1.Selected()<>0 Then
    Form.Control(пПрефикс+"тСубконто1").isDisabled:=0;
    Form.Control(пПрефикс+"Субконто1").isDisabled:=0;
  Else
    Form.Control(пПрефикс+"тСубконто1").isDisabled:=1;
    Form.Control(пПрефикс+"Субконто1").isDisabled:=1;
  EndIf;
  
  If Счет.ВидСубконто2.Selected()<>0 Then
    Form.Control(пПрефикс+"тСубконто2").isDisabled:=0;
    Form.Control(пПрефикс+"Субконто2").isDisabled:=0;
  Else
    Form.Control(пПрефикс+"тСубконто2").isDisabled:=1;
    Form.Control(пПрефикс+"Субконто2").isDisabled:=1;
  EndIf;
  
  If Счет.ВидСубконто3.Selected()<>0 Then
    Form.Control(пПрефикс+"тСубконто3").isDisabled:=0;
    Form.Control(пПрефикс+"Субконто3").isDisabled:=0;
  Else
    Form.Control(пПрефикс+"тСубконто3").isDisabled:=1;
    Form.Control(пПрефикс+"Субконто3").isDisabled:=1;
  EndIf;
EndFunction


Function глПроверитьКорректностьЗаполненияСубконто(aEl,Предупрежд=0) Export
  If aEl.Счет.Selected()=0 Then
    If Предупрежд=1 Then
      If AskQuestion("Вы не выбрали счет в документе! Хотите выбрать сейчас?",Q_QUESTION+Q_YESNO)=R_YES Then
        Exit 0;
      EndIf;
    ElseIf Предупрежд=2 Then
      Box("В этом документе необходимо выбрать счет перед обработкой или записью!",Q_STOP);
      Exit 0;
    EndIf;
    Exit 1;
  EndIf;
  
  If (aEl.Счет.ВидСубконто1.Selected()<>0)And(aEl.Субконто1.Selected()=0) Then
    Message("Не выбрано значение субконто 1!","!");
    Exit 0;
  EndIf;
  If (aEl.Счет.ВидСубконто2.Selected()<>0)And(aEl.Субконто2.Selected()=0) Then
    Message("Не выбрано значение субконто 2!","!");
    Exit 0;
  EndIf;
  If (aEl.Счет.ВидСубконто3.Selected()<>0)And(aEl.Субконто3.Selected()=0) Then
    Message("Не выбрано значение субконто 3!","!");
    Exit 0;
  EndIf;
  Exit 1;
EndFunction


Function глВыбратьВладельцаСубконто(Док,СпрИмя,Деф,ВидСубконто=0,ПредСуб1=0,ПредСуб2=0) Export
  If Struct.Ref(СпрИмя).Parents.Count()=0 Then
    Exit GetNothing();
  EndIf;
  If (ВидСубконто<>0)And(СпрИмя=uppercase("бухЗначенияСубконто")) Then
    Exit ВидСубконто;
  EndIf;  
  If not isEmpty(Деф) Then
    Exit Деф.Parent();
  EndIf;
  If (not isEmpty(Док))And((СпрИмя="КНТБАНКОВСКИЕСЧЕТА")Or(СпрИмя="КНТДОГОВОРЫ")) Then
    If глЕстьРеквизитДокумента("Контрагент",Док.DBName()) Then
      Exit Док.Контрагент;
    ElseIf _And(not isEmpty(ПредСуб1),Pos("DB.REF",TypeStr(ПредСуб1))=1,Uppercase(ПредСуб1.DBName())="КНТКОНТРАГЕНТЫ") Then
      Exit ПредСуб1;
    ElseIf _And(not isEmpty(ПредСуб2),Pos("DB.REF",TypeStr(ПредСуб2))=1,Uppercase(ПредСуб2.DBName())="КНТКОНТРАГЕНТЫ") Then
      Exit ПредСуб1;
    EndIf;
  EndIf;
  ВладИмя:="";
  If Struct.Ref(СпрИмя).Parents.Count()>1 Then
    ВладИмя:=SelectDataType(Struct.Ref(СпрИмя).Parents.AsDataType,"Выберите тип родителя:");
    if isEmpty(ВладИмя) Then
      Exit 0;
    EndIf;
    TearStr(ВладИмя,".");
  Else
    ВладИмя:=Struct.Ref(СпрИмя).Parents.AsDataType;
    TearStr(ВладИмя,".");
  EndIf;
  
  If not isEmpty(Док) Then
    If ВладИмя="кнтКонтрагенты" Then
      If глЕстьРеквизитДокумента("Контрагент",Док.DBName()) Then
        Exit Док.Контрагент;
      EndIf;
    ElseIf ВладИмя="общСклады" Then
      If глЕстьРеквизитДокумента("Склад",Док.DBName()) Then
        Exit Док.Склад;
      EndIf;
    ElseIf ВладИмя="тмцНоменклатура" Then
      If глЕстьРеквизитДокумента("Номенклатура",Док.DBName()) Then
        Exit Док.Номенклатура;
      EndIf;
    EndIf;
  EndIf;  

  ВладВлад:=GetNothing();
  If Struct.Ref(ВладИмя).Parents.Count()>0 Then
    ВладВлад:=глВыбратьВладельцаСубконто(Док,ВладИмя,?(IsEmpty(Деф),0,Деф.Parent()),,ПредСуб1,ПредСуб2);
    If isEmpty(ВладВлад) Then
      Exit 0;
    EndIf;
  EndIf;
  
  Зн:=SelectObject("Ref."+ВладИмя,ВладВлад,,"Module","SelectForm",Деф,,"Выберите владельца субконто:",2);
  If not isEmpty(Зн) Then
    Exit Зн;
  EndIf;
  
  Exit 0;
EndFunction


Function глПроверитьПроблемностьУказанныхСчетов(aEl,СчетД,СчетК,КолВо,Выписка=0,КромеСчетов="",aTabБухОп=0) Export

  Function НеПодходитПоТипу(aEl,СтрТипы)
    While СтрТипы<>"" Do
      СтрКО:=TearStr(СтрТипы,"#");
      СтрВид:=TearStr(СтрКО,"!");
      If СтрВид<>aEl.DBName() Then
        Continue;
      EndIf;
      If СтрКО="" Then
        Exit 0;
      EndIf;
      If aEl.КодОперации=Enum.Get("ко"+СтрВид+"."+СтрКО) Then
        Exit 0;
      EndIf;
    EndDo;
    Exit 1;
  EndFunction;

  СпСч:=List.Create();
  СпСч.SetByName("60.1","КорректировкаДолга#Реализация#РеализацияПрочее#ПоступлениеПрочее#ВозвратОтПокупателя#РегистрацияОС#РКО#ПКО@корректировки долга, документы реализации, возврата"+?(not Выписка=0,""," или другой тип операции в этом документе"));
  СпСч.SetByName("60.5","КорректировкаДолга#Реализация#РеализацияПрочее#ПоступлениеПрочее#ВозвратОтПокупателя#РегистрацияОС@корректировки долга, документы реализации, возврата");
  СпСч.SetByName("62.1","КорректировкаДолга#ПоступлениеТМЦ#ПоступлениеПрочее#ВозвратПоставщику#РегистрацияОС#РКО#ПКО@корректировки долга, документы поступления, возврата"+?(not Выписка=0,""," или другой тип операции в этом документе"));
  СпСч.SetByName("62.2","КорректировкаДолга#ПоступлениеТМЦ#ПоступлениеПрочее#ВозвратПоставщику#РегистрацияОС#РКО#ПКО@корректировки долга, документы поступления, возврата"+?(not Выписка=0,""," или другой тип операции в этом документе"));
  СпСч.SetByName("62.5","КорректировкаДолга#ПоступлениеТМЦ#ПоступлениеПрочее#ВозвратПоставщику#РегистрацияОС@корректировки долга, документы поступления, возврата");
  СпСч.SetByName("71.1","ПКО!ВозвратОтПодотчетника#РКО!ВыдачаПодотчет#ПодотчетнаяОперация@подотчетные операции, РКО, ПКО");
  СпСч.SetByName("62.2","КорректировкаДолга#РеализацияПрочее#ВыпискаБанкаПриход#ВыпискаБанкаРасход#ПКО#РКО@реализации прочее, ПКО, РКО или выписки банка");
  СпСч.SetByName("62.4","КорректировкаДолга#ВыпискаБанкаПриход#ВыпискаБанкаРасход@корректировки долга или выписки банка, перепродажи");
  СпСч.SetByName("57.1","ПКО!Инкассация#РКО!Инкассация@РКО, ПКО или выписки инкассации");
  СпСч.SetByName("50.1","ПКО#РКО@РКО или ПКО");
  СпСч.SetByName("51","ВыпискаБанкаПриход#ВыпискаБанкаРасход#ПеремещениеДенегБанк@выписки банка");
  
  
  КромеСчетов0:=КромеСчетов;
  While КромеСчетов<>"" Do
    Стр:=TearStr(КромеСчетов,",");
    For а:=1 to СпСч.Size() Do
      Стр2:=СпСч.GetName(а);
      If Стр2=Стр Then
        СпСч.Remove(а);
        Break;
      EndIf;
    EndDo;
  EndDo;
  
  СчДКод:=СчетД.Code;
  СчККод:=СчетК.Code;
  СчД0Код:=СчДКод;
  СчД0Код:=TearStr(СчД0Код,".");
  СчК0Код:=СчККод;
  СчК0Код:=TearStr(СчК0Код,".");
  //76.x <-> 60.x -- разрешить
  If ((СчД0Код="76")And(СчК0Код="60"))Or((СчД0Код="60")And(СчК0Код="76")) Then
    Exit 1;
  EndIf;
  
  
  СпСкКроме:=List.Create();
  СпСкКроме.SetByName("62.1","62.4");
  СпСкКроме.SetByName("62.4","62.1");
  СпСкКроме.SetByName("62.2","62.4");
  СпСкКроме.SetByName("62.4","62.2");
  СпСкКроме.SetByName("62.2","62.1");
  СпСкКроме.SetByName("62.1","62.2");
  СпСкКроме.SetByName("60.1","60.5");
  СпСкКроме.SetByName("60.5","60.1");
  СпСкКроме.SetByName("60.1","79.2");
  СпСкКроме.SetByName("79.2","60.1");
  СпСкКроме.SetByName("58.2","62.1");
  СпСкКроме.SetByName("58.3","62.1");
  СпСкКроме.SetByName("58.4","62.1");
  СпСкКроме.SetByName("58.5","62.1");
  СпСкКроме.SetByName("58.1.1","62.1");
  СпСкКроме.SetByName("58.1.2","62.1");
  If (СчДКод<>"00")And(СчетД.Selected()<>0)And(СчККод<>"00")And(СчетК.Selected()<>0) Then
    Стр:=Str(СпСч.GetByName(СчДКод));
    If Стр<>"" Then
      СтрТипы:=TearStr(Стр,"@");
      If НеПодходитПоТипу(aEl,СтрТипы) Then
        If (Pos(Str(СпСкКроме.GetByName(СчККод)),""+СчетД.Code)<>1)Or(Str(СпСкКроме.GetByName(СчККод))="") Then
          Box("Счет "+СчетД+" нельзя использовать в этом документе, используйте вместо этого "+Стр+"!",Q_STOP);
          If not глПользователь.общиеАдминистратор Then
            Exit 0;
          EndIf;
        EndIf;
      EndIf;  
    EndIf;
    
    Стр:=Str(СпСч.GetByName(СчККод));
    If Стр<>"" Then
      СтрТипы:=TearStr(Стр,"@");
      If НеПодходитПоТипу(aEl,СтрТипы) Then
        If (Pos(Str(СпСкКроме.GetByName(СчДКод)),""+СчККод)<>1)Or(Str(СпСкКроме.GetByName(СчДКод))="") Then
          Box("Счет "+СчетК+" нельзя использовать в этом документе, используйте вместо этого "+Стр+"!",Q_STOP);
          If not глПользователь.общиеАдминистратор Then
            Exit 0;
          EndIf;
        EndIf;
      EndIf;  
    EndIf;
  EndIf;
  
  //41.х, 10.x
  флД41:=?((СчД0Код="41")or((СчД0Код="10")And(СчДКод<>"10.3")),1,0);
  If _Or(not флД41,СчетД.Количественный=0,Pos("ТМЦНОМЕНКЛАТУРА",UpperCase(СчетД.ВидСубконто1.ТипЗначенияЛокальный))=0) Then
    флД41:=0;
  EndIf;
  Фл43:=?(СчД0Код="43",1,0);
  флК41:=?((СчК0Код="41")or((СчК0Код="10")And(СчККод<>"10.3")),1,0);
  If _Or(not флК41,СчетК.Количественный=0,Pos("ТМЦНОМЕНКЛАТУРА",UpperCase(СчетК.ВидСубконто1.ТипЗначенияЛокальный))=0) Then
    флК41:=0;
  EndIf;
  Фл43:=?(СчК0Код="43",1,Фл43);
  флОш:=0;
  //Проверка счетов 41.1, 41.3, 10.x
  //1. Разрешается движение м/у 41.х, если ТМЦ и склад одинаковы
  //2. Разрешается движение с 41.х, если количество равно 0
  If флД41+флК41=1 Then
    If (КолВо<>0)And(Фл43=0) Then
      флОш:=1;
    EndIf;
  ElseIf флД41+флК41=2 Then
    If aTabБухОп=0 Then
      флОш:=1;
    ElseIf _Or(aTabБухОп.СубконтоД1<>aTabБухОп.СубконтоК1,aTabБухОп.СубконтоД2<>aTabБухОп.СубконтоК2,aTabБухОп.СубконтоД3<>aTabБухОп.СубконтоК3) Then
      флОш:=1;
    EndIf;
  EndIf;
  
  If флОш Then
    Стр:="Счета групп 41.х/10.x нельзя использовать в этом документе, вместо этого следует использовать складские документы!";
    If not глРаботаетРобот Then
      Box(Стр,Q_STOP);
      If not глПользователь.общиеАдминистратор Then
        Exit 0;
      EndIf;
    Else
      Message(Стр,"!");
    EndIf;
  EndIf;
  Exit 1;
EndFunction


Function глПроверитьПроблемностьНестандартнойПроводки(aEl,ТипПроводки,КолВо,Выписка=0,КромеСчетов="",aTabБухОп=0) Export
  aTab:=ТипПроводки.LineParts("ПроводкиЗаголовка");
  aTab.Select();
  While aTab.Next() Do
    If not глПроверитьПроблемностьУказанныхСчетов(aEl,aTab.СчДебет,aTab.СчКредит,КолВо,Выписка,КромеСчетов,aTabБухОп) Then
      Exit 0;
    EndIf;
  EndDo;
  
  aTab:=ТипПроводки.LineParts("ПроводкиСтрок");
  aTab.Select();
  While aTab.Next() Do
    If not глПроверитьПроблемностьУказанныхСчетов(aEl,aTab.СчДебет,aTab.СчКредит,КолВо,Выписка,КромеСчетов,aTabБухОп) Then
      Exit 0;
    EndIf;
  EndDo;
  Exit 1;
EndFunction


Function глВыбратьЗначениеСубконтоВСтрочнойЧасти(ФлВозвратить=0) Export
  aEl:=Form.Object;
  MainTab:=Form.MainTab.Value;
  MainTab.CurLine:=MainTab.SelectedLine;
  Счет:=0;
  ПредСуб1:=0;
  ПредСуб2:=0;
  If Form.MainTab.SelectedColumnName=uppercase("Субконто1") Then
    Субконто:=MainTab.Субконто1;
    ВС:=MainTab.Счет.ВидСубконто1;
    Счет:=MainTab.Счет;
  ElseIf Form.MainTab.SelectedColumnName=uppercase("Субконто2") Then
    Субконто:=MainTab.Субконто2;
    ВС:=MainTab.Счет.ВидСубконто2;
    Счет:=MainTab.Счет;
    ПредСуб1:=MainTab.Субконто1;
  ElseIf Form.MainTab.SelectedColumnName=uppercase("Субконто3") Then
    Субконто:=MainTab.Субконто3;
    ВС:=MainTab.Счет.ВидСубконто3;
    Счет:=MainTab.Счет;
    ПредСуб1:=MainTab.Субконто2;
    ПредСуб2:=MainTab.Субконто1;
  ElseIf Form.MainTab.SelectedColumnName=uppercase("СубконтоД1") Then
    Субконто:=MainTab.СубконтоД1;
    ВС:=MainTab.СчетД.ВидСубконто1;
    Счет:=MainTab.СчетД;
  ElseIf Form.MainTab.SelectedColumnName=uppercase("СубконтоД2") Then
    Субконто:=MainTab.СубконтоД2;
    ВС:=MainTab.СчетД.ВидСубконто2;
    Счет:=MainTab.СчетД;
    ПредСуб1:=MainTab.СубконтоД1;
  ElseIf Form.MainTab.SelectedColumnName=uppercase("СубконтоД3") Then
    Субконто:=MainTab.СубконтоД3;
    ВС:=MainTab.СчетД.ВидСубконто3;
    Счет:=MainTab.СчетД;
    ПредСуб1:=MainTab.СубконтоД2;
    ПредСуб2:=MainTab.СубконтоД1;
  ElseIf Form.MainTab.SelectedColumnName=uppercase("СубконтоК1") Then
    Субконто:=MainTab.СубконтоК1;
    ВС:=MainTab.СчетК.ВидСубконто1;
    Счет:=MainTab.СчетК;
  ElseIf Form.MainTab.SelectedColumnName=uppercase("СубконтоК2") Then
    Субконто:=MainTab.СубконтоК2;
    ВС:=MainTab.СчетК.ВидСубконто2;
    Счет:=MainTab.СчетК;
    ПредСуб1:=MainTab.СубконтоК1;
  ElseIf Form.MainTab.SelectedColumnName=uppercase("СубконтоК3") Then
    Субконто:=MainTab.СубконтоК3;
    ВС:=MainTab.СчетК.ВидСубконто3;
    Счет:=MainTab.СчетК;
    ПредСуб1:=MainTab.СубконтоК2;
    ПредСуб2:=MainTab.СубконтоК1;
  EndIf;
  If Счет.Selected()=0 Then
    Exit;
  EndIf;
  If ВС.Selected()=0 Then
    Exit;
  EndIf;
  
  If Trim(ВС.ТипЗначенияЛокальный)="" Then
    Тип:="Ref.бухЗначенияСубконто";
  Else
    Тип:=Replace(Uppercase(ВС.ТипЗначенияЛокальный),"СПРАВОЧНИК","REF");
  EndIf;
  
  Вл:=0;
  ВидИмя:=Тип;
  TearStr(ВидИмя,".");
  If Struct.Ref(ВидИмя).Parents.Count()>0 Then
    Вл:=глВыбратьВладельцаСубконто(aEl,Uppercase(ВидИмя),Субконто,ВС,ПредСуб1,ПредСуб2);
    If isEmpty(Вл) Then
      Exit;
    EndIf;
  EndIf;
  
  Эл:=SelectObject(Тип,Вл,,"Module","SelectForm",Субконто,,"Выберите необходимое значение субконто",2);
  If isEmpty(Эл) Then
    Exit;
  EndIf;
  
  If ФлВозвратить Then
    Exit Эл;
  Else
    Form.MainTab.RereadValue(Эл);
  EndIf;
EndFunction


Function глПроверитьКорректностьЗаполненияСубконтоСтрочнаяЧасть(Счет,Суффикс="") Export
  Function СубконтоDbType(ВидСубконто)
    If Trim(ВидСубконто.ТипЗначенияЛокальный)="" Then
      Exit Uppercase("бухЗначенияСубконто");
    EndIf;  
    Exit Replace(Replace(Uppercase(ВидСубконто.ТипЗначенияЛокальный),"СПРАВОЧНИК.",""),"REF.","");
  EndFunction  
  
  Function _ПроверитьКорректность(ВС,Суб)  
    If СубконтоDbType(ВС)<>Uppercase(Суб.DbName()) Then
      Exit 0;
    ElseIf _And(not isEmpty(Суб),Struct.Ref(Суб.DbName()).Parents.Count()>0) Then  
      If Uppercase(Struct.Ref(Суб.DbName()).Parents(1).Name)=uppercase("бухВидыСубконто") Then
        If Суб.Parent()<>ВС Then
          Exit 0;
        EndIf;  
      EndIf;
    EndIf;
    Exit 1;
  EndFunction;  
  
  aEl:=Form.Object;
  MainTab:=Form.MainTab.Value;
  MainTab.CurLine:=MainTab.SelectedLine;
  
  Суб:=MainTab.Get(MainTab.CurLine,"Субконто"+Суффикс+"1");
  If not isEmpty(Суб) Then
    If not _ПроверитьКорректность(Счет.ВидСубконто1,Суб) Then
      MainTab.Set(MainTab.CurLine,"Субконто"+Суффикс+"1",GetNothing());
    EndIf;  
  EndIf;  
  Суб:=MainTab.Get(MainTab.CurLine,"Субконто"+Суффикс+"2");
  If not isEmpty(Суб) Then
    If not _ПроверитьКорректность(Счет.ВидСубконто2,Суб) Then
      MainTab.Set(MainTab.CurLine,"Субконто"+Суффикс+"2",GetNothing());
    EndIf;
  EndIf;  
  Суб:=MainTab.Get(MainTab.CurLine,"Субконто"+Суффикс+"3");
  If not isEmpty(Суб) Then
    If not _ПроверитьКорректность(Счет.ВидСубконто3,Суб) Then
      MainTab.Set(MainTab.CurLine,"Субконто"+Суффикс+"3",GetNothing());
    EndIf;
  EndIf;  
EndFunction

